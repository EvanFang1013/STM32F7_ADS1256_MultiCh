
STM32F7_ADS1256_MultiCh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800c170  0800c170  0001c170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4e0  0800c4e0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4e0  0800c4e0  0001c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4e8  0800c4e8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4e8  0800c4e8  0001c4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4ec  0800c4ec  0001c4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aca4  20000200  0800c6e0  00020200  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000aea4  0800c6e0  0002aea4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ba  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003684  00000000  00000000  000386d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c0  00000000  00000000  0003bd60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  0003cf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000287e6  00000000  00000000  0003df68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010436  00000000  00000000  0006674e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103826  00000000  00000000  00076b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a3aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000537c  00000000  00000000  0017a428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c154 	.word	0x0800c154

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	0800c154 	.word	0x0800c154

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b08b      	sub	sp, #44	; 0x2c
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1d1a      	adds	r2, r3, #4
 800060a:	60fa      	str	r2, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3b01      	subs	r3, #1
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8000618:	e051      	b.n	80006be <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	1d1a      	adds	r2, r3, #4
 800061e:	60fa      	str	r2, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1d1a      	adds	r2, r3, #4
 8000628:	60fa      	str	r2, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800062e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000632:	edd7 7a05 	vldr	s15, [r7, #20]
 8000636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d504      	bpl.n	800064a <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1d1a      	adds	r2, r3, #4
 800064e:	60fa      	str	r2, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8000654:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000658:	edd7 7a04 	vldr	s15, [r7, #16]
 800065c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d504      	bpl.n	8000670 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3302      	adds	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	60fa      	str	r2, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800067a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800067e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d504      	bpl.n	8000696 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	3303      	adds	r3, #3
 8000694:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8000696:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800069a:	edd7 7a04 	vldr	s15, [r7, #16]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	d504      	bpl.n	80006b2 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3304      	adds	r3, #4
 80006b0:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	3304      	adds	r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1aa      	bne.n	800061a <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80006ce:	e016      	b.n	80006fe <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	60fa      	str	r2, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80006da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006de:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d505      	bpl.n	80006f8 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1e5      	bne.n	80006d0 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000708:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	69fa      	ldr	r2, [r7, #28]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b25a      	sxtb	r2, r3
 8000732:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000736:	4313      	orrs	r3, r2
 8000738:	b25b      	sxtb	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	f000 f832 	bl	80007a8 <writeByteToReg>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	733b      	strb	r3, [r7, #12]
	CS_0();
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <writeCMD+0x38>)
 8000760:	f002 fbbc 	bl	8002edc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 8000764:	f107 010c 	add.w	r1, r7, #12
 8000768:	2332      	movs	r3, #50	; 0x32
 800076a:	2201      	movs	r2, #1
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <writeCMD+0x3c>)
 800076e:	f003 fdb0 	bl	80042d2 <HAL_SPI_Transmit>
	CS_1();
 8000772:	2201      	movs	r2, #1
 8000774:	2110      	movs	r1, #16
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <writeCMD+0x38>)
 8000778:	f002 fbb0 	bl	8002edc <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020000 	.word	0x40020000
 8000788:	2000ad6c 	.word	0x2000ad6c

0800078c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_DRATE,drate);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4619      	mov	r1, r3
 800079a:	2003      	movs	r0, #3
 800079c:	f000 f822 	bl	80007e4 <writeToReg>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit_DMA(&hspi1, Txbuffer ,3);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2203      	movs	r2, #3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <writeByteToReg+0x38>)
 80007d4:	f004 f8fe 	bl	80049d4 <HAL_SPI_Transmit_DMA>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000ad6c 	.word	0x2000ad6c

080007e4 <writeToReg>:


void writeToReg(uint8_t registerID, uint8_t value)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	CS_0();
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <writeToReg+0x54>)
 80007fa:	f002 fb6f 	bl	8002edc <HAL_GPIO_WritePin>
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000804:	b2db      	uxtb	r3, r3
 8000806:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,50);
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	2332      	movs	r3, #50	; 0x32
 8000816:	2203      	movs	r2, #3
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <writeToReg+0x58>)
 800081a:	f003 fd5a 	bl	80042d2 <HAL_SPI_Transmit>
	delay_us(10);
 800081e:	200a      	movs	r0, #10
 8000820:	f000 f9aa 	bl	8000b78 <delay_us>
	CS_1();
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <writeToReg+0x54>)
 800082a:	f002 fb57 	bl	8002edc <HAL_GPIO_WritePin>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40020000 	.word	0x40020000
 800083c:	2000ad6c 	.word	0x2000ad6c

08000840 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_ADCON,pga);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4619      	mov	r1, r3
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff ffc8 	bl	80007e4 <writeToReg>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e009      	b.n	800087c <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 8000868:	2108      	movs	r1, #8
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <waitDRDY+0x34>)
 800086c:	f002 fb1e 	bl	8002eac <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d007      	beq.n	8000886 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3301      	adds	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <waitDRDY+0x38>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d9f1      	bls.n	8000868 <waitDRDY+0xc>
				break;
			}
		}
}
 8000884:	e000      	b.n	8000888 <waitDRDY+0x2c>
				break;
 8000886:	bf00      	nop
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	026259ff 	.word	0x026259ff

08000898 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	waitDRDY();
 800089e:	f7ff ffdd 	bl	800085c <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f820 	bl	80008e8 <readByteFromReg>
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 80008ca:	1dba      	adds	r2, r7, #6
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	2332      	movs	r3, #50	; 0x32
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <receive8bit+0x28>)
 80008d6:	f003 fe6a 	bl	80045ae <HAL_SPI_TransmitReceive>
	return read;
 80008da:	79bb      	ldrb	r3, [r7, #6]

}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000ad6c 	.word	0x2000ad6c

080008e8 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	737b      	strb	r3, [r7, #13]
	CS_0();
 8000900:	2200      	movs	r2, #0
 8000902:	2110      	movs	r1, #16
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <readByteFromReg+0x54>)
 8000906:	f002 fae9 	bl	8002edc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800090a:	f107 010c 	add.w	r1, r7, #12
 800090e:	2332      	movs	r3, #50	; 0x32
 8000910:	2202      	movs	r2, #2
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <readByteFromReg+0x58>)
 8000914:	f003 fcdd 	bl	80042d2 <HAL_SPI_Transmit>
	uint8_t read = receive8bit();
 8000918:	f7ff ffd0 	bl	80008bc <receive8bit>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	delay_us(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f000 f929 	bl	8000b78 <delay_us>
	CS_1();
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <readByteFromReg+0x54>)
 800092c:	f002 fad6 	bl	8002edc <HAL_GPIO_WritePin>

	return read;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020000 	.word	0x40020000
 8000940:	2000ad6c 	.word	0x2000ad6c

08000944 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800094e:	2350      	movs	r3, #80	; 0x50
 8000950:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b25b      	sxtb	r3, r3
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	717b      	strb	r3, [r7, #5]

	CS_0();
 8000962:	2200      	movs	r2, #0
 8000964:	2110      	movs	r1, #16
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <setBuffer+0x48>)
 8000968:	f002 fab8 	bl	8002edc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	2332      	movs	r3, #50	; 0x32
 8000970:	2202      	movs	r2, #2
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <setBuffer+0x4c>)
 8000974:	f003 fcad 	bl	80042d2 <HAL_SPI_Transmit>
	CS_1();
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <setBuffer+0x48>)
 800097e:	f002 faad 	bl	8002edc <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000
 8000990:	2000ad6c 	.word	0x2000ad6c

08000994 <ADS1256_GetChannalValue>:

float ADS1256_GetChannalValue(int Channel)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]


	/**
	 * set channel
	 */
	CS_0();
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	483a      	ldr	r0, [pc, #232]	; (8000a8c <ADS1256_GetChannalValue+0xf8>)
 80009a2:	f002 fa9b 	bl	8002edc <HAL_GPIO_WritePin>

    setDIFFChannel(posChannels[Channel], negChannels[Channel]);
 80009a6:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <ADS1256_GetChannalValue+0xfc>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	7818      	ldrb	r0, [r3, #0]
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <ADS1256_GetChannalValue+0x100>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f7ff feb0 	bl	800071c <setDIFFChannel>
//    delay_us(5);
    TM_DelayMicros(5);
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f919 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Transmit_DMA(&hspi1, SYNCcmduffer ,1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	4934      	ldr	r1, [pc, #208]	; (8000a98 <ADS1256_GetChannalValue+0x104>)
 80009c6:	4835      	ldr	r0, [pc, #212]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009c8:	f004 f804 	bl	80049d4 <HAL_SPI_Transmit_DMA>
//    delay_us(5);
    TM_DelayMicros(5);
 80009cc:	2005      	movs	r0, #5
 80009ce:	f000 f911 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Transmit_DMA(&hspi1, WAKEUPcmduffer ,1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	4932      	ldr	r1, [pc, #200]	; (8000aa0 <ADS1256_GetChannalValue+0x10c>)
 80009d6:	4831      	ldr	r0, [pc, #196]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009d8:	f003 fffc 	bl	80049d4 <HAL_SPI_Transmit_DMA>
//    delay_us(50);
    TM_DelayMicros(50);
 80009dc:	2032      	movs	r0, #50	; 0x32
 80009de:	f000 f909 	bl	8000bf4 <TM_DelayMicros>

    /**
     * receive data
     */
    HAL_SPI_Transmit_DMA(&hspi1, SDATACcmduffer ,1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	492f      	ldr	r1, [pc, #188]	; (8000aa4 <ADS1256_GetChannalValue+0x110>)
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009e8:	f003 fff4 	bl	80049d4 <HAL_SPI_Transmit_DMA>
//    delay_us(7);
    TM_DelayMicros(7);
 80009ec:	2007      	movs	r0, #7
 80009ee:	f000 f901 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Receive_DMA(&hspi1,Databuffer,3);
 80009f2:	2203      	movs	r2, #3
 80009f4:	492c      	ldr	r1, [pc, #176]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009f8:	f004 f8e0 	bl	8004bbc <HAL_SPI_Receive_DMA>
	read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a08:	6013      	str	r3, [r2, #0]
	read |= ((int32_t)Databuffer[1] << 8);
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	021a      	lsls	r2, r3, #8
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a18:	6013      	str	r3, [r2, #0]
	read |= Databuffer[2];
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a28:	6013      	str	r3, [r2, #0]
	if (read & 0x800000){
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <ADS1256_GetChannalValue+0xb0>
		read |= 0xFF000000;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a42:	601a      	str	r2, [r3, #0]

	}

	data = read;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a52:	edc3 7a00 	vstr	s15, [r3]
	data = data / 1670000;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a58:	ed93 7a00 	vldr	s14, [r3]
 8000a5c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000ab4 <ADS1256_GetChannalValue+0x120>
 8000a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a66:	edc3 7a00 	vstr	s15, [r3]
//	delay_us(100);
	TM_DelayMicros(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 f8c2 	bl	8000bf4 <TM_DelayMicros>
	CS_1();
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <ADS1256_GetChannalValue+0xf8>)
 8000a76:	f002 fa31 	bl	8002edc <HAL_GPIO_WritePin>

	return data;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
}
 8000a82:	eeb0 0a67 	vmov.f32	s0, s15
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000004 	.word	0x20000004
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	2000ad6c 	.word	0x2000ad6c
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000220 	.word	0x20000220
 8000aac:	20000224 	.word	0x20000224
 8000ab0:	200081ec 	.word	0x200081ec
 8000ab4:	49cbdb80 	.word	0x49cbdb80

08000ab8 <ADS1256_init>:


int ADS1256_init()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abe:	b672      	cpsid	i
	   __disable_irq();
      int id;
	  //Reset ADS1256
	  waitDRDY();
 8000ac0:	f7ff fecc 	bl	800085c <waitDRDY>
	  writeCMD(CMD_RESET);
 8000ac4:	20fe      	movs	r0, #254	; 0xfe
 8000ac6:	f7ff fe41 	bl	800074c <writeCMD>
//	  delay_us(100);
	  TM_DelayMicros(100);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f000 f892 	bl	8000bf4 <TM_DelayMicros>

	  //Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	  waitDRDY();
 8000ad0:	f7ff fec4 	bl	800085c <waitDRDY>
	  setBuffer();
 8000ad4:	f7ff ff36 	bl	8000944 <setBuffer>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f000 f88b 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000ade:	f7ff febd 	bl	800085c <waitDRDY>
	  setPGA(PGA_GAIN1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff feac 	bl	8000840 <setPGA>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000ae8:	200a      	movs	r0, #10
 8000aea:	f000 f883 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000aee:	f7ff feb5 	bl	800085c <waitDRDY>
	  setDataRate(DRATE_15000);
 8000af2:	20e0      	movs	r0, #224	; 0xe0
 8000af4:	f7ff fe4a 	bl	800078c <setDataRate>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 f87b 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000afe:	f7ff fead 	bl	800085c <waitDRDY>
	  writeCMD(CMD_SELFCAL);
 8000b02:	20f0      	movs	r0, #240	; 0xf0
 8000b04:	f7ff fe22 	bl	800074c <writeCMD>
	  waitDRDY();
 8000b08:	f7ff fea8 	bl	800085c <waitDRDY>

	  do {
		  id = readChipID();
 8000b0c:	f7ff fec4 	bl	8000898 <readChipID>
 8000b10:	4603      	mov	r3, r0
 8000b12:	607b      	str	r3, [r7, #4]
	  } while (id!=3);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d1f8      	bne.n	8000b0c <ADS1256_init+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b1a:	b662      	cpsie	i

	  __enable_irq();


}
 8000b1c:	bf00      	nop
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <delay_init+0x44>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <delay_init+0x44>)
 8000b38:	f023 0304 	bic.w	r3, r3, #4
 8000b3c:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <delay_init+0x48>)
 8000b46:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <delay_init+0x48>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	0152      	lsls	r2, r2, #5
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <delay_init+0x4c>)
 8000b5e:	801a      	strh	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e010 	.word	0xe000e010
 8000b70:	20000228 	.word	0x20000228
 8000b74:	2000022a 	.word	0x2000022a

08000b78 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <delay_us+0x5c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <delay_us+0x60>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	fb03 f301 	mul.w	r3, r3, r1
 8000b8e:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <delay_us+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <delay_us+0x60>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <delay_us+0x60>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <delay_us+0x60>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <delay_us+0x44>
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f2      	beq.n	8000ba2 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <delay_us+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <delay_us+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	20000228 	.word	0x20000228
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 216000000 / 4000000;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <TM_Delay_Init+0x14>)
 8000be2:	2236      	movs	r2, #54	; 0x36
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200081f0 	.word	0x200081f0

08000bf4 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <TM_DelayMicros+0x30>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	3b0a      	subs	r3, #10
 8000c08:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 8000c0a:	bf00      	nop
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1fa      	bne.n	8000c0c <TM_DelayMicros+0x18>
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200081f0 	.word	0x200081f0

08000c28 <ADC1_Conv>:
#include "adc_apps.h"
/* Private typedef -----------------------------------------------------------*/


void ADC1_Conv(ADC_HandleTypeDef *hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	//ADC start, LED status = 0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4813      	ldr	r0, [pc, #76]	; (8000c84 <ADC1_Conv+0x5c>)
 8000c38:	f002 f950 	bl	8002edc <HAL_GPIO_WritePin>
	unsigned char Count_in, Count_Sum;
	unsigned char Count_Sum_value = 200;//adc value Sum count
 8000c3c:	23c8      	movs	r3, #200	; 0xc8
 8000c3e:	73fb      	strb	r3, [r7, #15]
//    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
//    {
//    	for(Count_in=0; Count_in <ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
//    	{
    		/*##-1- Start the conversion process #######################################*/
    		HAL_ADC_Start(hadc);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 feb9 	bl	80019b8 <HAL_ADC_Start>
    			the peripheral; if it?�s busy you need to wait for the end of current
    			conversion before starting a new one.
    			For simplicity reasons, this example is just waiting till the end of the
    	 	 	conversion, but application may perform other tasks while conversion
    			operation is ongoing. */
			HAL_ADC_PollForConversion(hadc, 50);
 8000c46:	2132      	movs	r1, #50	; 0x32
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 ff83 	bl	8001b54 <HAL_ADC_PollForConversion>
			if(HAL_IS_BIT_SET(HAL_ADC_GetState(hadc), HAL_ADC_STATE_REG_EOC))
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f001 f962 	bl	8001f18 <HAL_ADC_GetState>
 8000c54:	4603      	mov	r3, r0
 8000c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c5e:	d106      	bne.n	8000c6e <ADC1_Conv+0x46>
			{
				ADC_1.Vol[0] = HAL_ADC_GetValue(hadc);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f001 f802 	bl	8001c6a <HAL_ADC_GetValue>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <ADC1_Conv+0x60>)
 8000c6c:	815a      	strh	r2, [r3, #10]
//        ADC_1.BufferValue_Avg[Count_in] = ADC_1.BufferValue_Sum[Count_in]/Count_Sum_value ;
//        ADC_1.Vol[Count_in]=ADC_1.BufferValue_Avg[Count_in];
//                ADC_1.BufferValue_Sum[Count_in]=0;//clear Sum ValueV                ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Value
//    }
    //ADC end cycle, LED status =1
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <ADC1_Conv+0x5c>)
 8000c76:	f002 f931 	bl	8002edc <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	20008200 	.word	0x20008200

08000c8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <vApplicationGetIdleTaskMemory+0x30>)
 8000ca2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2280      	movs	r2, #128	; 0x80
 8000ca8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2000022c 	.word	0x2000022c
 8000cbc:	20000280 	.word	0x20000280

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b5b0      	push	{r4, r5, r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000cc6:	f000 fdd6 	bl	8001876 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f873 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f9ef 	bl	80010b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd2:	f000 f9bf 	bl	8001054 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cd6:	f000 f94f 	bl	8000f78 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000cda:	f000 f98b 	bl	8000ff4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000cde:	f000 f8f9 	bl	8000ed4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   //TODO: Initialize delay systick
  delay_init(216);
 8000ce2:	20d8      	movs	r0, #216	; 0xd8
 8000ce4:	f7ff ff20 	bl	8000b28 <delay_init>
  TM_Delay_Init();
 8000ce8:	f7ff ff78 	bl	8000bdc <TM_Delay_Init>

  //TODO: ADS1256 init
  numChannel = 2;
 8000cec:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <main+0xc8>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	601a      	str	r2, [r3, #0]
  id = ADS1256_init();
 8000cf2:	f7ff fee1 	bl	8000ab8 <ADS1256_init>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <main+0xcc>)
 8000cfa:	601a      	str	r2, [r3, #0]
  v.cnt = 0;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <main+0xd0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
  i.cnt = 0;
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <main+0xd4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	2101      	movs	r1, #1
 8000d16:	4618      	mov	r0, r3
 8000d18:	f005 fc56 	bl	80065c8 <osSemaphoreCreate>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <main+0xd8>)
 8000d20:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <main+0xdc>)
 8000d24:	1d3c      	adds	r4, r7, #4
 8000d26:	461d      	mov	r5, r3
 8000d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fbe5 	bl	8006508 <osThreadCreate>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <main+0xe0>)
 8000d42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d44:	f005 fbd9 	bl	80064fa <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ADC1_Conv(&hadc1);
 8000d48:	4816      	ldr	r0, [pc, #88]	; (8000da4 <main+0xe4>)
 8000d4a:	f7ff ff6d 	bl	8000c28 <ADC1_Conv>
	  temp = (float)(ADC_1.Vol[0])/4096*3.3;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <main+0xe8>)
 8000d50:	895b      	ldrh	r3, [r3, #10]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d5a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000dac <main+0xec>
 8000d5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d66:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000d80 <main+0xc0>
 8000d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <main+0xf0>)
 8000d74:	edc3 7a00 	vstr	s15, [r3]
	  ADC1_Conv(&hadc1);
 8000d78:	e7e6      	b.n	8000d48 <main+0x88>
 8000d7a:	bf00      	nop
 8000d7c:	f3af 8000 	nop.w
 8000d80:	66666666 	.word	0x66666666
 8000d84:	400a6666 	.word	0x400a6666
 8000d88:	200082a8 	.word	0x200082a8
 8000d8c:	20000480 	.word	0x20000480
 8000d90:	200096f8 	.word	0x200096f8
 8000d94:	20008360 	.word	0x20008360
 8000d98:	2000ace0 	.word	0x2000ace0
 8000d9c:	0800c17c 	.word	0x0800c17c
 8000da0:	200082a0 	.word	0x200082a0
 8000da4:	20008318 	.word	0x20008318
 8000da8:	20008200 	.word	0x20008200
 8000dac:	45800000 	.word	0x45800000
 8000db0:	200082ac 	.word	0x200082ac

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b8      	sub	sp, #224	; 0xe0
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f007 fd55 	bl	8008872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	2290      	movs	r2, #144	; 0x90
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f007 fd46 	bl	8008872 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <SystemClock_Config+0x118>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a38      	ldr	r2, [pc, #224]	; (8000ecc <SystemClock_Config+0x118>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <SystemClock_Config+0x118>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfe:	4b34      	ldr	r3, [pc, #208]	; (8000ed0 <SystemClock_Config+0x11c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a33      	ldr	r2, [pc, #204]	; (8000ed0 <SystemClock_Config+0x11c>)
 8000e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <SystemClock_Config+0x11c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2310      	movs	r3, #16
 8000e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e34:	2308      	movs	r3, #8
 8000e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e3a:	23d8      	movs	r3, #216	; 0xd8
 8000e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 f8c5 	bl	8002fe0 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e5c:	f000 fab4 	bl	80013c8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e60:	f002 f86e 	bl	8002f40 <HAL_PWREx_EnableOverDrive>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e6a:	f000 faad 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6e:	230f      	movs	r3, #15
 8000e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e94:	2107      	movs	r1, #7
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fb50 	bl	800353c <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ea2:	f000 fa91 	bl	80013c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000ea6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eaa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000eac:	2300      	movs	r3, #0
 8000eae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fd39 	bl	800392c <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000ec0:	f000 fa82 	bl	80013c8 <Error_Handler>
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	37e0      	adds	r7, #224	; 0xe0
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_ADC1_Init+0xa0>)
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f36:	f000 fcfb 	bl	8001930 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f40:	f000 fa42 	bl	80013c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f44:	230c      	movs	r3, #12
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_ADC1_Init+0x98>)
 8000f56:	f000 fe95 	bl	8001c84 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f60:	f000 fa32 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20008318 	.word	0x20008318
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_SPI1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fae:	2228      	movs	r2, #40	; 0x28
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fd8:	f003 f8d0 	bl	800417c <HAL_SPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f9f1 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000ad6c 	.word	0x2000ad6c
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <MX_USART6_UART_Init+0x58>)
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <MX_USART6_UART_Init+0x5c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001000:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001004:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <MX_USART6_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART6_UART_Init+0x58>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART6_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART6_UART_Init+0x58>)
 8001038:	f004 fbaa 	bl	8005790 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001042:	f000 f9c1 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000ace8 	.word	0x2000ace8
 8001050:	40011400 	.word	0x40011400

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_DMA_Init+0x58>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_DMA_Init+0x58>)
 8001060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_DMA_Init+0x58>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2038      	movs	r0, #56	; 0x38
 8001078:	f001 f92f 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800107c:	2038      	movs	r0, #56	; 0x38
 800107e:	f001 f948 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	203b      	movs	r0, #59	; 0x3b
 8001088:	f001 f927 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800108c:	203b      	movs	r0, #59	; 0x3b
 800108e:	f001 f940 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2105      	movs	r1, #5
 8001096:	2045      	movs	r0, #69	; 0x45
 8001098:	f001 f91f 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800109c:	2045      	movs	r0, #69	; 0x45
 800109e:	f001 f938 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a48      	ldr	r2, [pc, #288]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a42      	ldr	r2, [pc, #264]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <MX_GPIO_Init+0x13c>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <MX_GPIO_Init+0x13c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b37      	ldr	r3, [pc, #220]	; (80011ec <MX_GPIO_Init+0x13c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a36      	ldr	r2, [pc, #216]	; (80011ec <MX_GPIO_Init+0x13c>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2110      	movs	r1, #16
 800112a:	4831      	ldr	r0, [pc, #196]	; (80011f0 <MX_GPIO_Init+0x140>)
 800112c:	f001 fed6 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	482f      	ldr	r0, [pc, #188]	; (80011f4 <MX_GPIO_Init+0x144>)
 8001138:	f001 fed0 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001142:	482d      	ldr	r0, [pc, #180]	; (80011f8 <MX_GPIO_Init+0x148>)
 8001144:	f001 feca 	bl	8002edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001148:	2308      	movs	r3, #8
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_GPIO_Init+0x14c>)
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4825      	ldr	r0, [pc, #148]	; (80011f0 <MX_GPIO_Init+0x140>)
 800115c:	f001 fcfc 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001160:	2310      	movs	r3, #16
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MX_GPIO_Init+0x140>)
 8001178:	f001 fcee 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800117c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_GPIO_Init+0x144>)
 8001196:	f001 fcdf 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800119a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_GPIO_Init+0x14c>)
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_GPIO_Init+0x144>)
 80011b0:	f001 fcd2 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	f107 0314 	add.w	r3, r7, #20
 80011ca:	4619      	mov	r1, r3
 80011cc:	480a      	ldr	r0, [pc, #40]	; (80011f8 <MX_GPIO_Init+0x148>)
 80011ce:	f001 fcc3 	bl	8002b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2107      	movs	r1, #7
 80011d6:	2009      	movs	r0, #9
 80011d8:	f001 f87f 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011dc:	2009      	movs	r0, #9
 80011de:	f001 f898 	bl	8002312 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	10210000 	.word	0x10210000

08001200 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 &&id==3)
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b08      	cmp	r3, #8
 800120e:	f040 8095 	bne.w	800133c <HAL_GPIO_EXTI_Callback+0x13c>
 8001212:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_GPIO_EXTI_Callback+0x160>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b03      	cmp	r3, #3
 8001218:	f040 8090 	bne.w	800133c <HAL_GPIO_EXTI_Callback+0x13c>
	{
		switch(prechannel)
 800121c:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_GPIO_EXTI_Callback+0x164>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <HAL_GPIO_EXTI_Callback+0x2a>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d024      	beq.n	8001272 <HAL_GPIO_EXTI_Callback+0x72>
 8001228:	e04b      	b.n	80012c2 <HAL_GPIO_EXTI_Callback+0xc2>
		{
		case sensor1:
			voltage = ADS1256_GetChannalValue(sensor1);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fbb2 	bl	8000994 <ADS1256_GetChannalValue>
 8001230:	eef0 7a40 	vmov.f32	s15, s0
 8001234:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <HAL_GPIO_EXTI_Callback+0x168>)
 8001236:	edc3 7a00 	vstr	s15, [r3]
  			voltage = voltage*60.6;
 800123a:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_GPIO_EXTI_Callback+0x168>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001244:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001348 <HAL_GPIO_EXTI_Callback+0x148>
 8001248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800124c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <HAL_GPIO_EXTI_Callback+0x168>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
  			v_f[v.cnt]=voltage;
 8001256:	4b45      	ldr	r3, [pc, #276]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a43      	ldr	r2, [pc, #268]	; (8001368 <HAL_GPIO_EXTI_Callback+0x168>)
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	4944      	ldr	r1, [pc, #272]	; (8001370 <HAL_GPIO_EXTI_Callback+0x170>)
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	601a      	str	r2, [r3, #0]
  			v.cnt++;
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a3f      	ldr	r2, [pc, #252]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 800126e:	6013      	str	r3, [r2, #0]
			break;
 8001270:	e027      	b.n	80012c2 <HAL_GPIO_EXTI_Callback+0xc2>
		case sensor2:
			current = ADS1256_GetChannalValue(sensor2);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fb8e 	bl	8000994 <ADS1256_GetChannalValue>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <HAL_GPIO_EXTI_Callback+0x174>)
 800127e:	edc3 7a00 	vstr	s15, [r3]
  			current = (current-2.27)/0.025;
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <HAL_GPIO_EXTI_Callback+0x174>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001350 <HAL_GPIO_EXTI_Callback+0x150>
 8001290:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001294:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001358 <HAL_GPIO_EXTI_Callback+0x158>
 8001298:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800129c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a0:	4b34      	ldr	r3, [pc, #208]	; (8001374 <HAL_GPIO_EXTI_Callback+0x174>)
 80012a2:	edc3 7a00 	vstr	s15, [r3]
  			i_f[i.cnt]=current;
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a32      	ldr	r2, [pc, #200]	; (8001374 <HAL_GPIO_EXTI_Callback+0x174>)
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	4933      	ldr	r1, [pc, #204]	; (800137c <HAL_GPIO_EXTI_Callback+0x17c>)
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	601a      	str	r2, [r3, #0]
  			i.cnt++;
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a2e      	ldr	r2, [pc, #184]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 80012be:	6013      	str	r3, [r2, #0]
			break;
 80012c0:	bf00      	nop
		}
		prechannel++;
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_GPIO_EXTI_Callback+0x164>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_GPIO_EXTI_Callback+0x164>)
 80012ca:	6013      	str	r3, [r2, #0]
		if ((prechannel >=numChannel))
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_GPIO_EXTI_Callback+0x164>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_GPIO_EXTI_Callback+0x180>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	db02      	blt.n	80012de <HAL_GPIO_EXTI_Callback+0xde>
		{
			prechannel=0;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <HAL_GPIO_EXTI_Callback+0x164>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
		}
		if (v.cnt ==1250 && i.cnt ==1250)
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d128      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x13c>
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d122      	bne.n	800133c <HAL_GPIO_EXTI_Callback+0x13c>
		{
			v.cnt=0;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
			i.cnt=0;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
			arm_max_f32(v_f, 1250, &v.max, &v.index);
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_GPIO_EXTI_Callback+0x184>)
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <HAL_GPIO_EXTI_Callback+0x188>)
 8001306:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800130a:	4819      	ldr	r0, [pc, #100]	; (8001370 <HAL_GPIO_EXTI_Callback+0x170>)
 800130c:	f7ff f970 	bl	80005f0 <arm_max_f32>
			arm_max_f32(i_f, 1250, &i.max, &i.index);
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_GPIO_EXTI_Callback+0x18c>)
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_EXTI_Callback+0x190>)
 8001314:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <HAL_GPIO_EXTI_Callback+0x17c>)
 800131a:	f7ff f969 	bl	80005f0 <arm_max_f32>
			R = v.max / i.max;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_GPIO_EXTI_Callback+0x16c>)
 8001320:	edd3 6a01 	vldr	s13, [r3, #4]
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_GPIO_EXTI_Callback+0x178>)
 8001326:	ed93 7a01 	vldr	s14, [r3, #4]
 800132a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_GPIO_EXTI_Callback+0x194>)
 8001330:	edc3 7a00 	vstr	s15, [r3]
			F2B.f = R;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <HAL_GPIO_EXTI_Callback+0x194>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_GPIO_EXTI_Callback+0x198>)
 800133a:	6013      	str	r3, [r2, #0]
//			xSemaphoreGiveFromISR(myBinarySem01Handle,&xHigherPriorityTaskWoken);


		}
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	f3af 8000 	nop.w
 8001348:	cccccccd 	.word	0xcccccccd
 800134c:	404e4ccc 	.word	0x404e4ccc
 8001350:	c28f5c29 	.word	0xc28f5c29
 8001354:	400228f5 	.word	0x400228f5
 8001358:	9999999a 	.word	0x9999999a
 800135c:	3f999999 	.word	0x3f999999
 8001360:	20000480 	.word	0x20000480
 8001364:	20000484 	.word	0x20000484
 8001368:	200082b4 	.word	0x200082b4
 800136c:	200096f8 	.word	0x200096f8
 8001370:	20009704 	.word	0x20009704
 8001374:	200096f4 	.word	0x200096f4
 8001378:	20008360 	.word	0x20008360
 800137c:	2000836c 	.word	0x2000836c
 8001380:	200082a8 	.word	0x200082a8
 8001384:	20009700 	.word	0x20009700
 8001388:	200096fc 	.word	0x200096fc
 800138c:	20008368 	.word	0x20008368
 8001390:	20008364 	.word	0x20008364
 8001394:	2000ace4 	.word	0x2000ace4
 8001398:	200082a4 	.word	0x200082a4

0800139c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdTRUE ) {
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <StartDefaultTask+0x28>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 fc3d 	bl	8006c2c <xQueueSemaphoreTake>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d100      	bne.n	80013ba <StartDefaultTask+0x1e>
		  __NOP();
 80013b8:	bf00      	nop

//		tf_size = strlen(F2B.byte);
//		HAL_UART_Transmit(&huart6, F2B.byte, tf_size,100);

	  }
    osDelay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f005 f8f0 	bl	80065a0 <osDelay>
	  if(xSemaphoreTake(myBinarySem01Handle, portMAX_DELAY) == pdTRUE ) {
 80013c0:	e7f0      	b.n	80013a4 <StartDefaultTask+0x8>
 80013c2:	bf00      	nop
 80013c4:	2000ace0 	.word	0x2000ace0

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	210f      	movs	r1, #15
 8001412:	f06f 0001 	mvn.w	r0, #1
 8001416:	f000 ff60 	bl	80022da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a15      	ldr	r2, [pc, #84]	; (800149c <HAL_ADC_MspInit+0x74>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d123      	bne.n	8001492 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_ADC_MspInit+0x78>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147a:	2304      	movs	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_ADC_MspInit+0x7c>)
 800148e:	f001 fb63 	bl	8002b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012000 	.word	0x40012000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800

080014a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_SPI_MspInit+0x134>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	f040 8084 	bne.w	80015d4 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014cc:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	4a43      	ldr	r2, [pc, #268]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d6:	6453      	str	r3, [r2, #68]	; 0x44
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a3d      	ldr	r2, [pc, #244]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6313      	str	r3, [r2, #48]	; 0x30
 80014f0:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_SPI_MspInit+0x138>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014fc:	23e0      	movs	r3, #224	; 0xe0
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150c:	2305      	movs	r3, #5
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4619      	mov	r1, r3
 8001516:	4833      	ldr	r0, [pc, #204]	; (80015e4 <HAL_SPI_MspInit+0x13c>)
 8001518:	f001 fb1e 	bl	8002b58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_SPI_MspInit+0x144>)
 8001520:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001524:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001528:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001538:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800155c:	4822      	ldr	r0, [pc, #136]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 800155e:	f000 fef3 	bl	8002348 <HAL_DMA_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001568:	f7ff ff2e 	bl	80013c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001570:	659a      	str	r2, [r3, #88]	; 0x58
 8001572:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_SPI_MspInit+0x140>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_SPI_MspInit+0x14c>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 8001580:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001584:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015ba:	f000 fec5 	bl	8002348 <HAL_DMA_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80015c4:	f7ff ff00 	bl	80013c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_SPI_MspInit+0x148>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013000 	.word	0x40013000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	2000add0 	.word	0x2000add0
 80015ec:	40026410 	.word	0x40026410
 80015f0:	2000ae30 	.word	0x2000ae30
 80015f4:	40026458 	.word	0x40026458

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <HAL_UART_MspInit+0xe8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d15d      	bne.n	80016d6 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_UART_MspInit+0xec>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <HAL_UART_MspInit+0xec>)
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_UART_MspInit+0xec>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_UART_MspInit+0xec>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2b      	ldr	r2, [pc, #172]	; (80016e4 <HAL_UART_MspInit+0xec>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_UART_MspInit+0xec>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800165a:	2308      	movs	r3, #8
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4820      	ldr	r0, [pc, #128]	; (80016e8 <HAL_UART_MspInit+0xf0>)
 8001666:	f001 fa77 	bl	8002b58 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <HAL_UART_MspInit+0xf4>)
 800166c:	4a20      	ldr	r2, [pc, #128]	; (80016f0 <HAL_UART_MspInit+0xf8>)
 800166e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_UART_MspInit+0xf4>)
 8001672:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001676:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <HAL_UART_MspInit+0xf4>)
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_UART_MspInit+0xf4>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_UART_MspInit+0xf4>)
 8001686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800168a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_UART_MspInit+0xf4>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_UART_MspInit+0xf4>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_UART_MspInit+0xf4>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_UART_MspInit+0xf4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <HAL_UART_MspInit+0xf4>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80016aa:	4810      	ldr	r0, [pc, #64]	; (80016ec <HAL_UART_MspInit+0xf4>)
 80016ac:	f000 fe4c 	bl	8002348 <HAL_DMA_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80016b6:	f7ff fe87 	bl	80013c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_UART_MspInit+0xf4>)
 80016be:	66da      	str	r2, [r3, #108]	; 0x6c
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_UART_MspInit+0xf4>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	2047      	movs	r0, #71	; 0x47
 80016cc:	f000 fe05 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016d0:	2047      	movs	r0, #71	; 0x47
 80016d2:	f000 fe1e 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40011400 	.word	0x40011400
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020800 	.word	0x40020800
 80016ec:	200082b8 	.word	0x200082b8
 80016f0:	400264a0 	.word	0x400264a0

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172c:	f000 f8e0 	bl	80018f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001730:	f006 fa64 	bl	8007bfc <xTaskGetSchedulerState>
 8001734:	4603      	mov	r3, r0
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800173a:	f006 fe35 	bl	80083a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001746:	2008      	movs	r0, #8
 8001748:	f001 fbe2 	bl	8002f10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2_Stream0_IRQHandler+0x10>)
 8001756:	f000 ff97 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000add0 	.word	0x2000add0

08001764 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA2_Stream3_IRQHandler+0x10>)
 800176a:	f000 ff8d 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000ae30 	.word	0x2000ae30

08001778 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA2_Stream6_IRQHandler+0x10>)
 800177e:	f000 ff83 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200082b8 	.word	0x200082b8

0800178c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <USART6_IRQHandler+0x10>)
 8001792:	f004 f84b 	bl	800582c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000ace8 	.word	0x2000ace8

080017a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x50>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x16>
		heap_end = &end;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <_sbrk+0x50>)
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <_sbrk+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <_sbrk+0x50>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <_sbrk+0x50>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	466a      	mov	r2, sp
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d907      	bls.n	80017da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017ca:	f007 f81d 	bl	8008808 <__errno>
 80017ce:	4602      	mov	r2, r0
 80017d0:	230c      	movs	r3, #12
 80017d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	e006      	b.n	80017e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <_sbrk+0x50>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <_sbrk+0x50>)
 80017e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000488 	.word	0x20000488
 80017f4:	2000aea8 	.word	0x2000aea8

080017f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SystemInit+0x28>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <SystemInit+0x28>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SystemInit+0x28>)
 800180e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001812:	609a      	str	r2, [r3, #8]
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800185c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001828:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr  r2, =_sbss
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001842:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001844:	f842 3b04 	str.w	r3, [r2], #4

08001848 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800184e:	f7ff ffd3 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f006 ffdf 	bl	8008814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001856:	f7ff fa33 	bl	8000cc0 <main>
  bx  lr    
 800185a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800185c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001860:	0800c4f0 	.word	0x0800c4f0
  ldr  r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001868:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800186c:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8001870:	2000aea4 	.word	0x2000aea4

08001874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC_IRQHandler>

08001876 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187a:	2003      	movs	r0, #3
 800187c:	f000 fd22 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001880:	200f      	movs	r0, #15
 8001882:	f000 f805 	bl	8001890 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001886:	f7ff fda7 	bl	80013d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd3d 	bl	800232e <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 fd05 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000010 	.word	0x20000010
 80018e8:	20000018 	.word	0x20000018
 80018ec:	20000014 	.word	0x20000014

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000018 	.word	0x20000018
 8001914:	2000ae9c 	.word	0x2000ae9c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000ae9c 	.word	0x2000ae9c

08001930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e031      	b.n	80019aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fd6a 	bl	8001428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_ADC_Init+0x84>)
 8001974:	4013      	ands	r3, r2
 8001976:	f043 0202 	orr.w	r2, r3, #2
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fad6 	bl	8001f30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f023 0303 	bic.w	r3, r3, #3
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
 800199a:	e001      	b.n	80019a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	ffffeefd 	.word	0xffffeefd

080019b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start+0x1a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0ad      	b.n	8001b2e <HAL_ADC_Start+0x176>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d018      	beq.n	8001a1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_ADC_Start+0x184>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a50      	ldr	r2, [pc, #320]	; (8001b40 <HAL_ADC_Start+0x188>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9a      	lsrs	r2, r3, #18
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a0c:	e002      	b.n	8001a14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f9      	bne.n	8001a0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d175      	bne.n	8001b14 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <HAL_ADC_Start+0x18c>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f023 0206 	bic.w	r2, r3, #6
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a70:	e002      	b.n	8001a78 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a8a:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_ADC_Start+0x190>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d143      	bne.n	8001b2c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e03a      	b.n	8001b2c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <HAL_ADC_Start+0x194>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d10e      	bne.n	8001ade <HAL_ADC_Start+0x126>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001adc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <HAL_ADC_Start+0x190>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d120      	bne.n	8001b2c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <HAL_ADC_Start+0x198>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d11b      	bne.n	8001b2c <HAL_ADC_Start+0x174>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d114      	bne.n	8001b2c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	e00b      	b.n	8001b2c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	fffff8fe 	.word	0xfffff8fe
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	40012200 	.word	0x40012200

08001b54 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b70:	d113      	bne.n	8001b9a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b80:	d10b      	bne.n	8001b9a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f043 0220 	orr.w	r2, r3, #32
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e063      	b.n	8001c62 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001b9a:	f7ff febd 	bl	8001918 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ba0:	e021      	b.n	8001be6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d01d      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_ADC_PollForConversion+0x6c>
 8001bb0:	f7ff feb2 	bl	8001918 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d212      	bcs.n	8001be6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d00b      	beq.n	8001be6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f043 0204 	orr.w	r2, r3, #4
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e03d      	b.n	8001c62 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d1d6      	bne.n	8001ba2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0212 	mvn.w	r2, #18
 8001bfc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d123      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d11f      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d111      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0201 	orr.w	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1c>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e12a      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x272>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b09      	cmp	r3, #9
 8001cae:	d93a      	bls.n	8001d26 <HAL_ADC_ConfigChannel+0xa2>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cb8:	d035      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68d9      	ldr	r1, [r3, #12]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	3b1e      	subs	r3, #30
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	400a      	ands	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a87      	ldr	r2, [pc, #540]	; (8001f04 <HAL_ADC_ConfigChannel+0x280>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d10a      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	061a      	lsls	r2, r3, #24
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfe:	e035      	b.n	8001d6c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4403      	add	r3, r0
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d24:	e022      	b.n	8001d6c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	2207      	movs	r2, #7
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6919      	ldr	r1, [r3, #16]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4403      	add	r3, r0
 8001d62:	409a      	lsls	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b06      	cmp	r3, #6
 8001d72:	d824      	bhi.n	8001dbe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b05      	subs	r3, #5
 8001d86:	221f      	movs	r2, #31
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	400a      	ands	r2, r1
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b05      	subs	r3, #5
 8001db0:	fa00 f203 	lsl.w	r2, r0, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
 8001dbc:	e04c      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d824      	bhi.n	8001e10 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b23      	subs	r3, #35	; 0x23
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b23      	subs	r3, #35	; 0x23
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0e:	e023      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b41      	subs	r3, #65	; 0x41
 8001e22:	221f      	movs	r2, #31
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	400a      	ands	r2, r1
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b41      	subs	r3, #65	; 0x41
 8001e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_ADC_ConfigChannel+0x284>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10a      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1f4>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001e72:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e76:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <HAL_ADC_ConfigChannel+0x284>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d109      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x212>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b12      	cmp	r3, #18
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_ADC_ConfigChannel+0x284>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d125      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x268>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_ADC_ConfigChannel+0x280>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d003      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x22e>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b11      	cmp	r3, #17
 8001eb0:	d11c      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_ADC_ConfigChannel+0x288>)
 8001eb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ebc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_ADC_ConfigChannel+0x280>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_ADC_ConfigChannel+0x28c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_ADC_ConfigChannel+0x290>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0c9a      	lsrs	r2, r3, #18
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ede:	e002      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	10000012 	.word	0x10000012
 8001f08:	40012000 	.word	0x40012000
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	20000010 	.word	0x20000010
 8001f14:	431bde83 	.word	0x431bde83

08001f18 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f38:	4b78      	ldr	r3, [pc, #480]	; (800211c <ADC_Init+0x1ec>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a77      	ldr	r2, [pc, #476]	; (800211c <ADC_Init+0x1ec>)
 8001f3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f42:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f44:	4b75      	ldr	r3, [pc, #468]	; (800211c <ADC_Init+0x1ec>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4973      	ldr	r1, [pc, #460]	; (800211c <ADC_Init+0x1ec>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <ADC_Init+0x1f0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e00f      	b.n	800202a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0202 	bic.w	r2, r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	005a      	lsls	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002066:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	035a      	lsls	r2, r3, #13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e007      	b.n	80020a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051a      	lsls	r2, r3, #20
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020e2:	025a      	lsls	r2, r3, #9
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	40012300 	.word	0x40012300
 8002120:	0f000001 	.word	0x0f000001

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 800214e:	4313      	orrs	r3, r2
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x40>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	05fa0000 	.word	0x05fa0000

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	; (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	; (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff fae0 	bl	8001918 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e099      	b.n	8002498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002384:	e00f      	b.n	80023a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002386:	f7ff fac7 	bl	8001918 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b05      	cmp	r3, #5
 8002392:	d908      	bls.n	80023a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2203      	movs	r2, #3
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e078      	b.n	8002498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1e8      	bne.n	8002386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <HAL_DMA_Init+0x158>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4313      	orrs	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0307 	bic.w	r3, r3, #7
 8002426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b04      	cmp	r3, #4
 8002438:	d117      	bne.n	800246a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00e      	beq.n	800246a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb09 	bl	8002a64 <DMA_CheckFifoParam>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2240      	movs	r2, #64	; 0x40
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002466:	2301      	movs	r3, #1
 8002468:	e016      	b.n	8002498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fac0 	bl	80029f8 <DMA_CalcBaseAndBitshift>
 8002478:	4603      	mov	r3, r0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e010803f 	.word	0xe010803f

080024a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Start_IT+0x26>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e048      	b.n	800255c <HAL_DMA_Start_IT+0xb8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d137      	bne.n	800254e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fa52 	bl	800299c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	223f      	movs	r2, #63	; 0x3f
 80024fe:	409a      	lsls	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0216 	orr.w	r2, r2, #22
 8002512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002522:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0208 	orr.w	r2, r2, #8
 800253a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e005      	b.n	800255a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002556:	2302      	movs	r3, #2
 8002558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002572:	f7ff f9d1 	bl	8001918 <HAL_GetTick>
 8002576:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d008      	beq.n	8002596 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e052      	b.n	800263c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0216 	bic.w	r2, r2, #22
 80025a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <HAL_DMA_Abort+0x62>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0208 	bic.w	r2, r2, #8
 80025d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e6:	e013      	b.n	8002610 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e8:	f7ff f996 	bl	8001918 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d90c      	bls.n	8002610 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2220      	movs	r2, #32
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2203      	movs	r2, #3
 8002608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e015      	b.n	800263c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e4      	bne.n	80025e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	223f      	movs	r2, #63	; 0x3f
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d004      	beq.n	8002662 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00c      	b.n	800267c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2205      	movs	r2, #5
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002694:	4b92      	ldr	r3, [pc, #584]	; (80028e0 <HAL_DMA_IRQHandler+0x258>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a92      	ldr	r2, [pc, #584]	; (80028e4 <HAL_DMA_IRQHandler+0x25c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2208      	movs	r2, #8
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2208      	movs	r2, #8
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f043 0202 	orr.w	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	2204      	movs	r2, #4
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2210      	movs	r2, #16
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d043      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03c      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2210      	movs	r2, #16
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d018      	beq.n	80027ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d024      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
 80027b6:	e01f      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e016      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0208 	bic.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2220      	movs	r2, #32
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 808e 	beq.w	8002926 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8086 	beq.w	8002926 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2220      	movs	r2, #32
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b05      	cmp	r3, #5
 8002830:	d136      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0216 	bic.w	r2, r2, #22
 8002840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_DMA_IRQHandler+0x1da>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0208 	bic.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	223f      	movs	r2, #63	; 0x3f
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07d      	beq.n	8002992 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
        }
        return;
 800289e:	e078      	b.n	8002992 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01c      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d108      	bne.n	80028ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d030      	beq.n	8002926 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e02b      	b.n	8002926 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d027      	beq.n	8002926 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
 80028de:	e022      	b.n	8002926 <HAL_DMA_IRQHandler+0x29e>
 80028e0:	20000010 	.word	0x20000010
 80028e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0210 	bic.w	r2, r2, #16
 8002904:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	2b00      	cmp	r3, #0
 800292c:	d032      	beq.n	8002994 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d022      	beq.n	8002980 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2205      	movs	r2, #5
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3301      	adds	r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	429a      	cmp	r2, r3
 800295c:	d307      	bcc.n	800296e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f2      	bne.n	8002952 <HAL_DMA_IRQHandler+0x2ca>
 800296c:	e000      	b.n	8002970 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800296e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
 8002990:	e000      	b.n	8002994 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002992:	bf00      	nop
    }
  }
}
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop

0800299c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d108      	bne.n	80029dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029da:	e007      	b.n	80029ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3b10      	subs	r3, #16
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <DMA_CalcBaseAndBitshift+0x60>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <DMA_CalcBaseAndBitshift+0x64>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d908      	bls.n	8002a38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <DMA_CalcBaseAndBitshift+0x68>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	1d1a      	adds	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	; 0x58
 8002a36:	e006      	b.n	8002a46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <DMA_CalcBaseAndBitshift+0x68>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	aaaaaaab 	.word	0xaaaaaaab
 8002a5c:	0800c1b8 	.word	0x0800c1b8
 8002a60:	fffffc00 	.word	0xfffffc00

08002a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11f      	bne.n	8002abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d855      	bhi.n	8002b30 <DMA_CheckFifoParam+0xcc>
 8002a84:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x28>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aaf 	.word	0x08002aaf
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002b31 	.word	0x08002b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d045      	beq.n	8002b34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e042      	b.n	8002b34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ab6:	d13f      	bne.n	8002b38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e03c      	b.n	8002b38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	d121      	bne.n	8002b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d836      	bhi.n	8002b3c <DMA_CheckFifoParam+0xd8>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <DMA_CheckFifoParam+0x70>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002aeb 	.word	0x08002aeb
 8002adc:	08002ae5 	.word	0x08002ae5
 8002ae0:	08002afd 	.word	0x08002afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e02f      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e021      	b.n	8002b40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b04:	d11e      	bne.n	8002b44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0a:	e01b      	b.n	8002b44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <DMA_CheckFifoParam+0xb4>
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d003      	beq.n	8002b1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b16:	e018      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e015      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00e      	beq.n	8002b48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2e:	e00b      	b.n	8002b48 <DMA_CheckFifoParam+0xe4>
      break;
 8002b30:	bf00      	nop
 8002b32:	e00a      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b34:	bf00      	nop
 8002b36:	e008      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e006      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b3c:	bf00      	nop
 8002b3e:	e004      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b40:	bf00      	nop
 8002b42:	e002      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;   
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b48:	bf00      	nop
    }
  } 
  
  return status; 
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e175      	b.n	8002e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 8164 	bne.w	8002e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002baa:	2b11      	cmp	r3, #17
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x100>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80be 	beq.w	8002e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	4b65      	ldr	r3, [pc, #404]	; (8002e78 <HAL_GPIO_Init+0x320>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a64      	ldr	r2, [pc, #400]	; (8002e78 <HAL_GPIO_Init+0x320>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_GPIO_Init+0x320>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002cfa:	4a60      	ldr	r2, [pc, #384]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a57      	ldr	r2, [pc, #348]	; (8002e80 <HAL_GPIO_Init+0x328>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d037      	beq.n	8002d96 <HAL_GPIO_Init+0x23e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a56      	ldr	r2, [pc, #344]	; (8002e84 <HAL_GPIO_Init+0x32c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <HAL_GPIO_Init+0x23a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a55      	ldr	r2, [pc, #340]	; (8002e88 <HAL_GPIO_Init+0x330>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02b      	beq.n	8002d8e <HAL_GPIO_Init+0x236>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a54      	ldr	r2, [pc, #336]	; (8002e8c <HAL_GPIO_Init+0x334>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d025      	beq.n	8002d8a <HAL_GPIO_Init+0x232>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a53      	ldr	r2, [pc, #332]	; (8002e90 <HAL_GPIO_Init+0x338>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <HAL_GPIO_Init+0x22e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x33c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x22a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_GPIO_Init+0x340>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x226>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x344>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x222>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x348>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x21e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x34c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x21a>
 8002d6e:	2309      	movs	r3, #9
 8002d70:	e012      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d72:	230a      	movs	r3, #10
 8002d74:	e010      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d76:	2308      	movs	r3, #8
 8002d78:	e00e      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	e00c      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e00a      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d82:	2305      	movs	r3, #5
 8002d84:	e008      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d86:	2304      	movs	r3, #4
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x240>
 8002d96:	2300      	movs	r3, #0
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f002 0203 	and.w	r2, r2, #3
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	4093      	lsls	r3, r2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002da8:	4934      	ldr	r1, [pc, #208]	; (8002e7c <HAL_GPIO_Init+0x324>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3302      	adds	r3, #2
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db6:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dda:	4a33      	ldr	r2, [pc, #204]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e04:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0a:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_GPIO_Init+0x350>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	f67f ae86 	bls.w	8002b78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3724      	adds	r7, #36	; 0x24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020400 	.word	0x40020400
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020c00 	.word	0x40020c00
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40021400 	.word	0x40021400
 8002e98:	40021800 	.word	0x40021800
 8002e9c:	40021c00 	.word	0x40021c00
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40022400 	.word	0x40022400
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e001      	b.n	8002ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	807b      	strh	r3, [r7, #2]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eec:	787b      	ldrb	r3, [r7, #1]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ef8:	e003      	b.n	8002f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002efa:	887b      	ldrh	r3, [r7, #2]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe f966 	bl	8001200 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40013c00 	.word	0x40013c00

08002f40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b23      	ldr	r3, [pc, #140]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f6e:	f7fe fcd3 	bl	8001918 <HAL_GetTick>
 8002f72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f74:	e009      	b.n	8002f8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f76:	f7fe fccf 	bl	8001918 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f84:	d901      	bls.n	8002f8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e022      	b.n	8002fd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f8a:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f96:	d1ee      	bne.n	8002f76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa4:	f7fe fcb8 	bl	8001918 <HAL_GetTick>
 8002fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002faa:	e009      	b.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fac:	f7fe fcb4 	bl	8001918 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fba:	d901      	bls.n	8002fc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e007      	b.n	8002fd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fcc:	d1ee      	bne.n	8002fac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40007000 	.word	0x40007000

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e29b      	b.n	800352e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 8087 	beq.w	8003112 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003004:	4b96      	ldr	r3, [pc, #600]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b04      	cmp	r3, #4
 800300e:	d00c      	beq.n	800302a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003010:	4b93      	ldr	r3, [pc, #588]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b08      	cmp	r3, #8
 800301a:	d112      	bne.n	8003042 <HAL_RCC_OscConfig+0x62>
 800301c:	4b90      	ldr	r3, [pc, #576]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003028:	d10b      	bne.n	8003042 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d06c      	beq.n	8003110 <HAL_RCC_OscConfig+0x130>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d168      	bne.n	8003110 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e275      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x7a>
 800304c:	4b84      	ldr	r3, [pc, #528]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a83      	ldr	r2, [pc, #524]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	e02e      	b.n	80030b8 <HAL_RCC_OscConfig+0xd8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x9c>
 8003062:	4b7f      	ldr	r3, [pc, #508]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7e      	ldr	r2, [pc, #504]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b7c      	ldr	r3, [pc, #496]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a7b      	ldr	r2, [pc, #492]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xd8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a75      	ldr	r2, [pc, #468]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b73      	ldr	r3, [pc, #460]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a72      	ldr	r2, [pc, #456]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xd8>
 80030a0:	4b6f      	ldr	r3, [pc, #444]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a6e      	ldr	r2, [pc, #440]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6b      	ldr	r2, [pc, #428]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fc2a 	bl	8001918 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fc26 	bl	8001918 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e229      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b61      	ldr	r3, [pc, #388]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fc16 	bl	8001918 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fc12 	bl	8001918 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e215      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x110>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d069      	beq.n	80031f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311e:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b4d      	ldr	r3, [pc, #308]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x190>
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x17a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1e9      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	493d      	ldr	r1, [pc, #244]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e040      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a38      	ldr	r2, [pc, #224]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fbc8 	bl	8001918 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318c:	f7fe fbc4 	bl	8001918 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1c7      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b30      	ldr	r3, [pc, #192]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4929      	ldr	r1, [pc, #164]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
 80031be:	e018      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fba4 	bl	8001918 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d4:	f7fe fba0 	bl	8001918 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1a3      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d038      	beq.n	8003270 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d019      	beq.n	800323a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003206:	4b16      	ldr	r3, [pc, #88]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	4a15      	ldr	r2, [pc, #84]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe fb81 	bl	8001918 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe fb7d 	bl	8001918 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e180      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800322e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x23a>
 8003238:	e01a      	b.n	8003270 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323a:	4b09      	ldr	r3, [pc, #36]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	4a08      	ldr	r2, [pc, #32]	; (8003260 <HAL_RCC_OscConfig+0x280>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003246:	f7fe fb67 	bl	8001918 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800324e:	f7fe fb63 	bl	8001918 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d903      	bls.n	8003264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e166      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
 8003260:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003264:	4b92      	ldr	r3, [pc, #584]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ee      	bne.n	800324e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a4 	beq.w	80033c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800327e:	4b8c      	ldr	r3, [pc, #560]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800328a:	4b89      	ldr	r3, [pc, #548]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a88      	ldr	r2, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b86      	ldr	r3, [pc, #536]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a6:	4b83      	ldr	r3, [pc, #524]	; (80034b4 <HAL_RCC_OscConfig+0x4d4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d118      	bne.n	80032e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80032b2:	4b80      	ldr	r3, [pc, #512]	; (80034b4 <HAL_RCC_OscConfig+0x4d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7f      	ldr	r2, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x4d4>)
 80032b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032be:	f7fe fb2b 	bl	8001918 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c6:	f7fe fb27 	bl	8001918 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b64      	cmp	r3, #100	; 0x64
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e12a      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d8:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x4d4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f0      	beq.n	80032c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x31a>
 80032ec:	4b70      	ldr	r3, [pc, #448]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a6f      	ldr	r2, [pc, #444]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
 80032f8:	e02d      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x33c>
 8003302:	4b6b      	ldr	r3, [pc, #428]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
 800330e:	4b68      	ldr	r3, [pc, #416]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a67      	ldr	r2, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
 800331a:	e01c      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d10c      	bne.n	800333e <HAL_RCC_OscConfig+0x35e>
 8003324:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	; 0x70
 8003330:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	e00b      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a58      	ldr	r2, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d015      	beq.n	800338a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335e:	f7fe fadb 	bl	8001918 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fe fad7 	bl	8001918 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e0d8      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RCC_OscConfig+0x386>
 8003388:	e014      	b.n	80033b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fe fac5 	bl	8001918 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fac1 	bl	8001918 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0c2      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	4b41      	ldr	r3, [pc, #260]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ee      	bne.n	8003392 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ba:	4b3d      	ldr	r3, [pc, #244]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80ae 	beq.w	800352c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033d0:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d06d      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d14b      	bne.n	800347c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b32      	ldr	r3, [pc, #200]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fa92 	bl	8001918 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fa8e 	bl	8001918 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e091      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69da      	ldr	r2, [r3, #28]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	019b      	lsls	r3, r3, #6
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	3b01      	subs	r3, #1
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	491b      	ldr	r1, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fa60 	bl	8001918 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fa5c 	bl	8001918 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e05f      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b10      	ldr	r3, [pc, #64]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x47c>
 800347a:	e057      	b.n	800352c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fa46 	bl	8001918 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fa42 	bl	8001918 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e045      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x4b0>
 80034ae:	e03d      	b.n	800352c <HAL_RCC_OscConfig+0x54c>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80034b8:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_RCC_OscConfig+0x558>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d030      	beq.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d129      	bne.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d122      	bne.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d119      	bne.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	3b01      	subs	r3, #1
 8003502:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d10f      	bne.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d107      	bne.n	8003528 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800

0800353c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0d0      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d910      	bls.n	8003584 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 020f 	bic.w	r2, r3, #15
 800356a:	4965      	ldr	r1, [pc, #404]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0b8      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d020      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800359c:	4b59      	ldr	r3, [pc, #356]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035b4:	4b53      	ldr	r3, [pc, #332]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c0:	4b50      	ldr	r3, [pc, #320]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	494d      	ldr	r1, [pc, #308]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d040      	beq.n	8003660 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e6:	4b47      	ldr	r3, [pc, #284]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e07f      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e073      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06b      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4936      	ldr	r1, [pc, #216]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fe f972 	bl	8001918 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe f96e 	bl	8001918 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e053      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d210      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 020f 	bic.w	r2, r3, #15
 8003676:	4922      	ldr	r1, [pc, #136]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e032      	b.n	80036f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490e      	ldr	r1, [pc, #56]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036ce:	f000 f821 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036d2:	4601      	mov	r1, r0
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_ClockConfig+0x1c8>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <HAL_RCC_ClockConfig+0x1cc>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	fa21 f303 	lsr.w	r3, r1, r3
 80036e6:	4a09      	ldr	r2, [pc, #36]	; (800370c <HAL_RCC_ClockConfig+0x1d0>)
 80036e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ea:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_ClockConfig+0x1d4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f8ce 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00
 8003704:	40023800 	.word	0x40023800
 8003708:	0800c1a0 	.word	0x0800c1a0
 800370c:	20000010 	.word	0x20000010
 8003710:	20000014 	.word	0x20000014

08003714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d007      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x32>
 8003736:	2b08      	cmp	r3, #8
 8003738:	d008      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x38>
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 80b4 	bne.w	80038a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003742:	60bb      	str	r3, [r7, #8]
      break;
 8003744:	e0b3      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003748:	60bb      	str	r3, [r7, #8]
      break;
 800374a:	e0b0      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b5a      	ldr	r3, [pc, #360]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003756:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04a      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	ea03 0501 	and.w	r5, r3, r1
 8003778:	ea04 0602 	and.w	r6, r4, r2
 800377c:	4629      	mov	r1, r5
 800377e:	4632      	mov	r2, r6
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f04f 0400 	mov.w	r4, #0
 8003788:	0154      	lsls	r4, r2, #5
 800378a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800378e:	014b      	lsls	r3, r1, #5
 8003790:	4619      	mov	r1, r3
 8003792:	4622      	mov	r2, r4
 8003794:	1b49      	subs	r1, r1, r5
 8003796:	eb62 0206 	sbc.w	r2, r2, r6
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	f04f 0400 	mov.w	r4, #0
 80037a2:	0194      	lsls	r4, r2, #6
 80037a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037a8:	018b      	lsls	r3, r1, #6
 80037aa:	1a5b      	subs	r3, r3, r1
 80037ac:	eb64 0402 	sbc.w	r4, r4, r2
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	00e2      	lsls	r2, r4, #3
 80037ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037be:	00d9      	lsls	r1, r3, #3
 80037c0:	460b      	mov	r3, r1
 80037c2:	4614      	mov	r4, r2
 80037c4:	195b      	adds	r3, r3, r5
 80037c6:	eb44 0406 	adc.w	r4, r4, r6
 80037ca:	f04f 0100 	mov.w	r1, #0
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	0262      	lsls	r2, r4, #9
 80037d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037d8:	0259      	lsls	r1, r3, #9
 80037da:	460b      	mov	r3, r1
 80037dc:	4614      	mov	r4, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	4621      	mov	r1, r4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	f7fc fd80 	bl	80002f0 <__aeabi_uldivmod>
 80037f0:	4603      	mov	r3, r0
 80037f2:	460c      	mov	r4, r1
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e049      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f8:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	099b      	lsrs	r3, r3, #6
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea03 0501 	and.w	r5, r3, r1
 800380e:	ea04 0602 	and.w	r6, r4, r2
 8003812:	4629      	mov	r1, r5
 8003814:	4632      	mov	r2, r6
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f04f 0400 	mov.w	r4, #0
 800381e:	0154      	lsls	r4, r2, #5
 8003820:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003824:	014b      	lsls	r3, r1, #5
 8003826:	4619      	mov	r1, r3
 8003828:	4622      	mov	r2, r4
 800382a:	1b49      	subs	r1, r1, r5
 800382c:	eb62 0206 	sbc.w	r2, r2, r6
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	0194      	lsls	r4, r2, #6
 800383a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800383e:	018b      	lsls	r3, r1, #6
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	eb64 0402 	sbc.w	r4, r4, r2
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	00e2      	lsls	r2, r4, #3
 8003850:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003854:	00d9      	lsls	r1, r3, #3
 8003856:	460b      	mov	r3, r1
 8003858:	4614      	mov	r4, r2
 800385a:	195b      	adds	r3, r3, r5
 800385c:	eb44 0406 	adc.w	r4, r4, r6
 8003860:	f04f 0100 	mov.w	r1, #0
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	02a2      	lsls	r2, r4, #10
 800386a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800386e:	0299      	lsls	r1, r3, #10
 8003870:	460b      	mov	r3, r1
 8003872:	4614      	mov	r4, r2
 8003874:	4618      	mov	r0, r3
 8003876:	4621      	mov	r1, r4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f04f 0400 	mov.w	r4, #0
 800387e:	461a      	mov	r2, r3
 8003880:	4623      	mov	r3, r4
 8003882:	f7fc fd35 	bl	80002f0 <__aeabi_uldivmod>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	60bb      	str	r3, [r7, #8]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038aa:	60bb      	str	r3, [r7, #8]
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	68bb      	ldr	r3, [r7, #8]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	00f42400 	.word	0x00f42400
 80038c0:	007a1200 	.word	0x007a1200

080038c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000010 	.word	0x20000010

080038dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e0:	f7ff fff0 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4a03      	ldr	r2, [pc, #12]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	0800c1b0 	.word	0x0800c1b0

08003904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003908:	f7ff ffdc 	bl	80038c4 <HAL_RCC_GetHCLKFreq>
 800390c:	4601      	mov	r1, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0b5b      	lsrs	r3, r3, #13
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	0800c1b0 	.word	0x0800c1b0

0800392c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003954:	4b69      	ldr	r3, [pc, #420]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800395e:	6093      	str	r3, [r2, #8]
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	4964      	ldr	r1, [pc, #400]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003976:	2301      	movs	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d017      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	4959      	ldr	r1, [pc, #356]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a4:	d101      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039c2:	4b4e      	ldr	r3, [pc, #312]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	494a      	ldr	r1, [pc, #296]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e0:	d101      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039e2:	2301      	movs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039ee:	2301      	movs	r3, #1
 80039f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 808b 	beq.w	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a10:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	4a39      	ldr	r2, [pc, #228]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1c:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a28:	4b35      	ldr	r3, [pc, #212]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a34      	ldr	r2, [pc, #208]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a34:	f7fd ff70 	bl	8001918 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fd ff6c 	bl	8001918 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e38f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d035      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d02e      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a78:	4b20      	ldr	r3, [pc, #128]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a8e:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aa0:	4b16      	ldr	r3, [pc, #88]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d114      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fd ff34 	bl	8001918 <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fd ff30 	bl	8001918 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e351      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ee      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003af2:	400b      	ands	r3, r1
 8003af4:	4901      	ldr	r1, [pc, #4]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40007000 	.word	0x40007000
 8003b04:	0ffffcff 	.word	0x0ffffcff
 8003b08:	4bb3      	ldr	r3, [pc, #716]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4ab2      	ldr	r2, [pc, #712]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b12:	6093      	str	r3, [r2, #8]
 8003b14:	4bb0      	ldr	r3, [pc, #704]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b20:	49ad      	ldr	r1, [pc, #692]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d010      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b32:	4ba9      	ldr	r3, [pc, #676]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b38:	4aa7      	ldr	r2, [pc, #668]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b42:	4ba5      	ldr	r3, [pc, #660]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	49a2      	ldr	r1, [pc, #648]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b60:	4b9d      	ldr	r3, [pc, #628]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6e:	499a      	ldr	r1, [pc, #616]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b82:	4b95      	ldr	r3, [pc, #596]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b90:	4991      	ldr	r1, [pc, #580]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba4:	4b8c      	ldr	r3, [pc, #560]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb2:	4989      	ldr	r1, [pc, #548]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bc6:	4b84      	ldr	r3, [pc, #528]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4980      	ldr	r1, [pc, #512]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be8:	4b7b      	ldr	r3, [pc, #492]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	4978      	ldr	r1, [pc, #480]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0a:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f023 020c 	bic.w	r2, r3, #12
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	496f      	ldr	r1, [pc, #444]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	4967      	ldr	r1, [pc, #412]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4e:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	495e      	ldr	r1, [pc, #376]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	4956      	ldr	r1, [pc, #344]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	4945      	ldr	r1, [pc, #276]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cd6:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	493c      	ldr	r1, [pc, #240]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cf8:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d06:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d011      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d1a:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d28:	492b      	ldr	r1, [pc, #172]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5a:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d68:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d7c:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8c:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003da0:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db0:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00f      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	4986      	ldr	r1, [pc, #536]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003df0:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	497d      	ldr	r1, [pc, #500]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d006      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80d6 	beq.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e1c:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd fd76 	bl	8001918 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e30:	f7fd fd72 	bl	8001918 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e195      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d021      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e62:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e70:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	0e1b      	lsrs	r3, r3, #24
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4958      	ldr	r1, [pc, #352]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d004      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02e      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec8:	d129      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eca:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ed8:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	019a      	lsls	r2, r3, #6
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	493e      	ldr	r1, [pc, #248]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f06:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0c:	f023 021f 	bic.w	r2, r3, #31
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	3b01      	subs	r3, #1
 8003f16:	4938      	ldr	r1, [pc, #224]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01d      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	0e1b      	lsrs	r3, r3, #24
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f38:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	431a      	orrs	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4926      	ldr	r1, [pc, #152]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	019a      	lsls	r2, r3, #6
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	041b      	lsls	r3, r3, #16
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	491a      	ldr	r1, [pc, #104]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa2:	f7fd fcb9 	bl	8001918 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003faa:	f7fd fcb5 	bl	8001918 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	; 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0d8      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	f040 80ce 	bne.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fc9c 	bl	8001918 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003fe4:	f7fd fc98 	bl	8001918 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d904      	bls.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e0bb      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004008:	d0ec      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02e      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004040:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	0f1b      	lsrs	r3, r3, #28
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	4944      	ldr	r1, [pc, #272]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800406e:	4b42      	ldr	r3, [pc, #264]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004074:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	3b01      	subs	r3, #1
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	493d      	ldr	r1, [pc, #244]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d022      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004098:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409c:	d11d      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800409e:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	0e1b      	lsrs	r3, r3, #24
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040ac:	4b32      	ldr	r3, [pc, #200]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	0f1b      	lsrs	r3, r3, #28
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	019a      	lsls	r2, r3, #6
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	431a      	orrs	r2, r3
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	431a      	orrs	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	071b      	lsls	r3, r3, #28
 80040d2:	4929      	ldr	r1, [pc, #164]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ec:	0e1b      	lsrs	r3, r3, #24
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040f4:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	019a      	lsls	r2, r3, #6
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	4917      	ldr	r1, [pc, #92]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4911      	ldr	r1, [pc, #68]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0e      	ldr	r2, [pc, #56]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fd fbe8 	bl	8001918 <HAL_GetTick>
 8004148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800414c:	f7fd fbe4 	bl	8001918 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e007      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800416a:	d1ef      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e09d      	b.n	80042ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d009      	beq.n	80041b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f96a 	bl	80014a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f4:	d902      	bls.n	80041fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e002      	b.n	8004202 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004200:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800420a:	d007      	beq.n	800421c <HAL_SPI_Init+0xa0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004214:	d002      	beq.n	800421c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	f003 0204 	and.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_SPI_Transmit+0x22>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e158      	b.n	80045a6 <HAL_SPI_Transmit+0x2d4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042fc:	f7fd fb0c 	bl	8001918 <HAL_GetTick>
 8004300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004316:	e13d      	b.n	8004594 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Transmit+0x52>
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004328:	e134      	b.n	8004594 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	88fa      	ldrh	r2, [r7, #6]
 8004342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	88fa      	ldrh	r2, [r7, #6]
 8004348:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d10f      	bne.n	8004396 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d007      	beq.n	80043b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d94b      	bls.n	8004456 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Transmit+0xfa>
 80043c6:	8afb      	ldrh	r3, [r7, #22]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d13e      	bne.n	800444a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	1c9a      	adds	r2, r3, #2
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043f0:	e02b      	b.n	800444a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d112      	bne.n	8004426 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	881a      	ldrh	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004424:	e011      	b.n	800444a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004426:	f7fd fa77 	bl	8001918 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d803      	bhi.n	800443e <HAL_SPI_Transmit+0x16c>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d102      	bne.n	8004444 <HAL_SPI_Transmit+0x172>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004448:	e0a4      	b.n	8004594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ce      	bne.n	80043f2 <HAL_SPI_Transmit+0x120>
 8004454:	e07c      	b.n	8004550 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SPI_Transmit+0x192>
 800445e:	8afb      	ldrh	r3, [r7, #22]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d170      	bne.n	8004546 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d912      	bls.n	8004494 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	881a      	ldrh	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447e:	1c9a      	adds	r2, r3, #2
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004488:	b29b      	uxth	r3, r3
 800448a:	3b02      	subs	r3, #2
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004492:	e058      	b.n	8004546 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	7812      	ldrb	r2, [r2, #0]
 80044a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044ba:	e044      	b.n	8004546 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d12b      	bne.n	8004522 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d912      	bls.n	80044fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	881a      	ldrh	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b02      	subs	r3, #2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f8:	e025      	b.n	8004546 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004520:	e011      	b.n	8004546 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004522:	f7fd f9f9 	bl	8001918 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d803      	bhi.n	800453a <HAL_SPI_Transmit+0x268>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d102      	bne.n	8004540 <HAL_SPI_Transmit+0x26e>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004544:	e026      	b.n	8004594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1b5      	bne.n	80044bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	6839      	ldr	r1, [r7, #0]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f001 f8d5 	bl	8005704 <SPI_EndRxTxTransaction>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e000      	b.n	8004594 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045bc:	2301      	movs	r3, #1
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_SPI_TransmitReceive+0x26>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e1fb      	b.n	80049cc <HAL_SPI_TransmitReceive+0x41e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045dc:	f7fd f99c 	bl	8001918 <HAL_GetTick>
 80045e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80045f4:	887b      	ldrh	r3, [r7, #2]
 80045f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045f8:	7efb      	ldrb	r3, [r7, #27]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d00e      	beq.n	800461c <HAL_SPI_TransmitReceive+0x6e>
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004604:	d106      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x66>
 800460e:	7efb      	ldrb	r3, [r7, #27]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d003      	beq.n	800461c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004614:	2302      	movs	r3, #2
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800461a:	e1cd      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_SPI_TransmitReceive+0x80>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_TransmitReceive+0x80>
 8004628:	887b      	ldrh	r3, [r7, #2]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004634:	e1c0      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2205      	movs	r2, #5
 8004646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	887a      	ldrh	r2, [r7, #2]
 8004662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	887a      	ldrh	r2, [r7, #2]
 8004676:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d802      	bhi.n	8004694 <HAL_SPI_TransmitReceive+0xe6>
 800468e:	8a3b      	ldrh	r3, [r7, #16]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d908      	bls.n	80046a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a2:	605a      	str	r2, [r3, #4]
 80046a4:	e007      	b.n	80046b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d007      	beq.n	80046d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046dc:	d97c      	bls.n	80047d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x13e>
 80046e6:	8a7b      	ldrh	r3, [r7, #18]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d169      	bne.n	80047c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	881a      	ldrh	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	1c9a      	adds	r2, r3, #2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004710:	e056      	b.n	80047c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1aa>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x1aa>
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	2b01      	cmp	r3, #1
 800472e:	d113      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	881a      	ldrh	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d11c      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x1f2>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	b292      	uxth	r2, r2
 800477e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	1c9a      	adds	r2, r3, #2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800479c:	2301      	movs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047a0:	f7fd f8ba 	bl	8001918 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d807      	bhi.n	80047c0 <HAL_SPI_TransmitReceive+0x212>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d003      	beq.n	80047c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047be:	e0fb      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1a3      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x164>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d19d      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x164>
 80047d6:	e0df      	b.n	8004998 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x23a>
 80047e0:	8a7b      	ldrh	r3, [r7, #18]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	f040 80cb 	bne.w	800497e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d912      	bls.n	8004818 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	881a      	ldrh	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b02      	subs	r3, #2
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004816:	e0b2      	b.n	800497e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	7812      	ldrb	r2, [r2, #0]
 8004824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483e:	e09e      	b.n	800497e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d134      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x30a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02f      	beq.n	80048b8 <HAL_SPI_TransmitReceive+0x30a>
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2b01      	cmp	r3, #1
 800485c:	d12c      	bne.n	80048b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d912      	bls.n	800488e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	881a      	ldrh	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	1c9a      	adds	r2, r3, #2
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b02      	subs	r3, #2
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800488c:	e012      	b.n	80048b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d148      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x3aa>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d042      	beq.n	8004958 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d923      	bls.n	8004926 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	b292      	uxth	r2, r2
 80048ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	1c9a      	adds	r2, r3, #2
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	3b02      	subs	r3, #2
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d81f      	bhi.n	8004954 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004922:	605a      	str	r2, [r3, #4]
 8004924:	e016      	b.n	8004954 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f103 020c 	add.w	r2, r3, #12
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004954:	2301      	movs	r3, #1
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004958:	f7fc ffde 	bl	8001918 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	429a      	cmp	r2, r3
 8004966:	d803      	bhi.n	8004970 <HAL_SPI_TransmitReceive+0x3c2>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d102      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x3c8>
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800497c:	e01c      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	f47f af5b 	bne.w	8004840 <HAL_SPI_TransmitReceive+0x292>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	f47f af54 	bne.w	8004840 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 feb1 	bl	8005704 <SPI_EndRxTxTransaction>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	661a      	str	r2, [r3, #96]	; 0x60
 80049b4:	e000      	b.n	80049b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80049b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80049c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_SPI_Transmit_DMA+0x20>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e0d8      	b.n	8004ba6 <HAL_SPI_Transmit_DMA+0x1d2>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
 8004a0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a0c:	e0c6      	b.n	8004b9c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit_DMA+0x46>
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a1e:	e0bd      	b.n	8004b9c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	88fa      	ldrh	r2, [r7, #6]
 8004a3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6a:	d10f      	bne.n	8004a8c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	4a46      	ldr	r2, [pc, #280]	; (8004bb4 <HAL_SPI_Transmit_DMA+0x1e0>)
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	4a45      	ldr	r2, [pc, #276]	; (8004bb8 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ac4:	d82d      	bhi.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d127      	bne.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004aee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004afe:	e010      	b.n	8004b22 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b0e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004b3a:	f7fd fcb3 	bl	80024a4 <HAL_DMA_Start_IT>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00c      	beq.n	8004b5e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b48:	f043 0210 	orr.w	r2, r3, #16
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004b5c:	e01e      	b.n	8004b9c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d007      	beq.n	8004b7c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0220 	orr.w	r2, r2, #32
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0202 	orr.w	r2, r2, #2
 8004b9a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	0800538d 	.word	0x0800538d
 8004bb4:	080051a9 	.word	0x080051a9
 8004bb8:	080053e1 	.word	0x080053e1

08004bbc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d110      	bne.n	8004bf8 <HAL_SPI_Receive_DMA+0x3c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bde:	d10b      	bne.n	8004bf8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2204      	movs	r2, #4
 8004be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f908 	bl	8004e04 <HAL_SPI_TransmitReceive_DMA>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	e0fb      	b.n	8004df0 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Receive_DMA+0x4a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0f4      	b.n	8004df0 <HAL_SPI_Receive_DMA+0x234>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c1e:	e0e2      	b.n	8004de6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Receive_DMA+0x70>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c30:	e0d9      	b.n	8004de6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2204      	movs	r2, #4
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c76:	d10f      	bne.n	8004c98 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ca6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb0:	d908      	bls.n	8004cc4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e042      	b.n	8004d4a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cd2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cde:	d134      	bne.n	8004d4a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004d22:	e012      	b.n	8004d4a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3301      	adds	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	; (8004df8 <HAL_SPI_Receive_DMA+0x23c>)
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d56:	4a29      	ldr	r2, [pc, #164]	; (8004dfc <HAL_SPI_Receive_DMA+0x240>)
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5e:	4a28      	ldr	r2, [pc, #160]	; (8004e00 <HAL_SPI_Receive_DMA+0x244>)
 8004d60:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	2200      	movs	r2, #0
 8004d68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	4619      	mov	r1, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004d84:	f7fd fb8e 	bl	80024a4 <HAL_DMA_Start_IT>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004da6:	e01e      	b.n	8004de6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d007      	beq.n	8004dc6 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0220 	orr.w	r2, r2, #32
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	080053a9 	.word	0x080053a9
 8004dfc:	08005251 	.word	0x08005251
 8004e00:	080053e1 	.word	0x080053e1

08004e04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e16c      	b.n	80050fe <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004e3a:	7dbb      	ldrb	r3, [r7, #22]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d00d      	beq.n	8004e5c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e46:	d106      	bne.n	8004e56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004e50:	7dbb      	ldrb	r3, [r7, #22]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d002      	beq.n	8004e5c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004e56:	2302      	movs	r3, #2
 8004e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e5a:	e14b      	b.n	80050f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004e68:	887b      	ldrh	r3, [r7, #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e72:	e13f      	b.n	80050f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d003      	beq.n	8004e88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2205      	movs	r2, #5
 8004e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	887a      	ldrh	r2, [r7, #2]
 8004e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	887a      	ldrh	r2, [r7, #2]
 8004eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004ed0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eda:	d908      	bls.n	8004eee <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	e06f      	b.n	8004fce <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004efc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d126      	bne.n	8004f58 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f24:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f34:	e010      	b.n	8004f58 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f44:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d134      	bne.n	8004fce <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f72:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f92:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	085b      	lsrs	r3, r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fa6:	e012      	b.n	8004fce <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d108      	bne.n	8004fec <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a4a      	ldr	r2, [pc, #296]	; (8005108 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4a49      	ldr	r2, [pc, #292]	; (800510c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004fe8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004fea:	e007      	b.n	8004ffc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff0:	4a47      	ldr	r2, [pc, #284]	; (8005110 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	4a46      	ldr	r2, [pc, #280]	; (8005114 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004ffa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4a45      	ldr	r2, [pc, #276]	; (8005118 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	2200      	movs	r2, #0
 800500a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	4619      	mov	r1, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005024:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005026:	f7fd fa3d 	bl	80024a4 <HAL_DMA_Start_IT>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005034:	f043 0210 	orr.w	r2, r3, #16
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005048:	e054      	b.n	80050f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	2200      	movs	r2, #0
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	2200      	movs	r2, #0
 8005070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	2200      	movs	r2, #0
 8005078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	4619      	mov	r1, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005092:	f7fd fa07 	bl	80024a4 <HAL_DMA_Start_IT>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00c      	beq.n	80050b6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a0:	f043 0210 	orr.w	r2, r3, #16
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80050b4:	e01e      	b.n	80050f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d007      	beq.n	80050d4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0220 	orr.w	r2, r2, #32
 80050e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0202 	orr.w	r2, r2, #2
 80050f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	080053a9 	.word	0x080053a9
 800510c:	08005251 	.word	0x08005251
 8005110:	080053c5 	.word	0x080053c5
 8005114:	080052fb 	.word	0x080052fb
 8005118:	080053e1 	.word	0x080053e1

0800511c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051b6:	f7fc fbaf 	bl	8001918 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ca:	d03b      	beq.n	8005244 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0220 	bic.w	r2, r2, #32
 80051da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0202 	bic.w	r2, r2, #2
 80051ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	2164      	movs	r1, #100	; 0x64
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f000 fa87 	bl	8005704 <SPI_EndRxTxTransaction>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005200:	f043 0220 	orr.w	r2, r3, #32
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005210:	2300      	movs	r3, #0
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2200      	movs	r2, #0
 800522a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800523c:	6978      	ldr	r0, [r7, #20]
 800523e:	f7ff ffa9 	bl	8005194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005242:	e002      	b.n	800524a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005244:	6978      	ldr	r0, [r7, #20]
 8005246:	f7ff ff69 	bl	800511c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800525e:	f7fc fb5b 	bl	8001918 <HAL_GetTick>
 8005262:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	d03c      	beq.n	80052ee <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0220 	bic.w	r2, r2, #32
 8005282:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10d      	bne.n	80052a8 <SPI_DMAReceiveCplt+0x58>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005294:	d108      	bne.n	80052a8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0203 	bic.w	r2, r2, #3
 80052a4:	605a      	str	r2, [r3, #4]
 80052a6:	e007      	b.n	80052b8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0201 	bic.w	r2, r2, #1
 80052b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	2164      	movs	r1, #100	; 0x64
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f9c9 	bl	8005654 <SPI_EndRxTransaction>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff ff54 	bl	8005194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80052ec:	e002      	b.n	80052f4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff ff1e 	bl	8005130 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005308:	f7fc fb06 	bl	8001918 <HAL_GetTick>
 800530c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531c:	d030      	beq.n	8005380 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0220 	bic.w	r2, r2, #32
 800532c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	2164      	movs	r1, #100	; 0x64
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f9e6 	bl	8005704 <SPI_EndRxTxTransaction>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0203 	bic.w	r2, r2, #3
 8005358:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff ff0b 	bl	8005194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800537e:	e002      	b.n	8005386 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fedf 	bl	8005144 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff fedc 	bl	8005158 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fed8 	bl	800516c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fed4 	bl	8005180 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053d8:	bf00      	nop
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0203 	bic.w	r2, r2, #3
 80053fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005402:	f043 0210 	orr.w	r2, r3, #16
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff febe 	bl	8005194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005430:	f7fc fa72 	bl	8001918 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	4413      	add	r3, r2
 800543e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005440:	f7fc fa6a 	bl	8001918 <HAL_GetTick>
 8005444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	015b      	lsls	r3, r3, #5
 800544c:	0d1b      	lsrs	r3, r3, #20
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005456:	e054      	b.n	8005502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545e:	d050      	beq.n	8005502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005460:	f7fc fa5a 	bl	8001918 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	429a      	cmp	r2, r3
 800546e:	d902      	bls.n	8005476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d13d      	bne.n	80054f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548e:	d111      	bne.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005498:	d004      	beq.n	80054a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a2:	d107      	bne.n	80054b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054bc:	d10f      	bne.n	80054de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e017      	b.n	8005522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3b01      	subs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4013      	ands	r3, r2
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	429a      	cmp	r2, r3
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	429a      	cmp	r2, r3
 800551e:	d19b      	bne.n	8005458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000010 	.word	0x20000010

08005530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800553e:	f7fc f9eb 	bl	8001918 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	4413      	add	r3, r2
 800554c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800554e:	f7fc f9e3 	bl	8001918 <HAL_GetTick>
 8005552:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005554:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	00da      	lsls	r2, r3, #3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	0d1b      	lsrs	r3, r3, #20
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800556c:	e062      	b.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005574:	d109      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005588:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d050      	beq.n	8005634 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005592:	f7fc f9c1 	bl	8001918 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d902      	bls.n	80055a8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d13d      	bne.n	8005624 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c0:	d111      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	d004      	beq.n	80055d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d107      	bne.n	80055e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ee:	d10f      	bne.n	8005610 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e010      	b.n	8005646 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3b01      	subs	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d194      	bne.n	800556e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000010 	.word	0x20000010

08005654 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005668:	d111      	bne.n	800568e <SPI_EndRxTransaction+0x3a>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005672:	d004      	beq.n	800567e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d107      	bne.n	800568e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff fec1 	bl	8005420 <SPI_WaitFlagStateUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a8:	f043 0220 	orr.w	r2, r3, #32
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e023      	b.n	80056fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056bc:	d11d      	bne.n	80056fa <SPI_EndRxTransaction+0xa6>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d004      	beq.n	80056d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d0:	d113      	bne.n	80056fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff26 	bl	8005530 <SPI_WaitFifoStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e000      	b.n	80056fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2200      	movs	r2, #0
 8005718:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff ff07 	bl	8005530 <SPI_WaitFifoStateUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e027      	b.n	8005788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2200      	movs	r2, #0
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fe6c 	bl	8005420 <SPI_WaitFlagStateUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d007      	beq.n	800575e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	f043 0220 	orr.w	r2, r3, #32
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e014      	b.n	8005788 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fee0 	bl	8005530 <SPI_WaitFifoStateUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e000      	b.n	8005788 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e040      	b.n	8005824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fb ff20 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2224      	movs	r2, #36	; 0x24
 80057bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0201 	bic.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa56 	bl	8005c80 <UART_SetConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e022      	b.n	8005824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fcaa 	bl	8006140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800580a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0201 	orr.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fd31 	bl	8006284 <UART_CheckIdleState>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005852:	4013      	ands	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d113      	bne.n	8005884 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00e      	beq.n	8005884 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d009      	beq.n	8005884 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 81cd 	beq.w	8005c14 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
      }
      return;
 8005882:	e1c7      	b.n	8005c14 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 80e3 	beq.w	8005a52 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	4ba5      	ldr	r3, [pc, #660]	; (8005b30 <HAL_UART_IRQHandler+0x304>)
 800589a:	4013      	ands	r3, r2
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80d8 	beq.w	8005a52 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d010      	beq.n	80058ce <HAL_UART_IRQHandler+0xa2>
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2201      	movs	r2, #1
 80058bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c4:	f043 0201 	orr.w	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d010      	beq.n	80058fa <HAL_UART_IRQHandler+0xce>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2202      	movs	r2, #2
 80058e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f0:	f043 0204 	orr.w	r2, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <HAL_UART_IRQHandler+0xfa>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2204      	movs	r2, #4
 8005914:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591c:	f043 0202 	orr.w	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d015      	beq.n	800595c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2208      	movs	r2, #8
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005952:	f043 0208 	orr.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_UART_IRQHandler+0x15e>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005980:	f043 0220 	orr.w	r2, r3, #32
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8141 	beq.w	8005c18 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00c      	beq.n	80059ba <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d004      	beq.n	80059da <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d031      	beq.n	8005a3e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fd17 	bl	800640e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d123      	bne.n	8005a36 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_UART_IRQHandler+0x308>)
 8005a0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fc fe16 	bl	8002644 <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d017      	beq.n	8005a4e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00f      	b.n	8005a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f906 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00b      	b.n	8005a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f902 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e007      	b.n	8005a4e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8fe 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005a4c:	e0e4      	b.n	8005c18 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	bf00      	nop
    return;
 8005a50:	e0e2      	b.n	8005c18 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	f040 80a7 	bne.w	8005baa <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a1 	beq.w	8005baa <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 809b 	beq.w	8005baa <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d156      	bne.n	8005b38 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005a94:	893b      	ldrh	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80c0 	beq.w	8005c1c <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005aa2:	893a      	ldrh	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	f080 80b9 	bcs.w	8005c1c <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	893a      	ldrh	r2, [r7, #8]
 8005aae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005abc:	d02a      	beq.n	8005b14 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005acc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0210 	bic.w	r2, r2, #16
 8005b08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fc fd28 	bl	8002564 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f893 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b2e:	e075      	b.n	8005c1c <HAL_UART_IRQHandler+0x3f0>
 8005b30:	04000120 	.word	0x04000120
 8005b34:	0800646d 	.word	0x0800646d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d064      	beq.n	8005c20 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8005b56:	897b      	ldrh	r3, [r7, #10]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d061      	beq.n	8005c20 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0210 	bic.w	r2, r2, #16
 8005b9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b9e:	897b      	ldrh	r3, [r7, #10]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f856 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba8:	e03a      	b.n	8005c20 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00d      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x3a4>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f84f 	bl	8005c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bce:	e02a      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	4798      	blx	r3
    }
    return;
 8005bf4:	e016      	b.n	8005c24 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00d      	beq.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fc44 	bl	8006498 <UART_EndTransmit_IT>
    return;
 8005c10:	bf00      	nop
 8005c12:	e008      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005c14:	bf00      	nop
 8005c16:	e006      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005c24:	bf00      	nop
  }

}
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4bb1      	ldr	r3, [pc, #708]	; (8005f70 <UART_SetConfig+0x2f0>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a9f      	ldr	r2, [pc, #636]	; (8005f74 <UART_SetConfig+0x2f4>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d121      	bne.n	8005d40 <UART_SetConfig+0xc0>
 8005cfc:	4b9e      	ldr	r3, [pc, #632]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d816      	bhi.n	8005d38 <UART_SetConfig+0xb8>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x90>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d21 	.word	0x08005d21
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d27 	.word	0x08005d27
 8005d1c:	08005d33 	.word	0x08005d33
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]
 8005d24:	e151      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d26:	2302      	movs	r3, #2
 8005d28:	77fb      	strb	r3, [r7, #31]
 8005d2a:	e14e      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e14b      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d32:	2308      	movs	r3, #8
 8005d34:	77fb      	strb	r3, [r7, #31]
 8005d36:	e148      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d38:	2310      	movs	r3, #16
 8005d3a:	77fb      	strb	r3, [r7, #31]
 8005d3c:	bf00      	nop
 8005d3e:	e144      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a8d      	ldr	r2, [pc, #564]	; (8005f7c <UART_SetConfig+0x2fc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d134      	bne.n	8005db4 <UART_SetConfig+0x134>
 8005d4a:	4b8b      	ldr	r3, [pc, #556]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d50:	f003 030c 	and.w	r3, r3, #12
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	d829      	bhi.n	8005dac <UART_SetConfig+0x12c>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0xe0>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005dad 	.word	0x08005dad
 8005d68:	08005dad 	.word	0x08005dad
 8005d6c:	08005dad 	.word	0x08005dad
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005dad 	.word	0x08005dad
 8005d78:	08005dad 	.word	0x08005dad
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005d9b 	.word	0x08005d9b
 8005d84:	08005dad 	.word	0x08005dad
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005dad 	.word	0x08005dad
 8005d90:	08005da7 	.word	0x08005da7
 8005d94:	2300      	movs	r3, #0
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e117      	b.n	8005fca <UART_SetConfig+0x34a>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	77fb      	strb	r3, [r7, #31]
 8005d9e:	e114      	b.n	8005fca <UART_SetConfig+0x34a>
 8005da0:	2304      	movs	r3, #4
 8005da2:	77fb      	strb	r3, [r7, #31]
 8005da4:	e111      	b.n	8005fca <UART_SetConfig+0x34a>
 8005da6:	2308      	movs	r3, #8
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e10e      	b.n	8005fca <UART_SetConfig+0x34a>
 8005dac:	2310      	movs	r3, #16
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	bf00      	nop
 8005db2:	e10a      	b.n	8005fca <UART_SetConfig+0x34a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a71      	ldr	r2, [pc, #452]	; (8005f80 <UART_SetConfig+0x300>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d120      	bne.n	8005e00 <UART_SetConfig+0x180>
 8005dbe:	4b6e      	ldr	r3, [pc, #440]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d00f      	beq.n	8005dec <UART_SetConfig+0x16c>
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d802      	bhi.n	8005dd6 <UART_SetConfig+0x156>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <UART_SetConfig+0x160>
 8005dd4:	e010      	b.n	8005df8 <UART_SetConfig+0x178>
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d005      	beq.n	8005de6 <UART_SetConfig+0x166>
 8005dda:	2b30      	cmp	r3, #48	; 0x30
 8005ddc:	d009      	beq.n	8005df2 <UART_SetConfig+0x172>
 8005dde:	e00b      	b.n	8005df8 <UART_SetConfig+0x178>
 8005de0:	2300      	movs	r3, #0
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e0f1      	b.n	8005fca <UART_SetConfig+0x34a>
 8005de6:	2302      	movs	r3, #2
 8005de8:	77fb      	strb	r3, [r7, #31]
 8005dea:	e0ee      	b.n	8005fca <UART_SetConfig+0x34a>
 8005dec:	2304      	movs	r3, #4
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e0eb      	b.n	8005fca <UART_SetConfig+0x34a>
 8005df2:	2308      	movs	r3, #8
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e0e8      	b.n	8005fca <UART_SetConfig+0x34a>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	bf00      	nop
 8005dfe:	e0e4      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5f      	ldr	r2, [pc, #380]	; (8005f84 <UART_SetConfig+0x304>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d120      	bne.n	8005e4c <UART_SetConfig+0x1cc>
 8005e0a:	4b5b      	ldr	r3, [pc, #364]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d00f      	beq.n	8005e38 <UART_SetConfig+0x1b8>
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d802      	bhi.n	8005e22 <UART_SetConfig+0x1a2>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <UART_SetConfig+0x1ac>
 8005e20:	e010      	b.n	8005e44 <UART_SetConfig+0x1c4>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d005      	beq.n	8005e32 <UART_SetConfig+0x1b2>
 8005e26:	2bc0      	cmp	r3, #192	; 0xc0
 8005e28:	d009      	beq.n	8005e3e <UART_SetConfig+0x1be>
 8005e2a:	e00b      	b.n	8005e44 <UART_SetConfig+0x1c4>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e0cb      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	77fb      	strb	r3, [r7, #31]
 8005e36:	e0c8      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	77fb      	strb	r3, [r7, #31]
 8005e3c:	e0c5      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e3e:	2308      	movs	r3, #8
 8005e40:	77fb      	strb	r3, [r7, #31]
 8005e42:	e0c2      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e44:	2310      	movs	r3, #16
 8005e46:	77fb      	strb	r3, [r7, #31]
 8005e48:	bf00      	nop
 8005e4a:	e0be      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a4d      	ldr	r2, [pc, #308]	; (8005f88 <UART_SetConfig+0x308>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d124      	bne.n	8005ea0 <UART_SetConfig+0x220>
 8005e56:	4b48      	ldr	r3, [pc, #288]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e64:	d012      	beq.n	8005e8c <UART_SetConfig+0x20c>
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d802      	bhi.n	8005e72 <UART_SetConfig+0x1f2>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <UART_SetConfig+0x200>
 8005e70:	e012      	b.n	8005e98 <UART_SetConfig+0x218>
 8005e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e76:	d006      	beq.n	8005e86 <UART_SetConfig+0x206>
 8005e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7c:	d009      	beq.n	8005e92 <UART_SetConfig+0x212>
 8005e7e:	e00b      	b.n	8005e98 <UART_SetConfig+0x218>
 8005e80:	2300      	movs	r3, #0
 8005e82:	77fb      	strb	r3, [r7, #31]
 8005e84:	e0a1      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e86:	2302      	movs	r3, #2
 8005e88:	77fb      	strb	r3, [r7, #31]
 8005e8a:	e09e      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e09b      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e92:	2308      	movs	r3, #8
 8005e94:	77fb      	strb	r3, [r7, #31]
 8005e96:	e098      	b.n	8005fca <UART_SetConfig+0x34a>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	bf00      	nop
 8005e9e:	e094      	b.n	8005fca <UART_SetConfig+0x34a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a39      	ldr	r2, [pc, #228]	; (8005f8c <UART_SetConfig+0x30c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d124      	bne.n	8005ef4 <UART_SetConfig+0x274>
 8005eaa:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	d012      	beq.n	8005ee0 <UART_SetConfig+0x260>
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d802      	bhi.n	8005ec6 <UART_SetConfig+0x246>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <UART_SetConfig+0x254>
 8005ec4:	e012      	b.n	8005eec <UART_SetConfig+0x26c>
 8005ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eca:	d006      	beq.n	8005eda <UART_SetConfig+0x25a>
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ed0:	d009      	beq.n	8005ee6 <UART_SetConfig+0x266>
 8005ed2:	e00b      	b.n	8005eec <UART_SetConfig+0x26c>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e077      	b.n	8005fca <UART_SetConfig+0x34a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e074      	b.n	8005fca <UART_SetConfig+0x34a>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e071      	b.n	8005fca <UART_SetConfig+0x34a>
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e06e      	b.n	8005fca <UART_SetConfig+0x34a>
 8005eec:	2310      	movs	r3, #16
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	bf00      	nop
 8005ef2:	e06a      	b.n	8005fca <UART_SetConfig+0x34a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a25      	ldr	r2, [pc, #148]	; (8005f90 <UART_SetConfig+0x310>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d124      	bne.n	8005f48 <UART_SetConfig+0x2c8>
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0c:	d012      	beq.n	8005f34 <UART_SetConfig+0x2b4>
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f12:	d802      	bhi.n	8005f1a <UART_SetConfig+0x29a>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d007      	beq.n	8005f28 <UART_SetConfig+0x2a8>
 8005f18:	e012      	b.n	8005f40 <UART_SetConfig+0x2c0>
 8005f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1e:	d006      	beq.n	8005f2e <UART_SetConfig+0x2ae>
 8005f20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f24:	d009      	beq.n	8005f3a <UART_SetConfig+0x2ba>
 8005f26:	e00b      	b.n	8005f40 <UART_SetConfig+0x2c0>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e04d      	b.n	8005fca <UART_SetConfig+0x34a>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	77fb      	strb	r3, [r7, #31]
 8005f32:	e04a      	b.n	8005fca <UART_SetConfig+0x34a>
 8005f34:	2304      	movs	r3, #4
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e047      	b.n	8005fca <UART_SetConfig+0x34a>
 8005f3a:	2308      	movs	r3, #8
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e044      	b.n	8005fca <UART_SetConfig+0x34a>
 8005f40:	2310      	movs	r3, #16
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	bf00      	nop
 8005f46:	e040      	b.n	8005fca <UART_SetConfig+0x34a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <UART_SetConfig+0x314>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d139      	bne.n	8005fc6 <UART_SetConfig+0x346>
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <UART_SetConfig+0x2f8>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f60:	d027      	beq.n	8005fb2 <UART_SetConfig+0x332>
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f66:	d817      	bhi.n	8005f98 <UART_SetConfig+0x318>
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01c      	beq.n	8005fa6 <UART_SetConfig+0x326>
 8005f6c:	e027      	b.n	8005fbe <UART_SetConfig+0x33e>
 8005f6e:	bf00      	nop
 8005f70:	efff69f3 	.word	0xefff69f3
 8005f74:	40011000 	.word	0x40011000
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40004400 	.word	0x40004400
 8005f80:	40004800 	.word	0x40004800
 8005f84:	40004c00 	.word	0x40004c00
 8005f88:	40005000 	.word	0x40005000
 8005f8c:	40011400 	.word	0x40011400
 8005f90:	40007800 	.word	0x40007800
 8005f94:	40007c00 	.word	0x40007c00
 8005f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9c:	d006      	beq.n	8005fac <UART_SetConfig+0x32c>
 8005f9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fa2:	d009      	beq.n	8005fb8 <UART_SetConfig+0x338>
 8005fa4:	e00b      	b.n	8005fbe <UART_SetConfig+0x33e>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	77fb      	strb	r3, [r7, #31]
 8005faa:	e00e      	b.n	8005fca <UART_SetConfig+0x34a>
 8005fac:	2302      	movs	r3, #2
 8005fae:	77fb      	strb	r3, [r7, #31]
 8005fb0:	e00b      	b.n	8005fca <UART_SetConfig+0x34a>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	77fb      	strb	r3, [r7, #31]
 8005fb6:	e008      	b.n	8005fca <UART_SetConfig+0x34a>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e005      	b.n	8005fca <UART_SetConfig+0x34a>
 8005fbe:	2310      	movs	r3, #16
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	bf00      	nop
 8005fc4:	e001      	b.n	8005fca <UART_SetConfig+0x34a>
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd2:	d15b      	bne.n	800608c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d827      	bhi.n	800602a <UART_SetConfig+0x3aa>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x360>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	0800600d 	.word	0x0800600d
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800602b 	.word	0x0800602b
 8005ff0:	0800601b 	.word	0x0800601b
 8005ff4:	0800602b 	.word	0x0800602b
 8005ff8:	0800602b 	.word	0x0800602b
 8005ffc:	0800602b 	.word	0x0800602b
 8006000:	08006023 	.word	0x08006023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fd fc6a 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 8006008:	61b8      	str	r0, [r7, #24]
        break;
 800600a:	e013      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fd fc7a 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 8006010:	61b8      	str	r0, [r7, #24]
        break;
 8006012:	e00f      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b49      	ldr	r3, [pc, #292]	; (800613c <UART_SetConfig+0x4bc>)
 8006016:	61bb      	str	r3, [r7, #24]
        break;
 8006018:	e00c      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fd fb7b 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 800601e:	61b8      	str	r0, [r7, #24]
        break;
 8006020:	e008      	b.n	8006034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006026:	61bb      	str	r3, [r7, #24]
        break;
 8006028:	e004      	b.n	8006034 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	77bb      	strb	r3, [r7, #30]
        break;
 8006032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d074      	beq.n	8006124 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	005a      	lsls	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	fbb2 f3f3 	udiv	r3, r2, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b0f      	cmp	r3, #15
 8006056:	d916      	bls.n	8006086 <UART_SetConfig+0x406>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605e:	d212      	bcs.n	8006086 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f023 030f 	bic.w	r3, r3, #15
 8006068:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	b29a      	uxth	r2, r3
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	4313      	orrs	r3, r2
 800607a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	89fa      	ldrh	r2, [r7, #14]
 8006082:	60da      	str	r2, [r3, #12]
 8006084:	e04e      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	77bb      	strb	r3, [r7, #30]
 800608a:	e04b      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800608c:	7ffb      	ldrb	r3, [r7, #31]
 800608e:	2b08      	cmp	r3, #8
 8006090:	d827      	bhi.n	80060e2 <UART_SetConfig+0x462>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <UART_SetConfig+0x418>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060e3 	.word	0x080060e3
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
 80060b8:	080060db 	.word	0x080060db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060bc:	f7fd fc0e 	bl	80038dc <HAL_RCC_GetPCLK1Freq>
 80060c0:	61b8      	str	r0, [r7, #24]
        break;
 80060c2:	e013      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060c4:	f7fd fc1e 	bl	8003904 <HAL_RCC_GetPCLK2Freq>
 80060c8:	61b8      	str	r0, [r7, #24]
        break;
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	; (800613c <UART_SetConfig+0x4bc>)
 80060ce:	61bb      	str	r3, [r7, #24]
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d2:	f7fd fb1f 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80060d6:	61b8      	str	r0, [r7, #24]
        break;
 80060d8:	e008      	b.n	80060ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	61bb      	str	r3, [r7, #24]
        break;
 80060e0:	e004      	b.n	80060ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	77bb      	strb	r3, [r7, #30]
        break;
 80060ea:	bf00      	nop
    }

    if (pclk != 0U)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d018      	beq.n	8006124 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	085a      	lsrs	r2, r3, #1
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d908      	bls.n	8006120 <UART_SetConfig+0x4a0>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d204      	bcs.n	8006120 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	60da      	str	r2, [r3, #12]
 800611e:	e001      	b.n	8006124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006130:	7fbb      	ldrb	r3, [r7, #30]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3720      	adds	r7, #32
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	00f42400 	.word	0x00f42400

08006140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01a      	beq.n	8006256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800623e:	d10a      	bne.n	8006256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006294:	f7fb fb40 	bl	8001918 <HAL_GetTick>
 8006298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d10e      	bne.n	80062c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f82d 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e023      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d10e      	bne.n	80062f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f817 	bl	8006316 <UART_WaitOnFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e00d      	b.n	800630e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006326:	e05e      	b.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d05a      	beq.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006330:	f7fb faf2 	bl	8001918 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <UART_WaitOnFlagUntilTimeout+0x30>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d11b      	bne.n	800637e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006354:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0201 	bic.w	r2, r2, #1
 8006364:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2220      	movs	r2, #32
 8006370:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e043      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d02c      	beq.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639a:	d124      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e00f      	b.n	8006406 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4013      	ands	r3, r2
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	bf0c      	ite	eq
 80063f6:	2301      	moveq	r3, #1
 80063f8:	2300      	movne	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	429a      	cmp	r2, r3
 8006402:	d091      	beq.n	8006328 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006424:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 0201 	bic.w	r2, r2, #1
 8006434:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0210 	bic.w	r2, r2, #16
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fbd8 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006490:	bf00      	nop
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fbb5 	bl	8005c2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	4603      	mov	r3, r0
 80064d2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064dc:	2b84      	cmp	r3, #132	; 0x84
 80064de:	d005      	beq.n	80064ec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4413      	add	r3, r2
 80064e8:	3303      	adds	r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064ec:	68fb      	ldr	r3, [r7, #12]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064fe:	f000 ff75 	bl	80073ec <vTaskStartScheduler>
  
  return osOK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	bd80      	pop	{r7, pc}

08006508 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af04      	add	r7, sp, #16
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d020      	beq.n	800655c <osThreadCreate+0x54>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01c      	beq.n	800655c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685c      	ldr	r4, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681d      	ldr	r5, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691e      	ldr	r6, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff ffc8 	bl	80064ca <makeFreeRtosPriority>
 800653a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006544:	9202      	str	r2, [sp, #8]
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	9100      	str	r1, [sp, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	4632      	mov	r2, r6
 800654e:	4629      	mov	r1, r5
 8006550:	4620      	mov	r0, r4
 8006552:	f000 fd7d 	bl	8007050 <xTaskCreateStatic>
 8006556:	4603      	mov	r3, r0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e01c      	b.n	8006596 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685c      	ldr	r4, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006568:	b29e      	uxth	r6, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff ffaa 	bl	80064ca <makeFreeRtosPriority>
 8006576:	4602      	mov	r2, r0
 8006578:	f107 030c 	add.w	r3, r7, #12
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	4632      	mov	r2, r6
 8006584:	4629      	mov	r1, r5
 8006586:	4620      	mov	r0, r4
 8006588:	f000 fdc2 	bl	8007110 <xTaskCreate>
 800658c:	4603      	mov	r3, r0
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	e000      	b.n	8006598 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006596:	68fb      	ldr	r3, [r7, #12]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <osDelay+0x16>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	e000      	b.n	80065b8 <osDelay+0x18>
 80065b6:	2301      	movs	r3, #1
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fee1 	bl	8007380 <vTaskDelay>
  
  return osOK;
 80065be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d010      	beq.n	80065fc <osSemaphoreCreate+0x34>
    if (count == 1) {
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10b      	bne.n	80065f8 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	2303      	movs	r3, #3
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	2001      	movs	r0, #1
 80065f0:	f000 f93c 	bl	800686c <xQueueGenericCreateStatic>
 80065f4:	4603      	mov	r3, r0
 80065f6:	e016      	b.n	8006626 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e014      	b.n	8006626 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d110      	bne.n	8006624 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006602:	2203      	movs	r2, #3
 8006604:	2100      	movs	r1, #0
 8006606:	2001      	movs	r0, #1
 8006608:	f000 f9ad 	bl	8006966 <xQueueGenericCreate>
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <osSemaphoreCreate+0x58>
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fa04 	bl	8006a28 <xQueueGenericSend>
      return sema;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	e000      	b.n	8006626 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006624:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f103 0208 	add.w	r2, r3, #8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f04f 32ff 	mov.w	r2, #4294967295
 8006646:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f103 0208 	add.w	r2, r3, #8
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f103 0208 	add.w	r2, r3, #8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e6:	d103      	bne.n	80066f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	e00c      	b.n	800670a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3308      	adds	r3, #8
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e002      	b.n	80066fe <vListInsert+0x2e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	d2f6      	bcs.n	80066f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6892      	ldr	r2, [r2, #8]
 8006758:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6852      	ldr	r2, [r2, #4]
 8006762:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	429a      	cmp	r2, r3
 800676c:	d103      	bne.n	8006776 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	b672      	cpsid	i
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	b662      	cpsie	i
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	e7fe      	b.n	80067c2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80067c4:	f001 fd60 	bl	8008288 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	68f9      	ldr	r1, [r7, #12]
 80067d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	441a      	add	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	3b01      	subs	r3, #1
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	22ff      	movs	r2, #255	; 0xff
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d114      	bne.n	8006844 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d01a      	beq.n	8006858 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3310      	adds	r3, #16
 8006826:	4618      	mov	r0, r3
 8006828:	f001 f82a 	bl	8007880 <xTaskRemoveFromEventList>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d012      	beq.n	8006858 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <xQueueGenericReset+0xd0>)
 8006834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	e009      	b.n	8006858 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3310      	adds	r3, #16
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fef0 	bl	800662e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3324      	adds	r3, #36	; 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff feeb 	bl	800662e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006858:	f001 fd48 	bl	80082ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800685c:	2301      	movs	r3, #1
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08e      	sub	sp, #56	; 0x38
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <xQueueGenericCreateStatic+0x2c>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	b672      	cpsid	i
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	b662      	cpsie	i
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28
 8006896:	e7fe      	b.n	8006896 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <xQueueGenericCreateStatic+0x4a>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	b672      	cpsid	i
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	b662      	cpsie	i
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <xQueueGenericCreateStatic+0x56>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <xQueueGenericCreateStatic+0x5a>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <xQueueGenericCreateStatic+0x5c>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGenericCreateStatic+0x78>
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	b672      	cpsid	i
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	b662      	cpsie	i
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	e7fe      	b.n	80068e2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d102      	bne.n	80068f0 <xQueueGenericCreateStatic+0x84>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <xQueueGenericCreateStatic+0x88>
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <xQueueGenericCreateStatic+0x8a>
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10b      	bne.n	8006912 <xQueueGenericCreateStatic+0xa6>
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	b672      	cpsid	i
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	b662      	cpsie	i
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e7fe      	b.n	8006910 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006912:	2348      	movs	r3, #72	; 0x48
 8006914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b48      	cmp	r3, #72	; 0x48
 800691a:	d00b      	beq.n	8006934 <xQueueGenericCreateStatic+0xc8>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	b672      	cpsid	i
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	b662      	cpsie	i
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e7fe      	b.n	8006932 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006934:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006948:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f846 	bl	80069e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3730      	adds	r7, #48	; 0x30
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006966:	b580      	push	{r7, lr}
 8006968:	b08a      	sub	sp, #40	; 0x28
 800696a:	af02      	add	r7, sp, #8
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	4613      	mov	r3, r2
 8006972:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10b      	bne.n	8006992 <xQueueGenericCreate+0x2c>
 800697a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697e:	b672      	cpsid	i
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	b662      	cpsie	i
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e7fe      	b.n	8006990 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006998:	2300      	movs	r3, #0
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	e004      	b.n	80069a8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	3348      	adds	r3, #72	; 0x48
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fd4b 	bl	8008448 <pvPortMalloc>
 80069b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	3348      	adds	r3, #72	; 0x48
 80069c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069cc:	79fa      	ldrb	r2, [r7, #7]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f805 	bl	80069e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069de:	69bb      	ldr	r3, [r7, #24]
	}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a16:	2101      	movs	r1, #1
 8006a18:	69b8      	ldr	r0, [r7, #24]
 8006a1a:	f7ff febd 	bl	8006798 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	; 0x38
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a36:	2300      	movs	r3, #0
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10b      	bne.n	8006a5c <xQueueGenericSend+0x34>
 8006a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a48:	b672      	cpsid	i
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	b662      	cpsie	i
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5a:	e7fe      	b.n	8006a5a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <xQueueGenericSend+0x42>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <xQueueGenericSend+0x46>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <xQueueGenericSend+0x48>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10b      	bne.n	8006a8c <xQueueGenericSend+0x64>
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8a:	e7fe      	b.n	8006a8a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d103      	bne.n	8006a9a <xQueueGenericSend+0x72>
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <xQueueGenericSend+0x76>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueGenericSend+0x78>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <xQueueGenericSend+0x94>
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	b672      	cpsid	i
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	b662      	cpsie	i
 8006ab8:	623b      	str	r3, [r7, #32]
 8006aba:	e7fe      	b.n	8006aba <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006abc:	f001 f89e 	bl	8007bfc <xTaskGetSchedulerState>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d102      	bne.n	8006acc <xQueueGenericSend+0xa4>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <xQueueGenericSend+0xa8>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <xQueueGenericSend+0xaa>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <xQueueGenericSend+0xc6>
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	b672      	cpsid	i
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	b662      	cpsie	i
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aee:	f001 fbcb 	bl	8008288 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <xQueueGenericSend+0xdc>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d129      	bne.n	8006b58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b0a:	f000 f9b7 	bl	8006e7c <prvCopyDataToQueue>
 8006b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	3324      	adds	r3, #36	; 0x24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 feaf 	bl	8007880 <xTaskRemoveFromEventList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b28:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <xQueueGenericSend+0x200>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e00a      	b.n	8006b50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b40:	4b39      	ldr	r3, [pc, #228]	; (8006c28 <xQueueGenericSend+0x200>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b50:	f001 fbcc 	bl	80082ec <vPortExitCritical>
				return pdPASS;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e063      	b.n	8006c20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b5e:	f001 fbc5 	bl	80082ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e05c      	b.n	8006c20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d106      	bne.n	8006b7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fee9 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b7a:	f001 fbb7 	bl	80082ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b7e:	f000 fc97 	bl	80074b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b82:	f001 fb81 	bl	8008288 <vPortEnterCritical>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSend+0x174>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d103      	bne.n	8006bb2 <xQueueGenericSend+0x18a>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb2:	f001 fb9b 	bl	80082ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bb6:	1d3a      	adds	r2, r7, #4
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fed8 	bl	8007974 <xTaskCheckForTimeOut>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d124      	bne.n	8006c14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bcc:	f000 fa28 	bl	8007020 <prvIsQueueFull>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d018      	beq.n	8006c08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	3310      	adds	r3, #16
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fe28 	bl	8007834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be6:	f000 f9b3 	bl	8006f50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bea:	f000 fc6f 	bl	80074cc <xTaskResumeAll>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f47f af7c 	bne.w	8006aee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <xQueueGenericSend+0x200>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e772      	b.n	8006aee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0a:	f000 f9a1 	bl	8006f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c0e:	f000 fc5d 	bl	80074cc <xTaskResumeAll>
 8006c12:	e76c      	b.n	8006aee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c16:	f000 f99b 	bl	8006f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c1a:	f000 fc57 	bl	80074cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3738      	adds	r7, #56	; 0x38
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	; 0x38
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <xQueueSemaphoreTake+0x34>
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	b672      	cpsid	i
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	b662      	cpsie	i
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	e7fe      	b.n	8006c5e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <xQueueSemaphoreTake+0x54>
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	b672      	cpsid	i
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	b662      	cpsie	i
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e7fe      	b.n	8006c7e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c80:	f000 ffbc 	bl	8007bfc <xTaskGetSchedulerState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <xQueueSemaphoreTake+0x64>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <xQueueSemaphoreTake+0x68>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <xQueueSemaphoreTake+0x6a>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <xQueueSemaphoreTake+0x86>
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	b672      	cpsid	i
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	b662      	cpsie	i
 8006cae:	61bb      	str	r3, [r7, #24]
 8006cb0:	e7fe      	b.n	8006cb0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cb2:	f001 fae9 	bl	8008288 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d024      	beq.n	8006d0c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006cd2:	f001 f955 	bl	8007f80 <pvTaskIncrementMutexHeldCount>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00f      	beq.n	8006d04 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fdc9 	bl	8007880 <xTaskRemoveFromEventList>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cf4:	4b54      	ldr	r3, [pc, #336]	; (8006e48 <xQueueSemaphoreTake+0x21c>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d04:	f001 faf2 	bl	80082ec <vPortExitCritical>
				return pdPASS;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e098      	b.n	8006e3e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d112      	bne.n	8006d38 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <xQueueSemaphoreTake+0x104>
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e7fe      	b.n	8006d2e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d30:	f001 fadc 	bl	80082ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e082      	b.n	8006e3e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fe00 	bl	8007948 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d4c:	f001 face 	bl	80082ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d50:	f000 fbae 	bl	80074b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d54:	f001 fa98 	bl	8008288 <vPortEnterCritical>
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d5e:	b25b      	sxtb	r3, r3
 8006d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d64:	d103      	bne.n	8006d6e <xQueueSemaphoreTake+0x142>
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7a:	d103      	bne.n	8006d84 <xQueueSemaphoreTake+0x158>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d84:	f001 fab2 	bl	80082ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d88:	463a      	mov	r2, r7
 8006d8a:	f107 030c 	add.w	r3, r7, #12
 8006d8e:	4611      	mov	r1, r2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fdef 	bl	8007974 <xTaskCheckForTimeOut>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d132      	bne.n	8006e02 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d9e:	f000 f929 	bl	8006ff4 <prvIsQueueEmpty>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d026      	beq.n	8006df6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006db0:	f001 fa6a 	bl	8008288 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 ff3d 	bl	8007c38 <xTaskPriorityInherit>
 8006dbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006dc0:	f001 fa94 	bl	80082ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	4611      	mov	r1, r2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fd31 	bl	8007834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dd4:	f000 f8bc 	bl	8006f50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dd8:	f000 fb78 	bl	80074cc <xTaskResumeAll>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f af67 	bne.w	8006cb2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006de4:	4b18      	ldr	r3, [pc, #96]	; (8006e48 <xQueueSemaphoreTake+0x21c>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	e75d      	b.n	8006cb2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df8:	f000 f8aa 	bl	8006f50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dfc:	f000 fb66 	bl	80074cc <xTaskResumeAll>
 8006e00:	e757      	b.n	8006cb2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e04:	f000 f8a4 	bl	8006f50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e08:	f000 fb60 	bl	80074cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0e:	f000 f8f1 	bl	8006ff4 <prvIsQueueEmpty>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f43f af4c 	beq.w	8006cb2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00d      	beq.n	8006e3c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006e20:	f001 fa32 	bl	8008288 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e26:	f000 f811 	bl	8006e4c <prvGetDisinheritPriorityAfterTimeout>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 f808 	bl	8007e48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e38:	f001 fa58 	bl	80082ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3738      	adds	r7, #56	; 0x38
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d006      	beq.n	8006e6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f1c3 0307 	rsb	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e001      	b.n	8006e6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10d      	bne.n	8006eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d14d      	bne.n	8006f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 ff46 	bl	8007d38 <xTaskPriorityDisinherit>
 8006eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	e043      	b.n	8006f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d119      	bne.n	8006ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6858      	ldr	r0, [r3, #4]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	f001 fcc8 	bl	800885c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d32b      	bcc.n	8006f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	e026      	b.n	8006f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68d8      	ldr	r0, [r3, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	f001 fcae 	bl	800885c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	425b      	negs	r3, r3
 8006f0a:	441a      	add	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d207      	bcs.n	8006f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	425b      	negs	r3, r3
 8006f26:	441a      	add	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d105      	bne.n	8006f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f46:	697b      	ldr	r3, [r7, #20]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f58:	f001 f996 	bl	8008288 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f64:	e011      	b.n	8006f8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d012      	beq.n	8006f94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3324      	adds	r3, #36	; 0x24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fc84 	bl	8007880 <xTaskRemoveFromEventList>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f7e:	f000 fd5d 	bl	8007a3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dce9      	bgt.n	8006f66 <prvUnlockQueue+0x16>
 8006f92:	e000      	b.n	8006f96 <prvUnlockQueue+0x46>
					break;
 8006f94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	22ff      	movs	r2, #255	; 0xff
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f9e:	f001 f9a5 	bl	80082ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fa2:	f001 f971 	bl	8008288 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fae:	e011      	b.n	8006fd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d012      	beq.n	8006fde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3310      	adds	r3, #16
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fc5f 	bl	8007880 <xTaskRemoveFromEventList>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fc8:	f000 fd38 	bl	8007a3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dce9      	bgt.n	8006fb0 <prvUnlockQueue+0x60>
 8006fdc:	e000      	b.n	8006fe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	22ff      	movs	r2, #255	; 0xff
 8006fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fe8:	f001 f980 	bl	80082ec <vPortExitCritical>
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ffc:	f001 f944 	bl	8008288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d102      	bne.n	800700e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e001      	b.n	8007012 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007012:	f001 f96b 	bl	80082ec <vPortExitCritical>

	return xReturn;
 8007016:	68fb      	ldr	r3, [r7, #12]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007028:	f001 f92e 	bl	8008288 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	429a      	cmp	r2, r3
 8007036:	d102      	bne.n	800703e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e001      	b.n	8007042 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007042:	f001 f953 	bl	80082ec <vPortExitCritical>

	return xReturn;
 8007046:	68fb      	ldr	r3, [r7, #12]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08e      	sub	sp, #56	; 0x38
 8007054:	af04      	add	r7, sp, #16
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800705e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <xTaskCreateStatic+0x2c>
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	b672      	cpsid	i
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	b662      	cpsie	i
 8007078:	623b      	str	r3, [r7, #32]
 800707a:	e7fe      	b.n	800707a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10b      	bne.n	800709a <xTaskCreateStatic+0x4a>
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	b672      	cpsid	i
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	b662      	cpsie	i
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e7fe      	b.n	8007098 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800709a:	2354      	movs	r3, #84	; 0x54
 800709c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b54      	cmp	r3, #84	; 0x54
 80070a2:	d00b      	beq.n	80070bc <xTaskCreateStatic+0x6c>
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	b672      	cpsid	i
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	b662      	cpsie	i
 80070b8:	61bb      	str	r3, [r7, #24]
 80070ba:	e7fe      	b.n	80070ba <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01e      	beq.n	8007102 <xTaskCreateStatic+0xb2>
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01b      	beq.n	8007102 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070dc:	2300      	movs	r3, #0
 80070de:	9303      	str	r3, [sp, #12]
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	9302      	str	r3, [sp, #8]
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f850 	bl	800719a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070fc:	f000 f8d6 	bl	80072ac <prvAddNewTaskToReadyList>
 8007100:	e001      	b.n	8007106 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007106:	697b      	ldr	r3, [r7, #20]
	}
 8007108:	4618      	mov	r0, r3
 800710a:	3728      	adds	r7, #40	; 0x28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	; 0x30
 8007114:	af04      	add	r7, sp, #16
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	4613      	mov	r3, r2
 800711e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4618      	mov	r0, r3
 8007126:	f001 f98f 	bl	8008448 <pvPortMalloc>
 800712a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007132:	2054      	movs	r0, #84	; 0x54
 8007134:	f001 f988 	bl	8008448 <pvPortMalloc>
 8007138:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
 8007146:	e005      	b.n	8007154 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f001 fa45 	bl	80085d8 <vPortFree>
 800714e:	e001      	b.n	8007154 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d017      	beq.n	800718a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	2300      	movs	r3, #0
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	9302      	str	r3, [sp, #8]
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f80e 	bl	800719a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800717e:	69f8      	ldr	r0, [r7, #28]
 8007180:	f000 f894 	bl	80072ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007184:	2301      	movs	r3, #1
 8007186:	61bb      	str	r3, [r7, #24]
 8007188:	e002      	b.n	8007190 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007190:	69bb      	ldr	r3, [r7, #24]
	}
 8007192:	4618      	mov	r0, r3
 8007194:	3720      	adds	r7, #32
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b088      	sub	sp, #32
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
 80071a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80071b2:	440b      	add	r3, r1
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	f023 0307 	bic.w	r3, r3, #7
 80071c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <prvInitialiseNewTask+0x4a>
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	b672      	cpsid	i
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	b662      	cpsie	i
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e7fe      	b.n	80071e2 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01f      	beq.n	800722a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e012      	b.n	8007216 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	7819      	ldrb	r1, [r3, #0]
 80071f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	3334      	adds	r3, #52	; 0x34
 8007200:	460a      	mov	r2, r1
 8007202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d006      	beq.n	800721e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2b0f      	cmp	r3, #15
 800721a:	d9e9      	bls.n	80071f0 <prvInitialiseNewTask+0x56>
 800721c:	e000      	b.n	8007220 <prvInitialiseNewTask+0x86>
			{
				break;
 800721e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007228:	e003      	b.n	8007232 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	2b06      	cmp	r3, #6
 8007236:	d901      	bls.n	800723c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007238:	2306      	movs	r3, #6
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007246:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	2200      	movs	r2, #0
 800724c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	3304      	adds	r3, #4
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fa0b 	bl	800666e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	3318      	adds	r3, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fa06 	bl	800666e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	f1c3 0207 	rsb	r2, r3, #7
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	2200      	movs	r2, #0
 800727c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	69b8      	ldr	r0, [r7, #24]
 800728c:	f000 fef2 	bl	8008074 <pxPortInitialiseStack>
 8007290:	4602      	mov	r2, r0
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d002      	beq.n	80072a2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a2:	bf00      	nop
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072b4:	f000 ffe8 	bl	8008288 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072b8:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <prvAddNewTaskToReadyList+0xb8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3301      	adds	r3, #1
 80072be:	4a29      	ldr	r2, [pc, #164]	; (8007364 <prvAddNewTaskToReadyList+0xb8>)
 80072c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072c2:	4b29      	ldr	r3, [pc, #164]	; (8007368 <prvAddNewTaskToReadyList+0xbc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072ca:	4a27      	ldr	r2, [pc, #156]	; (8007368 <prvAddNewTaskToReadyList+0xbc>)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072d0:	4b24      	ldr	r3, [pc, #144]	; (8007364 <prvAddNewTaskToReadyList+0xb8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d110      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072d8:	f000 fbd4 	bl	8007a84 <prvInitialiseTaskLists>
 80072dc:	e00d      	b.n	80072fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072de:	4b23      	ldr	r3, [pc, #140]	; (800736c <prvAddNewTaskToReadyList+0xc0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <prvAddNewTaskToReadyList+0xbc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d802      	bhi.n	80072fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072f4:	4a1c      	ldr	r2, [pc, #112]	; (8007368 <prvAddNewTaskToReadyList+0xbc>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <prvAddNewTaskToReadyList+0xc4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	4a1b      	ldr	r2, [pc, #108]	; (8007370 <prvAddNewTaskToReadyList+0xc4>)
 8007302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	2201      	movs	r2, #1
 800730a:	409a      	lsls	r2, r3
 800730c:	4b19      	ldr	r3, [pc, #100]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4313      	orrs	r3, r2
 8007312:	4a18      	ldr	r2, [pc, #96]	; (8007374 <prvAddNewTaskToReadyList+0xc8>)
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <prvAddNewTaskToReadyList+0xcc>)
 8007324:	441a      	add	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7ff f9ab 	bl	8006688 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007332:	f000 ffdb 	bl	80082ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007336:	4b0d      	ldr	r3, [pc, #52]	; (800736c <prvAddNewTaskToReadyList+0xc0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00e      	beq.n	800735c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800733e:	4b0a      	ldr	r3, [pc, #40]	; (8007368 <prvAddNewTaskToReadyList+0xbc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	429a      	cmp	r2, r3
 800734a:	d207      	bcs.n	800735c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <prvAddNewTaskToReadyList+0xd0>)
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	2000058c 	.word	0x2000058c
 8007368:	2000048c 	.word	0x2000048c
 800736c:	20000598 	.word	0x20000598
 8007370:	200005a8 	.word	0x200005a8
 8007374:	20000594 	.word	0x20000594
 8007378:	20000490 	.word	0x20000490
 800737c:	e000ed04 	.word	0xe000ed04

08007380 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d018      	beq.n	80073c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <vTaskDelay+0x64>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00b      	beq.n	80073b2 <vTaskDelay+0x32>
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	b672      	cpsid	i
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	b662      	cpsie	i
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	e7fe      	b.n	80073b0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80073b2:	f000 f87d 	bl	80074b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073b6:	2100      	movs	r1, #0
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fdf5 	bl	8007fa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073be:	f000 f885 	bl	80074cc <xTaskResumeAll>
 80073c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d107      	bne.n	80073da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <vTaskDelay+0x68>)
 80073cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073da:	bf00      	nop
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	200005b4 	.word	0x200005b4
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08a      	sub	sp, #40	; 0x28
 80073f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073fa:	463a      	mov	r2, r7
 80073fc:	1d39      	adds	r1, r7, #4
 80073fe:	f107 0308 	add.w	r3, r7, #8
 8007402:	4618      	mov	r0, r3
 8007404:	f7f9 fc42 	bl	8000c8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007408:	6839      	ldr	r1, [r7, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	9202      	str	r2, [sp, #8]
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	2300      	movs	r3, #0
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	2300      	movs	r3, #0
 8007418:	460a      	mov	r2, r1
 800741a:	491f      	ldr	r1, [pc, #124]	; (8007498 <vTaskStartScheduler+0xac>)
 800741c:	481f      	ldr	r0, [pc, #124]	; (800749c <vTaskStartScheduler+0xb0>)
 800741e:	f7ff fe17 	bl	8007050 <xTaskCreateStatic>
 8007422:	4602      	mov	r2, r0
 8007424:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <vTaskStartScheduler+0xb4>)
 8007426:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <vTaskStartScheduler+0xb4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e001      	b.n	800743a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007436:	2300      	movs	r3, #0
 8007438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d117      	bne.n	8007470 <vTaskStartScheduler+0x84>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	b672      	cpsid	i
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	b662      	cpsie	i
 8007454:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <vTaskStartScheduler+0xb8>)
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <vTaskStartScheduler+0xbc>)
 8007460:	2201      	movs	r2, #1
 8007462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <vTaskStartScheduler+0xc0>)
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800746a:	f000 fe91 	bl	8008190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800746e:	e00f      	b.n	8007490 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d10b      	bne.n	8007490 <vTaskStartScheduler+0xa4>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	b672      	cpsid	i
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	b662      	cpsie	i
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e7fe      	b.n	800748e <vTaskStartScheduler+0xa2>
}
 8007490:	bf00      	nop
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	0800c198 	.word	0x0800c198
 800749c:	08007a55 	.word	0x08007a55
 80074a0:	200005b0 	.word	0x200005b0
 80074a4:	200005ac 	.word	0x200005ac
 80074a8:	20000598 	.word	0x20000598
 80074ac:	20000590 	.word	0x20000590

080074b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <vTaskSuspendAll+0x18>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <vTaskSuspendAll+0x18>)
 80074bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80074be:	bf00      	nop
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	200005b4 	.word	0x200005b4

080074cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074da:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <xTaskResumeAll+0x118>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <xTaskResumeAll+0x2e>
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	b672      	cpsid	i
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	b662      	cpsie	i
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	e7fe      	b.n	80074f8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074fa:	f000 fec5 	bl	8008288 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074fe:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <xTaskResumeAll+0x118>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	4a37      	ldr	r2, [pc, #220]	; (80075e4 <xTaskResumeAll+0x118>)
 8007506:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007508:	4b36      	ldr	r3, [pc, #216]	; (80075e4 <xTaskResumeAll+0x118>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d161      	bne.n	80075d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007510:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <xTaskResumeAll+0x11c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d05d      	beq.n	80075d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007518:	e02e      	b.n	8007578 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800751a:	4b34      	ldr	r3, [pc, #208]	; (80075ec <xTaskResumeAll+0x120>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3318      	adds	r3, #24
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff f90b 	bl	8006742 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff f906 	bl	8006742 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753a:	2201      	movs	r2, #1
 800753c:	409a      	lsls	r2, r3
 800753e:	4b2c      	ldr	r3, [pc, #176]	; (80075f0 <xTaskResumeAll+0x124>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	4a2a      	ldr	r2, [pc, #168]	; (80075f0 <xTaskResumeAll+0x124>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <xTaskResumeAll+0x128>)
 8007556:	441a      	add	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7ff f892 	bl	8006688 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <xTaskResumeAll+0x12c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007572:	4b22      	ldr	r3, [pc, #136]	; (80075fc <xTaskResumeAll+0x130>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007578:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <xTaskResumeAll+0x120>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1cc      	bne.n	800751a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007586:	f000 fb19 	bl	8007bbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <xTaskResumeAll+0x134>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007596:	f000 f837 	bl	8007608 <xTaskIncrementTick>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075a0:	4b16      	ldr	r3, [pc, #88]	; (80075fc <xTaskResumeAll+0x130>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f1      	bne.n	8007596 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <xTaskResumeAll+0x134>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <xTaskResumeAll+0x130>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075c4:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <xTaskResumeAll+0x138>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075d4:	f000 fe8a 	bl	80082ec <vPortExitCritical>

	return xAlreadyYielded;
 80075d8:	68bb      	ldr	r3, [r7, #8]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200005b4 	.word	0x200005b4
 80075e8:	2000058c 	.word	0x2000058c
 80075ec:	2000054c 	.word	0x2000054c
 80075f0:	20000594 	.word	0x20000594
 80075f4:	20000490 	.word	0x20000490
 80075f8:	2000048c 	.word	0x2000048c
 80075fc:	200005a0 	.word	0x200005a0
 8007600:	2000059c 	.word	0x2000059c
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007612:	4b4f      	ldr	r3, [pc, #316]	; (8007750 <xTaskIncrementTick+0x148>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 8089 	bne.w	800772e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800761c:	4b4d      	ldr	r3, [pc, #308]	; (8007754 <xTaskIncrementTick+0x14c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007624:	4a4b      	ldr	r2, [pc, #300]	; (8007754 <xTaskIncrementTick+0x14c>)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d121      	bne.n	8007674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007630:	4b49      	ldr	r3, [pc, #292]	; (8007758 <xTaskIncrementTick+0x150>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <xTaskIncrementTick+0x4a>
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	b672      	cpsid	i
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	b662      	cpsie	i
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	e7fe      	b.n	8007650 <xTaskIncrementTick+0x48>
 8007652:	4b41      	ldr	r3, [pc, #260]	; (8007758 <xTaskIncrementTick+0x150>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	4b40      	ldr	r3, [pc, #256]	; (800775c <xTaskIncrementTick+0x154>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a3e      	ldr	r2, [pc, #248]	; (8007758 <xTaskIncrementTick+0x150>)
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	4a3e      	ldr	r2, [pc, #248]	; (800775c <xTaskIncrementTick+0x154>)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4b3e      	ldr	r3, [pc, #248]	; (8007760 <xTaskIncrementTick+0x158>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	4a3c      	ldr	r2, [pc, #240]	; (8007760 <xTaskIncrementTick+0x158>)
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	f000 faa4 	bl	8007bbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007674:	4b3b      	ldr	r3, [pc, #236]	; (8007764 <xTaskIncrementTick+0x15c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	429a      	cmp	r2, r3
 800767c:	d348      	bcc.n	8007710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <xTaskIncrementTick+0x150>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007688:	4b36      	ldr	r3, [pc, #216]	; (8007764 <xTaskIncrementTick+0x15c>)
 800768a:	f04f 32ff 	mov.w	r2, #4294967295
 800768e:	601a      	str	r2, [r3, #0]
					break;
 8007690:	e03e      	b.n	8007710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007692:	4b31      	ldr	r3, [pc, #196]	; (8007758 <xTaskIncrementTick+0x150>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d203      	bcs.n	80076b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076aa:	4a2e      	ldr	r2, [pc, #184]	; (8007764 <xTaskIncrementTick+0x15c>)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076b0:	e02e      	b.n	8007710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff f843 	bl	8006742 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3318      	adds	r3, #24
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff f83a 	bl	8006742 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	2201      	movs	r2, #1
 80076d4:	409a      	lsls	r2, r3
 80076d6:	4b24      	ldr	r3, [pc, #144]	; (8007768 <xTaskIncrementTick+0x160>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4313      	orrs	r3, r2
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <xTaskIncrementTick+0x160>)
 80076de:	6013      	str	r3, [r2, #0]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4613      	mov	r3, r2
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4a1f      	ldr	r2, [pc, #124]	; (800776c <xTaskIncrementTick+0x164>)
 80076ee:	441a      	add	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f7fe ffc6 	bl	8006688 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4b1b      	ldr	r3, [pc, #108]	; (8007770 <xTaskIncrementTick+0x168>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	429a      	cmp	r2, r3
 8007708:	d3b9      	bcc.n	800767e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770e:	e7b6      	b.n	800767e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007710:	4b17      	ldr	r3, [pc, #92]	; (8007770 <xTaskIncrementTick+0x168>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	4915      	ldr	r1, [pc, #84]	; (800776c <xTaskIncrementTick+0x164>)
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d907      	bls.n	8007738 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007728:	2301      	movs	r3, #1
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e004      	b.n	8007738 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800772e:	4b11      	ldr	r3, [pc, #68]	; (8007774 <xTaskIncrementTick+0x16c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a0f      	ldr	r2, [pc, #60]	; (8007774 <xTaskIncrementTick+0x16c>)
 8007736:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <xTaskIncrementTick+0x170>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007744:	697b      	ldr	r3, [r7, #20]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	200005b4 	.word	0x200005b4
 8007754:	20000590 	.word	0x20000590
 8007758:	20000544 	.word	0x20000544
 800775c:	20000548 	.word	0x20000548
 8007760:	200005a4 	.word	0x200005a4
 8007764:	200005ac 	.word	0x200005ac
 8007768:	20000594 	.word	0x20000594
 800776c:	20000490 	.word	0x20000490
 8007770:	2000048c 	.word	0x2000048c
 8007774:	2000059c 	.word	0x2000059c
 8007778:	200005a0 	.word	0x200005a0

0800777c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007782:	4b27      	ldr	r3, [pc, #156]	; (8007820 <vTaskSwitchContext+0xa4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800778a:	4b26      	ldr	r3, [pc, #152]	; (8007824 <vTaskSwitchContext+0xa8>)
 800778c:	2201      	movs	r2, #1
 800778e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007790:	e040      	b.n	8007814 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007792:	4b24      	ldr	r3, [pc, #144]	; (8007824 <vTaskSwitchContext+0xa8>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007798:	4b23      	ldr	r3, [pc, #140]	; (8007828 <vTaskSwitchContext+0xac>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	fab3 f383 	clz	r3, r3
 80077a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	f1c3 031f 	rsb	r3, r3, #31
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	491f      	ldr	r1, [pc, #124]	; (800782c <vTaskSwitchContext+0xb0>)
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <vTaskSwitchContext+0x5e>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	b672      	cpsid	i
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	b662      	cpsie	i
 80077d6:	607b      	str	r3, [r7, #4]
 80077d8:	e7fe      	b.n	80077d8 <vTaskSwitchContext+0x5c>
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4a11      	ldr	r2, [pc, #68]	; (800782c <vTaskSwitchContext+0xb0>)
 80077e6:	4413      	add	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	3308      	adds	r3, #8
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d104      	bne.n	800780a <vTaskSwitchContext+0x8e>
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a07      	ldr	r2, [pc, #28]	; (8007830 <vTaskSwitchContext+0xb4>)
 8007812:	6013      	str	r3, [r2, #0]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	200005b4 	.word	0x200005b4
 8007824:	200005a0 	.word	0x200005a0
 8007828:	20000594 	.word	0x20000594
 800782c:	20000490 	.word	0x20000490
 8007830:	2000048c 	.word	0x2000048c

08007834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <vTaskPlaceOnEventList+0x28>
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	b672      	cpsid	i
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	b662      	cpsie	i
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e7fe      	b.n	800785a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800785c:	4b07      	ldr	r3, [pc, #28]	; (800787c <vTaskPlaceOnEventList+0x48>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3318      	adds	r3, #24
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f7fe ff33 	bl	80066d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800786a:	2101      	movs	r1, #1
 800786c:	6838      	ldr	r0, [r7, #0]
 800786e:	f000 fb9b 	bl	8007fa8 <prvAddCurrentTaskToDelayedList>
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	2000048c 	.word	0x2000048c

08007880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10b      	bne.n	80078ae <xTaskRemoveFromEventList+0x2e>
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	b672      	cpsid	i
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	b662      	cpsie	i
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	e7fe      	b.n	80078ac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3318      	adds	r3, #24
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe ff45 	bl	8006742 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <xTaskRemoveFromEventList+0xb0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11c      	bne.n	80078fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ff3c 	bl	8006742 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	2201      	movs	r2, #1
 80078d0:	409a      	lsls	r2, r3
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <xTaskRemoveFromEventList+0xb4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	4a16      	ldr	r2, [pc, #88]	; (8007934 <xTaskRemoveFromEventList+0xb4>)
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4a13      	ldr	r2, [pc, #76]	; (8007938 <xTaskRemoveFromEventList+0xb8>)
 80078ea:	441a      	add	r2, r3
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3304      	adds	r3, #4
 80078f0:	4619      	mov	r1, r3
 80078f2:	4610      	mov	r0, r2
 80078f4:	f7fe fec8 	bl	8006688 <vListInsertEnd>
 80078f8:	e005      	b.n	8007906 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3318      	adds	r3, #24
 80078fe:	4619      	mov	r1, r3
 8007900:	480e      	ldr	r0, [pc, #56]	; (800793c <xTaskRemoveFromEventList+0xbc>)
 8007902:	f7fe fec1 	bl	8006688 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790a:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <xTaskRemoveFromEventList+0xc0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d905      	bls.n	8007920 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007914:	2301      	movs	r3, #1
 8007916:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <xTaskRemoveFromEventList+0xc4>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e001      	b.n	8007924 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007924:	697b      	ldr	r3, [r7, #20]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200005b4 	.word	0x200005b4
 8007934:	20000594 	.word	0x20000594
 8007938:	20000490 	.word	0x20000490
 800793c:	2000054c 	.word	0x2000054c
 8007940:	2000048c 	.word	0x2000048c
 8007944:	200005a0 	.word	0x200005a0

08007948 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <vTaskInternalSetTimeOutState+0x24>)
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <vTaskInternalSetTimeOutState+0x28>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	605a      	str	r2, [r3, #4]
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	200005a4 	.word	0x200005a4
 8007970:	20000590 	.word	0x20000590

08007974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <xTaskCheckForTimeOut+0x28>
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	b672      	cpsid	i
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	b662      	cpsie	i
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	e7fe      	b.n	800799a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10b      	bne.n	80079ba <xTaskCheckForTimeOut+0x46>
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	e7fe      	b.n	80079b8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80079ba:	f000 fc65 	bl	8008288 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079be:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <xTaskCheckForTimeOut+0xc0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d102      	bne.n	80079de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]
 80079dc:	e023      	b.n	8007a26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <xTaskCheckForTimeOut+0xc4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d007      	beq.n	80079fa <xTaskCheckForTimeOut+0x86>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d302      	bcc.n	80079fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e015      	b.n	8007a26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d20b      	bcs.n	8007a1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ff99 	bl	8007948 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
 8007a1a:	e004      	b.n	8007a26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a26:	f000 fc61 	bl	80082ec <vPortExitCritical>

	return xReturn;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3720      	adds	r7, #32
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000590 	.word	0x20000590
 8007a38:	200005a4 	.word	0x200005a4

08007a3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a40:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <vTaskMissedYield+0x14>)
 8007a42:	2201      	movs	r2, #1
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	200005a0 	.word	0x200005a0

08007a54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a5c:	f000 f852 	bl	8007b04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <prvIdleTask+0x28>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d9f9      	bls.n	8007a5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <prvIdleTask+0x2c>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a78:	e7f0      	b.n	8007a5c <prvIdleTask+0x8>
 8007a7a:	bf00      	nop
 8007a7c:	20000490 	.word	0x20000490
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	607b      	str	r3, [r7, #4]
 8007a8e:	e00c      	b.n	8007aaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4a12      	ldr	r2, [pc, #72]	; (8007ae4 <prvInitialiseTaskLists+0x60>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe fdc5 	bl	800662e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	607b      	str	r3, [r7, #4]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b06      	cmp	r3, #6
 8007aae:	d9ef      	bls.n	8007a90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ab0:	480d      	ldr	r0, [pc, #52]	; (8007ae8 <prvInitialiseTaskLists+0x64>)
 8007ab2:	f7fe fdbc 	bl	800662e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ab6:	480d      	ldr	r0, [pc, #52]	; (8007aec <prvInitialiseTaskLists+0x68>)
 8007ab8:	f7fe fdb9 	bl	800662e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007abc:	480c      	ldr	r0, [pc, #48]	; (8007af0 <prvInitialiseTaskLists+0x6c>)
 8007abe:	f7fe fdb6 	bl	800662e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ac2:	480c      	ldr	r0, [pc, #48]	; (8007af4 <prvInitialiseTaskLists+0x70>)
 8007ac4:	f7fe fdb3 	bl	800662e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ac8:	480b      	ldr	r0, [pc, #44]	; (8007af8 <prvInitialiseTaskLists+0x74>)
 8007aca:	f7fe fdb0 	bl	800662e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ace:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <prvInitialiseTaskLists+0x78>)
 8007ad0:	4a05      	ldr	r2, [pc, #20]	; (8007ae8 <prvInitialiseTaskLists+0x64>)
 8007ad2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <prvInitialiseTaskLists+0x7c>)
 8007ad6:	4a05      	ldr	r2, [pc, #20]	; (8007aec <prvInitialiseTaskLists+0x68>)
 8007ad8:	601a      	str	r2, [r3, #0]
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000490 	.word	0x20000490
 8007ae8:	2000051c 	.word	0x2000051c
 8007aec:	20000530 	.word	0x20000530
 8007af0:	2000054c 	.word	0x2000054c
 8007af4:	20000560 	.word	0x20000560
 8007af8:	20000578 	.word	0x20000578
 8007afc:	20000544 	.word	0x20000544
 8007b00:	20000548 	.word	0x20000548

08007b04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b0a:	e019      	b.n	8007b40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b0c:	f000 fbbc 	bl	8008288 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b10:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <prvCheckTasksWaitingTermination+0x4c>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fe10 	bl	8006742 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <prvCheckTasksWaitingTermination+0x50>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <prvCheckTasksWaitingTermination+0x50>)
 8007b2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b2c:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <prvCheckTasksWaitingTermination+0x54>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	4a09      	ldr	r2, [pc, #36]	; (8007b58 <prvCheckTasksWaitingTermination+0x54>)
 8007b34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b36:	f000 fbd9 	bl	80082ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f80e 	bl	8007b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <prvCheckTasksWaitingTermination+0x54>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e1      	bne.n	8007b0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000560 	.word	0x20000560
 8007b54:	2000058c 	.word	0x2000058c
 8007b58:	20000574 	.word	0x20000574

08007b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d108      	bne.n	8007b80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fd30 	bl	80085d8 <vPortFree>
				vPortFree( pxTCB );
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fd2d 	bl	80085d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b7e:	e019      	b.n	8007bb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d103      	bne.n	8007b92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fd24 	bl	80085d8 <vPortFree>
	}
 8007b90:	e010      	b.n	8007bb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d00b      	beq.n	8007bb4 <prvDeleteTCB+0x58>
 8007b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba0:	b672      	cpsid	i
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	b662      	cpsie	i
 8007bb0:	60fb      	str	r3, [r7, #12]
 8007bb2:	e7fe      	b.n	8007bb2 <prvDeleteTCB+0x56>
	}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc2:	4b0c      	ldr	r3, [pc, #48]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bcc:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007bce:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bd4:	e008      	b.n	8007be8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd6:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <prvResetNextTaskUnblockTime+0x38>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <prvResetNextTaskUnblockTime+0x3c>)
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	20000544 	.word	0x20000544
 8007bf8:	200005ac 	.word	0x200005ac

08007bfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <xTaskGetSchedulerState+0x34>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	e008      	b.n	8007c22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <xTaskGetSchedulerState+0x38>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	607b      	str	r3, [r7, #4]
 8007c1c:	e001      	b.n	8007c22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c22:	687b      	ldr	r3, [r7, #4]
	}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20000598 	.word	0x20000598
 8007c34:	200005b4 	.word	0x200005b4

08007c38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d069      	beq.n	8007d22 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c52:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <xTaskPriorityInherit+0xf4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d259      	bcs.n	8007d10 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	db06      	blt.n	8007c72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c64:	4b31      	ldr	r3, [pc, #196]	; (8007d2c <xTaskPriorityInherit+0xf4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	f1c3 0207 	rsb	r2, r3, #7
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6959      	ldr	r1, [r3, #20]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4413      	add	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4a2b      	ldr	r2, [pc, #172]	; (8007d30 <xTaskPriorityInherit+0xf8>)
 8007c84:	4413      	add	r3, r2
 8007c86:	4299      	cmp	r1, r3
 8007c88:	d13a      	bne.n	8007d00 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe fd57 	bl	8006742 <uxListRemove>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d115      	bne.n	8007cc6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c9e:	4924      	ldr	r1, [pc, #144]	; (8007d30 <xTaskPriorityInherit+0xf8>)
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	440b      	add	r3, r1
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xTaskPriorityInherit+0x8e>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	43da      	mvns	r2, r3
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <xTaskPriorityInherit+0xfc>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	4a1c      	ldr	r2, [pc, #112]	; (8007d34 <xTaskPriorityInherit+0xfc>)
 8007cc4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cc6:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <xTaskPriorityInherit+0xf4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	409a      	lsls	r2, r3
 8007cd8:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <xTaskPriorityInherit+0xfc>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	4a15      	ldr	r2, [pc, #84]	; (8007d34 <xTaskPriorityInherit+0xfc>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a10      	ldr	r2, [pc, #64]	; (8007d30 <xTaskPriorityInherit+0xf8>)
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fe fcc5 	bl	8006688 <vListInsertEnd>
 8007cfe:	e004      	b.n	8007d0a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <xTaskPriorityInherit+0xf4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e008      	b.n	8007d22 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <xTaskPriorityInherit+0xf4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d201      	bcs.n	8007d22 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d22:	68fb      	ldr	r3, [r7, #12]
	}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	2000048c 	.word	0x2000048c
 8007d30:	20000490 	.word	0x20000490
 8007d34:	20000594 	.word	0x20000594

08007d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d44:	2300      	movs	r3, #0
 8007d46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d070      	beq.n	8007e30 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d4e:	4b3b      	ldr	r3, [pc, #236]	; (8007e3c <xTaskPriorityDisinherit+0x104>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d00b      	beq.n	8007d70 <xTaskPriorityDisinherit+0x38>
 8007d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5c:	b672      	cpsid	i
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	b662      	cpsie	i
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e7fe      	b.n	8007d6e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <xTaskPriorityDisinherit+0x58>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	60bb      	str	r3, [r7, #8]
 8007d8e:	e7fe      	b.n	8007d8e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d94:	1e5a      	subs	r2, r3, #1
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d044      	beq.n	8007e30 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d140      	bne.n	8007e30 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fcc5 	bl	8006742 <uxListRemove>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d115      	bne.n	8007dea <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc2:	491f      	ldr	r1, [pc, #124]	; (8007e40 <xTaskPriorityDisinherit+0x108>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xTaskPriorityDisinherit+0xb2>
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	2201      	movs	r2, #1
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43da      	mvns	r2, r3
 8007de0:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <xTaskPriorityDisinherit+0x10c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4013      	ands	r3, r2
 8007de6:	4a17      	ldr	r2, [pc, #92]	; (8007e44 <xTaskPriorityDisinherit+0x10c>)
 8007de8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	f1c3 0207 	rsb	r2, r3, #7
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e02:	2201      	movs	r2, #1
 8007e04:	409a      	lsls	r2, r3
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <xTaskPriorityDisinherit+0x10c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	4a0d      	ldr	r2, [pc, #52]	; (8007e44 <xTaskPriorityDisinherit+0x10c>)
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <xTaskPriorityDisinherit+0x108>)
 8007e1e:	441a      	add	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fc2e 	bl	8006688 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e30:	697b      	ldr	r3, [r7, #20]
	}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	2000048c 	.word	0x2000048c
 8007e40:	20000490 	.word	0x20000490
 8007e44:	20000594 	.word	0x20000594

08007e48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e56:	2301      	movs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8085 	beq.w	8007f6c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6e:	b672      	cpsid	i
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	b662      	cpsie	i
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e7fe      	b.n	8007e80 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d902      	bls.n	8007e92 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e002      	b.n	8007e98 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d064      	beq.n	8007f6c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d15f      	bne.n	8007f6c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007eac:	4b31      	ldr	r3, [pc, #196]	; (8007f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10b      	bne.n	8007ece <vTaskPriorityDisinheritAfterTimeout+0x86>
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	b672      	cpsid	i
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	b662      	cpsie	i
 8007eca:	60bb      	str	r3, [r7, #8]
 8007ecc:	e7fe      	b.n	8007ecc <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	db04      	blt.n	8007eec <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f1c3 0207 	rsb	r2, r3, #7
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	6959      	ldr	r1, [r3, #20]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4a1f      	ldr	r2, [pc, #124]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007efc:	4413      	add	r3, r2
 8007efe:	4299      	cmp	r1, r3
 8007f00:	d134      	bne.n	8007f6c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	3304      	adds	r3, #4
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fc1b 	bl	8006742 <uxListRemove>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d115      	bne.n	8007f3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f16:	4918      	ldr	r1, [pc, #96]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	440b      	add	r3, r1
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	43da      	mvns	r2, r3
 8007f34:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	2201      	movs	r2, #1
 8007f44:	409a      	lsls	r2, r3
 8007f46:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	4a0b      	ldr	r2, [pc, #44]	; (8007f7c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4a06      	ldr	r2, [pc, #24]	; (8007f78 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007f5e:	441a      	add	r2, r3
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fe fb8e 	bl	8006688 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f6c:	bf00      	nop
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	2000048c 	.word	0x2000048c
 8007f78:	20000490 	.word	0x20000490
 8007f7c:	20000594 	.word	0x20000594

08007f80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f80:	b480      	push	{r7}
 8007f82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d004      	beq.n	8007f96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f92:	3201      	adds	r2, #1
 8007f94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f98:	681b      	ldr	r3, [r3, #0]
	}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	2000048c 	.word	0x2000048c

08007fa8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fb2:	4b29      	ldr	r3, [pc, #164]	; (8008058 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fb8:	4b28      	ldr	r3, [pc, #160]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fbbf 	bl	8006742 <uxListRemove>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10b      	bne.n	8007fe2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fca:	4b24      	ldr	r3, [pc, #144]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd6:	43da      	mvns	r2, r3
 8007fd8:	4b21      	ldr	r3, [pc, #132]	; (8008060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	4a20      	ldr	r2, [pc, #128]	; (8008060 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fe0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d10a      	bne.n	8008000 <prvAddCurrentTaskToDelayedList+0x58>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3304      	adds	r3, #4
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	481a      	ldr	r0, [pc, #104]	; (8008064 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ffa:	f7fe fb45 	bl	8006688 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ffe:	e026      	b.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4413      	add	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	429a      	cmp	r2, r3
 8008016:	d209      	bcs.n	800802c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008018:	4b13      	ldr	r3, [pc, #76]	; (8008068 <prvAddCurrentTaskToDelayedList+0xc0>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3304      	adds	r3, #4
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f7fe fb53 	bl	80066d0 <vListInsert>
}
 800802a:	e010      	b.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802c:	4b0f      	ldr	r3, [pc, #60]	; (800806c <prvAddCurrentTaskToDelayedList+0xc4>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3304      	adds	r3, #4
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f7fe fb49 	bl	80066d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	429a      	cmp	r2, r3
 8008046:	d202      	bcs.n	800804e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008048:	4a09      	ldr	r2, [pc, #36]	; (8008070 <prvAddCurrentTaskToDelayedList+0xc8>)
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6013      	str	r3, [r2, #0]
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000590 	.word	0x20000590
 800805c:	2000048c 	.word	0x2000048c
 8008060:	20000594 	.word	0x20000594
 8008064:	20000578 	.word	0x20000578
 8008068:	20000548 	.word	0x20000548
 800806c:	20000544 	.word	0x20000544
 8008070:	200005ac 	.word	0x200005ac

08008074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	3b04      	subs	r3, #4
 8008084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800808c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b04      	subs	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0201 	bic.w	r2, r3, #1
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80080a4:	4a0c      	ldr	r2, [pc, #48]	; (80080d8 <pxPortInitialiseStack+0x64>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3b14      	subs	r3, #20
 80080ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3b04      	subs	r3, #4
 80080ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f06f 0202 	mvn.w	r2, #2
 80080c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b20      	subs	r3, #32
 80080c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080ca:	68fb      	ldr	r3, [r7, #12]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	080080dd 	.word	0x080080dd

080080dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <prvTaskExitError+0x58>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d00b      	beq.n	8008108 <prvTaskExitError+0x2c>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e7fe      	b.n	8008106 <prvTaskExitError+0x2a>
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	b672      	cpsid	i
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	b662      	cpsie	i
 800811c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800811e:	bf00      	nop
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0fc      	beq.n	8008120 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000001c 	.word	0x2000001c
	...

08008140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008140:	4b07      	ldr	r3, [pc, #28]	; (8008160 <pxCurrentTCBConst2>)
 8008142:	6819      	ldr	r1, [r3, #0]
 8008144:	6808      	ldr	r0, [r1, #0]
 8008146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	f380 8809 	msr	PSP, r0
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8811 	msr	BASEPRI, r0
 800815a:	4770      	bx	lr
 800815c:	f3af 8000 	nop.w

08008160 <pxCurrentTCBConst2>:
 8008160:	2000048c 	.word	0x2000048c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008164:	bf00      	nop
 8008166:	bf00      	nop

08008168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008168:	4808      	ldr	r0, [pc, #32]	; (800818c <prvPortStartFirstTask+0x24>)
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	6800      	ldr	r0, [r0, #0]
 800816e:	f380 8808 	msr	MSP, r0
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f380 8814 	msr	CONTROL, r0
 800817a:	b662      	cpsie	i
 800817c:	b661      	cpsie	f
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	df00      	svc	0
 8008188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800818a:	bf00      	nop
 800818c:	e000ed08 	.word	0xe000ed08

08008190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008196:	4b36      	ldr	r3, [pc, #216]	; (8008270 <xPortStartScheduler+0xe0>)
 8008198:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	22ff      	movs	r2, #255	; 0xff
 80081a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	4b2e      	ldr	r3, [pc, #184]	; (8008274 <xPortStartScheduler+0xe4>)
 80081bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <xPortStartScheduler+0xe8>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081c4:	e009      	b.n	80081da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80081c6:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <xPortStartScheduler+0xe8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a2a      	ldr	r2, [pc, #168]	; (8008278 <xPortStartScheduler+0xe8>)
 80081ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d0ef      	beq.n	80081c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081e6:	4b24      	ldr	r3, [pc, #144]	; (8008278 <xPortStartScheduler+0xe8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1c3 0307 	rsb	r3, r3, #7
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d00b      	beq.n	800820a <xPortStartScheduler+0x7a>
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	60bb      	str	r3, [r7, #8]
 8008208:	e7fe      	b.n	8008208 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800820a:	4b1b      	ldr	r3, [pc, #108]	; (8008278 <xPortStartScheduler+0xe8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <xPortStartScheduler+0xe8>)
 8008212:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008214:	4b18      	ldr	r3, [pc, #96]	; (8008278 <xPortStartScheduler+0xe8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800821c:	4a16      	ldr	r2, [pc, #88]	; (8008278 <xPortStartScheduler+0xe8>)
 800821e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	b2da      	uxtb	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008228:	4b14      	ldr	r3, [pc, #80]	; (800827c <xPortStartScheduler+0xec>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a13      	ldr	r2, [pc, #76]	; (800827c <xPortStartScheduler+0xec>)
 800822e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008232:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008234:	4b11      	ldr	r3, [pc, #68]	; (800827c <xPortStartScheduler+0xec>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a10      	ldr	r2, [pc, #64]	; (800827c <xPortStartScheduler+0xec>)
 800823a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800823e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008240:	f000 f8d4 	bl	80083ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <xPortStartScheduler+0xf0>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800824a:	f000 f8f3 	bl	8008434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800824e:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <xPortStartScheduler+0xf4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a0c      	ldr	r2, [pc, #48]	; (8008284 <xPortStartScheduler+0xf4>)
 8008254:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008258:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800825a:	f7ff ff85 	bl	8008168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800825e:	f7ff fa8d 	bl	800777c <vTaskSwitchContext>
	prvTaskExitError();
 8008262:	f7ff ff3b 	bl	80080dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	e000e400 	.word	0xe000e400
 8008274:	200005b8 	.word	0x200005b8
 8008278:	200005bc 	.word	0x200005bc
 800827c:	e000ed20 	.word	0xe000ed20
 8008280:	2000001c 	.word	0x2000001c
 8008284:	e000ef34 	.word	0xe000ef34

08008288 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	b672      	cpsid	i
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	b662      	cpsie	i
 80082a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082a4:	4b0f      	ldr	r3, [pc, #60]	; (80082e4 <vPortEnterCritical+0x5c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3301      	adds	r3, #1
 80082aa:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <vPortEnterCritical+0x5c>)
 80082ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <vPortEnterCritical+0x5c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d110      	bne.n	80082d8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b6:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <vPortEnterCritical+0x60>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <vPortEnterCritical+0x50>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	e7fe      	b.n	80082d6 <vPortEnterCritical+0x4e>
	}
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	2000001c 	.word	0x2000001c
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <vPortExitCritical+0x50>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10b      	bne.n	8008312 <vPortExitCritical+0x26>
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	b672      	cpsid	i
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	b662      	cpsie	i
 800830e:	607b      	str	r3, [r7, #4]
 8008310:	e7fe      	b.n	8008310 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <vPortExitCritical+0x50>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3b01      	subs	r3, #1
 8008318:	4a08      	ldr	r2, [pc, #32]	; (800833c <vPortExitCritical+0x50>)
 800831a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <vPortExitCritical+0x50>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <vPortExitCritical+0x42>
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	2000001c 	.word	0x2000001c

08008340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008340:	f3ef 8009 	mrs	r0, PSP
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <pxCurrentTCBConst>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	f01e 0f10 	tst.w	lr, #16
 8008350:	bf08      	it	eq
 8008352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	6010      	str	r0, [r2, #0]
 800835c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008364:	b672      	cpsid	i
 8008366:	f380 8811 	msr	BASEPRI, r0
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	b662      	cpsie	i
 8008374:	f7ff fa02 	bl	800777c <vTaskSwitchContext>
 8008378:	f04f 0000 	mov.w	r0, #0
 800837c:	f380 8811 	msr	BASEPRI, r0
 8008380:	bc09      	pop	{r0, r3}
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f01e 0f10 	tst.w	lr, #16
 800838e:	bf08      	it	eq
 8008390:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008394:	f380 8809 	msr	PSP, r0
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <pxCurrentTCBConst>:
 80083a0:	2000048c 	.word	0x2000048c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	b672      	cpsid	i
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	b662      	cpsie	i
 80083c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083c4:	f7ff f920 	bl	8007608 <xTaskIncrementTick>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <xPortSysTickHandler+0x40>)
 80083d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	2300      	movs	r3, #0
 80083d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed04 	.word	0xe000ed04

080083ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <vPortSetupTimerInterrupt+0x38>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <vPortSetupTimerInterrupt+0x3c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a0a      	ldr	r2, [pc, #40]	; (800842c <vPortSetupTimerInterrupt+0x40>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <vPortSetupTimerInterrupt+0x44>)
 800840a:	3b01      	subs	r3, #1
 800840c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800840e:	4b04      	ldr	r3, [pc, #16]	; (8008420 <vPortSetupTimerInterrupt+0x34>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	e000e010 	.word	0xe000e010
 8008424:	e000e018 	.word	0xe000e018
 8008428:	20000010 	.word	0x20000010
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	e000e014 	.word	0xe000e014

08008434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008444 <vPortEnableVFP+0x10>
 8008438:	6801      	ldr	r1, [r0, #0]
 800843a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800843e:	6001      	str	r1, [r0, #0]
 8008440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008442:	bf00      	nop
 8008444:	e000ed88 	.word	0xe000ed88

08008448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008454:	f7ff f82c 	bl	80074b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008458:	4b5a      	ldr	r3, [pc, #360]	; (80085c4 <pvPortMalloc+0x17c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008460:	f000 f916 	bl	8008690 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008464:	4b58      	ldr	r3, [pc, #352]	; (80085c8 <pvPortMalloc+0x180>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 8090 	bne.w	8008592 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01e      	beq.n	80084b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008478:	2208      	movs	r2, #8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d015      	beq.n	80084b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <pvPortMalloc+0x6e>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	b672      	cpsid	i
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	b662      	cpsie	i
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	e7fe      	b.n	80084b4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d06a      	beq.n	8008592 <pvPortMalloc+0x14a>
 80084bc:	4b43      	ldr	r3, [pc, #268]	; (80085cc <pvPortMalloc+0x184>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d865      	bhi.n	8008592 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084c6:	4b42      	ldr	r3, [pc, #264]	; (80085d0 <pvPortMalloc+0x188>)
 80084c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084ca:	4b41      	ldr	r3, [pc, #260]	; (80085d0 <pvPortMalloc+0x188>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d0:	e004      	b.n	80084dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d903      	bls.n	80084ee <pvPortMalloc+0xa6>
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f1      	bne.n	80084d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084ee:	4b35      	ldr	r3, [pc, #212]	; (80085c4 <pvPortMalloc+0x17c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d04c      	beq.n	8008592 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2208      	movs	r2, #8
 80084fe:	4413      	add	r3, r2
 8008500:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	1ad2      	subs	r2, r2, r3
 8008512:	2308      	movs	r3, #8
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	429a      	cmp	r2, r3
 8008518:	d920      	bls.n	800855c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800851a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4413      	add	r3, r2
 8008520:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00b      	beq.n	8008544 <pvPortMalloc+0xfc>
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	b672      	cpsid	i
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	b662      	cpsie	i
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	e7fe      	b.n	8008542 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008556:	69b8      	ldr	r0, [r7, #24]
 8008558:	f000 f8fc 	bl	8008754 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800855c:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <pvPortMalloc+0x184>)
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	4a19      	ldr	r2, [pc, #100]	; (80085cc <pvPortMalloc+0x184>)
 8008568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800856a:	4b18      	ldr	r3, [pc, #96]	; (80085cc <pvPortMalloc+0x184>)
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <pvPortMalloc+0x18c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	429a      	cmp	r2, r3
 8008574:	d203      	bcs.n	800857e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <pvPortMalloc+0x184>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a16      	ldr	r2, [pc, #88]	; (80085d4 <pvPortMalloc+0x18c>)
 800857c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <pvPortMalloc+0x180>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	431a      	orrs	r2, r3
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008592:	f7fe ff9b 	bl	80074cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f003 0307 	and.w	r3, r3, #7
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <pvPortMalloc+0x170>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	b672      	cpsid	i
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	b662      	cpsie	i
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	e7fe      	b.n	80085b6 <pvPortMalloc+0x16e>
	return pvReturn;
 80085b8:	69fb      	ldr	r3, [r7, #28]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3728      	adds	r7, #40	; 0x28
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200041c8 	.word	0x200041c8
 80085c8:	200041d4 	.word	0x200041d4
 80085cc:	200041cc 	.word	0x200041cc
 80085d0:	200041c0 	.word	0x200041c0
 80085d4:	200041d0 	.word	0x200041d0

080085d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d04a      	beq.n	8008680 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085ea:	2308      	movs	r3, #8
 80085ec:	425b      	negs	r3, r3
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4413      	add	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	4b22      	ldr	r3, [pc, #136]	; (8008688 <vPortFree+0xb0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4013      	ands	r3, r2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <vPortFree+0x46>
 8008606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860a:	b672      	cpsid	i
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	b662      	cpsie	i
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e7fe      	b.n	800861c <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00b      	beq.n	800863e <vPortFree+0x66>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	60bb      	str	r3, [r7, #8]
 800863c:	e7fe      	b.n	800863c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	4b11      	ldr	r3, [pc, #68]	; (8008688 <vPortFree+0xb0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d019      	beq.n	8008680 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d115      	bne.n	8008680 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	4b0b      	ldr	r3, [pc, #44]	; (8008688 <vPortFree+0xb0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	43db      	mvns	r3, r3
 800865e:	401a      	ands	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008664:	f7fe ff24 	bl	80074b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b07      	ldr	r3, [pc, #28]	; (800868c <vPortFree+0xb4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4413      	add	r3, r2
 8008672:	4a06      	ldr	r2, [pc, #24]	; (800868c <vPortFree+0xb4>)
 8008674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008676:	6938      	ldr	r0, [r7, #16]
 8008678:	f000 f86c 	bl	8008754 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800867c:	f7fe ff26 	bl	80074cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	200041d4 	.word	0x200041d4
 800868c:	200041cc 	.word	0x200041cc

08008690 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008696:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800869a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <prvHeapInit+0xac>)
 800869e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00c      	beq.n	80086c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	3307      	adds	r3, #7
 80086ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	4a1f      	ldr	r2, [pc, #124]	; (800873c <prvHeapInit+0xac>)
 80086c0:	4413      	add	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086c8:	4a1d      	ldr	r2, [pc, #116]	; (8008740 <prvHeapInit+0xb0>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086ce:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <prvHeapInit+0xb0>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	4413      	add	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086dc:	2208      	movs	r2, #8
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	1a9b      	subs	r3, r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a15      	ldr	r2, [pc, #84]	; (8008744 <prvHeapInit+0xb4>)
 80086f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086f2:	4b14      	ldr	r3, [pc, #80]	; (8008744 <prvHeapInit+0xb4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <prvHeapInit+0xb4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	1ad2      	subs	r2, r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008710:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <prvHeapInit+0xb4>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <prvHeapInit+0xb8>)
 800871e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4a09      	ldr	r2, [pc, #36]	; (800874c <prvHeapInit+0xbc>)
 8008726:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <prvHeapInit+0xc0>)
 800872a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800872e:	601a      	str	r2, [r3, #0]
}
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	200005c0 	.word	0x200005c0
 8008740:	200041c0 	.word	0x200041c0
 8008744:	200041c8 	.word	0x200041c8
 8008748:	200041d0 	.word	0x200041d0
 800874c:	200041cc 	.word	0x200041cc
 8008750:	200041d4 	.word	0x200041d4

08008754 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800875c:	4b28      	ldr	r3, [pc, #160]	; (8008800 <prvInsertBlockIntoFreeList+0xac>)
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e002      	b.n	8008768 <prvInsertBlockIntoFreeList+0x14>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	429a      	cmp	r2, r3
 8008770:	d8f7      	bhi.n	8008762 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d108      	bne.n	8008796 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	441a      	add	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d118      	bne.n	80087dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4b15      	ldr	r3, [pc, #84]	; (8008804 <prvInsertBlockIntoFreeList+0xb0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d00d      	beq.n	80087d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e008      	b.n	80087e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <prvInsertBlockIntoFreeList+0xb0>)
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e003      	b.n	80087e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d002      	beq.n	80087f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	200041c0 	.word	0x200041c0
 8008804:	200041c8 	.word	0x200041c8

08008808 <__errno>:
 8008808:	4b01      	ldr	r3, [pc, #4]	; (8008810 <__errno+0x8>)
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000020 	.word	0x20000020

08008814 <__libc_init_array>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	4e0d      	ldr	r6, [pc, #52]	; (800884c <__libc_init_array+0x38>)
 8008818:	4c0d      	ldr	r4, [pc, #52]	; (8008850 <__libc_init_array+0x3c>)
 800881a:	1ba4      	subs	r4, r4, r6
 800881c:	10a4      	asrs	r4, r4, #2
 800881e:	2500      	movs	r5, #0
 8008820:	42a5      	cmp	r5, r4
 8008822:	d109      	bne.n	8008838 <__libc_init_array+0x24>
 8008824:	4e0b      	ldr	r6, [pc, #44]	; (8008854 <__libc_init_array+0x40>)
 8008826:	4c0c      	ldr	r4, [pc, #48]	; (8008858 <__libc_init_array+0x44>)
 8008828:	f003 fc94 	bl	800c154 <_init>
 800882c:	1ba4      	subs	r4, r4, r6
 800882e:	10a4      	asrs	r4, r4, #2
 8008830:	2500      	movs	r5, #0
 8008832:	42a5      	cmp	r5, r4
 8008834:	d105      	bne.n	8008842 <__libc_init_array+0x2e>
 8008836:	bd70      	pop	{r4, r5, r6, pc}
 8008838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800883c:	4798      	blx	r3
 800883e:	3501      	adds	r5, #1
 8008840:	e7ee      	b.n	8008820 <__libc_init_array+0xc>
 8008842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008846:	4798      	blx	r3
 8008848:	3501      	adds	r5, #1
 800884a:	e7f2      	b.n	8008832 <__libc_init_array+0x1e>
 800884c:	0800c4e8 	.word	0x0800c4e8
 8008850:	0800c4e8 	.word	0x0800c4e8
 8008854:	0800c4e8 	.word	0x0800c4e8
 8008858:	0800c4ec 	.word	0x0800c4ec

0800885c <memcpy>:
 800885c:	b510      	push	{r4, lr}
 800885e:	1e43      	subs	r3, r0, #1
 8008860:	440a      	add	r2, r1
 8008862:	4291      	cmp	r1, r2
 8008864:	d100      	bne.n	8008868 <memcpy+0xc>
 8008866:	bd10      	pop	{r4, pc}
 8008868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008870:	e7f7      	b.n	8008862 <memcpy+0x6>

08008872 <memset>:
 8008872:	4402      	add	r2, r0
 8008874:	4603      	mov	r3, r0
 8008876:	4293      	cmp	r3, r2
 8008878:	d100      	bne.n	800887c <memset+0xa>
 800887a:	4770      	bx	lr
 800887c:	f803 1b01 	strb.w	r1, [r3], #1
 8008880:	e7f9      	b.n	8008876 <memset+0x4>

08008882 <__cvt>:
 8008882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008884:	ed2d 8b02 	vpush	{d8}
 8008888:	eeb0 8b40 	vmov.f64	d8, d0
 800888c:	b085      	sub	sp, #20
 800888e:	4617      	mov	r7, r2
 8008890:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008892:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008894:	ee18 2a90 	vmov	r2, s17
 8008898:	f025 0520 	bic.w	r5, r5, #32
 800889c:	2a00      	cmp	r2, #0
 800889e:	bfb6      	itet	lt
 80088a0:	222d      	movlt	r2, #45	; 0x2d
 80088a2:	2200      	movge	r2, #0
 80088a4:	eeb1 8b40 	vneglt.f64	d8, d0
 80088a8:	2d46      	cmp	r5, #70	; 0x46
 80088aa:	460c      	mov	r4, r1
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	d004      	beq.n	80088ba <__cvt+0x38>
 80088b0:	2d45      	cmp	r5, #69	; 0x45
 80088b2:	d100      	bne.n	80088b6 <__cvt+0x34>
 80088b4:	3401      	adds	r4, #1
 80088b6:	2102      	movs	r1, #2
 80088b8:	e000      	b.n	80088bc <__cvt+0x3a>
 80088ba:	2103      	movs	r1, #3
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	ab02      	add	r3, sp, #8
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4622      	mov	r2, r4
 80088c6:	4633      	mov	r3, r6
 80088c8:	eeb0 0b48 	vmov.f64	d0, d8
 80088cc:	f001 fd34 	bl	800a338 <_dtoa_r>
 80088d0:	2d47      	cmp	r5, #71	; 0x47
 80088d2:	d101      	bne.n	80088d8 <__cvt+0x56>
 80088d4:	07fb      	lsls	r3, r7, #31
 80088d6:	d51e      	bpl.n	8008916 <__cvt+0x94>
 80088d8:	2d46      	cmp	r5, #70	; 0x46
 80088da:	eb00 0304 	add.w	r3, r0, r4
 80088de:	d10c      	bne.n	80088fa <__cvt+0x78>
 80088e0:	7802      	ldrb	r2, [r0, #0]
 80088e2:	2a30      	cmp	r2, #48	; 0x30
 80088e4:	d107      	bne.n	80088f6 <__cvt+0x74>
 80088e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ee:	bf1c      	itt	ne
 80088f0:	f1c4 0401 	rsbne	r4, r4, #1
 80088f4:	6034      	strne	r4, [r6, #0]
 80088f6:	6832      	ldr	r2, [r6, #0]
 80088f8:	4413      	add	r3, r2
 80088fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008902:	d007      	beq.n	8008914 <__cvt+0x92>
 8008904:	2130      	movs	r1, #48	; 0x30
 8008906:	9a03      	ldr	r2, [sp, #12]
 8008908:	429a      	cmp	r2, r3
 800890a:	d204      	bcs.n	8008916 <__cvt+0x94>
 800890c:	1c54      	adds	r4, r2, #1
 800890e:	9403      	str	r4, [sp, #12]
 8008910:	7011      	strb	r1, [r2, #0]
 8008912:	e7f8      	b.n	8008906 <__cvt+0x84>
 8008914:	9303      	str	r3, [sp, #12]
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800891a:	1a1b      	subs	r3, r3, r0
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	b005      	add	sp, #20
 8008920:	ecbd 8b02 	vpop	{d8}
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008926 <__exponent>:
 8008926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008928:	2900      	cmp	r1, #0
 800892a:	4604      	mov	r4, r0
 800892c:	bfba      	itte	lt
 800892e:	4249      	neglt	r1, r1
 8008930:	232d      	movlt	r3, #45	; 0x2d
 8008932:	232b      	movge	r3, #43	; 0x2b
 8008934:	2909      	cmp	r1, #9
 8008936:	f804 2b02 	strb.w	r2, [r4], #2
 800893a:	7043      	strb	r3, [r0, #1]
 800893c:	dd20      	ble.n	8008980 <__exponent+0x5a>
 800893e:	f10d 0307 	add.w	r3, sp, #7
 8008942:	461f      	mov	r7, r3
 8008944:	260a      	movs	r6, #10
 8008946:	fb91 f5f6 	sdiv	r5, r1, r6
 800894a:	fb06 1115 	mls	r1, r6, r5, r1
 800894e:	3130      	adds	r1, #48	; 0x30
 8008950:	2d09      	cmp	r5, #9
 8008952:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008956:	f103 32ff 	add.w	r2, r3, #4294967295
 800895a:	4629      	mov	r1, r5
 800895c:	dc09      	bgt.n	8008972 <__exponent+0x4c>
 800895e:	3130      	adds	r1, #48	; 0x30
 8008960:	3b02      	subs	r3, #2
 8008962:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008966:	42bb      	cmp	r3, r7
 8008968:	4622      	mov	r2, r4
 800896a:	d304      	bcc.n	8008976 <__exponent+0x50>
 800896c:	1a10      	subs	r0, r2, r0
 800896e:	b003      	add	sp, #12
 8008970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008972:	4613      	mov	r3, r2
 8008974:	e7e7      	b.n	8008946 <__exponent+0x20>
 8008976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897a:	f804 2b01 	strb.w	r2, [r4], #1
 800897e:	e7f2      	b.n	8008966 <__exponent+0x40>
 8008980:	2330      	movs	r3, #48	; 0x30
 8008982:	4419      	add	r1, r3
 8008984:	7083      	strb	r3, [r0, #2]
 8008986:	1d02      	adds	r2, r0, #4
 8008988:	70c1      	strb	r1, [r0, #3]
 800898a:	e7ef      	b.n	800896c <__exponent+0x46>
 800898c:	0000      	movs	r0, r0
	...

08008990 <_printf_float>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	b08d      	sub	sp, #52	; 0x34
 8008996:	460c      	mov	r4, r1
 8008998:	4616      	mov	r6, r2
 800899a:	461f      	mov	r7, r3
 800899c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80089a0:	4605      	mov	r5, r0
 80089a2:	f002 fd41 	bl	800b428 <_localeconv_r>
 80089a6:	f8d0 b000 	ldr.w	fp, [r0]
 80089aa:	4658      	mov	r0, fp
 80089ac:	f7f7 fc48 	bl	8000240 <strlen>
 80089b0:	2300      	movs	r3, #0
 80089b2:	930a      	str	r3, [sp, #40]	; 0x28
 80089b4:	f8d8 3000 	ldr.w	r3, [r8]
 80089b8:	9005      	str	r0, [sp, #20]
 80089ba:	3307      	adds	r3, #7
 80089bc:	f023 0307 	bic.w	r3, r3, #7
 80089c0:	f103 0108 	add.w	r1, r3, #8
 80089c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	f8c8 1000 	str.w	r1, [r8]
 80089ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80089d6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8008c60 <_printf_float+0x2d0>
 80089da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80089de:	eeb0 6bc0 	vabs.f64	d6, d0
 80089e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	dd24      	ble.n	8008a36 <_printf_float+0xa6>
 80089ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	d502      	bpl.n	80089fc <_printf_float+0x6c>
 80089f6:	232d      	movs	r3, #45	; 0x2d
 80089f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089fc:	499a      	ldr	r1, [pc, #616]	; (8008c68 <_printf_float+0x2d8>)
 80089fe:	4b9b      	ldr	r3, [pc, #620]	; (8008c6c <_printf_float+0x2dc>)
 8008a00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a04:	bf8c      	ite	hi
 8008a06:	4688      	movhi	r8, r1
 8008a08:	4698      	movls	r8, r3
 8008a0a:	f022 0204 	bic.w	r2, r2, #4
 8008a0e:	2303      	movs	r3, #3
 8008a10:	6123      	str	r3, [r4, #16]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	f04f 0a00 	mov.w	sl, #0
 8008a18:	9700      	str	r7, [sp, #0]
 8008a1a:	4633      	mov	r3, r6
 8008a1c:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f9e1 	bl	8008de8 <_printf_common>
 8008a26:	3001      	adds	r0, #1
 8008a28:	f040 8089 	bne.w	8008b3e <_printf_float+0x1ae>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	b00d      	add	sp, #52	; 0x34
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3e:	d702      	bvc.n	8008a46 <_printf_float+0xb6>
 8008a40:	498b      	ldr	r1, [pc, #556]	; (8008c70 <_printf_float+0x2e0>)
 8008a42:	4b8c      	ldr	r3, [pc, #560]	; (8008c74 <_printf_float+0x2e4>)
 8008a44:	e7dc      	b.n	8008a00 <_printf_float+0x70>
 8008a46:	6861      	ldr	r1, [r4, #4]
 8008a48:	1c4b      	adds	r3, r1, #1
 8008a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a4e:	ab0a      	add	r3, sp, #40	; 0x28
 8008a50:	a809      	add	r0, sp, #36	; 0x24
 8008a52:	d13b      	bne.n	8008acc <_printf_float+0x13c>
 8008a54:	2106      	movs	r1, #6
 8008a56:	6061      	str	r1, [r4, #4]
 8008a58:	f04f 0c00 	mov.w	ip, #0
 8008a5c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8008a60:	e9cd 0900 	strd	r0, r9, [sp]
 8008a64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a68:	6022      	str	r2, [r4, #0]
 8008a6a:	6861      	ldr	r1, [r4, #4]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	f7ff ff08 	bl	8008882 <__cvt>
 8008a72:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8008a76:	2b47      	cmp	r3, #71	; 0x47
 8008a78:	4680      	mov	r8, r0
 8008a7a:	d109      	bne.n	8008a90 <_printf_float+0x100>
 8008a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7e:	1cd8      	adds	r0, r3, #3
 8008a80:	db02      	blt.n	8008a88 <_printf_float+0xf8>
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	dd47      	ble.n	8008b18 <_printf_float+0x188>
 8008a88:	f1a9 0902 	sub.w	r9, r9, #2
 8008a8c:	fa5f f989 	uxtb.w	r9, r9
 8008a90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a96:	d824      	bhi.n	8008ae2 <_printf_float+0x152>
 8008a98:	3901      	subs	r1, #1
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008aa0:	9109      	str	r1, [sp, #36]	; 0x24
 8008aa2:	f7ff ff40 	bl	8008926 <__exponent>
 8008aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa8:	1813      	adds	r3, r2, r0
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	4682      	mov	sl, r0
 8008aae:	6123      	str	r3, [r4, #16]
 8008ab0:	dc02      	bgt.n	8008ab8 <_printf_float+0x128>
 8008ab2:	6822      	ldr	r2, [r4, #0]
 8008ab4:	07d1      	lsls	r1, r2, #31
 8008ab6:	d501      	bpl.n	8008abc <_printf_float+0x12c>
 8008ab8:	3301      	adds	r3, #1
 8008aba:	6123      	str	r3, [r4, #16]
 8008abc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0a9      	beq.n	8008a18 <_printf_float+0x88>
 8008ac4:	232d      	movs	r3, #45	; 0x2d
 8008ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aca:	e7a5      	b.n	8008a18 <_printf_float+0x88>
 8008acc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8008ad0:	f000 8178 	beq.w	8008dc4 <_printf_float+0x434>
 8008ad4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008ad8:	d1be      	bne.n	8008a58 <_printf_float+0xc8>
 8008ada:	2900      	cmp	r1, #0
 8008adc:	d1bc      	bne.n	8008a58 <_printf_float+0xc8>
 8008ade:	2101      	movs	r1, #1
 8008ae0:	e7b9      	b.n	8008a56 <_printf_float+0xc6>
 8008ae2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008ae6:	d119      	bne.n	8008b1c <_printf_float+0x18c>
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	6863      	ldr	r3, [r4, #4]
 8008aec:	dd0c      	ble.n	8008b08 <_printf_float+0x178>
 8008aee:	6121      	str	r1, [r4, #16]
 8008af0:	b913      	cbnz	r3, 8008af8 <_printf_float+0x168>
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	07d2      	lsls	r2, r2, #31
 8008af6:	d502      	bpl.n	8008afe <_printf_float+0x16e>
 8008af8:	3301      	adds	r3, #1
 8008afa:	440b      	add	r3, r1
 8008afc:	6123      	str	r3, [r4, #16]
 8008afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b00:	65a3      	str	r3, [r4, #88]	; 0x58
 8008b02:	f04f 0a00 	mov.w	sl, #0
 8008b06:	e7d9      	b.n	8008abc <_printf_float+0x12c>
 8008b08:	b913      	cbnz	r3, 8008b10 <_printf_float+0x180>
 8008b0a:	6822      	ldr	r2, [r4, #0]
 8008b0c:	07d0      	lsls	r0, r2, #31
 8008b0e:	d501      	bpl.n	8008b14 <_printf_float+0x184>
 8008b10:	3302      	adds	r3, #2
 8008b12:	e7f3      	b.n	8008afc <_printf_float+0x16c>
 8008b14:	2301      	movs	r3, #1
 8008b16:	e7f1      	b.n	8008afc <_printf_float+0x16c>
 8008b18:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008b20:	4293      	cmp	r3, r2
 8008b22:	db05      	blt.n	8008b30 <_printf_float+0x1a0>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	07d1      	lsls	r1, r2, #31
 8008b2a:	d5e8      	bpl.n	8008afe <_printf_float+0x16e>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	e7e5      	b.n	8008afc <_printf_float+0x16c>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfd4      	ite	le
 8008b34:	f1c3 0302 	rsble	r3, r3, #2
 8008b38:	2301      	movgt	r3, #1
 8008b3a:	4413      	add	r3, r2
 8008b3c:	e7de      	b.n	8008afc <_printf_float+0x16c>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	055a      	lsls	r2, r3, #21
 8008b42:	d407      	bmi.n	8008b54 <_printf_float+0x1c4>
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	4642      	mov	r2, r8
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b8      	blx	r7
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d12a      	bne.n	8008ba8 <_printf_float+0x218>
 8008b52:	e76b      	b.n	8008a2c <_printf_float+0x9c>
 8008b54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b58:	f240 80de 	bls.w	8008d18 <_printf_float+0x388>
 8008b5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b68:	d133      	bne.n	8008bd2 <_printf_float+0x242>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4a42      	ldr	r2, [pc, #264]	; (8008c78 <_printf_float+0x2e8>)
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f af59 	beq.w	8008a2c <_printf_float+0x9c>
 8008b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	db02      	blt.n	8008b88 <_printf_float+0x1f8>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	07d8      	lsls	r0, r3, #31
 8008b86:	d50f      	bpl.n	8008ba8 <_printf_float+0x218>
 8008b88:	9b05      	ldr	r3, [sp, #20]
 8008b8a:	465a      	mov	r2, fp
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	f43f af4a 	beq.w	8008a2c <_printf_float+0x9c>
 8008b98:	f04f 0800 	mov.w	r8, #0
 8008b9c:	f104 091a 	add.w	r9, r4, #26
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	4543      	cmp	r3, r8
 8008ba6:	dc09      	bgt.n	8008bbc <_printf_float+0x22c>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	079b      	lsls	r3, r3, #30
 8008bac:	f100 8105 	bmi.w	8008dba <_printf_float+0x42a>
 8008bb0:	68e0      	ldr	r0, [r4, #12]
 8008bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bb4:	4298      	cmp	r0, r3
 8008bb6:	bfb8      	it	lt
 8008bb8:	4618      	movlt	r0, r3
 8008bba:	e739      	b.n	8008a30 <_printf_float+0xa0>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	f43f af30 	beq.w	8008a2c <_printf_float+0x9c>
 8008bcc:	f108 0801 	add.w	r8, r8, #1
 8008bd0:	e7e6      	b.n	8008ba0 <_printf_float+0x210>
 8008bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc2b      	bgt.n	8008c30 <_printf_float+0x2a0>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4a27      	ldr	r2, [pc, #156]	; (8008c78 <_printf_float+0x2e8>)
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af22 	beq.w	8008a2c <_printf_float+0x9c>
 8008be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bea:	b923      	cbnz	r3, 8008bf6 <_printf_float+0x266>
 8008bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bee:	b913      	cbnz	r3, 8008bf6 <_printf_float+0x266>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	07d9      	lsls	r1, r3, #31
 8008bf4:	d5d8      	bpl.n	8008ba8 <_printf_float+0x218>
 8008bf6:	9b05      	ldr	r3, [sp, #20]
 8008bf8:	465a      	mov	r2, fp
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f af13 	beq.w	8008a2c <_printf_float+0x9c>
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	f104 0a1a 	add.w	sl, r4, #26
 8008c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c10:	425b      	negs	r3, r3
 8008c12:	454b      	cmp	r3, r9
 8008c14:	dc01      	bgt.n	8008c1a <_printf_float+0x28a>
 8008c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c18:	e795      	b.n	8008b46 <_printf_float+0x1b6>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4652      	mov	r2, sl
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	f43f af01 	beq.w	8008a2c <_printf_float+0x9c>
 8008c2a:	f109 0901 	add.w	r9, r9, #1
 8008c2e:	e7ee      	b.n	8008c0e <_printf_float+0x27e>
 8008c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c34:	429a      	cmp	r2, r3
 8008c36:	bfa8      	it	ge
 8008c38:	461a      	movge	r2, r3
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	4691      	mov	r9, r2
 8008c3e:	dd07      	ble.n	8008c50 <_printf_float+0x2c0>
 8008c40:	4613      	mov	r3, r2
 8008c42:	4631      	mov	r1, r6
 8008c44:	4642      	mov	r2, r8
 8008c46:	4628      	mov	r0, r5
 8008c48:	47b8      	blx	r7
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	f43f aeee 	beq.w	8008a2c <_printf_float+0x9c>
 8008c50:	f104 031a 	add.w	r3, r4, #26
 8008c54:	f04f 0a00 	mov.w	sl, #0
 8008c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	e017      	b.n	8008c90 <_printf_float+0x300>
 8008c60:	ffffffff 	.word	0xffffffff
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800c1c4 	.word	0x0800c1c4
 8008c6c:	0800c1c0 	.word	0x0800c1c0
 8008c70:	0800c1cc 	.word	0x0800c1cc
 8008c74:	0800c1c8 	.word	0x0800c1c8
 8008c78:	0800c1d0 	.word	0x0800c1d0
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	9a07      	ldr	r2, [sp, #28]
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aed0 	beq.w	8008a2c <_printf_float+0x9c>
 8008c8c:	f10a 0a01 	add.w	sl, sl, #1
 8008c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c92:	9306      	str	r3, [sp, #24]
 8008c94:	eba3 0309 	sub.w	r3, r3, r9
 8008c98:	4553      	cmp	r3, sl
 8008c9a:	dcef      	bgt.n	8008c7c <_printf_float+0x2ec>
 8008c9c:	9b06      	ldr	r3, [sp, #24]
 8008c9e:	4498      	add	r8, r3
 8008ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	db15      	blt.n	8008cd4 <_printf_float+0x344>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	07da      	lsls	r2, r3, #31
 8008cac:	d412      	bmi.n	8008cd4 <_printf_float+0x344>
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	9a06      	ldr	r2, [sp, #24]
 8008cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cb4:	1a9a      	subs	r2, r3, r2
 8008cb6:	eba3 0a01 	sub.w	sl, r3, r1
 8008cba:	4592      	cmp	sl, r2
 8008cbc:	bfa8      	it	ge
 8008cbe:	4692      	movge	sl, r2
 8008cc0:	f1ba 0f00 	cmp.w	sl, #0
 8008cc4:	dc0e      	bgt.n	8008ce4 <_printf_float+0x354>
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cce:	f104 091a 	add.w	r9, r4, #26
 8008cd2:	e019      	b.n	8008d08 <_printf_float+0x378>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	465a      	mov	r2, fp
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d1e5      	bne.n	8008cae <_printf_float+0x31e>
 8008ce2:	e6a3      	b.n	8008a2c <_printf_float+0x9c>
 8008ce4:	4653      	mov	r3, sl
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	d1e9      	bne.n	8008cc6 <_printf_float+0x336>
 8008cf2:	e69b      	b.n	8008a2c <_printf_float+0x9c>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	464a      	mov	r2, r9
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	f43f ae94 	beq.w	8008a2c <_printf_float+0x9c>
 8008d04:	f108 0801 	add.w	r8, r8, #1
 8008d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	eba3 030a 	sub.w	r3, r3, sl
 8008d12:	4543      	cmp	r3, r8
 8008d14:	dcee      	bgt.n	8008cf4 <_printf_float+0x364>
 8008d16:	e747      	b.n	8008ba8 <_printf_float+0x218>
 8008d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d1a:	2a01      	cmp	r2, #1
 8008d1c:	dc01      	bgt.n	8008d22 <_printf_float+0x392>
 8008d1e:	07db      	lsls	r3, r3, #31
 8008d20:	d539      	bpl.n	8008d96 <_printf_float+0x406>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4642      	mov	r2, r8
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f ae7d 	beq.w	8008a2c <_printf_float+0x9c>
 8008d32:	9b05      	ldr	r3, [sp, #20]
 8008d34:	465a      	mov	r2, fp
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f108 0801 	add.w	r8, r8, #1
 8008d42:	f43f ae73 	beq.w	8008a2c <_printf_float+0x9c>
 8008d46:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d58:	d018      	beq.n	8008d8c <_printf_float+0x3fc>
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	4631      	mov	r1, r6
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b8      	blx	r7
 8008d62:	3001      	adds	r0, #1
 8008d64:	d10e      	bne.n	8008d84 <_printf_float+0x3f4>
 8008d66:	e661      	b.n	8008a2c <_printf_float+0x9c>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	464a      	mov	r2, r9
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f ae5a 	beq.w	8008a2c <_printf_float+0x9c>
 8008d78:	f108 0801 	add.w	r8, r8, #1
 8008d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	4543      	cmp	r3, r8
 8008d82:	dcf1      	bgt.n	8008d68 <_printf_float+0x3d8>
 8008d84:	4653      	mov	r3, sl
 8008d86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d8a:	e6dd      	b.n	8008b48 <_printf_float+0x1b8>
 8008d8c:	f04f 0800 	mov.w	r8, #0
 8008d90:	f104 091a 	add.w	r9, r4, #26
 8008d94:	e7f2      	b.n	8008d7c <_printf_float+0x3ec>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e7df      	b.n	8008d5a <_printf_float+0x3ca>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	464a      	mov	r2, r9
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4628      	mov	r0, r5
 8008da2:	47b8      	blx	r7
 8008da4:	3001      	adds	r0, #1
 8008da6:	f43f ae41 	beq.w	8008a2c <_printf_float+0x9c>
 8008daa:	f108 0801 	add.w	r8, r8, #1
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	4543      	cmp	r3, r8
 8008db6:	dcf0      	bgt.n	8008d9a <_printf_float+0x40a>
 8008db8:	e6fa      	b.n	8008bb0 <_printf_float+0x220>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 0919 	add.w	r9, r4, #25
 8008dc2:	e7f4      	b.n	8008dae <_printf_float+0x41e>
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	f43f ae8a 	beq.w	8008ade <_printf_float+0x14e>
 8008dca:	f04f 0c00 	mov.w	ip, #0
 8008dce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8008dd2:	e9cd 0900 	strd	r0, r9, [sp]
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fd50 	bl	8008882 <__cvt>
 8008de2:	4680      	mov	r8, r0
 8008de4:	e64a      	b.n	8008a7c <_printf_float+0xec>
 8008de6:	bf00      	nop

08008de8 <_printf_common>:
 8008de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dec:	4691      	mov	r9, r2
 8008dee:	461f      	mov	r7, r3
 8008df0:	688a      	ldr	r2, [r1, #8]
 8008df2:	690b      	ldr	r3, [r1, #16]
 8008df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	bfb8      	it	lt
 8008dfc:	4613      	movlt	r3, r2
 8008dfe:	f8c9 3000 	str.w	r3, [r9]
 8008e02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e06:	4606      	mov	r6, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	b112      	cbz	r2, 8008e12 <_printf_common+0x2a>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f8c9 3000 	str.w	r3, [r9]
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	0699      	lsls	r1, r3, #26
 8008e16:	bf42      	ittt	mi
 8008e18:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008e1c:	3302      	addmi	r3, #2
 8008e1e:	f8c9 3000 	strmi.w	r3, [r9]
 8008e22:	6825      	ldr	r5, [r4, #0]
 8008e24:	f015 0506 	ands.w	r5, r5, #6
 8008e28:	d107      	bne.n	8008e3a <_printf_common+0x52>
 8008e2a:	f104 0a19 	add.w	sl, r4, #25
 8008e2e:	68e3      	ldr	r3, [r4, #12]
 8008e30:	f8d9 2000 	ldr.w	r2, [r9]
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	42ab      	cmp	r3, r5
 8008e38:	dc28      	bgt.n	8008e8c <_printf_common+0xa4>
 8008e3a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008e3e:	6822      	ldr	r2, [r4, #0]
 8008e40:	3300      	adds	r3, #0
 8008e42:	bf18      	it	ne
 8008e44:	2301      	movne	r3, #1
 8008e46:	0692      	lsls	r2, r2, #26
 8008e48:	d42d      	bmi.n	8008ea6 <_printf_common+0xbe>
 8008e4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e4e:	4639      	mov	r1, r7
 8008e50:	4630      	mov	r0, r6
 8008e52:	47c0      	blx	r8
 8008e54:	3001      	adds	r0, #1
 8008e56:	d020      	beq.n	8008e9a <_printf_common+0xb2>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	68e5      	ldr	r5, [r4, #12]
 8008e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e60:	f003 0306 	and.w	r3, r3, #6
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	bf08      	it	eq
 8008e68:	1aad      	subeq	r5, r5, r2
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	6922      	ldr	r2, [r4, #16]
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e74:	2500      	movne	r5, #0
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bfc4      	itt	gt
 8008e7a:	1a9b      	subgt	r3, r3, r2
 8008e7c:	18ed      	addgt	r5, r5, r3
 8008e7e:	f04f 0900 	mov.w	r9, #0
 8008e82:	341a      	adds	r4, #26
 8008e84:	454d      	cmp	r5, r9
 8008e86:	d11a      	bne.n	8008ebe <_printf_common+0xd6>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e008      	b.n	8008e9e <_printf_common+0xb6>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4652      	mov	r2, sl
 8008e90:	4639      	mov	r1, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	47c0      	blx	r8
 8008e96:	3001      	adds	r0, #1
 8008e98:	d103      	bne.n	8008ea2 <_printf_common+0xba>
 8008e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea2:	3501      	adds	r5, #1
 8008ea4:	e7c3      	b.n	8008e2e <_printf_common+0x46>
 8008ea6:	18e1      	adds	r1, r4, r3
 8008ea8:	1c5a      	adds	r2, r3, #1
 8008eaa:	2030      	movs	r0, #48	; 0x30
 8008eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eb0:	4422      	add	r2, r4
 8008eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eba:	3302      	adds	r3, #2
 8008ebc:	e7c5      	b.n	8008e4a <_printf_common+0x62>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	47c0      	blx	r8
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d0e6      	beq.n	8008e9a <_printf_common+0xb2>
 8008ecc:	f109 0901 	add.w	r9, r9, #1
 8008ed0:	e7d8      	b.n	8008e84 <_printf_common+0x9c>
	...

08008ed4 <_printf_i>:
 8008ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008edc:	460c      	mov	r4, r1
 8008ede:	7e09      	ldrb	r1, [r1, #24]
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	296e      	cmp	r1, #110	; 0x6e
 8008ee4:	4617      	mov	r7, r2
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	4698      	mov	r8, r3
 8008eea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eec:	f000 80b3 	beq.w	8009056 <_printf_i+0x182>
 8008ef0:	d822      	bhi.n	8008f38 <_printf_i+0x64>
 8008ef2:	2963      	cmp	r1, #99	; 0x63
 8008ef4:	d036      	beq.n	8008f64 <_printf_i+0x90>
 8008ef6:	d80a      	bhi.n	8008f0e <_printf_i+0x3a>
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	f000 80b9 	beq.w	8009070 <_printf_i+0x19c>
 8008efe:	2958      	cmp	r1, #88	; 0x58
 8008f00:	f000 8083 	beq.w	800900a <_printf_i+0x136>
 8008f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008f0c:	e032      	b.n	8008f74 <_printf_i+0xa0>
 8008f0e:	2964      	cmp	r1, #100	; 0x64
 8008f10:	d001      	beq.n	8008f16 <_printf_i+0x42>
 8008f12:	2969      	cmp	r1, #105	; 0x69
 8008f14:	d1f6      	bne.n	8008f04 <_printf_i+0x30>
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	6813      	ldr	r3, [r2, #0]
 8008f1a:	0605      	lsls	r5, r0, #24
 8008f1c:	f103 0104 	add.w	r1, r3, #4
 8008f20:	d52a      	bpl.n	8008f78 <_printf_i+0xa4>
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6011      	str	r1, [r2, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da03      	bge.n	8008f32 <_printf_i+0x5e>
 8008f2a:	222d      	movs	r2, #45	; 0x2d
 8008f2c:	425b      	negs	r3, r3
 8008f2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008f32:	486f      	ldr	r0, [pc, #444]	; (80090f0 <_printf_i+0x21c>)
 8008f34:	220a      	movs	r2, #10
 8008f36:	e039      	b.n	8008fac <_printf_i+0xd8>
 8008f38:	2973      	cmp	r1, #115	; 0x73
 8008f3a:	f000 809d 	beq.w	8009078 <_printf_i+0x1a4>
 8008f3e:	d808      	bhi.n	8008f52 <_printf_i+0x7e>
 8008f40:	296f      	cmp	r1, #111	; 0x6f
 8008f42:	d020      	beq.n	8008f86 <_printf_i+0xb2>
 8008f44:	2970      	cmp	r1, #112	; 0x70
 8008f46:	d1dd      	bne.n	8008f04 <_printf_i+0x30>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	f043 0320 	orr.w	r3, r3, #32
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	e003      	b.n	8008f5a <_printf_i+0x86>
 8008f52:	2975      	cmp	r1, #117	; 0x75
 8008f54:	d017      	beq.n	8008f86 <_printf_i+0xb2>
 8008f56:	2978      	cmp	r1, #120	; 0x78
 8008f58:	d1d4      	bne.n	8008f04 <_printf_i+0x30>
 8008f5a:	2378      	movs	r3, #120	; 0x78
 8008f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f60:	4864      	ldr	r0, [pc, #400]	; (80090f4 <_printf_i+0x220>)
 8008f62:	e055      	b.n	8009010 <_printf_i+0x13c>
 8008f64:	6813      	ldr	r3, [r2, #0]
 8008f66:	1d19      	adds	r1, r3, #4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6011      	str	r1, [r2, #0]
 8008f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f74:	2301      	movs	r3, #1
 8008f76:	e08c      	b.n	8009092 <_printf_i+0x1be>
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6011      	str	r1, [r2, #0]
 8008f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f80:	bf18      	it	ne
 8008f82:	b21b      	sxthne	r3, r3
 8008f84:	e7cf      	b.n	8008f26 <_printf_i+0x52>
 8008f86:	6813      	ldr	r3, [r2, #0]
 8008f88:	6825      	ldr	r5, [r4, #0]
 8008f8a:	1d18      	adds	r0, r3, #4
 8008f8c:	6010      	str	r0, [r2, #0]
 8008f8e:	0628      	lsls	r0, r5, #24
 8008f90:	d501      	bpl.n	8008f96 <_printf_i+0xc2>
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	e002      	b.n	8008f9c <_printf_i+0xc8>
 8008f96:	0668      	lsls	r0, r5, #25
 8008f98:	d5fb      	bpl.n	8008f92 <_printf_i+0xbe>
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	4854      	ldr	r0, [pc, #336]	; (80090f0 <_printf_i+0x21c>)
 8008f9e:	296f      	cmp	r1, #111	; 0x6f
 8008fa0:	bf14      	ite	ne
 8008fa2:	220a      	movne	r2, #10
 8008fa4:	2208      	moveq	r2, #8
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fac:	6865      	ldr	r5, [r4, #4]
 8008fae:	60a5      	str	r5, [r4, #8]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	f2c0 8095 	blt.w	80090e0 <_printf_i+0x20c>
 8008fb6:	6821      	ldr	r1, [r4, #0]
 8008fb8:	f021 0104 	bic.w	r1, r1, #4
 8008fbc:	6021      	str	r1, [r4, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d13d      	bne.n	800903e <_printf_i+0x16a>
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	f040 808e 	bne.w	80090e4 <_printf_i+0x210>
 8008fc8:	4665      	mov	r5, ip
 8008fca:	2a08      	cmp	r2, #8
 8008fcc:	d10b      	bne.n	8008fe6 <_printf_i+0x112>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	07db      	lsls	r3, r3, #31
 8008fd2:	d508      	bpl.n	8008fe6 <_printf_i+0x112>
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	6862      	ldr	r2, [r4, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	bfde      	ittt	le
 8008fdc:	2330      	movle	r3, #48	; 0x30
 8008fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fe2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fe6:	ebac 0305 	sub.w	r3, ip, r5
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	f8cd 8000 	str.w	r8, [sp]
 8008ff0:	463b      	mov	r3, r7
 8008ff2:	aa03      	add	r2, sp, #12
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff fef6 	bl	8008de8 <_printf_common>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d14d      	bne.n	800909c <_printf_i+0x1c8>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	b005      	add	sp, #20
 8009006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800900a:	4839      	ldr	r0, [pc, #228]	; (80090f0 <_printf_i+0x21c>)
 800900c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	6821      	ldr	r1, [r4, #0]
 8009014:	1d1d      	adds	r5, r3, #4
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6015      	str	r5, [r2, #0]
 800901a:	060a      	lsls	r2, r1, #24
 800901c:	d50b      	bpl.n	8009036 <_printf_i+0x162>
 800901e:	07ca      	lsls	r2, r1, #31
 8009020:	bf44      	itt	mi
 8009022:	f041 0120 	orrmi.w	r1, r1, #32
 8009026:	6021      	strmi	r1, [r4, #0]
 8009028:	b91b      	cbnz	r3, 8009032 <_printf_i+0x15e>
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	f022 0220 	bic.w	r2, r2, #32
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	2210      	movs	r2, #16
 8009034:	e7b7      	b.n	8008fa6 <_printf_i+0xd2>
 8009036:	064d      	lsls	r5, r1, #25
 8009038:	bf48      	it	mi
 800903a:	b29b      	uxthmi	r3, r3
 800903c:	e7ef      	b.n	800901e <_printf_i+0x14a>
 800903e:	4665      	mov	r5, ip
 8009040:	fbb3 f1f2 	udiv	r1, r3, r2
 8009044:	fb02 3311 	mls	r3, r2, r1, r3
 8009048:	5cc3      	ldrb	r3, [r0, r3]
 800904a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800904e:	460b      	mov	r3, r1
 8009050:	2900      	cmp	r1, #0
 8009052:	d1f5      	bne.n	8009040 <_printf_i+0x16c>
 8009054:	e7b9      	b.n	8008fca <_printf_i+0xf6>
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	6825      	ldr	r5, [r4, #0]
 800905a:	6961      	ldr	r1, [r4, #20]
 800905c:	1d18      	adds	r0, r3, #4
 800905e:	6010      	str	r0, [r2, #0]
 8009060:	0628      	lsls	r0, r5, #24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	d501      	bpl.n	800906a <_printf_i+0x196>
 8009066:	6019      	str	r1, [r3, #0]
 8009068:	e002      	b.n	8009070 <_printf_i+0x19c>
 800906a:	066a      	lsls	r2, r5, #25
 800906c:	d5fb      	bpl.n	8009066 <_printf_i+0x192>
 800906e:	8019      	strh	r1, [r3, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	4665      	mov	r5, ip
 8009076:	e7b9      	b.n	8008fec <_printf_i+0x118>
 8009078:	6813      	ldr	r3, [r2, #0]
 800907a:	1d19      	adds	r1, r3, #4
 800907c:	6011      	str	r1, [r2, #0]
 800907e:	681d      	ldr	r5, [r3, #0]
 8009080:	6862      	ldr	r2, [r4, #4]
 8009082:	2100      	movs	r1, #0
 8009084:	4628      	mov	r0, r5
 8009086:	f7f7 f8e3 	bl	8000250 <memchr>
 800908a:	b108      	cbz	r0, 8009090 <_printf_i+0x1bc>
 800908c:	1b40      	subs	r0, r0, r5
 800908e:	6060      	str	r0, [r4, #4]
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	2300      	movs	r3, #0
 8009096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800909a:	e7a7      	b.n	8008fec <_printf_i+0x118>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	462a      	mov	r2, r5
 80090a0:	4639      	mov	r1, r7
 80090a2:	4630      	mov	r0, r6
 80090a4:	47c0      	blx	r8
 80090a6:	3001      	adds	r0, #1
 80090a8:	d0aa      	beq.n	8009000 <_printf_i+0x12c>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	079b      	lsls	r3, r3, #30
 80090ae:	d413      	bmi.n	80090d8 <_printf_i+0x204>
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	4298      	cmp	r0, r3
 80090b6:	bfb8      	it	lt
 80090b8:	4618      	movlt	r0, r3
 80090ba:	e7a3      	b.n	8009004 <_printf_i+0x130>
 80090bc:	2301      	movs	r3, #1
 80090be:	464a      	mov	r2, r9
 80090c0:	4639      	mov	r1, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	47c0      	blx	r8
 80090c6:	3001      	adds	r0, #1
 80090c8:	d09a      	beq.n	8009000 <_printf_i+0x12c>
 80090ca:	3501      	adds	r5, #1
 80090cc:	68e3      	ldr	r3, [r4, #12]
 80090ce:	9a03      	ldr	r2, [sp, #12]
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	42ab      	cmp	r3, r5
 80090d4:	dcf2      	bgt.n	80090bc <_printf_i+0x1e8>
 80090d6:	e7eb      	b.n	80090b0 <_printf_i+0x1dc>
 80090d8:	2500      	movs	r5, #0
 80090da:	f104 0919 	add.w	r9, r4, #25
 80090de:	e7f5      	b.n	80090cc <_printf_i+0x1f8>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1ac      	bne.n	800903e <_printf_i+0x16a>
 80090e4:	7803      	ldrb	r3, [r0, #0]
 80090e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ee:	e76c      	b.n	8008fca <_printf_i+0xf6>
 80090f0:	0800c1d2 	.word	0x0800c1d2
 80090f4:	0800c1e3 	.word	0x0800c1e3

080090f8 <_scanf_float>:
 80090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fc:	469a      	mov	sl, r3
 80090fe:	688b      	ldr	r3, [r1, #8]
 8009100:	4616      	mov	r6, r2
 8009102:	1e5a      	subs	r2, r3, #1
 8009104:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009108:	b087      	sub	sp, #28
 800910a:	bf83      	ittte	hi
 800910c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009110:	189b      	addhi	r3, r3, r2
 8009112:	9301      	strhi	r3, [sp, #4]
 8009114:	2300      	movls	r3, #0
 8009116:	bf86      	itte	hi
 8009118:	f240 135d 	movwhi	r3, #349	; 0x15d
 800911c:	608b      	strhi	r3, [r1, #8]
 800911e:	9301      	strls	r3, [sp, #4]
 8009120:	680b      	ldr	r3, [r1, #0]
 8009122:	4688      	mov	r8, r1
 8009124:	f04f 0b00 	mov.w	fp, #0
 8009128:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800912c:	f848 3b1c 	str.w	r3, [r8], #28
 8009130:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009134:	4607      	mov	r7, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4645      	mov	r5, r8
 800913a:	465a      	mov	r2, fp
 800913c:	46d9      	mov	r9, fp
 800913e:	f8cd b008 	str.w	fp, [sp, #8]
 8009142:	68a1      	ldr	r1, [r4, #8]
 8009144:	b181      	cbz	r1, 8009168 <_scanf_float+0x70>
 8009146:	6833      	ldr	r3, [r6, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b49      	cmp	r3, #73	; 0x49
 800914c:	d071      	beq.n	8009232 <_scanf_float+0x13a>
 800914e:	d84d      	bhi.n	80091ec <_scanf_float+0xf4>
 8009150:	2b39      	cmp	r3, #57	; 0x39
 8009152:	d840      	bhi.n	80091d6 <_scanf_float+0xde>
 8009154:	2b31      	cmp	r3, #49	; 0x31
 8009156:	f080 8088 	bcs.w	800926a <_scanf_float+0x172>
 800915a:	2b2d      	cmp	r3, #45	; 0x2d
 800915c:	f000 8090 	beq.w	8009280 <_scanf_float+0x188>
 8009160:	d815      	bhi.n	800918e <_scanf_float+0x96>
 8009162:	2b2b      	cmp	r3, #43	; 0x2b
 8009164:	f000 808c 	beq.w	8009280 <_scanf_float+0x188>
 8009168:	f1b9 0f00 	cmp.w	r9, #0
 800916c:	d003      	beq.n	8009176 <_scanf_float+0x7e>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009174:	6023      	str	r3, [r4, #0]
 8009176:	3a01      	subs	r2, #1
 8009178:	2a01      	cmp	r2, #1
 800917a:	f200 80ea 	bhi.w	8009352 <_scanf_float+0x25a>
 800917e:	4545      	cmp	r5, r8
 8009180:	f200 80dc 	bhi.w	800933c <_scanf_float+0x244>
 8009184:	2601      	movs	r6, #1
 8009186:	4630      	mov	r0, r6
 8009188:	b007      	add	sp, #28
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	2b2e      	cmp	r3, #46	; 0x2e
 8009190:	f000 809f 	beq.w	80092d2 <_scanf_float+0x1da>
 8009194:	2b30      	cmp	r3, #48	; 0x30
 8009196:	d1e7      	bne.n	8009168 <_scanf_float+0x70>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800919e:	d064      	beq.n	800926a <_scanf_float+0x172>
 80091a0:	9b01      	ldr	r3, [sp, #4]
 80091a2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f109 0901 	add.w	r9, r9, #1
 80091ac:	b11b      	cbz	r3, 80091b6 <_scanf_float+0xbe>
 80091ae:	3b01      	subs	r3, #1
 80091b0:	3101      	adds	r1, #1
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	60a1      	str	r1, [r4, #8]
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	3301      	adds	r3, #1
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	6873      	ldr	r3, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	6073      	str	r3, [r6, #4]
 80091ca:	f340 80ac 	ble.w	8009326 <_scanf_float+0x22e>
 80091ce:	6833      	ldr	r3, [r6, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	6033      	str	r3, [r6, #0]
 80091d4:	e7b5      	b.n	8009142 <_scanf_float+0x4a>
 80091d6:	2b45      	cmp	r3, #69	; 0x45
 80091d8:	f000 8085 	beq.w	80092e6 <_scanf_float+0x1ee>
 80091dc:	2b46      	cmp	r3, #70	; 0x46
 80091de:	d06a      	beq.n	80092b6 <_scanf_float+0x1be>
 80091e0:	2b41      	cmp	r3, #65	; 0x41
 80091e2:	d1c1      	bne.n	8009168 <_scanf_float+0x70>
 80091e4:	2a01      	cmp	r2, #1
 80091e6:	d1bf      	bne.n	8009168 <_scanf_float+0x70>
 80091e8:	2202      	movs	r2, #2
 80091ea:	e046      	b.n	800927a <_scanf_float+0x182>
 80091ec:	2b65      	cmp	r3, #101	; 0x65
 80091ee:	d07a      	beq.n	80092e6 <_scanf_float+0x1ee>
 80091f0:	d818      	bhi.n	8009224 <_scanf_float+0x12c>
 80091f2:	2b54      	cmp	r3, #84	; 0x54
 80091f4:	d066      	beq.n	80092c4 <_scanf_float+0x1cc>
 80091f6:	d811      	bhi.n	800921c <_scanf_float+0x124>
 80091f8:	2b4e      	cmp	r3, #78	; 0x4e
 80091fa:	d1b5      	bne.n	8009168 <_scanf_float+0x70>
 80091fc:	2a00      	cmp	r2, #0
 80091fe:	d146      	bne.n	800928e <_scanf_float+0x196>
 8009200:	f1b9 0f00 	cmp.w	r9, #0
 8009204:	d145      	bne.n	8009292 <_scanf_float+0x19a>
 8009206:	6821      	ldr	r1, [r4, #0]
 8009208:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800920c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009210:	d13f      	bne.n	8009292 <_scanf_float+0x19a>
 8009212:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009216:	6021      	str	r1, [r4, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	e02e      	b.n	800927a <_scanf_float+0x182>
 800921c:	2b59      	cmp	r3, #89	; 0x59
 800921e:	d01e      	beq.n	800925e <_scanf_float+0x166>
 8009220:	2b61      	cmp	r3, #97	; 0x61
 8009222:	e7de      	b.n	80091e2 <_scanf_float+0xea>
 8009224:	2b6e      	cmp	r3, #110	; 0x6e
 8009226:	d0e9      	beq.n	80091fc <_scanf_float+0x104>
 8009228:	d815      	bhi.n	8009256 <_scanf_float+0x15e>
 800922a:	2b66      	cmp	r3, #102	; 0x66
 800922c:	d043      	beq.n	80092b6 <_scanf_float+0x1be>
 800922e:	2b69      	cmp	r3, #105	; 0x69
 8009230:	d19a      	bne.n	8009168 <_scanf_float+0x70>
 8009232:	f1bb 0f00 	cmp.w	fp, #0
 8009236:	d138      	bne.n	80092aa <_scanf_float+0x1b2>
 8009238:	f1b9 0f00 	cmp.w	r9, #0
 800923c:	d197      	bne.n	800916e <_scanf_float+0x76>
 800923e:	6821      	ldr	r1, [r4, #0]
 8009240:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009244:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009248:	d195      	bne.n	8009176 <_scanf_float+0x7e>
 800924a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800924e:	6021      	str	r1, [r4, #0]
 8009250:	f04f 0b01 	mov.w	fp, #1
 8009254:	e011      	b.n	800927a <_scanf_float+0x182>
 8009256:	2b74      	cmp	r3, #116	; 0x74
 8009258:	d034      	beq.n	80092c4 <_scanf_float+0x1cc>
 800925a:	2b79      	cmp	r3, #121	; 0x79
 800925c:	d184      	bne.n	8009168 <_scanf_float+0x70>
 800925e:	f1bb 0f07 	cmp.w	fp, #7
 8009262:	d181      	bne.n	8009168 <_scanf_float+0x70>
 8009264:	f04f 0b08 	mov.w	fp, #8
 8009268:	e007      	b.n	800927a <_scanf_float+0x182>
 800926a:	eb12 0f0b 	cmn.w	r2, fp
 800926e:	f47f af7b 	bne.w	8009168 <_scanf_float+0x70>
 8009272:	6821      	ldr	r1, [r4, #0]
 8009274:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009278:	6021      	str	r1, [r4, #0]
 800927a:	702b      	strb	r3, [r5, #0]
 800927c:	3501      	adds	r5, #1
 800927e:	e79a      	b.n	80091b6 <_scanf_float+0xbe>
 8009280:	6821      	ldr	r1, [r4, #0]
 8009282:	0608      	lsls	r0, r1, #24
 8009284:	f57f af70 	bpl.w	8009168 <_scanf_float+0x70>
 8009288:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800928c:	e7f4      	b.n	8009278 <_scanf_float+0x180>
 800928e:	2a02      	cmp	r2, #2
 8009290:	d047      	beq.n	8009322 <_scanf_float+0x22a>
 8009292:	f1bb 0f01 	cmp.w	fp, #1
 8009296:	d003      	beq.n	80092a0 <_scanf_float+0x1a8>
 8009298:	f1bb 0f04 	cmp.w	fp, #4
 800929c:	f47f af64 	bne.w	8009168 <_scanf_float+0x70>
 80092a0:	f10b 0b01 	add.w	fp, fp, #1
 80092a4:	fa5f fb8b 	uxtb.w	fp, fp
 80092a8:	e7e7      	b.n	800927a <_scanf_float+0x182>
 80092aa:	f1bb 0f03 	cmp.w	fp, #3
 80092ae:	d0f7      	beq.n	80092a0 <_scanf_float+0x1a8>
 80092b0:	f1bb 0f05 	cmp.w	fp, #5
 80092b4:	e7f2      	b.n	800929c <_scanf_float+0x1a4>
 80092b6:	f1bb 0f02 	cmp.w	fp, #2
 80092ba:	f47f af55 	bne.w	8009168 <_scanf_float+0x70>
 80092be:	f04f 0b03 	mov.w	fp, #3
 80092c2:	e7da      	b.n	800927a <_scanf_float+0x182>
 80092c4:	f1bb 0f06 	cmp.w	fp, #6
 80092c8:	f47f af4e 	bne.w	8009168 <_scanf_float+0x70>
 80092cc:	f04f 0b07 	mov.w	fp, #7
 80092d0:	e7d3      	b.n	800927a <_scanf_float+0x182>
 80092d2:	6821      	ldr	r1, [r4, #0]
 80092d4:	0588      	lsls	r0, r1, #22
 80092d6:	f57f af47 	bpl.w	8009168 <_scanf_float+0x70>
 80092da:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80092de:	6021      	str	r1, [r4, #0]
 80092e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80092e4:	e7c9      	b.n	800927a <_scanf_float+0x182>
 80092e6:	6821      	ldr	r1, [r4, #0]
 80092e8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80092ec:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80092f0:	d006      	beq.n	8009300 <_scanf_float+0x208>
 80092f2:	0548      	lsls	r0, r1, #21
 80092f4:	f57f af38 	bpl.w	8009168 <_scanf_float+0x70>
 80092f8:	f1b9 0f00 	cmp.w	r9, #0
 80092fc:	f43f af3b 	beq.w	8009176 <_scanf_float+0x7e>
 8009300:	0588      	lsls	r0, r1, #22
 8009302:	bf58      	it	pl
 8009304:	9802      	ldrpl	r0, [sp, #8]
 8009306:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800930a:	bf58      	it	pl
 800930c:	eba9 0000 	subpl.w	r0, r9, r0
 8009310:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009314:	bf58      	it	pl
 8009316:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800931a:	6021      	str	r1, [r4, #0]
 800931c:	f04f 0900 	mov.w	r9, #0
 8009320:	e7ab      	b.n	800927a <_scanf_float+0x182>
 8009322:	2203      	movs	r2, #3
 8009324:	e7a9      	b.n	800927a <_scanf_float+0x182>
 8009326:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800932a:	9205      	str	r2, [sp, #20]
 800932c:	4631      	mov	r1, r6
 800932e:	4638      	mov	r0, r7
 8009330:	4798      	blx	r3
 8009332:	9a05      	ldr	r2, [sp, #20]
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f af04 	beq.w	8009142 <_scanf_float+0x4a>
 800933a:	e715      	b.n	8009168 <_scanf_float+0x70>
 800933c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009340:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009344:	4632      	mov	r2, r6
 8009346:	4638      	mov	r0, r7
 8009348:	4798      	blx	r3
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	3b01      	subs	r3, #1
 800934e:	6123      	str	r3, [r4, #16]
 8009350:	e715      	b.n	800917e <_scanf_float+0x86>
 8009352:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009356:	2b06      	cmp	r3, #6
 8009358:	d80a      	bhi.n	8009370 <_scanf_float+0x278>
 800935a:	f1bb 0f02 	cmp.w	fp, #2
 800935e:	d966      	bls.n	800942e <_scanf_float+0x336>
 8009360:	f1ab 0b03 	sub.w	fp, fp, #3
 8009364:	fa5f fb8b 	uxtb.w	fp, fp
 8009368:	eba5 0b0b 	sub.w	fp, r5, fp
 800936c:	455d      	cmp	r5, fp
 800936e:	d149      	bne.n	8009404 <_scanf_float+0x30c>
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	05da      	lsls	r2, r3, #23
 8009374:	d51f      	bpl.n	80093b6 <_scanf_float+0x2be>
 8009376:	055b      	lsls	r3, r3, #21
 8009378:	d466      	bmi.n	8009448 <_scanf_float+0x350>
 800937a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	2965      	cmp	r1, #101	; 0x65
 8009382:	f103 33ff 	add.w	r3, r3, #4294967295
 8009386:	f105 3bff 	add.w	fp, r5, #4294967295
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	d00d      	beq.n	80093aa <_scanf_float+0x2b2>
 800938e:	2945      	cmp	r1, #69	; 0x45
 8009390:	d00b      	beq.n	80093aa <_scanf_float+0x2b2>
 8009392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009396:	4632      	mov	r2, r6
 8009398:	4638      	mov	r0, r7
 800939a:	4798      	blx	r3
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	f1a5 0b02 	sub.w	fp, r5, #2
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093ae:	4632      	mov	r2, r6
 80093b0:	4638      	mov	r0, r7
 80093b2:	4798      	blx	r3
 80093b4:	465d      	mov	r5, fp
 80093b6:	6826      	ldr	r6, [r4, #0]
 80093b8:	f016 0610 	ands.w	r6, r6, #16
 80093bc:	d170      	bne.n	80094a0 <_scanf_float+0x3a8>
 80093be:	702e      	strb	r6, [r5, #0]
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093ca:	d140      	bne.n	800944e <_scanf_float+0x356>
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	eba9 0303 	sub.w	r3, r9, r3
 80093d2:	425a      	negs	r2, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d147      	bne.n	8009468 <_scanf_float+0x370>
 80093d8:	2200      	movs	r2, #0
 80093da:	4638      	mov	r0, r7
 80093dc:	4641      	mov	r1, r8
 80093de:	f000 fe7f 	bl	800a0e0 <_strtod_r>
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	f8da 3000 	ldr.w	r3, [sl]
 80093e8:	f010 0f02 	tst.w	r0, #2
 80093ec:	f103 0204 	add.w	r2, r3, #4
 80093f0:	f8ca 2000 	str.w	r2, [sl]
 80093f4:	d043      	beq.n	800947e <_scanf_float+0x386>
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	ed83 0b00 	vstr	d0, [r3]
 80093fc:	68e3      	ldr	r3, [r4, #12]
 80093fe:	3301      	adds	r3, #1
 8009400:	60e3      	str	r3, [r4, #12]
 8009402:	e6c0      	b.n	8009186 <_scanf_float+0x8e>
 8009404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800940c:	4632      	mov	r2, r6
 800940e:	4638      	mov	r0, r7
 8009410:	4798      	blx	r3
 8009412:	6923      	ldr	r3, [r4, #16]
 8009414:	3b01      	subs	r3, #1
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	e7a8      	b.n	800936c <_scanf_float+0x274>
 800941a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800941e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009422:	4632      	mov	r2, r6
 8009424:	4638      	mov	r0, r7
 8009426:	4798      	blx	r3
 8009428:	6923      	ldr	r3, [r4, #16]
 800942a:	3b01      	subs	r3, #1
 800942c:	6123      	str	r3, [r4, #16]
 800942e:	4545      	cmp	r5, r8
 8009430:	d8f3      	bhi.n	800941a <_scanf_float+0x322>
 8009432:	e6a7      	b.n	8009184 <_scanf_float+0x8c>
 8009434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009438:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800943c:	4632      	mov	r2, r6
 800943e:	4638      	mov	r0, r7
 8009440:	4798      	blx	r3
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	3b01      	subs	r3, #1
 8009446:	6123      	str	r3, [r4, #16]
 8009448:	4545      	cmp	r5, r8
 800944a:	d8f3      	bhi.n	8009434 <_scanf_float+0x33c>
 800944c:	e69a      	b.n	8009184 <_scanf_float+0x8c>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0c1      	beq.n	80093d8 <_scanf_float+0x2e0>
 8009454:	9904      	ldr	r1, [sp, #16]
 8009456:	230a      	movs	r3, #10
 8009458:	4632      	mov	r2, r6
 800945a:	3101      	adds	r1, #1
 800945c:	4638      	mov	r0, r7
 800945e:	f000 fecb 	bl	800a1f8 <_strtol_r>
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	9d04      	ldr	r5, [sp, #16]
 8009466:	1ac2      	subs	r2, r0, r3
 8009468:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800946c:	429d      	cmp	r5, r3
 800946e:	bf28      	it	cs
 8009470:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009474:	490b      	ldr	r1, [pc, #44]	; (80094a4 <_scanf_float+0x3ac>)
 8009476:	4628      	mov	r0, r5
 8009478:	f000 f81c 	bl	80094b4 <siprintf>
 800947c:	e7ac      	b.n	80093d8 <_scanf_float+0x2e0>
 800947e:	f010 0004 	ands.w	r0, r0, #4
 8009482:	d1b8      	bne.n	80093f6 <_scanf_float+0x2fe>
 8009484:	eeb4 0b40 	vcmp.f64	d0, d0
 8009488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948c:	681d      	ldr	r5, [r3, #0]
 800948e:	d704      	bvc.n	800949a <_scanf_float+0x3a2>
 8009490:	f000 f80a 	bl	80094a8 <nanf>
 8009494:	ed85 0a00 	vstr	s0, [r5]
 8009498:	e7b0      	b.n	80093fc <_scanf_float+0x304>
 800949a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800949e:	e7f9      	b.n	8009494 <_scanf_float+0x39c>
 80094a0:	2600      	movs	r6, #0
 80094a2:	e670      	b.n	8009186 <_scanf_float+0x8e>
 80094a4:	0800c1f4 	.word	0x0800c1f4

080094a8 <nanf>:
 80094a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094b0 <nanf+0x8>
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	7fc00000 	.word	0x7fc00000

080094b4 <siprintf>:
 80094b4:	b40e      	push	{r1, r2, r3}
 80094b6:	b500      	push	{lr}
 80094b8:	b09c      	sub	sp, #112	; 0x70
 80094ba:	ab1d      	add	r3, sp, #116	; 0x74
 80094bc:	9002      	str	r0, [sp, #8]
 80094be:	9006      	str	r0, [sp, #24]
 80094c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <siprintf+0x38>)
 80094c6:	9107      	str	r1, [sp, #28]
 80094c8:	9104      	str	r1, [sp, #16]
 80094ca:	4909      	ldr	r1, [pc, #36]	; (80094f0 <siprintf+0x3c>)
 80094cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80094d0:	9105      	str	r1, [sp, #20]
 80094d2:	6800      	ldr	r0, [r0, #0]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	a902      	add	r1, sp, #8
 80094d8:	f002 fcde 	bl	800be98 <_svfiprintf_r>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	b01c      	add	sp, #112	; 0x70
 80094e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e8:	b003      	add	sp, #12
 80094ea:	4770      	bx	lr
 80094ec:	20000020 	.word	0x20000020
 80094f0:	ffff0208 	.word	0xffff0208

080094f4 <strncmp>:
 80094f4:	b510      	push	{r4, lr}
 80094f6:	b16a      	cbz	r2, 8009514 <strncmp+0x20>
 80094f8:	3901      	subs	r1, #1
 80094fa:	1884      	adds	r4, r0, r2
 80094fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009500:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009504:	4293      	cmp	r3, r2
 8009506:	d103      	bne.n	8009510 <strncmp+0x1c>
 8009508:	42a0      	cmp	r0, r4
 800950a:	d001      	beq.n	8009510 <strncmp+0x1c>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f5      	bne.n	80094fc <strncmp+0x8>
 8009510:	1a98      	subs	r0, r3, r2
 8009512:	bd10      	pop	{r4, pc}
 8009514:	4610      	mov	r0, r2
 8009516:	e7fc      	b.n	8009512 <strncmp+0x1e>

08009518 <sulp>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	4604      	mov	r4, r0
 800951c:	460d      	mov	r5, r1
 800951e:	4616      	mov	r6, r2
 8009520:	ec45 4b10 	vmov	d0, r4, r5
 8009524:	f002 fa74 	bl	800ba10 <__ulp>
 8009528:	b17e      	cbz	r6, 800954a <sulp+0x32>
 800952a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800952e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009532:	2b00      	cmp	r3, #0
 8009534:	dd09      	ble.n	800954a <sulp+0x32>
 8009536:	051b      	lsls	r3, r3, #20
 8009538:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800953c:	2000      	movs	r0, #0
 800953e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009542:	ec41 0b17 	vmov	d7, r0, r1
 8009546:	ee20 0b07 	vmul.f64	d0, d0, d7
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	0000      	movs	r0, r0
	...

08009550 <_strtod_l>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	ed2d 8b0c 	vpush	{d8-d13}
 8009558:	4698      	mov	r8, r3
 800955a:	b09d      	sub	sp, #116	; 0x74
 800955c:	2300      	movs	r3, #0
 800955e:	4604      	mov	r4, r0
 8009560:	4640      	mov	r0, r8
 8009562:	460e      	mov	r6, r1
 8009564:	9214      	str	r2, [sp, #80]	; 0x50
 8009566:	9318      	str	r3, [sp, #96]	; 0x60
 8009568:	f001 ff5b 	bl	800b422 <__localeconv_l>
 800956c:	4681      	mov	r9, r0
 800956e:	6800      	ldr	r0, [r0, #0]
 8009570:	f7f6 fe66 	bl	8000240 <strlen>
 8009574:	f04f 0a00 	mov.w	sl, #0
 8009578:	4607      	mov	r7, r0
 800957a:	f04f 0b00 	mov.w	fp, #0
 800957e:	9617      	str	r6, [sp, #92]	; 0x5c
 8009580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	2a0d      	cmp	r2, #13
 8009586:	d834      	bhi.n	80095f2 <_strtod_l+0xa2>
 8009588:	2a09      	cmp	r2, #9
 800958a:	d238      	bcs.n	80095fe <_strtod_l+0xae>
 800958c:	2a00      	cmp	r2, #0
 800958e:	d040      	beq.n	8009612 <_strtod_l+0xc2>
 8009590:	2300      	movs	r3, #0
 8009592:	930d      	str	r3, [sp, #52]	; 0x34
 8009594:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8009596:	782b      	ldrb	r3, [r5, #0]
 8009598:	2b30      	cmp	r3, #48	; 0x30
 800959a:	f040 80b3 	bne.w	8009704 <_strtod_l+0x1b4>
 800959e:	786b      	ldrb	r3, [r5, #1]
 80095a0:	2b58      	cmp	r3, #88	; 0x58
 80095a2:	d001      	beq.n	80095a8 <_strtod_l+0x58>
 80095a4:	2b78      	cmp	r3, #120	; 0x78
 80095a6:	d169      	bne.n	800967c <_strtod_l+0x12c>
 80095a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	ab18      	add	r3, sp, #96	; 0x60
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80095b4:	ab19      	add	r3, sp, #100	; 0x64
 80095b6:	4a8f      	ldr	r2, [pc, #572]	; (80097f4 <_strtod_l+0x2a4>)
 80095b8:	a917      	add	r1, sp, #92	; 0x5c
 80095ba:	4620      	mov	r0, r4
 80095bc:	f001 fc57 	bl	800ae6e <__gethex>
 80095c0:	f010 0607 	ands.w	r6, r0, #7
 80095c4:	4607      	mov	r7, r0
 80095c6:	d005      	beq.n	80095d4 <_strtod_l+0x84>
 80095c8:	2e06      	cmp	r6, #6
 80095ca:	d12c      	bne.n	8009626 <_strtod_l+0xd6>
 80095cc:	3501      	adds	r5, #1
 80095ce:	2300      	movs	r3, #0
 80095d0:	9517      	str	r5, [sp, #92]	; 0x5c
 80095d2:	930d      	str	r3, [sp, #52]	; 0x34
 80095d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 855e 	bne.w	800a098 <_strtod_l+0xb48>
 80095dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095de:	b1eb      	cbz	r3, 800961c <_strtod_l+0xcc>
 80095e0:	ec4b ab17 	vmov	d7, sl, fp
 80095e4:	eeb1 0b47 	vneg.f64	d0, d7
 80095e8:	b01d      	add	sp, #116	; 0x74
 80095ea:	ecbd 8b0c 	vpop	{d8-d13}
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	2a2b      	cmp	r2, #43	; 0x2b
 80095f4:	d015      	beq.n	8009622 <_strtod_l+0xd2>
 80095f6:	2a2d      	cmp	r2, #45	; 0x2d
 80095f8:	d004      	beq.n	8009604 <_strtod_l+0xb4>
 80095fa:	2a20      	cmp	r2, #32
 80095fc:	d1c8      	bne.n	8009590 <_strtod_l+0x40>
 80095fe:	3301      	adds	r3, #1
 8009600:	9317      	str	r3, [sp, #92]	; 0x5c
 8009602:	e7bd      	b.n	8009580 <_strtod_l+0x30>
 8009604:	2201      	movs	r2, #1
 8009606:	920d      	str	r2, [sp, #52]	; 0x34
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	9217      	str	r2, [sp, #92]	; 0x5c
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1c0      	bne.n	8009594 <_strtod_l+0x44>
 8009612:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009614:	9617      	str	r6, [sp, #92]	; 0x5c
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 853c 	bne.w	800a094 <_strtod_l+0xb44>
 800961c:	ec4b ab10 	vmov	d0, sl, fp
 8009620:	e7e2      	b.n	80095e8 <_strtod_l+0x98>
 8009622:	2200      	movs	r2, #0
 8009624:	e7ef      	b.n	8009606 <_strtod_l+0xb6>
 8009626:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009628:	b13a      	cbz	r2, 800963a <_strtod_l+0xea>
 800962a:	2135      	movs	r1, #53	; 0x35
 800962c:	a81a      	add	r0, sp, #104	; 0x68
 800962e:	f002 fae8 	bl	800bc02 <__copybits>
 8009632:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009634:	4620      	mov	r0, r4
 8009636:	f001 ff53 	bl	800b4e0 <_Bfree>
 800963a:	3e01      	subs	r6, #1
 800963c:	2e04      	cmp	r6, #4
 800963e:	d806      	bhi.n	800964e <_strtod_l+0xfe>
 8009640:	e8df f006 	tbb	[pc, r6]
 8009644:	1714030a 	.word	0x1714030a
 8009648:	0a          	.byte	0x0a
 8009649:	00          	.byte	0x00
 800964a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800964e:	073b      	lsls	r3, r7, #28
 8009650:	d5c0      	bpl.n	80095d4 <_strtod_l+0x84>
 8009652:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009656:	e7bd      	b.n	80095d4 <_strtod_l+0x84>
 8009658:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800965c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800965e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009662:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009666:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800966a:	e7f0      	b.n	800964e <_strtod_l+0xfe>
 800966c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80097f8 <_strtod_l+0x2a8>
 8009670:	e7ed      	b.n	800964e <_strtod_l+0xfe>
 8009672:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009676:	f04f 3aff 	mov.w	sl, #4294967295
 800967a:	e7e8      	b.n	800964e <_strtod_l+0xfe>
 800967c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	9217      	str	r2, [sp, #92]	; 0x5c
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b30      	cmp	r3, #48	; 0x30
 8009686:	d0f9      	beq.n	800967c <_strtod_l+0x12c>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0a3      	beq.n	80095d4 <_strtod_l+0x84>
 800968c:	2301      	movs	r3, #1
 800968e:	930a      	str	r3, [sp, #40]	; 0x28
 8009690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009692:	930c      	str	r3, [sp, #48]	; 0x30
 8009694:	2300      	movs	r3, #0
 8009696:	9306      	str	r3, [sp, #24]
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	461d      	mov	r5, r3
 800969c:	220a      	movs	r2, #10
 800969e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80096a0:	f890 8000 	ldrb.w	r8, [r0]
 80096a4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80096a8:	b2d9      	uxtb	r1, r3
 80096aa:	2909      	cmp	r1, #9
 80096ac:	d92c      	bls.n	8009708 <_strtod_l+0x1b8>
 80096ae:	463a      	mov	r2, r7
 80096b0:	f8d9 1000 	ldr.w	r1, [r9]
 80096b4:	f7ff ff1e 	bl	80094f4 <strncmp>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d035      	beq.n	8009728 <_strtod_l+0x1d8>
 80096bc:	2000      	movs	r0, #0
 80096be:	4642      	mov	r2, r8
 80096c0:	462b      	mov	r3, r5
 80096c2:	4601      	mov	r1, r0
 80096c4:	9004      	str	r0, [sp, #16]
 80096c6:	2a65      	cmp	r2, #101	; 0x65
 80096c8:	d001      	beq.n	80096ce <_strtod_l+0x17e>
 80096ca:	2a45      	cmp	r2, #69	; 0x45
 80096cc:	d117      	bne.n	80096fe <_strtod_l+0x1ae>
 80096ce:	b923      	cbnz	r3, 80096da <_strtod_l+0x18a>
 80096d0:	b910      	cbnz	r0, 80096d8 <_strtod_l+0x188>
 80096d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d09c      	beq.n	8009612 <_strtod_l+0xc2>
 80096d8:	2300      	movs	r3, #0
 80096da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80096dc:	1c72      	adds	r2, r6, #1
 80096de:	9217      	str	r2, [sp, #92]	; 0x5c
 80096e0:	7872      	ldrb	r2, [r6, #1]
 80096e2:	2a2b      	cmp	r2, #43	; 0x2b
 80096e4:	f000 8082 	beq.w	80097ec <_strtod_l+0x29c>
 80096e8:	2a2d      	cmp	r2, #45	; 0x2d
 80096ea:	d079      	beq.n	80097e0 <_strtod_l+0x290>
 80096ec:	f04f 0e00 	mov.w	lr, #0
 80096f0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80096f4:	f1bc 0f09 	cmp.w	ip, #9
 80096f8:	f240 8086 	bls.w	8009808 <_strtod_l+0x2b8>
 80096fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80096fe:	f04f 0800 	mov.w	r8, #0
 8009702:	e0a8      	b.n	8009856 <_strtod_l+0x306>
 8009704:	2300      	movs	r3, #0
 8009706:	e7c2      	b.n	800968e <_strtod_l+0x13e>
 8009708:	2d08      	cmp	r5, #8
 800970a:	bfd5      	itete	le
 800970c:	9908      	ldrle	r1, [sp, #32]
 800970e:	9906      	ldrgt	r1, [sp, #24]
 8009710:	fb02 3301 	mlale	r3, r2, r1, r3
 8009714:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009718:	f100 0001 	add.w	r0, r0, #1
 800971c:	bfd4      	ite	le
 800971e:	9308      	strle	r3, [sp, #32]
 8009720:	9306      	strgt	r3, [sp, #24]
 8009722:	3501      	adds	r5, #1
 8009724:	9017      	str	r0, [sp, #92]	; 0x5c
 8009726:	e7ba      	b.n	800969e <_strtod_l+0x14e>
 8009728:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800972a:	19da      	adds	r2, r3, r7
 800972c:	9217      	str	r2, [sp, #92]	; 0x5c
 800972e:	5dda      	ldrb	r2, [r3, r7]
 8009730:	2d00      	cmp	r5, #0
 8009732:	d038      	beq.n	80097a6 <_strtod_l+0x256>
 8009734:	4601      	mov	r1, r0
 8009736:	462b      	mov	r3, r5
 8009738:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800973c:	2f09      	cmp	r7, #9
 800973e:	d913      	bls.n	8009768 <_strtod_l+0x218>
 8009740:	2701      	movs	r7, #1
 8009742:	9704      	str	r7, [sp, #16]
 8009744:	e7bf      	b.n	80096c6 <_strtod_l+0x176>
 8009746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	9217      	str	r2, [sp, #92]	; 0x5c
 800974c:	785a      	ldrb	r2, [r3, #1]
 800974e:	3001      	adds	r0, #1
 8009750:	2a30      	cmp	r2, #48	; 0x30
 8009752:	d0f8      	beq.n	8009746 <_strtod_l+0x1f6>
 8009754:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009758:	2b08      	cmp	r3, #8
 800975a:	f200 84a2 	bhi.w	800a0a2 <_strtod_l+0xb52>
 800975e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009760:	930c      	str	r3, [sp, #48]	; 0x30
 8009762:	4601      	mov	r1, r0
 8009764:	2000      	movs	r0, #0
 8009766:	4603      	mov	r3, r0
 8009768:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800976c:	f100 0701 	add.w	r7, r0, #1
 8009770:	d013      	beq.n	800979a <_strtod_l+0x24a>
 8009772:	4439      	add	r1, r7
 8009774:	eb00 0e03 	add.w	lr, r0, r3
 8009778:	461f      	mov	r7, r3
 800977a:	f04f 0c0a 	mov.w	ip, #10
 800977e:	45be      	cmp	lr, r7
 8009780:	d113      	bne.n	80097aa <_strtod_l+0x25a>
 8009782:	181f      	adds	r7, r3, r0
 8009784:	2f08      	cmp	r7, #8
 8009786:	f103 0301 	add.w	r3, r3, #1
 800978a:	4403      	add	r3, r0
 800978c:	dc1d      	bgt.n	80097ca <_strtod_l+0x27a>
 800978e:	9a08      	ldr	r2, [sp, #32]
 8009790:	200a      	movs	r0, #10
 8009792:	fb00 8202 	mla	r2, r0, r2, r8
 8009796:	9208      	str	r2, [sp, #32]
 8009798:	2700      	movs	r7, #0
 800979a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800979c:	1c50      	adds	r0, r2, #1
 800979e:	9017      	str	r0, [sp, #92]	; 0x5c
 80097a0:	7852      	ldrb	r2, [r2, #1]
 80097a2:	4638      	mov	r0, r7
 80097a4:	e7c8      	b.n	8009738 <_strtod_l+0x1e8>
 80097a6:	4628      	mov	r0, r5
 80097a8:	e7d2      	b.n	8009750 <_strtod_l+0x200>
 80097aa:	2f08      	cmp	r7, #8
 80097ac:	f107 0701 	add.w	r7, r7, #1
 80097b0:	dc04      	bgt.n	80097bc <_strtod_l+0x26c>
 80097b2:	9a08      	ldr	r2, [sp, #32]
 80097b4:	fb0c f202 	mul.w	r2, ip, r2
 80097b8:	9208      	str	r2, [sp, #32]
 80097ba:	e7e0      	b.n	800977e <_strtod_l+0x22e>
 80097bc:	2f10      	cmp	r7, #16
 80097be:	bfde      	ittt	le
 80097c0:	9a06      	ldrle	r2, [sp, #24]
 80097c2:	fb0c f202 	mulle.w	r2, ip, r2
 80097c6:	9206      	strle	r2, [sp, #24]
 80097c8:	e7d9      	b.n	800977e <_strtod_l+0x22e>
 80097ca:	2b10      	cmp	r3, #16
 80097cc:	bfdf      	itttt	le
 80097ce:	9a06      	ldrle	r2, [sp, #24]
 80097d0:	200a      	movle	r0, #10
 80097d2:	fb00 8202 	mlale	r2, r0, r2, r8
 80097d6:	9206      	strle	r2, [sp, #24]
 80097d8:	e7de      	b.n	8009798 <_strtod_l+0x248>
 80097da:	2301      	movs	r3, #1
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	e777      	b.n	80096d0 <_strtod_l+0x180>
 80097e0:	f04f 0e01 	mov.w	lr, #1
 80097e4:	1cb2      	adds	r2, r6, #2
 80097e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80097e8:	78b2      	ldrb	r2, [r6, #2]
 80097ea:	e781      	b.n	80096f0 <_strtod_l+0x1a0>
 80097ec:	f04f 0e00 	mov.w	lr, #0
 80097f0:	e7f8      	b.n	80097e4 <_strtod_l+0x294>
 80097f2:	bf00      	nop
 80097f4:	0800c1fc 	.word	0x0800c1fc
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097fe:	f102 0c01 	add.w	ip, r2, #1
 8009802:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8009806:	7852      	ldrb	r2, [r2, #1]
 8009808:	2a30      	cmp	r2, #48	; 0x30
 800980a:	d0f7      	beq.n	80097fc <_strtod_l+0x2ac>
 800980c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8009810:	f1bc 0f08 	cmp.w	ip, #8
 8009814:	f63f af73 	bhi.w	80096fe <_strtod_l+0x1ae>
 8009818:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800981c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800981e:	920e      	str	r2, [sp, #56]	; 0x38
 8009820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009822:	f102 0c01 	add.w	ip, r2, #1
 8009826:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800982a:	7852      	ldrb	r2, [r2, #1]
 800982c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8009830:	f1b9 0f09 	cmp.w	r9, #9
 8009834:	d939      	bls.n	80098aa <_strtod_l+0x35a>
 8009836:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8009838:	ebac 0c07 	sub.w	ip, ip, r7
 800983c:	f1bc 0f08 	cmp.w	ip, #8
 8009840:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8009844:	dc37      	bgt.n	80098b6 <_strtod_l+0x366>
 8009846:	45e0      	cmp	r8, ip
 8009848:	bfa8      	it	ge
 800984a:	46e0      	movge	r8, ip
 800984c:	f1be 0f00 	cmp.w	lr, #0
 8009850:	d001      	beq.n	8009856 <_strtod_l+0x306>
 8009852:	f1c8 0800 	rsb	r8, r8, #0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d151      	bne.n	80098fe <_strtod_l+0x3ae>
 800985a:	2800      	cmp	r0, #0
 800985c:	f47f aeba 	bne.w	80095d4 <_strtod_l+0x84>
 8009860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009862:	2b00      	cmp	r3, #0
 8009864:	f47f aeb6 	bne.w	80095d4 <_strtod_l+0x84>
 8009868:	9b04      	ldr	r3, [sp, #16]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f47f aed1 	bne.w	8009612 <_strtod_l+0xc2>
 8009870:	2a4e      	cmp	r2, #78	; 0x4e
 8009872:	d027      	beq.n	80098c4 <_strtod_l+0x374>
 8009874:	dc21      	bgt.n	80098ba <_strtod_l+0x36a>
 8009876:	2a49      	cmp	r2, #73	; 0x49
 8009878:	f47f aecb 	bne.w	8009612 <_strtod_l+0xc2>
 800987c:	499a      	ldr	r1, [pc, #616]	; (8009ae8 <_strtod_l+0x598>)
 800987e:	a817      	add	r0, sp, #92	; 0x5c
 8009880:	f001 fd28 	bl	800b2d4 <__match>
 8009884:	2800      	cmp	r0, #0
 8009886:	f43f aec4 	beq.w	8009612 <_strtod_l+0xc2>
 800988a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800988c:	4997      	ldr	r1, [pc, #604]	; (8009aec <_strtod_l+0x59c>)
 800988e:	3b01      	subs	r3, #1
 8009890:	a817      	add	r0, sp, #92	; 0x5c
 8009892:	9317      	str	r3, [sp, #92]	; 0x5c
 8009894:	f001 fd1e 	bl	800b2d4 <__match>
 8009898:	b910      	cbnz	r0, 80098a0 <_strtod_l+0x350>
 800989a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800989c:	3301      	adds	r3, #1
 800989e:	9317      	str	r3, [sp, #92]	; 0x5c
 80098a0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8009b04 <_strtod_l+0x5b4>
 80098a4:	f04f 0a00 	mov.w	sl, #0
 80098a8:	e694      	b.n	80095d4 <_strtod_l+0x84>
 80098aa:	270a      	movs	r7, #10
 80098ac:	fb07 2808 	mla	r8, r7, r8, r2
 80098b0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80098b4:	e7b4      	b.n	8009820 <_strtod_l+0x2d0>
 80098b6:	46e0      	mov	r8, ip
 80098b8:	e7c8      	b.n	800984c <_strtod_l+0x2fc>
 80098ba:	2a69      	cmp	r2, #105	; 0x69
 80098bc:	d0de      	beq.n	800987c <_strtod_l+0x32c>
 80098be:	2a6e      	cmp	r2, #110	; 0x6e
 80098c0:	f47f aea7 	bne.w	8009612 <_strtod_l+0xc2>
 80098c4:	498a      	ldr	r1, [pc, #552]	; (8009af0 <_strtod_l+0x5a0>)
 80098c6:	a817      	add	r0, sp, #92	; 0x5c
 80098c8:	f001 fd04 	bl	800b2d4 <__match>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	f43f aea0 	beq.w	8009612 <_strtod_l+0xc2>
 80098d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b28      	cmp	r3, #40	; 0x28
 80098d8:	d10e      	bne.n	80098f8 <_strtod_l+0x3a8>
 80098da:	aa1a      	add	r2, sp, #104	; 0x68
 80098dc:	4985      	ldr	r1, [pc, #532]	; (8009af4 <_strtod_l+0x5a4>)
 80098de:	a817      	add	r0, sp, #92	; 0x5c
 80098e0:	f001 fd0c 	bl	800b2fc <__hexnan>
 80098e4:	2805      	cmp	r0, #5
 80098e6:	d107      	bne.n	80098f8 <_strtod_l+0x3a8>
 80098e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098ea:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80098ee:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80098f2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80098f6:	e66d      	b.n	80095d4 <_strtod_l+0x84>
 80098f8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8009b08 <_strtod_l+0x5b8>
 80098fc:	e7d2      	b.n	80098a4 <_strtod_l+0x354>
 80098fe:	eddd 7a08 	vldr	s15, [sp, #32]
 8009902:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009906:	eba8 0201 	sub.w	r2, r8, r1
 800990a:	2d00      	cmp	r5, #0
 800990c:	bf08      	it	eq
 800990e:	461d      	moveq	r5, r3
 8009910:	2b10      	cmp	r3, #16
 8009912:	9204      	str	r2, [sp, #16]
 8009914:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009918:	461a      	mov	r2, r3
 800991a:	bfa8      	it	ge
 800991c:	2210      	movge	r2, #16
 800991e:	2b09      	cmp	r3, #9
 8009920:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009924:	dc14      	bgt.n	8009950 <_strtod_l+0x400>
 8009926:	9904      	ldr	r1, [sp, #16]
 8009928:	2900      	cmp	r1, #0
 800992a:	f43f ae53 	beq.w	80095d4 <_strtod_l+0x84>
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	dd72      	ble.n	8009a18 <_strtod_l+0x4c8>
 8009932:	2916      	cmp	r1, #22
 8009934:	dc5a      	bgt.n	80099ec <_strtod_l+0x49c>
 8009936:	4970      	ldr	r1, [pc, #448]	; (8009af8 <_strtod_l+0x5a8>)
 8009938:	9b04      	ldr	r3, [sp, #16]
 800993a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800993e:	ed91 7b00 	vldr	d7, [r1]
 8009942:	ec4b ab16 	vmov	d6, sl, fp
 8009946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800994a:	ec5b ab17 	vmov	sl, fp, d7
 800994e:	e641      	b.n	80095d4 <_strtod_l+0x84>
 8009950:	4969      	ldr	r1, [pc, #420]	; (8009af8 <_strtod_l+0x5a8>)
 8009952:	eddd 7a06 	vldr	s15, [sp, #24]
 8009956:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800995a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800995e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009962:	2b0f      	cmp	r3, #15
 8009964:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009968:	eea5 7b06 	vfma.f64	d7, d5, d6
 800996c:	ec5b ab17 	vmov	sl, fp, d7
 8009970:	ddd9      	ble.n	8009926 <_strtod_l+0x3d6>
 8009972:	9904      	ldr	r1, [sp, #16]
 8009974:	1a9a      	subs	r2, r3, r2
 8009976:	440a      	add	r2, r1
 8009978:	2a00      	cmp	r2, #0
 800997a:	f340 8096 	ble.w	8009aaa <_strtod_l+0x55a>
 800997e:	f012 000f 	ands.w	r0, r2, #15
 8009982:	d00a      	beq.n	800999a <_strtod_l+0x44a>
 8009984:	495c      	ldr	r1, [pc, #368]	; (8009af8 <_strtod_l+0x5a8>)
 8009986:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800998a:	ed91 7b00 	vldr	d7, [r1]
 800998e:	ec4b ab16 	vmov	d6, sl, fp
 8009992:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009996:	ec5b ab17 	vmov	sl, fp, d7
 800999a:	f032 020f 	bics.w	r2, r2, #15
 800999e:	d072      	beq.n	8009a86 <_strtod_l+0x536>
 80099a0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80099a4:	dd45      	ble.n	8009a32 <_strtod_l+0x4e2>
 80099a6:	2500      	movs	r5, #0
 80099a8:	46a8      	mov	r8, r5
 80099aa:	9506      	str	r5, [sp, #24]
 80099ac:	46a9      	mov	r9, r5
 80099ae:	2322      	movs	r3, #34	; 0x22
 80099b0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8009b04 <_strtod_l+0x5b4>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	f04f 0a00 	mov.w	sl, #0
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f43f ae09 	beq.w	80095d4 <_strtod_l+0x84>
 80099c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099c4:	4620      	mov	r0, r4
 80099c6:	f001 fd8b 	bl	800b4e0 <_Bfree>
 80099ca:	4649      	mov	r1, r9
 80099cc:	4620      	mov	r0, r4
 80099ce:	f001 fd87 	bl	800b4e0 <_Bfree>
 80099d2:	4641      	mov	r1, r8
 80099d4:	4620      	mov	r0, r4
 80099d6:	f001 fd83 	bl	800b4e0 <_Bfree>
 80099da:	9906      	ldr	r1, [sp, #24]
 80099dc:	4620      	mov	r0, r4
 80099de:	f001 fd7f 	bl	800b4e0 <_Bfree>
 80099e2:	4629      	mov	r1, r5
 80099e4:	4620      	mov	r0, r4
 80099e6:	f001 fd7b 	bl	800b4e0 <_Bfree>
 80099ea:	e5f3      	b.n	80095d4 <_strtod_l+0x84>
 80099ec:	9804      	ldr	r0, [sp, #16]
 80099ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80099f2:	4281      	cmp	r1, r0
 80099f4:	dbbd      	blt.n	8009972 <_strtod_l+0x422>
 80099f6:	4a40      	ldr	r2, [pc, #256]	; (8009af8 <_strtod_l+0x5a8>)
 80099f8:	f1c3 030f 	rsb	r3, r3, #15
 80099fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009a00:	ed91 7b00 	vldr	d7, [r1]
 8009a04:	ec4b ab16 	vmov	d6, sl, fp
 8009a08:	1ac3      	subs	r3, r0, r3
 8009a0a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a12:	ed92 6b00 	vldr	d6, [r2]
 8009a16:	e796      	b.n	8009946 <_strtod_l+0x3f6>
 8009a18:	3116      	adds	r1, #22
 8009a1a:	dbaa      	blt.n	8009972 <_strtod_l+0x422>
 8009a1c:	4936      	ldr	r1, [pc, #216]	; (8009af8 <_strtod_l+0x5a8>)
 8009a1e:	9b04      	ldr	r3, [sp, #16]
 8009a20:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8009a24:	ed91 7b00 	vldr	d7, [r1]
 8009a28:	ec4b ab16 	vmov	d6, sl, fp
 8009a2c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a30:	e78b      	b.n	800994a <_strtod_l+0x3fa>
 8009a32:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009a36:	2000      	movs	r0, #0
 8009a38:	4e30      	ldr	r6, [pc, #192]	; (8009afc <_strtod_l+0x5ac>)
 8009a3a:	1112      	asrs	r2, r2, #4
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	2a01      	cmp	r2, #1
 8009a40:	dc23      	bgt.n	8009a8a <_strtod_l+0x53a>
 8009a42:	b108      	cbz	r0, 8009a48 <_strtod_l+0x4f8>
 8009a44:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8009a48:	4a2c      	ldr	r2, [pc, #176]	; (8009afc <_strtod_l+0x5ac>)
 8009a4a:	482d      	ldr	r0, [pc, #180]	; (8009b00 <_strtod_l+0x5b0>)
 8009a4c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009a50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a54:	ed91 7b00 	vldr	d7, [r1]
 8009a58:	ec4b ab16 	vmov	d6, sl, fp
 8009a5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a64:	9907      	ldr	r1, [sp, #28]
 8009a66:	4a27      	ldr	r2, [pc, #156]	; (8009b04 <_strtod_l+0x5b4>)
 8009a68:	400a      	ands	r2, r1
 8009a6a:	4282      	cmp	r2, r0
 8009a6c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8009a70:	d899      	bhi.n	80099a6 <_strtod_l+0x456>
 8009a72:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009a76:	4282      	cmp	r2, r0
 8009a78:	bf86      	itte	hi
 8009a7a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8009b0c <_strtod_l+0x5bc>
 8009a7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a82:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8009a86:	2700      	movs	r7, #0
 8009a88:	e070      	b.n	8009b6c <_strtod_l+0x61c>
 8009a8a:	07d7      	lsls	r7, r2, #31
 8009a8c:	d50a      	bpl.n	8009aa4 <_strtod_l+0x554>
 8009a8e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8009a92:	ed90 7b00 	vldr	d7, [r0]
 8009a96:	ed9d 6b06 	vldr	d6, [sp, #24]
 8009a9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	1052      	asrs	r2, r2, #1
 8009aa8:	e7c9      	b.n	8009a3e <_strtod_l+0x4ee>
 8009aaa:	d0ec      	beq.n	8009a86 <_strtod_l+0x536>
 8009aac:	4252      	negs	r2, r2
 8009aae:	f012 000f 	ands.w	r0, r2, #15
 8009ab2:	d00a      	beq.n	8009aca <_strtod_l+0x57a>
 8009ab4:	4910      	ldr	r1, [pc, #64]	; (8009af8 <_strtod_l+0x5a8>)
 8009ab6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009aba:	ed91 7b00 	vldr	d7, [r1]
 8009abe:	ec4b ab16 	vmov	d6, sl, fp
 8009ac2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ac6:	ec5b ab17 	vmov	sl, fp, d7
 8009aca:	1112      	asrs	r2, r2, #4
 8009acc:	d0db      	beq.n	8009a86 <_strtod_l+0x536>
 8009ace:	2a1f      	cmp	r2, #31
 8009ad0:	dd1e      	ble.n	8009b10 <_strtod_l+0x5c0>
 8009ad2:	2500      	movs	r5, #0
 8009ad4:	46a8      	mov	r8, r5
 8009ad6:	9506      	str	r5, [sp, #24]
 8009ad8:	46a9      	mov	r9, r5
 8009ada:	2322      	movs	r3, #34	; 0x22
 8009adc:	f04f 0a00 	mov.w	sl, #0
 8009ae0:	f04f 0b00 	mov.w	fp, #0
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	e768      	b.n	80099ba <_strtod_l+0x46a>
 8009ae8:	0800c1c5 	.word	0x0800c1c5
 8009aec:	0800c253 	.word	0x0800c253
 8009af0:	0800c1cd 	.word	0x0800c1cd
 8009af4:	0800c210 	.word	0x0800c210
 8009af8:	0800c2f8 	.word	0x0800c2f8
 8009afc:	0800c2d0 	.word	0x0800c2d0
 8009b00:	7ca00000 	.word	0x7ca00000
 8009b04:	7ff00000 	.word	0x7ff00000
 8009b08:	fff80000 	.word	0xfff80000
 8009b0c:	7fefffff 	.word	0x7fefffff
 8009b10:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009b14:	f012 0710 	ands.w	r7, r2, #16
 8009b18:	49ab      	ldr	r1, [pc, #684]	; (8009dc8 <_strtod_l+0x878>)
 8009b1a:	bf18      	it	ne
 8009b1c:	276a      	movne	r7, #106	; 0x6a
 8009b1e:	2000      	movs	r0, #0
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	f300 8113 	bgt.w	8009d4c <_strtod_l+0x7fc>
 8009b26:	b108      	cbz	r0, 8009b2c <_strtod_l+0x5dc>
 8009b28:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8009b2c:	b1bf      	cbz	r7, 8009b5e <_strtod_l+0x60e>
 8009b2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b32:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	4659      	mov	r1, fp
 8009b3a:	dd10      	ble.n	8009b5e <_strtod_l+0x60e>
 8009b3c:	2a1f      	cmp	r2, #31
 8009b3e:	f340 8113 	ble.w	8009d68 <_strtod_l+0x818>
 8009b42:	2a34      	cmp	r2, #52	; 0x34
 8009b44:	bfde      	ittt	le
 8009b46:	3a20      	suble	r2, #32
 8009b48:	f04f 30ff 	movle.w	r0, #4294967295
 8009b4c:	fa00 f202 	lslle.w	r2, r0, r2
 8009b50:	f04f 0a00 	mov.w	sl, #0
 8009b54:	bfcc      	ite	gt
 8009b56:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b5a:	ea02 0b01 	andle.w	fp, r2, r1
 8009b5e:	ec4b ab17 	vmov	d7, sl, fp
 8009b62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6a:	d0b2      	beq.n	8009ad2 <_strtod_l+0x582>
 8009b6c:	9a08      	ldr	r2, [sp, #32]
 8009b6e:	9200      	str	r2, [sp, #0]
 8009b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b72:	462a      	mov	r2, r5
 8009b74:	4620      	mov	r0, r4
 8009b76:	f001 fd05 	bl	800b584 <__s2b>
 8009b7a:	9006      	str	r0, [sp, #24]
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f af12 	beq.w	80099a6 <_strtod_l+0x456>
 8009b82:	9a04      	ldr	r2, [sp, #16]
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	f1c3 0300 	rsb	r3, r3, #0
 8009b8c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8009db0 <_strtod_l+0x860>
 8009b90:	bfa8      	it	ge
 8009b92:	2300      	movge	r3, #0
 8009b94:	ed9f ab88 	vldr	d10, [pc, #544]	; 8009db8 <_strtod_l+0x868>
 8009b98:	ed9f bb89 	vldr	d11, [pc, #548]	; 8009dc0 <_strtod_l+0x870>
 8009b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009b9e:	2500      	movs	r5, #0
 8009ba0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8009ba6:	46a8      	mov	r8, r5
 8009ba8:	9b06      	ldr	r3, [sp, #24]
 8009baa:	4620      	mov	r0, r4
 8009bac:	6859      	ldr	r1, [r3, #4]
 8009bae:	f001 fc63 	bl	800b478 <_Balloc>
 8009bb2:	4681      	mov	r9, r0
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f43f aefa 	beq.w	80099ae <_strtod_l+0x45e>
 8009bba:	9b06      	ldr	r3, [sp, #24]
 8009bbc:	691a      	ldr	r2, [r3, #16]
 8009bbe:	3202      	adds	r2, #2
 8009bc0:	f103 010c 	add.w	r1, r3, #12
 8009bc4:	0092      	lsls	r2, r2, #2
 8009bc6:	300c      	adds	r0, #12
 8009bc8:	f7fe fe48 	bl	800885c <memcpy>
 8009bcc:	aa1a      	add	r2, sp, #104	; 0x68
 8009bce:	a919      	add	r1, sp, #100	; 0x64
 8009bd0:	ec4b ab10 	vmov	d0, sl, fp
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009bda:	f001 ff8f 	bl	800bafc <__d2b>
 8009bde:	9018      	str	r0, [sp, #96]	; 0x60
 8009be0:	2800      	cmp	r0, #0
 8009be2:	f43f aee4 	beq.w	80099ae <_strtod_l+0x45e>
 8009be6:	2101      	movs	r1, #1
 8009be8:	4620      	mov	r0, r4
 8009bea:	f001 fd57 	bl	800b69c <__i2b>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	f43f aedc 	beq.w	80099ae <_strtod_l+0x45e>
 8009bf6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009bf8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009bfa:	2e00      	cmp	r6, #0
 8009bfc:	bfb1      	iteee	lt
 8009bfe:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8009c00:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009c02:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8009c04:	18f3      	addge	r3, r6, r3
 8009c06:	bfba      	itte	lt
 8009c08:	1b98      	sublt	r0, r3, r6
 8009c0a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c0c:	9308      	strge	r3, [sp, #32]
 8009c0e:	eba6 0607 	sub.w	r6, r6, r7
 8009c12:	bfb8      	it	lt
 8009c14:	9308      	strlt	r3, [sp, #32]
 8009c16:	4416      	add	r6, r2
 8009c18:	4b6c      	ldr	r3, [pc, #432]	; (8009dcc <_strtod_l+0x87c>)
 8009c1a:	3e01      	subs	r6, #1
 8009c1c:	429e      	cmp	r6, r3
 8009c1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c22:	f280 80b4 	bge.w	8009d8e <_strtod_l+0x83e>
 8009c26:	1b9b      	subs	r3, r3, r6
 8009c28:	2b1f      	cmp	r3, #31
 8009c2a:	eba2 0203 	sub.w	r2, r2, r3
 8009c2e:	f04f 0101 	mov.w	r1, #1
 8009c32:	f300 80a0 	bgt.w	8009d76 <_strtod_l+0x826>
 8009c36:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	4413      	add	r3, r2
 8009c44:	4402      	add	r2, r0
 8009c46:	18be      	adds	r6, r7, r2
 8009c48:	9a08      	ldr	r2, [sp, #32]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	bfa8      	it	ge
 8009c4e:	461a      	movge	r2, r3
 8009c50:	42b2      	cmp	r2, r6
 8009c52:	bfa8      	it	ge
 8009c54:	4632      	movge	r2, r6
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	dd04      	ble.n	8009c64 <_strtod_l+0x714>
 8009c5a:	9908      	ldr	r1, [sp, #32]
 8009c5c:	1a9b      	subs	r3, r3, r2
 8009c5e:	1ab6      	subs	r6, r6, r2
 8009c60:	1a8a      	subs	r2, r1, r2
 8009c62:	9208      	str	r2, [sp, #32]
 8009c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c66:	b1c2      	cbz	r2, 8009c9a <_strtod_l+0x74a>
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8009c6e:	f001 fdb5 	bl	800b7dc <__pow5mult>
 8009c72:	4680      	mov	r8, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f43f ae9a 	beq.w	80099ae <_strtod_l+0x45e>
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f001 fd15 	bl	800b6ae <__multiply>
 8009c84:	900c      	str	r0, [sp, #48]	; 0x30
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f ae91 	beq.w	80099ae <_strtod_l+0x45e>
 8009c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f001 fc26 	bl	800b4e0 <_Bfree>
 8009c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c98:	9218      	str	r2, [sp, #96]	; 0x60
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	dc7c      	bgt.n	8009d98 <_strtod_l+0x848>
 8009c9e:	9b04      	ldr	r3, [sp, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dd08      	ble.n	8009cb6 <_strtod_l+0x766>
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 fd97 	bl	800b7dc <__pow5mult>
 8009cae:	4681      	mov	r9, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f43f ae7c 	beq.w	80099ae <_strtod_l+0x45e>
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	dd08      	ble.n	8009ccc <_strtod_l+0x77c>
 8009cba:	4649      	mov	r1, r9
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f001 fdda 	bl	800b878 <__lshift>
 8009cc4:	4681      	mov	r9, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f43f ae71 	beq.w	80099ae <_strtod_l+0x45e>
 8009ccc:	9b08      	ldr	r3, [sp, #32]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dd08      	ble.n	8009ce4 <_strtod_l+0x794>
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f001 fdce 	bl	800b878 <__lshift>
 8009cdc:	4680      	mov	r8, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f ae65 	beq.w	80099ae <_strtod_l+0x45e>
 8009ce4:	464a      	mov	r2, r9
 8009ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f001 fe33 	bl	800b954 <__mdiff>
 8009cee:	4605      	mov	r5, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f43f ae5c 	beq.w	80099ae <_strtod_l+0x45e>
 8009cf6:	68c3      	ldr	r3, [r0, #12]
 8009cf8:	930c      	str	r3, [sp, #48]	; 0x30
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	60c3      	str	r3, [r0, #12]
 8009cfe:	4641      	mov	r1, r8
 8009d00:	f001 fe0e 	bl	800b920 <__mcmp>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	da63      	bge.n	8009dd0 <_strtod_l+0x880>
 8009d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d0a:	b9e3      	cbnz	r3, 8009d46 <_strtod_l+0x7f6>
 8009d0c:	f1ba 0f00 	cmp.w	sl, #0
 8009d10:	d119      	bne.n	8009d46 <_strtod_l+0x7f6>
 8009d12:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d16:	b9b3      	cbnz	r3, 8009d46 <_strtod_l+0x7f6>
 8009d18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d1c:	0d1b      	lsrs	r3, r3, #20
 8009d1e:	051b      	lsls	r3, r3, #20
 8009d20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d24:	d90f      	bls.n	8009d46 <_strtod_l+0x7f6>
 8009d26:	696b      	ldr	r3, [r5, #20]
 8009d28:	b913      	cbnz	r3, 8009d30 <_strtod_l+0x7e0>
 8009d2a:	692b      	ldr	r3, [r5, #16]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	dd0a      	ble.n	8009d46 <_strtod_l+0x7f6>
 8009d30:	4629      	mov	r1, r5
 8009d32:	2201      	movs	r2, #1
 8009d34:	4620      	mov	r0, r4
 8009d36:	f001 fd9f 	bl	800b878 <__lshift>
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	f001 fdef 	bl	800b920 <__mcmp>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	dc75      	bgt.n	8009e32 <_strtod_l+0x8e2>
 8009d46:	2f00      	cmp	r7, #0
 8009d48:	d17f      	bne.n	8009e4a <_strtod_l+0x8fa>
 8009d4a:	e63a      	b.n	80099c2 <_strtod_l+0x472>
 8009d4c:	07d6      	lsls	r6, r2, #31
 8009d4e:	d508      	bpl.n	8009d62 <_strtod_l+0x812>
 8009d50:	ed9d 6b06 	vldr	d6, [sp, #24]
 8009d54:	ed91 7b00 	vldr	d7, [r1]
 8009d58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d60:	2001      	movs	r0, #1
 8009d62:	1052      	asrs	r2, r2, #1
 8009d64:	3108      	adds	r1, #8
 8009d66:	e6db      	b.n	8009b20 <_strtod_l+0x5d0>
 8009d68:	f04f 31ff 	mov.w	r1, #4294967295
 8009d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8009d70:	ea02 0a0a 	and.w	sl, r2, sl
 8009d74:	e6f3      	b.n	8009b5e <_strtod_l+0x60e>
 8009d76:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009d7a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009d7e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009d82:	36e2      	adds	r6, #226	; 0xe2
 8009d84:	fa01 f306 	lsl.w	r3, r1, r6
 8009d88:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d8a:	9111      	str	r1, [sp, #68]	; 0x44
 8009d8c:	e758      	b.n	8009c40 <_strtod_l+0x6f0>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d92:	2301      	movs	r3, #1
 8009d94:	9311      	str	r3, [sp, #68]	; 0x44
 8009d96:	e753      	b.n	8009c40 <_strtod_l+0x6f0>
 8009d98:	461a      	mov	r2, r3
 8009d9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f001 fd6b 	bl	800b878 <__lshift>
 8009da2:	9018      	str	r0, [sp, #96]	; 0x60
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f47f af7a 	bne.w	8009c9e <_strtod_l+0x74e>
 8009daa:	e600      	b.n	80099ae <_strtod_l+0x45e>
 8009dac:	f3af 8000 	nop.w
 8009db0:	94a03595 	.word	0x94a03595
 8009db4:	3fdfffff 	.word	0x3fdfffff
 8009db8:	35afe535 	.word	0x35afe535
 8009dbc:	3fe00000 	.word	0x3fe00000
 8009dc0:	94a03595 	.word	0x94a03595
 8009dc4:	3fcfffff 	.word	0x3fcfffff
 8009dc8:	0800c228 	.word	0x0800c228
 8009dcc:	fffffc02 	.word	0xfffffc02
 8009dd0:	f8cd b020 	str.w	fp, [sp, #32]
 8009dd4:	f040 8085 	bne.w	8009ee2 <_strtod_l+0x992>
 8009dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dde:	b322      	cbz	r2, 8009e2a <_strtod_l+0x8da>
 8009de0:	4ab7      	ldr	r2, [pc, #732]	; (800a0c0 <_strtod_l+0xb70>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d154      	bne.n	8009e90 <_strtod_l+0x940>
 8009de6:	4651      	mov	r1, sl
 8009de8:	b1e7      	cbz	r7, 8009e24 <_strtod_l+0x8d4>
 8009dea:	4bb6      	ldr	r3, [pc, #728]	; (800a0c4 <_strtod_l+0xb74>)
 8009dec:	465a      	mov	r2, fp
 8009dee:	4013      	ands	r3, r2
 8009df0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295
 8009df8:	d803      	bhi.n	8009e02 <_strtod_l+0x8b2>
 8009dfa:	0d1b      	lsrs	r3, r3, #20
 8009dfc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e00:	409a      	lsls	r2, r3
 8009e02:	4291      	cmp	r1, r2
 8009e04:	d144      	bne.n	8009e90 <_strtod_l+0x940>
 8009e06:	4bb0      	ldr	r3, [pc, #704]	; (800a0c8 <_strtod_l+0xb78>)
 8009e08:	9a08      	ldr	r2, [sp, #32]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d102      	bne.n	8009e14 <_strtod_l+0x8c4>
 8009e0e:	3101      	adds	r1, #1
 8009e10:	f43f adcd 	beq.w	80099ae <_strtod_l+0x45e>
 8009e14:	4bab      	ldr	r3, [pc, #684]	; (800a0c4 <_strtod_l+0xb74>)
 8009e16:	9a08      	ldr	r2, [sp, #32]
 8009e18:	401a      	ands	r2, r3
 8009e1a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8009e1e:	f04f 0a00 	mov.w	sl, #0
 8009e22:	e790      	b.n	8009d46 <_strtod_l+0x7f6>
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	e7eb      	b.n	8009e02 <_strtod_l+0x8b2>
 8009e2a:	bb8b      	cbnz	r3, 8009e90 <_strtod_l+0x940>
 8009e2c:	f1ba 0f00 	cmp.w	sl, #0
 8009e30:	d12e      	bne.n	8009e90 <_strtod_l+0x940>
 8009e32:	465b      	mov	r3, fp
 8009e34:	4aa3      	ldr	r2, [pc, #652]	; (800a0c4 <_strtod_l+0xb74>)
 8009e36:	b30f      	cbz	r7, 8009e7c <_strtod_l+0x92c>
 8009e38:	ea02 010b 	and.w	r1, r2, fp
 8009e3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009e40:	dc1c      	bgt.n	8009e7c <_strtod_l+0x92c>
 8009e42:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e46:	f77f ae48 	ble.w	8009ada <_strtod_l+0x58a>
 8009e4a:	4aa0      	ldr	r2, [pc, #640]	; (800a0cc <_strtod_l+0xb7c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8009e52:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8009e56:	ec4b ab17 	vmov	d7, sl, fp
 8009e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009e5e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e62:	9b05      	ldr	r3, [sp, #20]
 8009e64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f47f adaa 	bne.w	80099c2 <_strtod_l+0x472>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f47f ada6 	bne.w	80099c2 <_strtod_l+0x472>
 8009e76:	2322      	movs	r3, #34	; 0x22
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	e5a2      	b.n	80099c2 <_strtod_l+0x472>
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e82:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e8a:	f04f 3aff 	mov.w	sl, #4294967295
 8009e8e:	e75a      	b.n	8009d46 <_strtod_l+0x7f6>
 8009e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e92:	b18b      	cbz	r3, 8009eb8 <_strtod_l+0x968>
 8009e94:	9a08      	ldr	r2, [sp, #32]
 8009e96:	4213      	tst	r3, r2
 8009e98:	f43f af55 	beq.w	8009d46 <_strtod_l+0x7f6>
 8009e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	b163      	cbz	r3, 8009ec0 <_strtod_l+0x970>
 8009ea6:	f7ff fb37 	bl	8009518 <sulp>
 8009eaa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8009eae:	ee37 7b00 	vadd.f64	d7, d7, d0
 8009eb2:	ec5b ab17 	vmov	sl, fp, d7
 8009eb6:	e746      	b.n	8009d46 <_strtod_l+0x7f6>
 8009eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eba:	ea13 0f0a 	tst.w	r3, sl
 8009ebe:	e7eb      	b.n	8009e98 <_strtod_l+0x948>
 8009ec0:	f7ff fb2a 	bl	8009518 <sulp>
 8009ec4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8009ec8:	ee37 7b40 	vsub.f64	d7, d7, d0
 8009ecc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ed0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ed8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009edc:	f43f adfd 	beq.w	8009ada <_strtod_l+0x58a>
 8009ee0:	e731      	b.n	8009d46 <_strtod_l+0x7f6>
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f001 fe58 	bl	800bb9a <__ratio>
 8009eea:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009eee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef6:	d869      	bhi.n	8009fcc <_strtod_l+0xa7c>
 8009ef8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d045      	beq.n	8009f8a <_strtod_l+0xa3a>
 8009efe:	4b74      	ldr	r3, [pc, #464]	; (800a0d0 <_strtod_l+0xb80>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8009f06:	9808      	ldr	r0, [sp, #32]
 8009f08:	496e      	ldr	r1, [pc, #440]	; (800a0c4 <_strtod_l+0xb74>)
 8009f0a:	ea00 0601 	and.w	r6, r0, r1
 8009f0e:	4871      	ldr	r0, [pc, #452]	; (800a0d4 <_strtod_l+0xb84>)
 8009f10:	4286      	cmp	r6, r0
 8009f12:	f040 8089 	bne.w	800a028 <_strtod_l+0xad8>
 8009f16:	910f      	str	r1, [sp, #60]	; 0x3c
 8009f18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f1c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8009f20:	9908      	ldr	r1, [sp, #32]
 8009f22:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8009f26:	ec4b ab10 	vmov	d0, sl, fp
 8009f2a:	ec43 2b1c 	vmov	d12, r2, r3
 8009f2e:	f001 fd6f 	bl	800ba10 <__ulp>
 8009f32:	ec4b ab1d 	vmov	d13, sl, fp
 8009f36:	eeac db00 	vfma.f64	d13, d12, d0
 8009f3a:	ed8d db08 	vstr	d13, [sp, #32]
 8009f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f42:	4a65      	ldr	r2, [pc, #404]	; (800a0d8 <_strtod_l+0xb88>)
 8009f44:	4019      	ands	r1, r3
 8009f46:	4291      	cmp	r1, r2
 8009f48:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8009f4c:	d948      	bls.n	8009fe0 <_strtod_l+0xa90>
 8009f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d103      	bne.n	8009f60 <_strtod_l+0xa10>
 8009f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	f43f ad27 	beq.w	80099ae <_strtod_l+0x45e>
 8009f60:	f8df b164 	ldr.w	fp, [pc, #356]	; 800a0c8 <_strtod_l+0xb78>
 8009f64:	f04f 3aff 	mov.w	sl, #4294967295
 8009f68:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f001 fab8 	bl	800b4e0 <_Bfree>
 8009f70:	4649      	mov	r1, r9
 8009f72:	4620      	mov	r0, r4
 8009f74:	f001 fab4 	bl	800b4e0 <_Bfree>
 8009f78:	4641      	mov	r1, r8
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f001 fab0 	bl	800b4e0 <_Bfree>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f001 faac 	bl	800b4e0 <_Bfree>
 8009f88:	e60e      	b.n	8009ba8 <_strtod_l+0x658>
 8009f8a:	f1ba 0f00 	cmp.w	sl, #0
 8009f8e:	d113      	bne.n	8009fb8 <_strtod_l+0xa68>
 8009f90:	9b08      	ldr	r3, [sp, #32]
 8009f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f96:	b9b3      	cbnz	r3, 8009fc6 <_strtod_l+0xa76>
 8009f98:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009f9c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009fa8:	d401      	bmi.n	8009fae <_strtod_l+0xa5e>
 8009faa:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009fae:	eeb1 7b48 	vneg.f64	d7, d8
 8009fb2:	ec53 2b17 	vmov	r2, r3, d7
 8009fb6:	e7a6      	b.n	8009f06 <_strtod_l+0x9b6>
 8009fb8:	f1ba 0f01 	cmp.w	sl, #1
 8009fbc:	d103      	bne.n	8009fc6 <_strtod_l+0xa76>
 8009fbe:	9b08      	ldr	r3, [sp, #32]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f43f ad8a 	beq.w	8009ada <_strtod_l+0x58a>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4b44      	ldr	r3, [pc, #272]	; (800a0dc <_strtod_l+0xb8c>)
 8009fca:	e79a      	b.n	8009f02 <_strtod_l+0x9b2>
 8009fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8009fd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0e9      	beq.n	8009fae <_strtod_l+0xa5e>
 8009fda:	ec53 2b18 	vmov	r2, r3, d8
 8009fde:	e792      	b.n	8009f06 <_strtod_l+0x9b6>
 8009fe0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009fe4:	2f00      	cmp	r7, #0
 8009fe6:	d1bf      	bne.n	8009f68 <_strtod_l+0xa18>
 8009fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	051b      	lsls	r3, r3, #20
 8009ff0:	429e      	cmp	r6, r3
 8009ff2:	d1b9      	bne.n	8009f68 <_strtod_l+0xa18>
 8009ff4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8009ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ffa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8009ffe:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a002:	b92b      	cbnz	r3, 800a010 <_strtod_l+0xac0>
 800a004:	f1ba 0f00 	cmp.w	sl, #0
 800a008:	d102      	bne.n	800a010 <_strtod_l+0xac0>
 800a00a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800a00e:	b3d2      	cbz	r2, 800a086 <_strtod_l+0xb36>
 800a010:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800a014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a018:	f53f acd3 	bmi.w	80099c2 <_strtod_l+0x472>
 800a01c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800a020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a024:	dda0      	ble.n	8009f68 <_strtod_l+0xa18>
 800a026:	e4cc      	b.n	80099c2 <_strtod_l+0x472>
 800a028:	b1ef      	cbz	r7, 800a066 <_strtod_l+0xb16>
 800a02a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800a02e:	d81a      	bhi.n	800a066 <_strtod_l+0xb16>
 800a030:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a0b8 <_strtod_l+0xb68>
 800a034:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a03c:	d810      	bhi.n	800a060 <_strtod_l+0xb10>
 800a03e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800a042:	ee17 3a90 	vmov	r3, s15
 800a046:	2b00      	cmp	r3, #0
 800a048:	bf08      	it	eq
 800a04a:	2301      	moveq	r3, #1
 800a04c:	ee07 3a90 	vmov	s15, r3
 800a050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a052:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800a056:	b99b      	cbnz	r3, 800a080 <_strtod_l+0xb30>
 800a058:	eeb1 7b48 	vneg.f64	d7, d8
 800a05c:	ec53 2b17 	vmov	r2, r3, d7
 800a060:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800a064:	1b8b      	subs	r3, r1, r6
 800a066:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a06a:	ec43 2b1c 	vmov	d12, r2, r3
 800a06e:	f001 fccf 	bl	800ba10 <__ulp>
 800a072:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800a076:	eeac 7b00 	vfma.f64	d7, d12, d0
 800a07a:	ec5b ab17 	vmov	sl, fp, d7
 800a07e:	e7b1      	b.n	8009fe4 <_strtod_l+0xa94>
 800a080:	ec53 2b18 	vmov	r2, r3, d8
 800a084:	e7ec      	b.n	800a060 <_strtod_l+0xb10>
 800a086:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08e:	f57f af6b 	bpl.w	8009f68 <_strtod_l+0xa18>
 800a092:	e496      	b.n	80099c2 <_strtod_l+0x472>
 800a094:	2300      	movs	r3, #0
 800a096:	930d      	str	r3, [sp, #52]	; 0x34
 800a098:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a09a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	f7ff ba9d 	b.w	80095dc <_strtod_l+0x8c>
 800a0a2:	2a65      	cmp	r2, #101	; 0x65
 800a0a4:	f04f 0100 	mov.w	r1, #0
 800a0a8:	f43f ab97 	beq.w	80097da <_strtod_l+0x28a>
 800a0ac:	2701      	movs	r7, #1
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	9704      	str	r7, [sp, #16]
 800a0b2:	f7ff bb0a 	b.w	80096ca <_strtod_l+0x17a>
 800a0b6:	bf00      	nop
 800a0b8:	ffc00000 	.word	0xffc00000
 800a0bc:	41dfffff 	.word	0x41dfffff
 800a0c0:	000fffff 	.word	0x000fffff
 800a0c4:	7ff00000 	.word	0x7ff00000
 800a0c8:	7fefffff 	.word	0x7fefffff
 800a0cc:	39500000 	.word	0x39500000
 800a0d0:	3ff00000 	.word	0x3ff00000
 800a0d4:	7fe00000 	.word	0x7fe00000
 800a0d8:	7c9fffff 	.word	0x7c9fffff
 800a0dc:	bff00000 	.word	0xbff00000

0800a0e0 <_strtod_r>:
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <_strtod_r+0x18>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	b410      	push	{r4}
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	4c04      	ldr	r4, [pc, #16]	; (800a0fc <_strtod_r+0x1c>)
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bf08      	it	eq
 800a0ee:	4623      	moveq	r3, r4
 800a0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f4:	f7ff ba2c 	b.w	8009550 <_strtod_l>
 800a0f8:	20000020 	.word	0x20000020
 800a0fc:	20000084 	.word	0x20000084

0800a100 <_strtol_l.isra.0>:
 800a100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	4692      	mov	sl, r2
 800a10a:	461e      	mov	r6, r3
 800a10c:	460f      	mov	r7, r1
 800a10e:	463d      	mov	r5, r7
 800a110:	9808      	ldr	r0, [sp, #32]
 800a112:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a116:	f001 f981 	bl	800b41c <__locale_ctype_ptr_l>
 800a11a:	4420      	add	r0, r4
 800a11c:	7843      	ldrb	r3, [r0, #1]
 800a11e:	f013 0308 	ands.w	r3, r3, #8
 800a122:	d132      	bne.n	800a18a <_strtol_l.isra.0+0x8a>
 800a124:	2c2d      	cmp	r4, #45	; 0x2d
 800a126:	d132      	bne.n	800a18e <_strtol_l.isra.0+0x8e>
 800a128:	787c      	ldrb	r4, [r7, #1]
 800a12a:	1cbd      	adds	r5, r7, #2
 800a12c:	2201      	movs	r2, #1
 800a12e:	2e00      	cmp	r6, #0
 800a130:	d05d      	beq.n	800a1ee <_strtol_l.isra.0+0xee>
 800a132:	2e10      	cmp	r6, #16
 800a134:	d109      	bne.n	800a14a <_strtol_l.isra.0+0x4a>
 800a136:	2c30      	cmp	r4, #48	; 0x30
 800a138:	d107      	bne.n	800a14a <_strtol_l.isra.0+0x4a>
 800a13a:	782b      	ldrb	r3, [r5, #0]
 800a13c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a140:	2b58      	cmp	r3, #88	; 0x58
 800a142:	d14f      	bne.n	800a1e4 <_strtol_l.isra.0+0xe4>
 800a144:	786c      	ldrb	r4, [r5, #1]
 800a146:	2610      	movs	r6, #16
 800a148:	3502      	adds	r5, #2
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	bf14      	ite	ne
 800a14e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a152:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a156:	2700      	movs	r7, #0
 800a158:	fbb1 fcf6 	udiv	ip, r1, r6
 800a15c:	4638      	mov	r0, r7
 800a15e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a162:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a166:	2b09      	cmp	r3, #9
 800a168:	d817      	bhi.n	800a19a <_strtol_l.isra.0+0x9a>
 800a16a:	461c      	mov	r4, r3
 800a16c:	42a6      	cmp	r6, r4
 800a16e:	dd23      	ble.n	800a1b8 <_strtol_l.isra.0+0xb8>
 800a170:	1c7b      	adds	r3, r7, #1
 800a172:	d007      	beq.n	800a184 <_strtol_l.isra.0+0x84>
 800a174:	4584      	cmp	ip, r0
 800a176:	d31c      	bcc.n	800a1b2 <_strtol_l.isra.0+0xb2>
 800a178:	d101      	bne.n	800a17e <_strtol_l.isra.0+0x7e>
 800a17a:	45a6      	cmp	lr, r4
 800a17c:	db19      	blt.n	800a1b2 <_strtol_l.isra.0+0xb2>
 800a17e:	fb00 4006 	mla	r0, r0, r6, r4
 800a182:	2701      	movs	r7, #1
 800a184:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a188:	e7eb      	b.n	800a162 <_strtol_l.isra.0+0x62>
 800a18a:	462f      	mov	r7, r5
 800a18c:	e7bf      	b.n	800a10e <_strtol_l.isra.0+0xe>
 800a18e:	2c2b      	cmp	r4, #43	; 0x2b
 800a190:	bf04      	itt	eq
 800a192:	1cbd      	addeq	r5, r7, #2
 800a194:	787c      	ldrbeq	r4, [r7, #1]
 800a196:	461a      	mov	r2, r3
 800a198:	e7c9      	b.n	800a12e <_strtol_l.isra.0+0x2e>
 800a19a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a19e:	2b19      	cmp	r3, #25
 800a1a0:	d801      	bhi.n	800a1a6 <_strtol_l.isra.0+0xa6>
 800a1a2:	3c37      	subs	r4, #55	; 0x37
 800a1a4:	e7e2      	b.n	800a16c <_strtol_l.isra.0+0x6c>
 800a1a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a1aa:	2b19      	cmp	r3, #25
 800a1ac:	d804      	bhi.n	800a1b8 <_strtol_l.isra.0+0xb8>
 800a1ae:	3c57      	subs	r4, #87	; 0x57
 800a1b0:	e7dc      	b.n	800a16c <_strtol_l.isra.0+0x6c>
 800a1b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a1b6:	e7e5      	b.n	800a184 <_strtol_l.isra.0+0x84>
 800a1b8:	1c7b      	adds	r3, r7, #1
 800a1ba:	d108      	bne.n	800a1ce <_strtol_l.isra.0+0xce>
 800a1bc:	2322      	movs	r3, #34	; 0x22
 800a1be:	f8c8 3000 	str.w	r3, [r8]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	f1ba 0f00 	cmp.w	sl, #0
 800a1c8:	d107      	bne.n	800a1da <_strtol_l.isra.0+0xda>
 800a1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ce:	b102      	cbz	r2, 800a1d2 <_strtol_l.isra.0+0xd2>
 800a1d0:	4240      	negs	r0, r0
 800a1d2:	f1ba 0f00 	cmp.w	sl, #0
 800a1d6:	d0f8      	beq.n	800a1ca <_strtol_l.isra.0+0xca>
 800a1d8:	b10f      	cbz	r7, 800a1de <_strtol_l.isra.0+0xde>
 800a1da:	f105 39ff 	add.w	r9, r5, #4294967295
 800a1de:	f8ca 9000 	str.w	r9, [sl]
 800a1e2:	e7f2      	b.n	800a1ca <_strtol_l.isra.0+0xca>
 800a1e4:	2430      	movs	r4, #48	; 0x30
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d1af      	bne.n	800a14a <_strtol_l.isra.0+0x4a>
 800a1ea:	2608      	movs	r6, #8
 800a1ec:	e7ad      	b.n	800a14a <_strtol_l.isra.0+0x4a>
 800a1ee:	2c30      	cmp	r4, #48	; 0x30
 800a1f0:	d0a3      	beq.n	800a13a <_strtol_l.isra.0+0x3a>
 800a1f2:	260a      	movs	r6, #10
 800a1f4:	e7a9      	b.n	800a14a <_strtol_l.isra.0+0x4a>
	...

0800a1f8 <_strtol_r>:
 800a1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1fa:	4c06      	ldr	r4, [pc, #24]	; (800a214 <_strtol_r+0x1c>)
 800a1fc:	4d06      	ldr	r5, [pc, #24]	; (800a218 <_strtol_r+0x20>)
 800a1fe:	6824      	ldr	r4, [r4, #0]
 800a200:	6a24      	ldr	r4, [r4, #32]
 800a202:	2c00      	cmp	r4, #0
 800a204:	bf08      	it	eq
 800a206:	462c      	moveq	r4, r5
 800a208:	9400      	str	r4, [sp, #0]
 800a20a:	f7ff ff79 	bl	800a100 <_strtol_l.isra.0>
 800a20e:	b003      	add	sp, #12
 800a210:	bd30      	pop	{r4, r5, pc}
 800a212:	bf00      	nop
 800a214:	20000020 	.word	0x20000020
 800a218:	20000084 	.word	0x20000084

0800a21c <quorem>:
 800a21c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	6903      	ldr	r3, [r0, #16]
 800a222:	690c      	ldr	r4, [r1, #16]
 800a224:	42a3      	cmp	r3, r4
 800a226:	4680      	mov	r8, r0
 800a228:	f2c0 8082 	blt.w	800a330 <quorem+0x114>
 800a22c:	3c01      	subs	r4, #1
 800a22e:	f101 0714 	add.w	r7, r1, #20
 800a232:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a236:	f100 0614 	add.w	r6, r0, #20
 800a23a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a23e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a242:	eb06 030c 	add.w	r3, r6, ip
 800a246:	3501      	adds	r5, #1
 800a248:	eb07 090c 	add.w	r9, r7, ip
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	fbb0 f5f5 	udiv	r5, r0, r5
 800a252:	b395      	cbz	r5, 800a2ba <quorem+0x9e>
 800a254:	f04f 0a00 	mov.w	sl, #0
 800a258:	4638      	mov	r0, r7
 800a25a:	46b6      	mov	lr, r6
 800a25c:	46d3      	mov	fp, sl
 800a25e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a262:	b293      	uxth	r3, r2
 800a264:	fb05 a303 	mla	r3, r5, r3, sl
 800a268:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	ebab 0303 	sub.w	r3, fp, r3
 800a272:	0c12      	lsrs	r2, r2, #16
 800a274:	f8de b000 	ldr.w	fp, [lr]
 800a278:	fb05 a202 	mla	r2, r5, r2, sl
 800a27c:	fa13 f38b 	uxtah	r3, r3, fp
 800a280:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a284:	fa1f fb82 	uxth.w	fp, r2
 800a288:	f8de 2000 	ldr.w	r2, [lr]
 800a28c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a294:	b29b      	uxth	r3, r3
 800a296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a29a:	4581      	cmp	r9, r0
 800a29c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a2a0:	f84e 3b04 	str.w	r3, [lr], #4
 800a2a4:	d2db      	bcs.n	800a25e <quorem+0x42>
 800a2a6:	f856 300c 	ldr.w	r3, [r6, ip]
 800a2aa:	b933      	cbnz	r3, 800a2ba <quorem+0x9e>
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	3b04      	subs	r3, #4
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	d330      	bcc.n	800a318 <quorem+0xfc>
 800a2b6:	f8c8 4010 	str.w	r4, [r8, #16]
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f001 fb30 	bl	800b920 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	db25      	blt.n	800a310 <quorem+0xf4>
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f04f 0c00 	mov.w	ip, #0
 800a2cc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a2d0:	f8d0 e000 	ldr.w	lr, [r0]
 800a2d4:	b293      	uxth	r3, r2
 800a2d6:	ebac 0303 	sub.w	r3, ip, r3
 800a2da:	0c12      	lsrs	r2, r2, #16
 800a2dc:	fa13 f38e 	uxtah	r3, r3, lr
 800a2e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2ee:	45b9      	cmp	r9, r7
 800a2f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2f4:	f840 3b04 	str.w	r3, [r0], #4
 800a2f8:	d2e8      	bcs.n	800a2cc <quorem+0xb0>
 800a2fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a2fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a302:	b92a      	cbnz	r2, 800a310 <quorem+0xf4>
 800a304:	3b04      	subs	r3, #4
 800a306:	429e      	cmp	r6, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	d30b      	bcc.n	800a324 <quorem+0x108>
 800a30c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a310:	4628      	mov	r0, r5
 800a312:	b003      	add	sp, #12
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	3b04      	subs	r3, #4
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	d1ca      	bne.n	800a2b6 <quorem+0x9a>
 800a320:	3c01      	subs	r4, #1
 800a322:	e7c5      	b.n	800a2b0 <quorem+0x94>
 800a324:	6812      	ldr	r2, [r2, #0]
 800a326:	3b04      	subs	r3, #4
 800a328:	2a00      	cmp	r2, #0
 800a32a:	d1ef      	bne.n	800a30c <quorem+0xf0>
 800a32c:	3c01      	subs	r4, #1
 800a32e:	e7ea      	b.n	800a306 <quorem+0xea>
 800a330:	2000      	movs	r0, #0
 800a332:	e7ee      	b.n	800a312 <quorem+0xf6>
 800a334:	0000      	movs	r0, r0
	...

0800a338 <_dtoa_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ec57 6b10 	vmov	r6, r7, d0
 800a340:	b095      	sub	sp, #84	; 0x54
 800a342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a344:	9108      	str	r1, [sp, #32]
 800a346:	4604      	mov	r4, r0
 800a348:	920a      	str	r2, [sp, #40]	; 0x28
 800a34a:	9311      	str	r3, [sp, #68]	; 0x44
 800a34c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a350:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a354:	b93d      	cbnz	r5, 800a366 <_dtoa_r+0x2e>
 800a356:	2010      	movs	r0, #16
 800a358:	f001 f874 	bl	800b444 <malloc>
 800a35c:	6260      	str	r0, [r4, #36]	; 0x24
 800a35e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a362:	6005      	str	r5, [r0, #0]
 800a364:	60c5      	str	r5, [r0, #12]
 800a366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	b151      	cbz	r1, 800a382 <_dtoa_r+0x4a>
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	604a      	str	r2, [r1, #4]
 800a370:	2301      	movs	r3, #1
 800a372:	4093      	lsls	r3, r2
 800a374:	608b      	str	r3, [r1, #8]
 800a376:	4620      	mov	r0, r4
 800a378:	f001 f8b2 	bl	800b4e0 <_Bfree>
 800a37c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	1e3b      	subs	r3, r7, #0
 800a384:	bfb9      	ittee	lt
 800a386:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a38a:	9303      	strlt	r3, [sp, #12]
 800a38c:	2300      	movge	r3, #0
 800a38e:	f8c8 3000 	strge.w	r3, [r8]
 800a392:	9d03      	ldr	r5, [sp, #12]
 800a394:	4bac      	ldr	r3, [pc, #688]	; (800a648 <_dtoa_r+0x310>)
 800a396:	bfbc      	itt	lt
 800a398:	2201      	movlt	r2, #1
 800a39a:	f8c8 2000 	strlt.w	r2, [r8]
 800a39e:	43ab      	bics	r3, r5
 800a3a0:	d11b      	bne.n	800a3da <_dtoa_r+0xa2>
 800a3a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3a4:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	9b02      	ldr	r3, [sp, #8]
 800a3ac:	b923      	cbnz	r3, 800a3b8 <_dtoa_r+0x80>
 800a3ae:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a3b2:	2d00      	cmp	r5, #0
 800a3b4:	f000 84dd 	beq.w	800ad72 <_dtoa_r+0xa3a>
 800a3b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3ba:	b953      	cbnz	r3, 800a3d2 <_dtoa_r+0x9a>
 800a3bc:	4ba3      	ldr	r3, [pc, #652]	; (800a64c <_dtoa_r+0x314>)
 800a3be:	e020      	b.n	800a402 <_dtoa_r+0xca>
 800a3c0:	4ba3      	ldr	r3, [pc, #652]	; (800a650 <_dtoa_r+0x318>)
 800a3c2:	9304      	str	r3, [sp, #16]
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	9804      	ldr	r0, [sp, #16]
 800a3cc:	b015      	add	sp, #84	; 0x54
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	4b9e      	ldr	r3, [pc, #632]	; (800a64c <_dtoa_r+0x314>)
 800a3d4:	9304      	str	r3, [sp, #16]
 800a3d6:	3303      	adds	r3, #3
 800a3d8:	e7f5      	b.n	800a3c6 <_dtoa_r+0x8e>
 800a3da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a3ea:	d10c      	bne.n	800a406 <_dtoa_r+0xce>
 800a3ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 84b9 	beq.w	800ad6c <_dtoa_r+0xa34>
 800a3fa:	4b96      	ldr	r3, [pc, #600]	; (800a654 <_dtoa_r+0x31c>)
 800a3fc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a3fe:	6013      	str	r3, [r2, #0]
 800a400:	3b01      	subs	r3, #1
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	e7e1      	b.n	800a3ca <_dtoa_r+0x92>
 800a406:	a913      	add	r1, sp, #76	; 0x4c
 800a408:	aa12      	add	r2, sp, #72	; 0x48
 800a40a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a40e:	4620      	mov	r0, r4
 800a410:	f001 fb74 	bl	800bafc <__d2b>
 800a414:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800a418:	9001      	str	r0, [sp, #4]
 800a41a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	d046      	beq.n	800a4ae <_dtoa_r+0x176>
 800a420:	9805      	ldr	r0, [sp, #20]
 800a422:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800a426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a42a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800a42e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a432:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800a436:	2700      	movs	r7, #0
 800a438:	ee07 aa90 	vmov	s15, sl
 800a43c:	ec43 2b16 	vmov	d6, r2, r3
 800a440:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a444:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800a630 <_dtoa_r+0x2f8>
 800a448:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a44c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a450:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800a638 <_dtoa_r+0x300>
 800a454:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a458:	eeb0 7b46 	vmov.f64	d7, d6
 800a45c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a640 <_dtoa_r+0x308>
 800a460:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a464:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a468:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a470:	ee16 ba90 	vmov	fp, s13
 800a474:	d508      	bpl.n	800a488 <_dtoa_r+0x150>
 800a476:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a47a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a482:	bf18      	it	ne
 800a484:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a488:	f1bb 0f16 	cmp.w	fp, #22
 800a48c:	d834      	bhi.n	800a4f8 <_dtoa_r+0x1c0>
 800a48e:	4b72      	ldr	r3, [pc, #456]	; (800a658 <_dtoa_r+0x320>)
 800a490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a494:	ed93 7b00 	vldr	d7, [r3]
 800a498:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a49c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a4:	dd01      	ble.n	800a4aa <_dtoa_r+0x172>
 800a4a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e025      	b.n	800a4fa <_dtoa_r+0x1c2>
 800a4ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4b0:	eb01 0a03 	add.w	sl, r1, r3
 800a4b4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800a4b8:	2b20      	cmp	r3, #32
 800a4ba:	dd17      	ble.n	800a4ec <_dtoa_r+0x1b4>
 800a4bc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a4c0:	9a02      	ldr	r2, [sp, #8]
 800a4c2:	409d      	lsls	r5, r3
 800a4c4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800a4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4cc:	432b      	orrs	r3, r5
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a4d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4da:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4de:	9805      	ldr	r0, [sp, #20]
 800a4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e4:	2701      	movs	r7, #1
 800a4e6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800a4ea:	e7a5      	b.n	800a438 <_dtoa_r+0x100>
 800a4ec:	9a02      	ldr	r2, [sp, #8]
 800a4ee:	f1c3 0320 	rsb	r3, r3, #32
 800a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f6:	e7ea      	b.n	800a4ce <_dtoa_r+0x196>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	eba1 0a0a 	sub.w	sl, r1, sl
 800a4fe:	9310      	str	r3, [sp, #64]	; 0x40
 800a500:	f1ba 0301 	subs.w	r3, sl, #1
 800a504:	9307      	str	r3, [sp, #28]
 800a506:	bf43      	ittte	mi
 800a508:	2300      	movmi	r3, #0
 800a50a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800a50e:	9307      	strmi	r3, [sp, #28]
 800a510:	f04f 0a00 	movpl.w	sl, #0
 800a514:	f1bb 0f00 	cmp.w	fp, #0
 800a518:	db19      	blt.n	800a54e <_dtoa_r+0x216>
 800a51a:	9b07      	ldr	r3, [sp, #28]
 800a51c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a520:	445b      	add	r3, fp
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	f04f 0800 	mov.w	r8, #0
 800a528:	9b08      	ldr	r3, [sp, #32]
 800a52a:	2b09      	cmp	r3, #9
 800a52c:	d866      	bhi.n	800a5fc <_dtoa_r+0x2c4>
 800a52e:	2b05      	cmp	r3, #5
 800a530:	bfc4      	itt	gt
 800a532:	3b04      	subgt	r3, #4
 800a534:	9308      	strgt	r3, [sp, #32]
 800a536:	9b08      	ldr	r3, [sp, #32]
 800a538:	f1a3 0302 	sub.w	r3, r3, #2
 800a53c:	bfcc      	ite	gt
 800a53e:	2500      	movgt	r5, #0
 800a540:	2501      	movle	r5, #1
 800a542:	2b03      	cmp	r3, #3
 800a544:	d866      	bhi.n	800a614 <_dtoa_r+0x2dc>
 800a546:	e8df f003 	tbb	[pc, r3]
 800a54a:	5755      	.short	0x5755
 800a54c:	4909      	.short	0x4909
 800a54e:	2300      	movs	r3, #0
 800a550:	ebaa 0a0b 	sub.w	sl, sl, fp
 800a554:	f1cb 0800 	rsb	r8, fp, #0
 800a558:	930b      	str	r3, [sp, #44]	; 0x2c
 800a55a:	e7e5      	b.n	800a528 <_dtoa_r+0x1f0>
 800a55c:	2301      	movs	r3, #1
 800a55e:	9309      	str	r3, [sp, #36]	; 0x24
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	2b00      	cmp	r3, #0
 800a564:	dd59      	ble.n	800a61a <_dtoa_r+0x2e2>
 800a566:	9306      	str	r3, [sp, #24]
 800a568:	4699      	mov	r9, r3
 800a56a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a56c:	2200      	movs	r2, #0
 800a56e:	6072      	str	r2, [r6, #4]
 800a570:	2204      	movs	r2, #4
 800a572:	f102 0014 	add.w	r0, r2, #20
 800a576:	4298      	cmp	r0, r3
 800a578:	6871      	ldr	r1, [r6, #4]
 800a57a:	d953      	bls.n	800a624 <_dtoa_r+0x2ec>
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 ff7b 	bl	800b478 <_Balloc>
 800a582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a584:	6030      	str	r0, [r6, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	f1b9 0f0e 	cmp.w	r9, #14
 800a58e:	f200 80c2 	bhi.w	800a716 <_dtoa_r+0x3de>
 800a592:	2d00      	cmp	r5, #0
 800a594:	f000 80bf 	beq.w	800a716 <_dtoa_r+0x3de>
 800a598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a59c:	f1bb 0f00 	cmp.w	fp, #0
 800a5a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a5a4:	f340 80e6 	ble.w	800a774 <_dtoa_r+0x43c>
 800a5a8:	4a2b      	ldr	r2, [pc, #172]	; (800a658 <_dtoa_r+0x320>)
 800a5aa:	f00b 030f 	and.w	r3, fp, #15
 800a5ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5b2:	ed93 7b00 	vldr	d7, [r3]
 800a5b6:	ea4f 132b 	mov.w	r3, fp, asr #4
 800a5ba:	06da      	lsls	r2, r3, #27
 800a5bc:	f140 80d8 	bpl.w	800a770 <_dtoa_r+0x438>
 800a5c0:	4a26      	ldr	r2, [pc, #152]	; (800a65c <_dtoa_r+0x324>)
 800a5c2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800a5c6:	ed92 6b08 	vldr	d6, [r2, #32]
 800a5ca:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a5ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a5d2:	f003 030f 	and.w	r3, r3, #15
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4920      	ldr	r1, [pc, #128]	; (800a65c <_dtoa_r+0x324>)
 800a5da:	e04a      	b.n	800a672 <_dtoa_r+0x33a>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e2:	445b      	add	r3, fp
 800a5e4:	f103 0901 	add.w	r9, r3, #1
 800a5e8:	9306      	str	r3, [sp, #24]
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	bfb8      	it	lt
 800a5f0:	2301      	movlt	r3, #1
 800a5f2:	e7ba      	b.n	800a56a <_dtoa_r+0x232>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e7b2      	b.n	800a55e <_dtoa_r+0x226>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	e7f0      	b.n	800a5de <_dtoa_r+0x2a6>
 800a5fc:	2501      	movs	r5, #1
 800a5fe:	2300      	movs	r3, #0
 800a600:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800a604:	f04f 33ff 	mov.w	r3, #4294967295
 800a608:	9306      	str	r3, [sp, #24]
 800a60a:	4699      	mov	r9, r3
 800a60c:	2200      	movs	r2, #0
 800a60e:	2312      	movs	r3, #18
 800a610:	920a      	str	r2, [sp, #40]	; 0x28
 800a612:	e7aa      	b.n	800a56a <_dtoa_r+0x232>
 800a614:	2301      	movs	r3, #1
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	e7f4      	b.n	800a604 <_dtoa_r+0x2cc>
 800a61a:	2301      	movs	r3, #1
 800a61c:	9306      	str	r3, [sp, #24]
 800a61e:	4699      	mov	r9, r3
 800a620:	461a      	mov	r2, r3
 800a622:	e7f5      	b.n	800a610 <_dtoa_r+0x2d8>
 800a624:	3101      	adds	r1, #1
 800a626:	6071      	str	r1, [r6, #4]
 800a628:	0052      	lsls	r2, r2, #1
 800a62a:	e7a2      	b.n	800a572 <_dtoa_r+0x23a>
 800a62c:	f3af 8000 	nop.w
 800a630:	636f4361 	.word	0x636f4361
 800a634:	3fd287a7 	.word	0x3fd287a7
 800a638:	8b60c8b3 	.word	0x8b60c8b3
 800a63c:	3fc68a28 	.word	0x3fc68a28
 800a640:	509f79fb 	.word	0x509f79fb
 800a644:	3fd34413 	.word	0x3fd34413
 800a648:	7ff00000 	.word	0x7ff00000
 800a64c:	0800c259 	.word	0x0800c259
 800a650:	0800c250 	.word	0x0800c250
 800a654:	0800c1d1 	.word	0x0800c1d1
 800a658:	0800c2f8 	.word	0x0800c2f8
 800a65c:	0800c2d0 	.word	0x0800c2d0
 800a660:	07de      	lsls	r6, r3, #31
 800a662:	d504      	bpl.n	800a66e <_dtoa_r+0x336>
 800a664:	ed91 6b00 	vldr	d6, [r1]
 800a668:	3201      	adds	r2, #1
 800a66a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a66e:	105b      	asrs	r3, r3, #1
 800a670:	3108      	adds	r1, #8
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1f4      	bne.n	800a660 <_dtoa_r+0x328>
 800a676:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a67a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a67e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80a7 	beq.w	800a7d8 <_dtoa_r+0x4a0>
 800a68a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a68e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a692:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69a:	f140 809d 	bpl.w	800a7d8 <_dtoa_r+0x4a0>
 800a69e:	f1b9 0f00 	cmp.w	r9, #0
 800a6a2:	f000 8099 	beq.w	800a7d8 <_dtoa_r+0x4a0>
 800a6a6:	9b06      	ldr	r3, [sp, #24]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	dd30      	ble.n	800a70e <_dtoa_r+0x3d6>
 800a6ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a6b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a6b8:	9d06      	ldr	r5, [sp, #24]
 800a6ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a6be:	3201      	adds	r2, #1
 800a6c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a6c4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a6c8:	ee07 2a90 	vmov	s15, r2
 800a6cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a6d0:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a6d4:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a6d8:	9a03      	ldr	r2, [sp, #12]
 800a6da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6de:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800a6e2:	2d00      	cmp	r5, #0
 800a6e4:	d17b      	bne.n	800a7de <_dtoa_r+0x4a6>
 800a6e6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a6ee:	ec41 0b17 	vmov	d7, r0, r1
 800a6f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fa:	f300 8253 	bgt.w	800aba4 <_dtoa_r+0x86c>
 800a6fe:	eeb1 7b47 	vneg.f64	d7, d7
 800a702:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	f100 8249 	bmi.w	800aba0 <_dtoa_r+0x868>
 800a70e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f2c0 8119 	blt.w	800a950 <_dtoa_r+0x618>
 800a71e:	f1bb 0f0e 	cmp.w	fp, #14
 800a722:	f300 8115 	bgt.w	800a950 <_dtoa_r+0x618>
 800a726:	4bc3      	ldr	r3, [pc, #780]	; (800aa34 <_dtoa_r+0x6fc>)
 800a728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a72c:	ed93 6b00 	vldr	d6, [r3]
 800a730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a732:	2b00      	cmp	r3, #0
 800a734:	f280 80ba 	bge.w	800a8ac <_dtoa_r+0x574>
 800a738:	f1b9 0f00 	cmp.w	r9, #0
 800a73c:	f300 80b6 	bgt.w	800a8ac <_dtoa_r+0x574>
 800a740:	f040 822d 	bne.w	800ab9e <_dtoa_r+0x866>
 800a744:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a748:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a74c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a758:	464d      	mov	r5, r9
 800a75a:	464f      	mov	r7, r9
 800a75c:	f280 8204 	bge.w	800ab68 <_dtoa_r+0x830>
 800a760:	9b04      	ldr	r3, [sp, #16]
 800a762:	9a04      	ldr	r2, [sp, #16]
 800a764:	1c5e      	adds	r6, r3, #1
 800a766:	2331      	movs	r3, #49	; 0x31
 800a768:	7013      	strb	r3, [r2, #0]
 800a76a:	f10b 0b01 	add.w	fp, fp, #1
 800a76e:	e1ff      	b.n	800ab70 <_dtoa_r+0x838>
 800a770:	2202      	movs	r2, #2
 800a772:	e731      	b.n	800a5d8 <_dtoa_r+0x2a0>
 800a774:	d02e      	beq.n	800a7d4 <_dtoa_r+0x49c>
 800a776:	f1cb 0300 	rsb	r3, fp, #0
 800a77a:	4aae      	ldr	r2, [pc, #696]	; (800aa34 <_dtoa_r+0x6fc>)
 800a77c:	f003 010f 	and.w	r1, r3, #15
 800a780:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a784:	ed92 7b00 	vldr	d7, [r2]
 800a788:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800a78c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a790:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a794:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800a798:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a79c:	49a6      	ldr	r1, [pc, #664]	; (800aa38 <_dtoa_r+0x700>)
 800a79e:	111b      	asrs	r3, r3, #4
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	b93b      	cbnz	r3, 800a7b6 <_dtoa_r+0x47e>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f43f af6b 	beq.w	800a682 <_dtoa_r+0x34a>
 800a7ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b4:	e765      	b.n	800a682 <_dtoa_r+0x34a>
 800a7b6:	07dd      	lsls	r5, r3, #31
 800a7b8:	d509      	bpl.n	800a7ce <_dtoa_r+0x496>
 800a7ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a7be:	ed91 7b00 	vldr	d7, [r1]
 800a7c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a7c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a7ca:	3201      	adds	r2, #1
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	105b      	asrs	r3, r3, #1
 800a7d0:	3108      	adds	r1, #8
 800a7d2:	e7e7      	b.n	800a7a4 <_dtoa_r+0x46c>
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	e754      	b.n	800a682 <_dtoa_r+0x34a>
 800a7d8:	465b      	mov	r3, fp
 800a7da:	464d      	mov	r5, r9
 800a7dc:	e770      	b.n	800a6c0 <_dtoa_r+0x388>
 800a7de:	4a95      	ldr	r2, [pc, #596]	; (800aa34 <_dtoa_r+0x6fc>)
 800a7e0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a7e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a7e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ea:	ec41 0b17 	vmov	d7, r0, r1
 800a7ee:	b35a      	cbz	r2, 800a848 <_dtoa_r+0x510>
 800a7f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a7f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a7f8:	9e04      	ldr	r6, [sp, #16]
 800a7fa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a7fe:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a802:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a806:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a80a:	ee14 2a90 	vmov	r2, s9
 800a80e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a812:	3230      	adds	r2, #48	; 0x30
 800a814:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a818:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a820:	f806 2b01 	strb.w	r2, [r6], #1
 800a824:	d43b      	bmi.n	800a89e <_dtoa_r+0x566>
 800a826:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a82a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a832:	d472      	bmi.n	800a91a <_dtoa_r+0x5e2>
 800a834:	9a04      	ldr	r2, [sp, #16]
 800a836:	1ab2      	subs	r2, r6, r2
 800a838:	4295      	cmp	r5, r2
 800a83a:	f77f af68 	ble.w	800a70e <_dtoa_r+0x3d6>
 800a83e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a842:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a846:	e7de      	b.n	800a806 <_dtoa_r+0x4ce>
 800a848:	9a04      	ldr	r2, [sp, #16]
 800a84a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a84e:	1956      	adds	r6, r2, r5
 800a850:	4611      	mov	r1, r2
 800a852:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a856:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a85a:	ee14 2a90 	vmov	r2, s9
 800a85e:	3230      	adds	r2, #48	; 0x30
 800a860:	f801 2b01 	strb.w	r2, [r1], #1
 800a864:	42b1      	cmp	r1, r6
 800a866:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a86a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a86e:	d11a      	bne.n	800a8a6 <_dtoa_r+0x56e>
 800a870:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a874:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a878:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	dc4b      	bgt.n	800a91a <_dtoa_r+0x5e2>
 800a882:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a886:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88e:	f57f af3e 	bpl.w	800a70e <_dtoa_r+0x3d6>
 800a892:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a896:	2a30      	cmp	r2, #48	; 0x30
 800a898:	f106 31ff 	add.w	r1, r6, #4294967295
 800a89c:	d001      	beq.n	800a8a2 <_dtoa_r+0x56a>
 800a89e:	469b      	mov	fp, r3
 800a8a0:	e02a      	b.n	800a8f8 <_dtoa_r+0x5c0>
 800a8a2:	460e      	mov	r6, r1
 800a8a4:	e7f5      	b.n	800a892 <_dtoa_r+0x55a>
 800a8a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a8aa:	e7d4      	b.n	800a856 <_dtoa_r+0x51e>
 800a8ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8b0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a8b4:	9e04      	ldr	r6, [sp, #16]
 800a8b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a8ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a8be:	ee15 3a10 	vmov	r3, s10
 800a8c2:	3330      	adds	r3, #48	; 0x30
 800a8c4:	f806 3b01 	strb.w	r3, [r6], #1
 800a8c8:	9b04      	ldr	r3, [sp, #16]
 800a8ca:	1af3      	subs	r3, r6, r3
 800a8cc:	4599      	cmp	r9, r3
 800a8ce:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a8d2:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a8d6:	d133      	bne.n	800a940 <_dtoa_r+0x608>
 800a8d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a8dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e4:	dc18      	bgt.n	800a918 <_dtoa_r+0x5e0>
 800a8e6:	eeb4 7b46 	vcmp.f64	d7, d6
 800a8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ee:	d103      	bne.n	800a8f8 <_dtoa_r+0x5c0>
 800a8f0:	ee15 3a10 	vmov	r3, s10
 800a8f4:	07db      	lsls	r3, r3, #31
 800a8f6:	d40f      	bmi.n	800a918 <_dtoa_r+0x5e0>
 800a8f8:	9901      	ldr	r1, [sp, #4]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 fdf0 	bl	800b4e0 <_Bfree>
 800a900:	2300      	movs	r3, #0
 800a902:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a904:	7033      	strb	r3, [r6, #0]
 800a906:	f10b 0301 	add.w	r3, fp, #1
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f43f ad5b 	beq.w	800a3ca <_dtoa_r+0x92>
 800a914:	601e      	str	r6, [r3, #0]
 800a916:	e558      	b.n	800a3ca <_dtoa_r+0x92>
 800a918:	465b      	mov	r3, fp
 800a91a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a91e:	2939      	cmp	r1, #57	; 0x39
 800a920:	f106 32ff 	add.w	r2, r6, #4294967295
 800a924:	d106      	bne.n	800a934 <_dtoa_r+0x5fc>
 800a926:	9904      	ldr	r1, [sp, #16]
 800a928:	4291      	cmp	r1, r2
 800a92a:	d107      	bne.n	800a93c <_dtoa_r+0x604>
 800a92c:	2230      	movs	r2, #48	; 0x30
 800a92e:	700a      	strb	r2, [r1, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	460a      	mov	r2, r1
 800a934:	7811      	ldrb	r1, [r2, #0]
 800a936:	3101      	adds	r1, #1
 800a938:	7011      	strb	r1, [r2, #0]
 800a93a:	e7b0      	b.n	800a89e <_dtoa_r+0x566>
 800a93c:	4616      	mov	r6, r2
 800a93e:	e7ec      	b.n	800a91a <_dtoa_r+0x5e2>
 800a940:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a944:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94c:	d1b3      	bne.n	800a8b6 <_dtoa_r+0x57e>
 800a94e:	e7d3      	b.n	800a8f8 <_dtoa_r+0x5c0>
 800a950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a952:	2a00      	cmp	r2, #0
 800a954:	f000 808d 	beq.w	800aa72 <_dtoa_r+0x73a>
 800a958:	9a08      	ldr	r2, [sp, #32]
 800a95a:	2a01      	cmp	r2, #1
 800a95c:	dc72      	bgt.n	800aa44 <_dtoa_r+0x70c>
 800a95e:	2f00      	cmp	r7, #0
 800a960:	d06c      	beq.n	800aa3c <_dtoa_r+0x704>
 800a962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a966:	4645      	mov	r5, r8
 800a968:	4656      	mov	r6, sl
 800a96a:	9a07      	ldr	r2, [sp, #28]
 800a96c:	2101      	movs	r1, #1
 800a96e:	441a      	add	r2, r3
 800a970:	4620      	mov	r0, r4
 800a972:	449a      	add	sl, r3
 800a974:	9207      	str	r2, [sp, #28]
 800a976:	f000 fe91 	bl	800b69c <__i2b>
 800a97a:	4607      	mov	r7, r0
 800a97c:	2e00      	cmp	r6, #0
 800a97e:	dd0b      	ble.n	800a998 <_dtoa_r+0x660>
 800a980:	9b07      	ldr	r3, [sp, #28]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd08      	ble.n	800a998 <_dtoa_r+0x660>
 800a986:	42b3      	cmp	r3, r6
 800a988:	9a07      	ldr	r2, [sp, #28]
 800a98a:	bfa8      	it	ge
 800a98c:	4633      	movge	r3, r6
 800a98e:	ebaa 0a03 	sub.w	sl, sl, r3
 800a992:	1af6      	subs	r6, r6, r3
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	9307      	str	r3, [sp, #28]
 800a998:	f1b8 0f00 	cmp.w	r8, #0
 800a99c:	d01d      	beq.n	800a9da <_dtoa_r+0x6a2>
 800a99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d06a      	beq.n	800aa7a <_dtoa_r+0x742>
 800a9a4:	b18d      	cbz	r5, 800a9ca <_dtoa_r+0x692>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	462a      	mov	r2, r5
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 ff16 	bl	800b7dc <__pow5mult>
 800a9b0:	9a01      	ldr	r2, [sp, #4]
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f000 fe79 	bl	800b6ae <__multiply>
 800a9bc:	9901      	ldr	r1, [sp, #4]
 800a9be:	900c      	str	r0, [sp, #48]	; 0x30
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 fd8d 	bl	800b4e0 <_Bfree>
 800a9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	ebb8 0205 	subs.w	r2, r8, r5
 800a9ce:	d004      	beq.n	800a9da <_dtoa_r+0x6a2>
 800a9d0:	9901      	ldr	r1, [sp, #4]
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 ff02 	bl	800b7dc <__pow5mult>
 800a9d8:	9001      	str	r0, [sp, #4]
 800a9da:	2101      	movs	r1, #1
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 fe5d 	bl	800b69c <__i2b>
 800a9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 81ca 	beq.w	800ad80 <_dtoa_r+0xa48>
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f000 fef3 	bl	800b7dc <__pow5mult>
 800a9f6:	9b08      	ldr	r3, [sp, #32]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	dc44      	bgt.n	800aa88 <_dtoa_r+0x750>
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d13c      	bne.n	800aa7e <_dtoa_r+0x746>
 800aa04:	9b03      	ldr	r3, [sp, #12]
 800aa06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d137      	bne.n	800aa7e <_dtoa_r+0x746>
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa14:	0d1b      	lsrs	r3, r3, #20
 800aa16:	051b      	lsls	r3, r3, #20
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d033      	beq.n	800aa84 <_dtoa_r+0x74c>
 800aa1c:	9b07      	ldr	r3, [sp, #28]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	f10a 0a01 	add.w	sl, sl, #1
 800aa24:	9307      	str	r3, [sp, #28]
 800aa26:	f04f 0801 	mov.w	r8, #1
 800aa2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2c:	bb73      	cbnz	r3, 800aa8c <_dtoa_r+0x754>
 800aa2e:	2001      	movs	r0, #1
 800aa30:	e034      	b.n	800aa9c <_dtoa_r+0x764>
 800aa32:	bf00      	nop
 800aa34:	0800c2f8 	.word	0x0800c2f8
 800aa38:	0800c2d0 	.word	0x0800c2d0
 800aa3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa42:	e790      	b.n	800a966 <_dtoa_r+0x62e>
 800aa44:	f109 35ff 	add.w	r5, r9, #4294967295
 800aa48:	45a8      	cmp	r8, r5
 800aa4a:	bfbf      	itttt	lt
 800aa4c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800aa4e:	eba5 0808 	sublt.w	r8, r5, r8
 800aa52:	4443      	addlt	r3, r8
 800aa54:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800aa56:	bfb6      	itet	lt
 800aa58:	46a8      	movlt	r8, r5
 800aa5a:	eba8 0505 	subge.w	r5, r8, r5
 800aa5e:	2500      	movlt	r5, #0
 800aa60:	f1b9 0f00 	cmp.w	r9, #0
 800aa64:	bfb9      	ittee	lt
 800aa66:	ebaa 0609 	sublt.w	r6, sl, r9
 800aa6a:	2300      	movlt	r3, #0
 800aa6c:	4656      	movge	r6, sl
 800aa6e:	464b      	movge	r3, r9
 800aa70:	e77b      	b.n	800a96a <_dtoa_r+0x632>
 800aa72:	4645      	mov	r5, r8
 800aa74:	4656      	mov	r6, sl
 800aa76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa78:	e780      	b.n	800a97c <_dtoa_r+0x644>
 800aa7a:	4642      	mov	r2, r8
 800aa7c:	e7a8      	b.n	800a9d0 <_dtoa_r+0x698>
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	e7d2      	b.n	800aa2a <_dtoa_r+0x6f2>
 800aa84:	4698      	mov	r8, r3
 800aa86:	e7d0      	b.n	800aa2a <_dtoa_r+0x6f2>
 800aa88:	f04f 0800 	mov.w	r8, #0
 800aa8c:	692b      	ldr	r3, [r5, #16]
 800aa8e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa92:	6918      	ldr	r0, [r3, #16]
 800aa94:	f000 fdb4 	bl	800b600 <__hi0bits>
 800aa98:	f1c0 0020 	rsb	r0, r0, #32
 800aa9c:	9b07      	ldr	r3, [sp, #28]
 800aa9e:	4418      	add	r0, r3
 800aaa0:	f010 001f 	ands.w	r0, r0, #31
 800aaa4:	d047      	beq.n	800ab36 <_dtoa_r+0x7fe>
 800aaa6:	f1c0 0320 	rsb	r3, r0, #32
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	dd3b      	ble.n	800ab26 <_dtoa_r+0x7ee>
 800aaae:	9b07      	ldr	r3, [sp, #28]
 800aab0:	f1c0 001c 	rsb	r0, r0, #28
 800aab4:	4482      	add	sl, r0
 800aab6:	4406      	add	r6, r0
 800aab8:	4403      	add	r3, r0
 800aaba:	9307      	str	r3, [sp, #28]
 800aabc:	f1ba 0f00 	cmp.w	sl, #0
 800aac0:	dd05      	ble.n	800aace <_dtoa_r+0x796>
 800aac2:	4652      	mov	r2, sl
 800aac4:	9901      	ldr	r1, [sp, #4]
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fed6 	bl	800b878 <__lshift>
 800aacc:	9001      	str	r0, [sp, #4]
 800aace:	9b07      	ldr	r3, [sp, #28]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dd05      	ble.n	800aae0 <_dtoa_r+0x7a8>
 800aad4:	4629      	mov	r1, r5
 800aad6:	461a      	mov	r2, r3
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fecd 	bl	800b878 <__lshift>
 800aade:	4605      	mov	r5, r0
 800aae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aae2:	b353      	cbz	r3, 800ab3a <_dtoa_r+0x802>
 800aae4:	4629      	mov	r1, r5
 800aae6:	9801      	ldr	r0, [sp, #4]
 800aae8:	f000 ff1a 	bl	800b920 <__mcmp>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	da24      	bge.n	800ab3a <_dtoa_r+0x802>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 fd09 	bl	800b50e <__multadd>
 800aafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafe:	9001      	str	r0, [sp, #4]
 800ab00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8142 	beq.w	800ad8e <_dtoa_r+0xa56>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	220a      	movs	r2, #10
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fcfc 	bl	800b50e <__multadd>
 800ab16:	9b06      	ldr	r3, [sp, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	dc4b      	bgt.n	800abb6 <_dtoa_r+0x87e>
 800ab1e:	9b08      	ldr	r3, [sp, #32]
 800ab20:	2b02      	cmp	r3, #2
 800ab22:	dd48      	ble.n	800abb6 <_dtoa_r+0x87e>
 800ab24:	e011      	b.n	800ab4a <_dtoa_r+0x812>
 800ab26:	d0c9      	beq.n	800aabc <_dtoa_r+0x784>
 800ab28:	9a07      	ldr	r2, [sp, #28]
 800ab2a:	331c      	adds	r3, #28
 800ab2c:	441a      	add	r2, r3
 800ab2e:	449a      	add	sl, r3
 800ab30:	441e      	add	r6, r3
 800ab32:	4613      	mov	r3, r2
 800ab34:	e7c1      	b.n	800aaba <_dtoa_r+0x782>
 800ab36:	4603      	mov	r3, r0
 800ab38:	e7f6      	b.n	800ab28 <_dtoa_r+0x7f0>
 800ab3a:	f1b9 0f00 	cmp.w	r9, #0
 800ab3e:	dc34      	bgt.n	800abaa <_dtoa_r+0x872>
 800ab40:	9b08      	ldr	r3, [sp, #32]
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	dd31      	ble.n	800abaa <_dtoa_r+0x872>
 800ab46:	f8cd 9018 	str.w	r9, [sp, #24]
 800ab4a:	9b06      	ldr	r3, [sp, #24]
 800ab4c:	b963      	cbnz	r3, 800ab68 <_dtoa_r+0x830>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	2205      	movs	r2, #5
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fcdb 	bl	800b50e <__multadd>
 800ab58:	4601      	mov	r1, r0
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	9801      	ldr	r0, [sp, #4]
 800ab5e:	f000 fedf 	bl	800b920 <__mcmp>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f73f adfc 	bgt.w	800a760 <_dtoa_r+0x428>
 800ab68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab6a:	9e04      	ldr	r6, [sp, #16]
 800ab6c:	ea6f 0b03 	mvn.w	fp, r3
 800ab70:	f04f 0900 	mov.w	r9, #0
 800ab74:	4629      	mov	r1, r5
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fcb2 	bl	800b4e0 <_Bfree>
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	f43f aebb 	beq.w	800a8f8 <_dtoa_r+0x5c0>
 800ab82:	f1b9 0f00 	cmp.w	r9, #0
 800ab86:	d005      	beq.n	800ab94 <_dtoa_r+0x85c>
 800ab88:	45b9      	cmp	r9, r7
 800ab8a:	d003      	beq.n	800ab94 <_dtoa_r+0x85c>
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 fca6 	bl	800b4e0 <_Bfree>
 800ab94:	4639      	mov	r1, r7
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fca2 	bl	800b4e0 <_Bfree>
 800ab9c:	e6ac      	b.n	800a8f8 <_dtoa_r+0x5c0>
 800ab9e:	2500      	movs	r5, #0
 800aba0:	462f      	mov	r7, r5
 800aba2:	e7e1      	b.n	800ab68 <_dtoa_r+0x830>
 800aba4:	469b      	mov	fp, r3
 800aba6:	462f      	mov	r7, r5
 800aba8:	e5da      	b.n	800a760 <_dtoa_r+0x428>
 800abaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abac:	f8cd 9018 	str.w	r9, [sp, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 80f3 	beq.w	800ad9c <_dtoa_r+0xa64>
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	dd05      	ble.n	800abc6 <_dtoa_r+0x88e>
 800abba:	4639      	mov	r1, r7
 800abbc:	4632      	mov	r2, r6
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 fe5a 	bl	800b878 <__lshift>
 800abc4:	4607      	mov	r7, r0
 800abc6:	f1b8 0f00 	cmp.w	r8, #0
 800abca:	d04c      	beq.n	800ac66 <_dtoa_r+0x92e>
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 fc52 	bl	800b478 <_Balloc>
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	3202      	adds	r2, #2
 800abd8:	4606      	mov	r6, r0
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	f107 010c 	add.w	r1, r7, #12
 800abe0:	300c      	adds	r0, #12
 800abe2:	f7fd fe3b 	bl	800885c <memcpy>
 800abe6:	2201      	movs	r2, #1
 800abe8:	4631      	mov	r1, r6
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fe44 	bl	800b878 <__lshift>
 800abf0:	9b02      	ldr	r3, [sp, #8]
 800abf2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	46b9      	mov	r9, r7
 800abfc:	9307      	str	r3, [sp, #28]
 800abfe:	4607      	mov	r7, r0
 800ac00:	4629      	mov	r1, r5
 800ac02:	9801      	ldr	r0, [sp, #4]
 800ac04:	f7ff fb0a 	bl	800a21c <quorem>
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	f000 fe85 	bl	800b920 <__mcmp>
 800ac16:	463a      	mov	r2, r7
 800ac18:	9002      	str	r0, [sp, #8]
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fe99 	bl	800b954 <__mdiff>
 800ac22:	68c3      	ldr	r3, [r0, #12]
 800ac24:	4602      	mov	r2, r0
 800ac26:	bb03      	cbnz	r3, 800ac6a <_dtoa_r+0x932>
 800ac28:	4601      	mov	r1, r0
 800ac2a:	9009      	str	r0, [sp, #36]	; 0x24
 800ac2c:	9801      	ldr	r0, [sp, #4]
 800ac2e:	f000 fe77 	bl	800b920 <__mcmp>
 800ac32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac34:	4603      	mov	r3, r0
 800ac36:	4611      	mov	r1, r2
 800ac38:	4620      	mov	r0, r4
 800ac3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3c:	f000 fc50 	bl	800b4e0 <_Bfree>
 800ac40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac42:	b9a3      	cbnz	r3, 800ac6e <_dtoa_r+0x936>
 800ac44:	9a08      	ldr	r2, [sp, #32]
 800ac46:	b992      	cbnz	r2, 800ac6e <_dtoa_r+0x936>
 800ac48:	9a07      	ldr	r2, [sp, #28]
 800ac4a:	b982      	cbnz	r2, 800ac6e <_dtoa_r+0x936>
 800ac4c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac50:	d029      	beq.n	800aca6 <_dtoa_r+0x96e>
 800ac52:	9b02      	ldr	r3, [sp, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	dd01      	ble.n	800ac5c <_dtoa_r+0x924>
 800ac58:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ac5c:	f10a 0601 	add.w	r6, sl, #1
 800ac60:	f88a 8000 	strb.w	r8, [sl]
 800ac64:	e786      	b.n	800ab74 <_dtoa_r+0x83c>
 800ac66:	4638      	mov	r0, r7
 800ac68:	e7c2      	b.n	800abf0 <_dtoa_r+0x8b8>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e7e3      	b.n	800ac36 <_dtoa_r+0x8fe>
 800ac6e:	9a02      	ldr	r2, [sp, #8]
 800ac70:	2a00      	cmp	r2, #0
 800ac72:	db04      	blt.n	800ac7e <_dtoa_r+0x946>
 800ac74:	d124      	bne.n	800acc0 <_dtoa_r+0x988>
 800ac76:	9a08      	ldr	r2, [sp, #32]
 800ac78:	bb12      	cbnz	r2, 800acc0 <_dtoa_r+0x988>
 800ac7a:	9a07      	ldr	r2, [sp, #28]
 800ac7c:	bb02      	cbnz	r2, 800acc0 <_dtoa_r+0x988>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	ddec      	ble.n	800ac5c <_dtoa_r+0x924>
 800ac82:	2201      	movs	r2, #1
 800ac84:	9901      	ldr	r1, [sp, #4]
 800ac86:	4620      	mov	r0, r4
 800ac88:	f000 fdf6 	bl	800b878 <__lshift>
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	9001      	str	r0, [sp, #4]
 800ac90:	f000 fe46 	bl	800b920 <__mcmp>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	dc03      	bgt.n	800aca0 <_dtoa_r+0x968>
 800ac98:	d1e0      	bne.n	800ac5c <_dtoa_r+0x924>
 800ac9a:	f018 0f01 	tst.w	r8, #1
 800ac9e:	d0dd      	beq.n	800ac5c <_dtoa_r+0x924>
 800aca0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aca4:	d1d8      	bne.n	800ac58 <_dtoa_r+0x920>
 800aca6:	2339      	movs	r3, #57	; 0x39
 800aca8:	f10a 0601 	add.w	r6, sl, #1
 800acac:	f88a 3000 	strb.w	r3, [sl]
 800acb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acb4:	2b39      	cmp	r3, #57	; 0x39
 800acb6:	f106 32ff 	add.w	r2, r6, #4294967295
 800acba:	d04c      	beq.n	800ad56 <_dtoa_r+0xa1e>
 800acbc:	3301      	adds	r3, #1
 800acbe:	e051      	b.n	800ad64 <_dtoa_r+0xa2c>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f10a 0601 	add.w	r6, sl, #1
 800acc6:	dd05      	ble.n	800acd4 <_dtoa_r+0x99c>
 800acc8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800accc:	d0eb      	beq.n	800aca6 <_dtoa_r+0x96e>
 800acce:	f108 0801 	add.w	r8, r8, #1
 800acd2:	e7c5      	b.n	800ac60 <_dtoa_r+0x928>
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	9a06      	ldr	r2, [sp, #24]
 800acd8:	f806 8c01 	strb.w	r8, [r6, #-1]
 800acdc:	1af3      	subs	r3, r6, r3
 800acde:	4293      	cmp	r3, r2
 800ace0:	d021      	beq.n	800ad26 <_dtoa_r+0x9ee>
 800ace2:	2300      	movs	r3, #0
 800ace4:	220a      	movs	r2, #10
 800ace6:	9901      	ldr	r1, [sp, #4]
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fc10 	bl	800b50e <__multadd>
 800acee:	45b9      	cmp	r9, r7
 800acf0:	9001      	str	r0, [sp, #4]
 800acf2:	f04f 0300 	mov.w	r3, #0
 800acf6:	f04f 020a 	mov.w	r2, #10
 800acfa:	4649      	mov	r1, r9
 800acfc:	4620      	mov	r0, r4
 800acfe:	d105      	bne.n	800ad0c <_dtoa_r+0x9d4>
 800ad00:	f000 fc05 	bl	800b50e <__multadd>
 800ad04:	4681      	mov	r9, r0
 800ad06:	4607      	mov	r7, r0
 800ad08:	46b2      	mov	sl, r6
 800ad0a:	e779      	b.n	800ac00 <_dtoa_r+0x8c8>
 800ad0c:	f000 fbff 	bl	800b50e <__multadd>
 800ad10:	4639      	mov	r1, r7
 800ad12:	4681      	mov	r9, r0
 800ad14:	2300      	movs	r3, #0
 800ad16:	220a      	movs	r2, #10
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 fbf8 	bl	800b50e <__multadd>
 800ad1e:	4607      	mov	r7, r0
 800ad20:	e7f2      	b.n	800ad08 <_dtoa_r+0x9d0>
 800ad22:	f04f 0900 	mov.w	r9, #0
 800ad26:	2201      	movs	r2, #1
 800ad28:	9901      	ldr	r1, [sp, #4]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fda4 	bl	800b878 <__lshift>
 800ad30:	4629      	mov	r1, r5
 800ad32:	9001      	str	r0, [sp, #4]
 800ad34:	f000 fdf4 	bl	800b920 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	dcb9      	bgt.n	800acb0 <_dtoa_r+0x978>
 800ad3c:	d102      	bne.n	800ad44 <_dtoa_r+0xa0c>
 800ad3e:	f018 0f01 	tst.w	r8, #1
 800ad42:	d1b5      	bne.n	800acb0 <_dtoa_r+0x978>
 800ad44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad48:	2b30      	cmp	r3, #48	; 0x30
 800ad4a:	f106 32ff 	add.w	r2, r6, #4294967295
 800ad4e:	f47f af11 	bne.w	800ab74 <_dtoa_r+0x83c>
 800ad52:	4616      	mov	r6, r2
 800ad54:	e7f6      	b.n	800ad44 <_dtoa_r+0xa0c>
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d105      	bne.n	800ad68 <_dtoa_r+0xa30>
 800ad5c:	9a04      	ldr	r2, [sp, #16]
 800ad5e:	f10b 0b01 	add.w	fp, fp, #1
 800ad62:	2331      	movs	r3, #49	; 0x31
 800ad64:	7013      	strb	r3, [r2, #0]
 800ad66:	e705      	b.n	800ab74 <_dtoa_r+0x83c>
 800ad68:	4616      	mov	r6, r2
 800ad6a:	e7a1      	b.n	800acb0 <_dtoa_r+0x978>
 800ad6c:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <_dtoa_r+0xa90>)
 800ad6e:	f7ff bb48 	b.w	800a402 <_dtoa_r+0xca>
 800ad72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f47f ab23 	bne.w	800a3c0 <_dtoa_r+0x88>
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <_dtoa_r+0xa94>)
 800ad7c:	f7ff bb41 	b.w	800a402 <_dtoa_r+0xca>
 800ad80:	9b08      	ldr	r3, [sp, #32]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	f77f ae3b 	ble.w	800a9fe <_dtoa_r+0x6c6>
 800ad88:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ad8c:	e64f      	b.n	800aa2e <_dtoa_r+0x6f6>
 800ad8e:	9b06      	ldr	r3, [sp, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dc03      	bgt.n	800ad9c <_dtoa_r+0xa64>
 800ad94:	9b08      	ldr	r3, [sp, #32]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	f73f aed7 	bgt.w	800ab4a <_dtoa_r+0x812>
 800ad9c:	9e04      	ldr	r6, [sp, #16]
 800ad9e:	9801      	ldr	r0, [sp, #4]
 800ada0:	4629      	mov	r1, r5
 800ada2:	f7ff fa3b 	bl	800a21c <quorem>
 800ada6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800adaa:	f806 8b01 	strb.w	r8, [r6], #1
 800adae:	9b04      	ldr	r3, [sp, #16]
 800adb0:	9a06      	ldr	r2, [sp, #24]
 800adb2:	1af3      	subs	r3, r6, r3
 800adb4:	429a      	cmp	r2, r3
 800adb6:	ddb4      	ble.n	800ad22 <_dtoa_r+0x9ea>
 800adb8:	2300      	movs	r3, #0
 800adba:	220a      	movs	r2, #10
 800adbc:	9901      	ldr	r1, [sp, #4]
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fba5 	bl	800b50e <__multadd>
 800adc4:	9001      	str	r0, [sp, #4]
 800adc6:	e7ea      	b.n	800ad9e <_dtoa_r+0xa66>
 800adc8:	0800c1d0 	.word	0x0800c1d0
 800adcc:	0800c250 	.word	0x0800c250

0800add0 <rshift>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	6906      	ldr	r6, [r0, #16]
 800add4:	114b      	asrs	r3, r1, #5
 800add6:	429e      	cmp	r6, r3
 800add8:	f100 0414 	add.w	r4, r0, #20
 800addc:	dd30      	ble.n	800ae40 <rshift+0x70>
 800adde:	f011 011f 	ands.w	r1, r1, #31
 800ade2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ade6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800adea:	d108      	bne.n	800adfe <rshift+0x2e>
 800adec:	4621      	mov	r1, r4
 800adee:	42b2      	cmp	r2, r6
 800adf0:	460b      	mov	r3, r1
 800adf2:	d211      	bcs.n	800ae18 <rshift+0x48>
 800adf4:	f852 3b04 	ldr.w	r3, [r2], #4
 800adf8:	f841 3b04 	str.w	r3, [r1], #4
 800adfc:	e7f7      	b.n	800adee <rshift+0x1e>
 800adfe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ae02:	f1c1 0c20 	rsb	ip, r1, #32
 800ae06:	40cd      	lsrs	r5, r1
 800ae08:	3204      	adds	r2, #4
 800ae0a:	4623      	mov	r3, r4
 800ae0c:	42b2      	cmp	r2, r6
 800ae0e:	4617      	mov	r7, r2
 800ae10:	d30c      	bcc.n	800ae2c <rshift+0x5c>
 800ae12:	601d      	str	r5, [r3, #0]
 800ae14:	b105      	cbz	r5, 800ae18 <rshift+0x48>
 800ae16:	3304      	adds	r3, #4
 800ae18:	1b1a      	subs	r2, r3, r4
 800ae1a:	42a3      	cmp	r3, r4
 800ae1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae20:	bf08      	it	eq
 800ae22:	2300      	moveq	r3, #0
 800ae24:	6102      	str	r2, [r0, #16]
 800ae26:	bf08      	it	eq
 800ae28:	6143      	streq	r3, [r0, #20]
 800ae2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae2c:	683f      	ldr	r7, [r7, #0]
 800ae2e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ae32:	433d      	orrs	r5, r7
 800ae34:	f843 5b04 	str.w	r5, [r3], #4
 800ae38:	f852 5b04 	ldr.w	r5, [r2], #4
 800ae3c:	40cd      	lsrs	r5, r1
 800ae3e:	e7e5      	b.n	800ae0c <rshift+0x3c>
 800ae40:	4623      	mov	r3, r4
 800ae42:	e7e9      	b.n	800ae18 <rshift+0x48>

0800ae44 <__hexdig_fun>:
 800ae44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae48:	2b09      	cmp	r3, #9
 800ae4a:	d802      	bhi.n	800ae52 <__hexdig_fun+0xe>
 800ae4c:	3820      	subs	r0, #32
 800ae4e:	b2c0      	uxtb	r0, r0
 800ae50:	4770      	bx	lr
 800ae52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae56:	2b05      	cmp	r3, #5
 800ae58:	d801      	bhi.n	800ae5e <__hexdig_fun+0x1a>
 800ae5a:	3847      	subs	r0, #71	; 0x47
 800ae5c:	e7f7      	b.n	800ae4e <__hexdig_fun+0xa>
 800ae5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d801      	bhi.n	800ae6a <__hexdig_fun+0x26>
 800ae66:	3827      	subs	r0, #39	; 0x27
 800ae68:	e7f1      	b.n	800ae4e <__hexdig_fun+0xa>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	4770      	bx	lr

0800ae6e <__gethex>:
 800ae6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae72:	b08b      	sub	sp, #44	; 0x2c
 800ae74:	468a      	mov	sl, r1
 800ae76:	9002      	str	r0, [sp, #8]
 800ae78:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	4690      	mov	r8, r2
 800ae7e:	f000 fad0 	bl	800b422 <__localeconv_l>
 800ae82:	6803      	ldr	r3, [r0, #0]
 800ae84:	9303      	str	r3, [sp, #12]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7f5 f9da 	bl	8000240 <strlen>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	9001      	str	r0, [sp, #4]
 800ae90:	4403      	add	r3, r0
 800ae92:	f04f 0b00 	mov.w	fp, #0
 800ae96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae9a:	9307      	str	r3, [sp, #28]
 800ae9c:	f8da 3000 	ldr.w	r3, [sl]
 800aea0:	3302      	adds	r3, #2
 800aea2:	461f      	mov	r7, r3
 800aea4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aea8:	2830      	cmp	r0, #48	; 0x30
 800aeaa:	d06c      	beq.n	800af86 <__gethex+0x118>
 800aeac:	f7ff ffca 	bl	800ae44 <__hexdig_fun>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d16a      	bne.n	800af8c <__gethex+0x11e>
 800aeb6:	9a01      	ldr	r2, [sp, #4]
 800aeb8:	9903      	ldr	r1, [sp, #12]
 800aeba:	4638      	mov	r0, r7
 800aebc:	f7fe fb1a 	bl	80094f4 <strncmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d166      	bne.n	800af92 <__gethex+0x124>
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	5cf8      	ldrb	r0, [r7, r3]
 800aec8:	18fe      	adds	r6, r7, r3
 800aeca:	f7ff ffbb 	bl	800ae44 <__hexdig_fun>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d062      	beq.n	800af98 <__gethex+0x12a>
 800aed2:	4633      	mov	r3, r6
 800aed4:	7818      	ldrb	r0, [r3, #0]
 800aed6:	2830      	cmp	r0, #48	; 0x30
 800aed8:	461f      	mov	r7, r3
 800aeda:	f103 0301 	add.w	r3, r3, #1
 800aede:	d0f9      	beq.n	800aed4 <__gethex+0x66>
 800aee0:	f7ff ffb0 	bl	800ae44 <__hexdig_fun>
 800aee4:	fab0 f580 	clz	r5, r0
 800aee8:	096d      	lsrs	r5, r5, #5
 800aeea:	4634      	mov	r4, r6
 800aeec:	f04f 0b01 	mov.w	fp, #1
 800aef0:	463a      	mov	r2, r7
 800aef2:	4616      	mov	r6, r2
 800aef4:	3201      	adds	r2, #1
 800aef6:	7830      	ldrb	r0, [r6, #0]
 800aef8:	f7ff ffa4 	bl	800ae44 <__hexdig_fun>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1f8      	bne.n	800aef2 <__gethex+0x84>
 800af00:	9a01      	ldr	r2, [sp, #4]
 800af02:	9903      	ldr	r1, [sp, #12]
 800af04:	4630      	mov	r0, r6
 800af06:	f7fe faf5 	bl	80094f4 <strncmp>
 800af0a:	b950      	cbnz	r0, 800af22 <__gethex+0xb4>
 800af0c:	b954      	cbnz	r4, 800af24 <__gethex+0xb6>
 800af0e:	9b01      	ldr	r3, [sp, #4]
 800af10:	18f4      	adds	r4, r6, r3
 800af12:	4622      	mov	r2, r4
 800af14:	4616      	mov	r6, r2
 800af16:	3201      	adds	r2, #1
 800af18:	7830      	ldrb	r0, [r6, #0]
 800af1a:	f7ff ff93 	bl	800ae44 <__hexdig_fun>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d1f8      	bne.n	800af14 <__gethex+0xa6>
 800af22:	b10c      	cbz	r4, 800af28 <__gethex+0xba>
 800af24:	1ba4      	subs	r4, r4, r6
 800af26:	00a4      	lsls	r4, r4, #2
 800af28:	7833      	ldrb	r3, [r6, #0]
 800af2a:	2b50      	cmp	r3, #80	; 0x50
 800af2c:	d001      	beq.n	800af32 <__gethex+0xc4>
 800af2e:	2b70      	cmp	r3, #112	; 0x70
 800af30:	d140      	bne.n	800afb4 <__gethex+0x146>
 800af32:	7873      	ldrb	r3, [r6, #1]
 800af34:	2b2b      	cmp	r3, #43	; 0x2b
 800af36:	d031      	beq.n	800af9c <__gethex+0x12e>
 800af38:	2b2d      	cmp	r3, #45	; 0x2d
 800af3a:	d033      	beq.n	800afa4 <__gethex+0x136>
 800af3c:	1c71      	adds	r1, r6, #1
 800af3e:	f04f 0900 	mov.w	r9, #0
 800af42:	7808      	ldrb	r0, [r1, #0]
 800af44:	f7ff ff7e 	bl	800ae44 <__hexdig_fun>
 800af48:	1e43      	subs	r3, r0, #1
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b18      	cmp	r3, #24
 800af4e:	d831      	bhi.n	800afb4 <__gethex+0x146>
 800af50:	f1a0 0210 	sub.w	r2, r0, #16
 800af54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af58:	f7ff ff74 	bl	800ae44 <__hexdig_fun>
 800af5c:	1e43      	subs	r3, r0, #1
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b18      	cmp	r3, #24
 800af62:	d922      	bls.n	800afaa <__gethex+0x13c>
 800af64:	f1b9 0f00 	cmp.w	r9, #0
 800af68:	d000      	beq.n	800af6c <__gethex+0xfe>
 800af6a:	4252      	negs	r2, r2
 800af6c:	4414      	add	r4, r2
 800af6e:	f8ca 1000 	str.w	r1, [sl]
 800af72:	b30d      	cbz	r5, 800afb8 <__gethex+0x14a>
 800af74:	f1bb 0f00 	cmp.w	fp, #0
 800af78:	bf0c      	ite	eq
 800af7a:	2706      	moveq	r7, #6
 800af7c:	2700      	movne	r7, #0
 800af7e:	4638      	mov	r0, r7
 800af80:	b00b      	add	sp, #44	; 0x2c
 800af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	f10b 0b01 	add.w	fp, fp, #1
 800af8a:	e78a      	b.n	800aea2 <__gethex+0x34>
 800af8c:	2500      	movs	r5, #0
 800af8e:	462c      	mov	r4, r5
 800af90:	e7ae      	b.n	800aef0 <__gethex+0x82>
 800af92:	463e      	mov	r6, r7
 800af94:	2501      	movs	r5, #1
 800af96:	e7c7      	b.n	800af28 <__gethex+0xba>
 800af98:	4604      	mov	r4, r0
 800af9a:	e7fb      	b.n	800af94 <__gethex+0x126>
 800af9c:	f04f 0900 	mov.w	r9, #0
 800afa0:	1cb1      	adds	r1, r6, #2
 800afa2:	e7ce      	b.n	800af42 <__gethex+0xd4>
 800afa4:	f04f 0901 	mov.w	r9, #1
 800afa8:	e7fa      	b.n	800afa0 <__gethex+0x132>
 800afaa:	230a      	movs	r3, #10
 800afac:	fb03 0202 	mla	r2, r3, r2, r0
 800afb0:	3a10      	subs	r2, #16
 800afb2:	e7cf      	b.n	800af54 <__gethex+0xe6>
 800afb4:	4631      	mov	r1, r6
 800afb6:	e7da      	b.n	800af6e <__gethex+0x100>
 800afb8:	1bf3      	subs	r3, r6, r7
 800afba:	3b01      	subs	r3, #1
 800afbc:	4629      	mov	r1, r5
 800afbe:	2b07      	cmp	r3, #7
 800afc0:	dc49      	bgt.n	800b056 <__gethex+0x1e8>
 800afc2:	9802      	ldr	r0, [sp, #8]
 800afc4:	f000 fa58 	bl	800b478 <_Balloc>
 800afc8:	9b01      	ldr	r3, [sp, #4]
 800afca:	f100 0914 	add.w	r9, r0, #20
 800afce:	f04f 0b00 	mov.w	fp, #0
 800afd2:	f1c3 0301 	rsb	r3, r3, #1
 800afd6:	4605      	mov	r5, r0
 800afd8:	f8cd 9010 	str.w	r9, [sp, #16]
 800afdc:	46da      	mov	sl, fp
 800afde:	9308      	str	r3, [sp, #32]
 800afe0:	42b7      	cmp	r7, r6
 800afe2:	d33b      	bcc.n	800b05c <__gethex+0x1ee>
 800afe4:	9804      	ldr	r0, [sp, #16]
 800afe6:	f840 ab04 	str.w	sl, [r0], #4
 800afea:	eba0 0009 	sub.w	r0, r0, r9
 800afee:	1080      	asrs	r0, r0, #2
 800aff0:	6128      	str	r0, [r5, #16]
 800aff2:	0147      	lsls	r7, r0, #5
 800aff4:	4650      	mov	r0, sl
 800aff6:	f000 fb03 	bl	800b600 <__hi0bits>
 800affa:	f8d8 6000 	ldr.w	r6, [r8]
 800affe:	1a3f      	subs	r7, r7, r0
 800b000:	42b7      	cmp	r7, r6
 800b002:	dd64      	ble.n	800b0ce <__gethex+0x260>
 800b004:	1bbf      	subs	r7, r7, r6
 800b006:	4639      	mov	r1, r7
 800b008:	4628      	mov	r0, r5
 800b00a:	f000 fe14 	bl	800bc36 <__any_on>
 800b00e:	4682      	mov	sl, r0
 800b010:	b178      	cbz	r0, 800b032 <__gethex+0x1c4>
 800b012:	1e7b      	subs	r3, r7, #1
 800b014:	1159      	asrs	r1, r3, #5
 800b016:	f003 021f 	and.w	r2, r3, #31
 800b01a:	f04f 0a01 	mov.w	sl, #1
 800b01e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b022:	fa0a f202 	lsl.w	r2, sl, r2
 800b026:	420a      	tst	r2, r1
 800b028:	d003      	beq.n	800b032 <__gethex+0x1c4>
 800b02a:	4553      	cmp	r3, sl
 800b02c:	dc46      	bgt.n	800b0bc <__gethex+0x24e>
 800b02e:	f04f 0a02 	mov.w	sl, #2
 800b032:	4639      	mov	r1, r7
 800b034:	4628      	mov	r0, r5
 800b036:	f7ff fecb 	bl	800add0 <rshift>
 800b03a:	443c      	add	r4, r7
 800b03c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b040:	42a3      	cmp	r3, r4
 800b042:	da52      	bge.n	800b0ea <__gethex+0x27c>
 800b044:	4629      	mov	r1, r5
 800b046:	9802      	ldr	r0, [sp, #8]
 800b048:	f000 fa4a 	bl	800b4e0 <_Bfree>
 800b04c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b04e:	2300      	movs	r3, #0
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	27a3      	movs	r7, #163	; 0xa3
 800b054:	e793      	b.n	800af7e <__gethex+0x110>
 800b056:	3101      	adds	r1, #1
 800b058:	105b      	asrs	r3, r3, #1
 800b05a:	e7b0      	b.n	800afbe <__gethex+0x150>
 800b05c:	1e73      	subs	r3, r6, #1
 800b05e:	9305      	str	r3, [sp, #20]
 800b060:	9a07      	ldr	r2, [sp, #28]
 800b062:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b066:	4293      	cmp	r3, r2
 800b068:	d018      	beq.n	800b09c <__gethex+0x22e>
 800b06a:	f1bb 0f20 	cmp.w	fp, #32
 800b06e:	d107      	bne.n	800b080 <__gethex+0x212>
 800b070:	9b04      	ldr	r3, [sp, #16]
 800b072:	f8c3 a000 	str.w	sl, [r3]
 800b076:	3304      	adds	r3, #4
 800b078:	f04f 0a00 	mov.w	sl, #0
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	46d3      	mov	fp, sl
 800b080:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b084:	f7ff fede 	bl	800ae44 <__hexdig_fun>
 800b088:	f000 000f 	and.w	r0, r0, #15
 800b08c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b090:	ea4a 0a00 	orr.w	sl, sl, r0
 800b094:	f10b 0b04 	add.w	fp, fp, #4
 800b098:	9b05      	ldr	r3, [sp, #20]
 800b09a:	e00d      	b.n	800b0b8 <__gethex+0x24a>
 800b09c:	9b05      	ldr	r3, [sp, #20]
 800b09e:	9a08      	ldr	r2, [sp, #32]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	42bb      	cmp	r3, r7
 800b0a4:	d3e1      	bcc.n	800b06a <__gethex+0x1fc>
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	9903      	ldr	r1, [sp, #12]
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	f7fe fa21 	bl	80094f4 <strncmp>
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d1d8      	bne.n	800b06a <__gethex+0x1fc>
 800b0b8:	461e      	mov	r6, r3
 800b0ba:	e791      	b.n	800afe0 <__gethex+0x172>
 800b0bc:	1eb9      	subs	r1, r7, #2
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f000 fdb9 	bl	800bc36 <__any_on>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d0b2      	beq.n	800b02e <__gethex+0x1c0>
 800b0c8:	f04f 0a03 	mov.w	sl, #3
 800b0cc:	e7b1      	b.n	800b032 <__gethex+0x1c4>
 800b0ce:	da09      	bge.n	800b0e4 <__gethex+0x276>
 800b0d0:	1bf7      	subs	r7, r6, r7
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	463a      	mov	r2, r7
 800b0d6:	9802      	ldr	r0, [sp, #8]
 800b0d8:	f000 fbce 	bl	800b878 <__lshift>
 800b0dc:	1be4      	subs	r4, r4, r7
 800b0de:	4605      	mov	r5, r0
 800b0e0:	f100 0914 	add.w	r9, r0, #20
 800b0e4:	f04f 0a00 	mov.w	sl, #0
 800b0e8:	e7a8      	b.n	800b03c <__gethex+0x1ce>
 800b0ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0ee:	42a0      	cmp	r0, r4
 800b0f0:	dd6a      	ble.n	800b1c8 <__gethex+0x35a>
 800b0f2:	1b04      	subs	r4, r0, r4
 800b0f4:	42a6      	cmp	r6, r4
 800b0f6:	dc2e      	bgt.n	800b156 <__gethex+0x2e8>
 800b0f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d022      	beq.n	800b146 <__gethex+0x2d8>
 800b100:	2b03      	cmp	r3, #3
 800b102:	d024      	beq.n	800b14e <__gethex+0x2e0>
 800b104:	2b01      	cmp	r3, #1
 800b106:	d115      	bne.n	800b134 <__gethex+0x2c6>
 800b108:	42a6      	cmp	r6, r4
 800b10a:	d113      	bne.n	800b134 <__gethex+0x2c6>
 800b10c:	2e01      	cmp	r6, #1
 800b10e:	dc0b      	bgt.n	800b128 <__gethex+0x2ba>
 800b110:	9a06      	ldr	r2, [sp, #24]
 800b112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	2301      	movs	r3, #1
 800b11a:	612b      	str	r3, [r5, #16]
 800b11c:	f8c9 3000 	str.w	r3, [r9]
 800b120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b122:	2762      	movs	r7, #98	; 0x62
 800b124:	601d      	str	r5, [r3, #0]
 800b126:	e72a      	b.n	800af7e <__gethex+0x110>
 800b128:	1e71      	subs	r1, r6, #1
 800b12a:	4628      	mov	r0, r5
 800b12c:	f000 fd83 	bl	800bc36 <__any_on>
 800b130:	2800      	cmp	r0, #0
 800b132:	d1ed      	bne.n	800b110 <__gethex+0x2a2>
 800b134:	4629      	mov	r1, r5
 800b136:	9802      	ldr	r0, [sp, #8]
 800b138:	f000 f9d2 	bl	800b4e0 <_Bfree>
 800b13c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b13e:	2300      	movs	r3, #0
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	2750      	movs	r7, #80	; 0x50
 800b144:	e71b      	b.n	800af7e <__gethex+0x110>
 800b146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0e1      	beq.n	800b110 <__gethex+0x2a2>
 800b14c:	e7f2      	b.n	800b134 <__gethex+0x2c6>
 800b14e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1dd      	bne.n	800b110 <__gethex+0x2a2>
 800b154:	e7ee      	b.n	800b134 <__gethex+0x2c6>
 800b156:	1e67      	subs	r7, r4, #1
 800b158:	f1ba 0f00 	cmp.w	sl, #0
 800b15c:	d131      	bne.n	800b1c2 <__gethex+0x354>
 800b15e:	b127      	cbz	r7, 800b16a <__gethex+0x2fc>
 800b160:	4639      	mov	r1, r7
 800b162:	4628      	mov	r0, r5
 800b164:	f000 fd67 	bl	800bc36 <__any_on>
 800b168:	4682      	mov	sl, r0
 800b16a:	117a      	asrs	r2, r7, #5
 800b16c:	2301      	movs	r3, #1
 800b16e:	f007 071f 	and.w	r7, r7, #31
 800b172:	fa03 f707 	lsl.w	r7, r3, r7
 800b176:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b17a:	4621      	mov	r1, r4
 800b17c:	421f      	tst	r7, r3
 800b17e:	4628      	mov	r0, r5
 800b180:	bf18      	it	ne
 800b182:	f04a 0a02 	orrne.w	sl, sl, #2
 800b186:	1b36      	subs	r6, r6, r4
 800b188:	f7ff fe22 	bl	800add0 <rshift>
 800b18c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b190:	2702      	movs	r7, #2
 800b192:	f1ba 0f00 	cmp.w	sl, #0
 800b196:	d048      	beq.n	800b22a <__gethex+0x3bc>
 800b198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d015      	beq.n	800b1cc <__gethex+0x35e>
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d017      	beq.n	800b1d4 <__gethex+0x366>
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d109      	bne.n	800b1bc <__gethex+0x34e>
 800b1a8:	f01a 0f02 	tst.w	sl, #2
 800b1ac:	d006      	beq.n	800b1bc <__gethex+0x34e>
 800b1ae:	f8d9 3000 	ldr.w	r3, [r9]
 800b1b2:	ea4a 0a03 	orr.w	sl, sl, r3
 800b1b6:	f01a 0f01 	tst.w	sl, #1
 800b1ba:	d10e      	bne.n	800b1da <__gethex+0x36c>
 800b1bc:	f047 0710 	orr.w	r7, r7, #16
 800b1c0:	e033      	b.n	800b22a <__gethex+0x3bc>
 800b1c2:	f04f 0a01 	mov.w	sl, #1
 800b1c6:	e7d0      	b.n	800b16a <__gethex+0x2fc>
 800b1c8:	2701      	movs	r7, #1
 800b1ca:	e7e2      	b.n	800b192 <__gethex+0x324>
 800b1cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ce:	f1c3 0301 	rsb	r3, r3, #1
 800b1d2:	9315      	str	r3, [sp, #84]	; 0x54
 800b1d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0f0      	beq.n	800b1bc <__gethex+0x34e>
 800b1da:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b1de:	f105 0314 	add.w	r3, r5, #20
 800b1e2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b1e6:	eb03 010a 	add.w	r1, r3, sl
 800b1ea:	f04f 0c00 	mov.w	ip, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1f8:	d01c      	beq.n	800b234 <__gethex+0x3c6>
 800b1fa:	3201      	adds	r2, #1
 800b1fc:	6002      	str	r2, [r0, #0]
 800b1fe:	2f02      	cmp	r7, #2
 800b200:	f105 0314 	add.w	r3, r5, #20
 800b204:	d138      	bne.n	800b278 <__gethex+0x40a>
 800b206:	f8d8 2000 	ldr.w	r2, [r8]
 800b20a:	3a01      	subs	r2, #1
 800b20c:	42b2      	cmp	r2, r6
 800b20e:	d10a      	bne.n	800b226 <__gethex+0x3b8>
 800b210:	1171      	asrs	r1, r6, #5
 800b212:	2201      	movs	r2, #1
 800b214:	f006 061f 	and.w	r6, r6, #31
 800b218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b21c:	fa02 f606 	lsl.w	r6, r2, r6
 800b220:	421e      	tst	r6, r3
 800b222:	bf18      	it	ne
 800b224:	4617      	movne	r7, r2
 800b226:	f047 0720 	orr.w	r7, r7, #32
 800b22a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b22c:	601d      	str	r5, [r3, #0]
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	601c      	str	r4, [r3, #0]
 800b232:	e6a4      	b.n	800af7e <__gethex+0x110>
 800b234:	4299      	cmp	r1, r3
 800b236:	f843 cc04 	str.w	ip, [r3, #-4]
 800b23a:	d8d8      	bhi.n	800b1ee <__gethex+0x380>
 800b23c:	68ab      	ldr	r3, [r5, #8]
 800b23e:	4599      	cmp	r9, r3
 800b240:	db12      	blt.n	800b268 <__gethex+0x3fa>
 800b242:	6869      	ldr	r1, [r5, #4]
 800b244:	9802      	ldr	r0, [sp, #8]
 800b246:	3101      	adds	r1, #1
 800b248:	f000 f916 	bl	800b478 <_Balloc>
 800b24c:	692a      	ldr	r2, [r5, #16]
 800b24e:	3202      	adds	r2, #2
 800b250:	f105 010c 	add.w	r1, r5, #12
 800b254:	4683      	mov	fp, r0
 800b256:	0092      	lsls	r2, r2, #2
 800b258:	300c      	adds	r0, #12
 800b25a:	f7fd faff 	bl	800885c <memcpy>
 800b25e:	4629      	mov	r1, r5
 800b260:	9802      	ldr	r0, [sp, #8]
 800b262:	f000 f93d 	bl	800b4e0 <_Bfree>
 800b266:	465d      	mov	r5, fp
 800b268:	692b      	ldr	r3, [r5, #16]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b270:	612a      	str	r2, [r5, #16]
 800b272:	2201      	movs	r2, #1
 800b274:	615a      	str	r2, [r3, #20]
 800b276:	e7c2      	b.n	800b1fe <__gethex+0x390>
 800b278:	692a      	ldr	r2, [r5, #16]
 800b27a:	454a      	cmp	r2, r9
 800b27c:	dd0b      	ble.n	800b296 <__gethex+0x428>
 800b27e:	2101      	movs	r1, #1
 800b280:	4628      	mov	r0, r5
 800b282:	f7ff fda5 	bl	800add0 <rshift>
 800b286:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b28a:	3401      	adds	r4, #1
 800b28c:	42a3      	cmp	r3, r4
 800b28e:	f6ff aed9 	blt.w	800b044 <__gethex+0x1d6>
 800b292:	2701      	movs	r7, #1
 800b294:	e7c7      	b.n	800b226 <__gethex+0x3b8>
 800b296:	f016 061f 	ands.w	r6, r6, #31
 800b29a:	d0fa      	beq.n	800b292 <__gethex+0x424>
 800b29c:	449a      	add	sl, r3
 800b29e:	f1c6 0620 	rsb	r6, r6, #32
 800b2a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b2a6:	f000 f9ab 	bl	800b600 <__hi0bits>
 800b2aa:	42b0      	cmp	r0, r6
 800b2ac:	dbe7      	blt.n	800b27e <__gethex+0x410>
 800b2ae:	e7f0      	b.n	800b292 <__gethex+0x424>

0800b2b0 <L_shift>:
 800b2b0:	f1c2 0208 	rsb	r2, r2, #8
 800b2b4:	0092      	lsls	r2, r2, #2
 800b2b6:	b570      	push	{r4, r5, r6, lr}
 800b2b8:	f1c2 0620 	rsb	r6, r2, #32
 800b2bc:	6843      	ldr	r3, [r0, #4]
 800b2be:	6804      	ldr	r4, [r0, #0]
 800b2c0:	fa03 f506 	lsl.w	r5, r3, r6
 800b2c4:	432c      	orrs	r4, r5
 800b2c6:	40d3      	lsrs	r3, r2
 800b2c8:	6004      	str	r4, [r0, #0]
 800b2ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2ce:	4288      	cmp	r0, r1
 800b2d0:	d3f4      	bcc.n	800b2bc <L_shift+0xc>
 800b2d2:	bd70      	pop	{r4, r5, r6, pc}

0800b2d4 <__match>:
 800b2d4:	b530      	push	{r4, r5, lr}
 800b2d6:	6803      	ldr	r3, [r0, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2de:	b914      	cbnz	r4, 800b2e6 <__match+0x12>
 800b2e0:	6003      	str	r3, [r0, #0]
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	bd30      	pop	{r4, r5, pc}
 800b2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2ee:	2d19      	cmp	r5, #25
 800b2f0:	bf98      	it	ls
 800b2f2:	3220      	addls	r2, #32
 800b2f4:	42a2      	cmp	r2, r4
 800b2f6:	d0f0      	beq.n	800b2da <__match+0x6>
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	e7f3      	b.n	800b2e4 <__match+0x10>

0800b2fc <__hexnan>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	680b      	ldr	r3, [r1, #0]
 800b302:	6801      	ldr	r1, [r0, #0]
 800b304:	115f      	asrs	r7, r3, #5
 800b306:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b30a:	f013 031f 	ands.w	r3, r3, #31
 800b30e:	b087      	sub	sp, #28
 800b310:	bf18      	it	ne
 800b312:	3704      	addne	r7, #4
 800b314:	2500      	movs	r5, #0
 800b316:	1f3e      	subs	r6, r7, #4
 800b318:	4682      	mov	sl, r0
 800b31a:	4690      	mov	r8, r2
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	f847 5c04 	str.w	r5, [r7, #-4]
 800b322:	46b1      	mov	r9, r6
 800b324:	4634      	mov	r4, r6
 800b326:	9502      	str	r5, [sp, #8]
 800b328:	46ab      	mov	fp, r5
 800b32a:	784a      	ldrb	r2, [r1, #1]
 800b32c:	1c4b      	adds	r3, r1, #1
 800b32e:	9303      	str	r3, [sp, #12]
 800b330:	b342      	cbz	r2, 800b384 <__hexnan+0x88>
 800b332:	4610      	mov	r0, r2
 800b334:	9105      	str	r1, [sp, #20]
 800b336:	9204      	str	r2, [sp, #16]
 800b338:	f7ff fd84 	bl	800ae44 <__hexdig_fun>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d143      	bne.n	800b3c8 <__hexnan+0xcc>
 800b340:	9a04      	ldr	r2, [sp, #16]
 800b342:	9905      	ldr	r1, [sp, #20]
 800b344:	2a20      	cmp	r2, #32
 800b346:	d818      	bhi.n	800b37a <__hexnan+0x7e>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	459b      	cmp	fp, r3
 800b34c:	dd13      	ble.n	800b376 <__hexnan+0x7a>
 800b34e:	454c      	cmp	r4, r9
 800b350:	d206      	bcs.n	800b360 <__hexnan+0x64>
 800b352:	2d07      	cmp	r5, #7
 800b354:	dc04      	bgt.n	800b360 <__hexnan+0x64>
 800b356:	462a      	mov	r2, r5
 800b358:	4649      	mov	r1, r9
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7ff ffa8 	bl	800b2b0 <L_shift>
 800b360:	4544      	cmp	r4, r8
 800b362:	d944      	bls.n	800b3ee <__hexnan+0xf2>
 800b364:	2300      	movs	r3, #0
 800b366:	f1a4 0904 	sub.w	r9, r4, #4
 800b36a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b36e:	f8cd b008 	str.w	fp, [sp, #8]
 800b372:	464c      	mov	r4, r9
 800b374:	461d      	mov	r5, r3
 800b376:	9903      	ldr	r1, [sp, #12]
 800b378:	e7d7      	b.n	800b32a <__hexnan+0x2e>
 800b37a:	2a29      	cmp	r2, #41	; 0x29
 800b37c:	d14a      	bne.n	800b414 <__hexnan+0x118>
 800b37e:	3102      	adds	r1, #2
 800b380:	f8ca 1000 	str.w	r1, [sl]
 800b384:	f1bb 0f00 	cmp.w	fp, #0
 800b388:	d044      	beq.n	800b414 <__hexnan+0x118>
 800b38a:	454c      	cmp	r4, r9
 800b38c:	d206      	bcs.n	800b39c <__hexnan+0xa0>
 800b38e:	2d07      	cmp	r5, #7
 800b390:	dc04      	bgt.n	800b39c <__hexnan+0xa0>
 800b392:	462a      	mov	r2, r5
 800b394:	4649      	mov	r1, r9
 800b396:	4620      	mov	r0, r4
 800b398:	f7ff ff8a 	bl	800b2b0 <L_shift>
 800b39c:	4544      	cmp	r4, r8
 800b39e:	d928      	bls.n	800b3f2 <__hexnan+0xf6>
 800b3a0:	4643      	mov	r3, r8
 800b3a2:	f854 2b04 	ldr.w	r2, [r4], #4
 800b3a6:	f843 2b04 	str.w	r2, [r3], #4
 800b3aa:	42a6      	cmp	r6, r4
 800b3ac:	d2f9      	bcs.n	800b3a2 <__hexnan+0xa6>
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f843 2b04 	str.w	r2, [r3], #4
 800b3b4:	429e      	cmp	r6, r3
 800b3b6:	d2fb      	bcs.n	800b3b0 <__hexnan+0xb4>
 800b3b8:	6833      	ldr	r3, [r6, #0]
 800b3ba:	b91b      	cbnz	r3, 800b3c4 <__hexnan+0xc8>
 800b3bc:	4546      	cmp	r6, r8
 800b3be:	d127      	bne.n	800b410 <__hexnan+0x114>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	6033      	str	r3, [r6, #0]
 800b3c4:	2005      	movs	r0, #5
 800b3c6:	e026      	b.n	800b416 <__hexnan+0x11a>
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	2d08      	cmp	r5, #8
 800b3cc:	f10b 0b01 	add.w	fp, fp, #1
 800b3d0:	dd06      	ble.n	800b3e0 <__hexnan+0xe4>
 800b3d2:	4544      	cmp	r4, r8
 800b3d4:	d9cf      	bls.n	800b376 <__hexnan+0x7a>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3dc:	2501      	movs	r5, #1
 800b3de:	3c04      	subs	r4, #4
 800b3e0:	6822      	ldr	r2, [r4, #0]
 800b3e2:	f000 000f 	and.w	r0, r0, #15
 800b3e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3ea:	6020      	str	r0, [r4, #0]
 800b3ec:	e7c3      	b.n	800b376 <__hexnan+0x7a>
 800b3ee:	2508      	movs	r5, #8
 800b3f0:	e7c1      	b.n	800b376 <__hexnan+0x7a>
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d0df      	beq.n	800b3b8 <__hexnan+0xbc>
 800b3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fc:	f1c3 0320 	rsb	r3, r3, #32
 800b400:	fa22 f303 	lsr.w	r3, r2, r3
 800b404:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b408:	401a      	ands	r2, r3
 800b40a:	f847 2c04 	str.w	r2, [r7, #-4]
 800b40e:	e7d3      	b.n	800b3b8 <__hexnan+0xbc>
 800b410:	3e04      	subs	r6, #4
 800b412:	e7d1      	b.n	800b3b8 <__hexnan+0xbc>
 800b414:	2004      	movs	r0, #4
 800b416:	b007      	add	sp, #28
 800b418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b41c <__locale_ctype_ptr_l>:
 800b41c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b420:	4770      	bx	lr

0800b422 <__localeconv_l>:
 800b422:	30f0      	adds	r0, #240	; 0xf0
 800b424:	4770      	bx	lr
	...

0800b428 <_localeconv_r>:
 800b428:	4b04      	ldr	r3, [pc, #16]	; (800b43c <_localeconv_r+0x14>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	6a18      	ldr	r0, [r3, #32]
 800b42e:	4b04      	ldr	r3, [pc, #16]	; (800b440 <_localeconv_r+0x18>)
 800b430:	2800      	cmp	r0, #0
 800b432:	bf08      	it	eq
 800b434:	4618      	moveq	r0, r3
 800b436:	30f0      	adds	r0, #240	; 0xf0
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	20000020 	.word	0x20000020
 800b440:	20000084 	.word	0x20000084

0800b444 <malloc>:
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <malloc+0xc>)
 800b446:	4601      	mov	r1, r0
 800b448:	6818      	ldr	r0, [r3, #0]
 800b44a:	f000 bc71 	b.w	800bd30 <_malloc_r>
 800b44e:	bf00      	nop
 800b450:	20000020 	.word	0x20000020

0800b454 <__ascii_mbtowc>:
 800b454:	b082      	sub	sp, #8
 800b456:	b901      	cbnz	r1, 800b45a <__ascii_mbtowc+0x6>
 800b458:	a901      	add	r1, sp, #4
 800b45a:	b142      	cbz	r2, 800b46e <__ascii_mbtowc+0x1a>
 800b45c:	b14b      	cbz	r3, 800b472 <__ascii_mbtowc+0x1e>
 800b45e:	7813      	ldrb	r3, [r2, #0]
 800b460:	600b      	str	r3, [r1, #0]
 800b462:	7812      	ldrb	r2, [r2, #0]
 800b464:	1c10      	adds	r0, r2, #0
 800b466:	bf18      	it	ne
 800b468:	2001      	movne	r0, #1
 800b46a:	b002      	add	sp, #8
 800b46c:	4770      	bx	lr
 800b46e:	4610      	mov	r0, r2
 800b470:	e7fb      	b.n	800b46a <__ascii_mbtowc+0x16>
 800b472:	f06f 0001 	mvn.w	r0, #1
 800b476:	e7f8      	b.n	800b46a <__ascii_mbtowc+0x16>

0800b478 <_Balloc>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b47c:	4604      	mov	r4, r0
 800b47e:	460e      	mov	r6, r1
 800b480:	b93d      	cbnz	r5, 800b492 <_Balloc+0x1a>
 800b482:	2010      	movs	r0, #16
 800b484:	f7ff ffde 	bl	800b444 <malloc>
 800b488:	6260      	str	r0, [r4, #36]	; 0x24
 800b48a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b48e:	6005      	str	r5, [r0, #0]
 800b490:	60c5      	str	r5, [r0, #12]
 800b492:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b494:	68eb      	ldr	r3, [r5, #12]
 800b496:	b183      	cbz	r3, 800b4ba <_Balloc+0x42>
 800b498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b4a0:	b9b8      	cbnz	r0, 800b4d2 <_Balloc+0x5a>
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	fa01 f506 	lsl.w	r5, r1, r6
 800b4a8:	1d6a      	adds	r2, r5, #5
 800b4aa:	0092      	lsls	r2, r2, #2
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f000 fbe3 	bl	800bc78 <_calloc_r>
 800b4b2:	b160      	cbz	r0, 800b4ce <_Balloc+0x56>
 800b4b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b4b8:	e00e      	b.n	800b4d8 <_Balloc+0x60>
 800b4ba:	2221      	movs	r2, #33	; 0x21
 800b4bc:	2104      	movs	r1, #4
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 fbda 	bl	800bc78 <_calloc_r>
 800b4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c6:	60e8      	str	r0, [r5, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1e4      	bne.n	800b498 <_Balloc+0x20>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	bd70      	pop	{r4, r5, r6, pc}
 800b4d2:	6802      	ldr	r2, [r0, #0]
 800b4d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4de:	e7f7      	b.n	800b4d0 <_Balloc+0x58>

0800b4e0 <_Bfree>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	b93c      	cbnz	r4, 800b4fa <_Bfree+0x1a>
 800b4ea:	2010      	movs	r0, #16
 800b4ec:	f7ff ffaa 	bl	800b444 <malloc>
 800b4f0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4f6:	6004      	str	r4, [r0, #0]
 800b4f8:	60c4      	str	r4, [r0, #12]
 800b4fa:	b13d      	cbz	r5, 800b50c <_Bfree+0x2c>
 800b4fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4fe:	686a      	ldr	r2, [r5, #4]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b506:	6029      	str	r1, [r5, #0]
 800b508:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b50c:	bd70      	pop	{r4, r5, r6, pc}

0800b50e <__multadd>:
 800b50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b512:	690d      	ldr	r5, [r1, #16]
 800b514:	461f      	mov	r7, r3
 800b516:	4606      	mov	r6, r0
 800b518:	460c      	mov	r4, r1
 800b51a:	f101 0c14 	add.w	ip, r1, #20
 800b51e:	2300      	movs	r3, #0
 800b520:	f8dc 0000 	ldr.w	r0, [ip]
 800b524:	b281      	uxth	r1, r0
 800b526:	fb02 7101 	mla	r1, r2, r1, r7
 800b52a:	0c0f      	lsrs	r7, r1, #16
 800b52c:	0c00      	lsrs	r0, r0, #16
 800b52e:	fb02 7000 	mla	r0, r2, r0, r7
 800b532:	b289      	uxth	r1, r1
 800b534:	3301      	adds	r3, #1
 800b536:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b53a:	429d      	cmp	r5, r3
 800b53c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b540:	f84c 1b04 	str.w	r1, [ip], #4
 800b544:	dcec      	bgt.n	800b520 <__multadd+0x12>
 800b546:	b1d7      	cbz	r7, 800b57e <__multadd+0x70>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	42ab      	cmp	r3, r5
 800b54c:	dc12      	bgt.n	800b574 <__multadd+0x66>
 800b54e:	6861      	ldr	r1, [r4, #4]
 800b550:	4630      	mov	r0, r6
 800b552:	3101      	adds	r1, #1
 800b554:	f7ff ff90 	bl	800b478 <_Balloc>
 800b558:	6922      	ldr	r2, [r4, #16]
 800b55a:	3202      	adds	r2, #2
 800b55c:	f104 010c 	add.w	r1, r4, #12
 800b560:	4680      	mov	r8, r0
 800b562:	0092      	lsls	r2, r2, #2
 800b564:	300c      	adds	r0, #12
 800b566:	f7fd f979 	bl	800885c <memcpy>
 800b56a:	4621      	mov	r1, r4
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7ff ffb7 	bl	800b4e0 <_Bfree>
 800b572:	4644      	mov	r4, r8
 800b574:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b578:	3501      	adds	r5, #1
 800b57a:	615f      	str	r7, [r3, #20]
 800b57c:	6125      	str	r5, [r4, #16]
 800b57e:	4620      	mov	r0, r4
 800b580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b584 <__s2b>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	460c      	mov	r4, r1
 800b58a:	4615      	mov	r5, r2
 800b58c:	461f      	mov	r7, r3
 800b58e:	2209      	movs	r2, #9
 800b590:	3308      	adds	r3, #8
 800b592:	4606      	mov	r6, r0
 800b594:	fb93 f3f2 	sdiv	r3, r3, r2
 800b598:	2100      	movs	r1, #0
 800b59a:	2201      	movs	r2, #1
 800b59c:	429a      	cmp	r2, r3
 800b59e:	db20      	blt.n	800b5e2 <__s2b+0x5e>
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7ff ff69 	bl	800b478 <_Balloc>
 800b5a6:	9b08      	ldr	r3, [sp, #32]
 800b5a8:	6143      	str	r3, [r0, #20]
 800b5aa:	2d09      	cmp	r5, #9
 800b5ac:	f04f 0301 	mov.w	r3, #1
 800b5b0:	6103      	str	r3, [r0, #16]
 800b5b2:	dd19      	ble.n	800b5e8 <__s2b+0x64>
 800b5b4:	f104 0809 	add.w	r8, r4, #9
 800b5b8:	46c1      	mov	r9, r8
 800b5ba:	442c      	add	r4, r5
 800b5bc:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b5c0:	4601      	mov	r1, r0
 800b5c2:	3b30      	subs	r3, #48	; 0x30
 800b5c4:	220a      	movs	r2, #10
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ffa1 	bl	800b50e <__multadd>
 800b5cc:	45a1      	cmp	r9, r4
 800b5ce:	d1f5      	bne.n	800b5bc <__s2b+0x38>
 800b5d0:	eb08 0405 	add.w	r4, r8, r5
 800b5d4:	3c08      	subs	r4, #8
 800b5d6:	1b2d      	subs	r5, r5, r4
 800b5d8:	1963      	adds	r3, r4, r5
 800b5da:	42bb      	cmp	r3, r7
 800b5dc:	db07      	blt.n	800b5ee <__s2b+0x6a>
 800b5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e2:	0052      	lsls	r2, r2, #1
 800b5e4:	3101      	adds	r1, #1
 800b5e6:	e7d9      	b.n	800b59c <__s2b+0x18>
 800b5e8:	340a      	adds	r4, #10
 800b5ea:	2509      	movs	r5, #9
 800b5ec:	e7f3      	b.n	800b5d6 <__s2b+0x52>
 800b5ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	3b30      	subs	r3, #48	; 0x30
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f7ff ff88 	bl	800b50e <__multadd>
 800b5fe:	e7eb      	b.n	800b5d8 <__s2b+0x54>

0800b600 <__hi0bits>:
 800b600:	0c02      	lsrs	r2, r0, #16
 800b602:	0412      	lsls	r2, r2, #16
 800b604:	4603      	mov	r3, r0
 800b606:	b9b2      	cbnz	r2, 800b636 <__hi0bits+0x36>
 800b608:	0403      	lsls	r3, r0, #16
 800b60a:	2010      	movs	r0, #16
 800b60c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b610:	bf04      	itt	eq
 800b612:	021b      	lsleq	r3, r3, #8
 800b614:	3008      	addeq	r0, #8
 800b616:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b61a:	bf04      	itt	eq
 800b61c:	011b      	lsleq	r3, r3, #4
 800b61e:	3004      	addeq	r0, #4
 800b620:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b624:	bf04      	itt	eq
 800b626:	009b      	lsleq	r3, r3, #2
 800b628:	3002      	addeq	r0, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	db06      	blt.n	800b63c <__hi0bits+0x3c>
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	d503      	bpl.n	800b63a <__hi0bits+0x3a>
 800b632:	3001      	adds	r0, #1
 800b634:	4770      	bx	lr
 800b636:	2000      	movs	r0, #0
 800b638:	e7e8      	b.n	800b60c <__hi0bits+0xc>
 800b63a:	2020      	movs	r0, #32
 800b63c:	4770      	bx	lr

0800b63e <__lo0bits>:
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	f013 0207 	ands.w	r2, r3, #7
 800b644:	4601      	mov	r1, r0
 800b646:	d00b      	beq.n	800b660 <__lo0bits+0x22>
 800b648:	07da      	lsls	r2, r3, #31
 800b64a:	d423      	bmi.n	800b694 <__lo0bits+0x56>
 800b64c:	0798      	lsls	r0, r3, #30
 800b64e:	bf49      	itett	mi
 800b650:	085b      	lsrmi	r3, r3, #1
 800b652:	089b      	lsrpl	r3, r3, #2
 800b654:	2001      	movmi	r0, #1
 800b656:	600b      	strmi	r3, [r1, #0]
 800b658:	bf5c      	itt	pl
 800b65a:	600b      	strpl	r3, [r1, #0]
 800b65c:	2002      	movpl	r0, #2
 800b65e:	4770      	bx	lr
 800b660:	b298      	uxth	r0, r3
 800b662:	b9a8      	cbnz	r0, 800b690 <__lo0bits+0x52>
 800b664:	0c1b      	lsrs	r3, r3, #16
 800b666:	2010      	movs	r0, #16
 800b668:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b66c:	bf04      	itt	eq
 800b66e:	0a1b      	lsreq	r3, r3, #8
 800b670:	3008      	addeq	r0, #8
 800b672:	071a      	lsls	r2, r3, #28
 800b674:	bf04      	itt	eq
 800b676:	091b      	lsreq	r3, r3, #4
 800b678:	3004      	addeq	r0, #4
 800b67a:	079a      	lsls	r2, r3, #30
 800b67c:	bf04      	itt	eq
 800b67e:	089b      	lsreq	r3, r3, #2
 800b680:	3002      	addeq	r0, #2
 800b682:	07da      	lsls	r2, r3, #31
 800b684:	d402      	bmi.n	800b68c <__lo0bits+0x4e>
 800b686:	085b      	lsrs	r3, r3, #1
 800b688:	d006      	beq.n	800b698 <__lo0bits+0x5a>
 800b68a:	3001      	adds	r0, #1
 800b68c:	600b      	str	r3, [r1, #0]
 800b68e:	4770      	bx	lr
 800b690:	4610      	mov	r0, r2
 800b692:	e7e9      	b.n	800b668 <__lo0bits+0x2a>
 800b694:	2000      	movs	r0, #0
 800b696:	4770      	bx	lr
 800b698:	2020      	movs	r0, #32
 800b69a:	4770      	bx	lr

0800b69c <__i2b>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	460c      	mov	r4, r1
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	f7ff fee9 	bl	800b478 <_Balloc>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	6144      	str	r4, [r0, #20]
 800b6aa:	6102      	str	r2, [r0, #16]
 800b6ac:	bd10      	pop	{r4, pc}

0800b6ae <__multiply>:
 800b6ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b2:	4614      	mov	r4, r2
 800b6b4:	690a      	ldr	r2, [r1, #16]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	bfb8      	it	lt
 800b6bc:	460b      	movlt	r3, r1
 800b6be:	4688      	mov	r8, r1
 800b6c0:	bfbc      	itt	lt
 800b6c2:	46a0      	movlt	r8, r4
 800b6c4:	461c      	movlt	r4, r3
 800b6c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6d6:	eb07 0609 	add.w	r6, r7, r9
 800b6da:	42b3      	cmp	r3, r6
 800b6dc:	bfb8      	it	lt
 800b6de:	3101      	addlt	r1, #1
 800b6e0:	f7ff feca 	bl	800b478 <_Balloc>
 800b6e4:	f100 0514 	add.w	r5, r0, #20
 800b6e8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	4573      	cmp	r3, lr
 800b6f2:	d316      	bcc.n	800b722 <__multiply+0x74>
 800b6f4:	f104 0214 	add.w	r2, r4, #20
 800b6f8:	f108 0114 	add.w	r1, r8, #20
 800b6fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b700:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	9201      	str	r2, [sp, #4]
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d80c      	bhi.n	800b728 <__multiply+0x7a>
 800b70e:	2e00      	cmp	r6, #0
 800b710:	dd03      	ble.n	800b71a <__multiply+0x6c>
 800b712:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b716:	2b00      	cmp	r3, #0
 800b718:	d05d      	beq.n	800b7d6 <__multiply+0x128>
 800b71a:	6106      	str	r6, [r0, #16]
 800b71c:	b003      	add	sp, #12
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	f843 2b04 	str.w	r2, [r3], #4
 800b726:	e7e3      	b.n	800b6f0 <__multiply+0x42>
 800b728:	f8b2 b000 	ldrh.w	fp, [r2]
 800b72c:	f1bb 0f00 	cmp.w	fp, #0
 800b730:	d023      	beq.n	800b77a <__multiply+0xcc>
 800b732:	4689      	mov	r9, r1
 800b734:	46ac      	mov	ip, r5
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b73e:	f8dc a000 	ldr.w	sl, [ip]
 800b742:	b2a3      	uxth	r3, r4
 800b744:	fa1f fa8a 	uxth.w	sl, sl
 800b748:	fb0b a303 	mla	r3, fp, r3, sl
 800b74c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b750:	f8dc 4000 	ldr.w	r4, [ip]
 800b754:	4443      	add	r3, r8
 800b756:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b75a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b75e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b762:	46e2      	mov	sl, ip
 800b764:	b29b      	uxth	r3, r3
 800b766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b76a:	454f      	cmp	r7, r9
 800b76c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b770:	f84a 3b04 	str.w	r3, [sl], #4
 800b774:	d82b      	bhi.n	800b7ce <__multiply+0x120>
 800b776:	f8cc 8004 	str.w	r8, [ip, #4]
 800b77a:	9b01      	ldr	r3, [sp, #4]
 800b77c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b780:	3204      	adds	r2, #4
 800b782:	f1ba 0f00 	cmp.w	sl, #0
 800b786:	d020      	beq.n	800b7ca <__multiply+0x11c>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	4689      	mov	r9, r1
 800b78c:	46a8      	mov	r8, r5
 800b78e:	f04f 0b00 	mov.w	fp, #0
 800b792:	f8b9 c000 	ldrh.w	ip, [r9]
 800b796:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b79a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b79e:	445c      	add	r4, fp
 800b7a0:	46c4      	mov	ip, r8
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b7a8:	f84c 3b04 	str.w	r3, [ip], #4
 800b7ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	fb0a b303 	mla	r3, sl, r3, fp
 800b7ba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b7be:	454f      	cmp	r7, r9
 800b7c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b7c4:	d805      	bhi.n	800b7d2 <__multiply+0x124>
 800b7c6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b7ca:	3504      	adds	r5, #4
 800b7cc:	e79b      	b.n	800b706 <__multiply+0x58>
 800b7ce:	46d4      	mov	ip, sl
 800b7d0:	e7b3      	b.n	800b73a <__multiply+0x8c>
 800b7d2:	46e0      	mov	r8, ip
 800b7d4:	e7dd      	b.n	800b792 <__multiply+0xe4>
 800b7d6:	3e01      	subs	r6, #1
 800b7d8:	e799      	b.n	800b70e <__multiply+0x60>
	...

0800b7dc <__pow5mult>:
 800b7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	f012 0203 	ands.w	r2, r2, #3
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	d007      	beq.n	800b7fc <__pow5mult+0x20>
 800b7ec:	3a01      	subs	r2, #1
 800b7ee:	4c21      	ldr	r4, [pc, #132]	; (800b874 <__pow5mult+0x98>)
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7f6:	f7ff fe8a 	bl	800b50e <__multadd>
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	10ad      	asrs	r5, r5, #2
 800b7fe:	d035      	beq.n	800b86c <__pow5mult+0x90>
 800b800:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b802:	b93c      	cbnz	r4, 800b814 <__pow5mult+0x38>
 800b804:	2010      	movs	r0, #16
 800b806:	f7ff fe1d 	bl	800b444 <malloc>
 800b80a:	6270      	str	r0, [r6, #36]	; 0x24
 800b80c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b810:	6004      	str	r4, [r0, #0]
 800b812:	60c4      	str	r4, [r0, #12]
 800b814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b81c:	b94c      	cbnz	r4, 800b832 <__pow5mult+0x56>
 800b81e:	f240 2171 	movw	r1, #625	; 0x271
 800b822:	4630      	mov	r0, r6
 800b824:	f7ff ff3a 	bl	800b69c <__i2b>
 800b828:	2300      	movs	r3, #0
 800b82a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b82e:	4604      	mov	r4, r0
 800b830:	6003      	str	r3, [r0, #0]
 800b832:	f04f 0800 	mov.w	r8, #0
 800b836:	07eb      	lsls	r3, r5, #31
 800b838:	d50a      	bpl.n	800b850 <__pow5mult+0x74>
 800b83a:	4639      	mov	r1, r7
 800b83c:	4622      	mov	r2, r4
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff ff35 	bl	800b6ae <__multiply>
 800b844:	4639      	mov	r1, r7
 800b846:	4681      	mov	r9, r0
 800b848:	4630      	mov	r0, r6
 800b84a:	f7ff fe49 	bl	800b4e0 <_Bfree>
 800b84e:	464f      	mov	r7, r9
 800b850:	106d      	asrs	r5, r5, #1
 800b852:	d00b      	beq.n	800b86c <__pow5mult+0x90>
 800b854:	6820      	ldr	r0, [r4, #0]
 800b856:	b938      	cbnz	r0, 800b868 <__pow5mult+0x8c>
 800b858:	4622      	mov	r2, r4
 800b85a:	4621      	mov	r1, r4
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff ff26 	bl	800b6ae <__multiply>
 800b862:	6020      	str	r0, [r4, #0]
 800b864:	f8c0 8000 	str.w	r8, [r0]
 800b868:	4604      	mov	r4, r0
 800b86a:	e7e4      	b.n	800b836 <__pow5mult+0x5a>
 800b86c:	4638      	mov	r0, r7
 800b86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b872:	bf00      	nop
 800b874:	0800c3c0 	.word	0x0800c3c0

0800b878 <__lshift>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	460c      	mov	r4, r1
 800b87e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b882:	6923      	ldr	r3, [r4, #16]
 800b884:	6849      	ldr	r1, [r1, #4]
 800b886:	eb0a 0903 	add.w	r9, sl, r3
 800b88a:	68a3      	ldr	r3, [r4, #8]
 800b88c:	4607      	mov	r7, r0
 800b88e:	4616      	mov	r6, r2
 800b890:	f109 0501 	add.w	r5, r9, #1
 800b894:	42ab      	cmp	r3, r5
 800b896:	db32      	blt.n	800b8fe <__lshift+0x86>
 800b898:	4638      	mov	r0, r7
 800b89a:	f7ff fded 	bl	800b478 <_Balloc>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4680      	mov	r8, r0
 800b8a2:	f100 0114 	add.w	r1, r0, #20
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	4553      	cmp	r3, sl
 800b8aa:	db2b      	blt.n	800b904 <__lshift+0x8c>
 800b8ac:	6920      	ldr	r0, [r4, #16]
 800b8ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b2:	f104 0314 	add.w	r3, r4, #20
 800b8b6:	f016 021f 	ands.w	r2, r6, #31
 800b8ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c2:	d025      	beq.n	800b910 <__lshift+0x98>
 800b8c4:	f1c2 0e20 	rsb	lr, r2, #32
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	681e      	ldr	r6, [r3, #0]
 800b8cc:	468a      	mov	sl, r1
 800b8ce:	4096      	lsls	r6, r2
 800b8d0:	4330      	orrs	r0, r6
 800b8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8d6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b8da:	459c      	cmp	ip, r3
 800b8dc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b8e0:	d814      	bhi.n	800b90c <__lshift+0x94>
 800b8e2:	6048      	str	r0, [r1, #4]
 800b8e4:	b108      	cbz	r0, 800b8ea <__lshift+0x72>
 800b8e6:	f109 0502 	add.w	r5, r9, #2
 800b8ea:	3d01      	subs	r5, #1
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f8c8 5010 	str.w	r5, [r8, #16]
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	f7ff fdf4 	bl	800b4e0 <_Bfree>
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8fe:	3101      	adds	r1, #1
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	e7c7      	b.n	800b894 <__lshift+0x1c>
 800b904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b908:	3301      	adds	r3, #1
 800b90a:	e7cd      	b.n	800b8a8 <__lshift+0x30>
 800b90c:	4651      	mov	r1, sl
 800b90e:	e7dc      	b.n	800b8ca <__lshift+0x52>
 800b910:	3904      	subs	r1, #4
 800b912:	f853 2b04 	ldr.w	r2, [r3], #4
 800b916:	f841 2f04 	str.w	r2, [r1, #4]!
 800b91a:	459c      	cmp	ip, r3
 800b91c:	d8f9      	bhi.n	800b912 <__lshift+0x9a>
 800b91e:	e7e4      	b.n	800b8ea <__lshift+0x72>

0800b920 <__mcmp>:
 800b920:	6903      	ldr	r3, [r0, #16]
 800b922:	690a      	ldr	r2, [r1, #16]
 800b924:	1a9b      	subs	r3, r3, r2
 800b926:	b530      	push	{r4, r5, lr}
 800b928:	d10c      	bne.n	800b944 <__mcmp+0x24>
 800b92a:	0092      	lsls	r2, r2, #2
 800b92c:	3014      	adds	r0, #20
 800b92e:	3114      	adds	r1, #20
 800b930:	1884      	adds	r4, r0, r2
 800b932:	4411      	add	r1, r2
 800b934:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b938:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b93c:	4295      	cmp	r5, r2
 800b93e:	d003      	beq.n	800b948 <__mcmp+0x28>
 800b940:	d305      	bcc.n	800b94e <__mcmp+0x2e>
 800b942:	2301      	movs	r3, #1
 800b944:	4618      	mov	r0, r3
 800b946:	bd30      	pop	{r4, r5, pc}
 800b948:	42a0      	cmp	r0, r4
 800b94a:	d3f3      	bcc.n	800b934 <__mcmp+0x14>
 800b94c:	e7fa      	b.n	800b944 <__mcmp+0x24>
 800b94e:	f04f 33ff 	mov.w	r3, #4294967295
 800b952:	e7f7      	b.n	800b944 <__mcmp+0x24>

0800b954 <__mdiff>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	460d      	mov	r5, r1
 800b95a:	4607      	mov	r7, r0
 800b95c:	4611      	mov	r1, r2
 800b95e:	4628      	mov	r0, r5
 800b960:	4614      	mov	r4, r2
 800b962:	f7ff ffdd 	bl	800b920 <__mcmp>
 800b966:	1e06      	subs	r6, r0, #0
 800b968:	d108      	bne.n	800b97c <__mdiff+0x28>
 800b96a:	4631      	mov	r1, r6
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff fd83 	bl	800b478 <_Balloc>
 800b972:	2301      	movs	r3, #1
 800b974:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97c:	bfa4      	itt	ge
 800b97e:	4623      	movge	r3, r4
 800b980:	462c      	movge	r4, r5
 800b982:	4638      	mov	r0, r7
 800b984:	6861      	ldr	r1, [r4, #4]
 800b986:	bfa6      	itte	ge
 800b988:	461d      	movge	r5, r3
 800b98a:	2600      	movge	r6, #0
 800b98c:	2601      	movlt	r6, #1
 800b98e:	f7ff fd73 	bl	800b478 <_Balloc>
 800b992:	692b      	ldr	r3, [r5, #16]
 800b994:	60c6      	str	r6, [r0, #12]
 800b996:	6926      	ldr	r6, [r4, #16]
 800b998:	f105 0914 	add.w	r9, r5, #20
 800b99c:	f104 0214 	add.w	r2, r4, #20
 800b9a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b9a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b9a8:	f100 0514 	add.w	r5, r0, #20
 800b9ac:	f04f 0e00 	mov.w	lr, #0
 800b9b0:	f852 ab04 	ldr.w	sl, [r2], #4
 800b9b4:	f859 4b04 	ldr.w	r4, [r9], #4
 800b9b8:	fa1e f18a 	uxtah	r1, lr, sl
 800b9bc:	b2a3      	uxth	r3, r4
 800b9be:	1ac9      	subs	r1, r1, r3
 800b9c0:	0c23      	lsrs	r3, r4, #16
 800b9c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b9c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b9ca:	b289      	uxth	r1, r1
 800b9cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b9d0:	45c8      	cmp	r8, r9
 800b9d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b9d6:	4694      	mov	ip, r2
 800b9d8:	f845 3b04 	str.w	r3, [r5], #4
 800b9dc:	d8e8      	bhi.n	800b9b0 <__mdiff+0x5c>
 800b9de:	45bc      	cmp	ip, r7
 800b9e0:	d304      	bcc.n	800b9ec <__mdiff+0x98>
 800b9e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b9e6:	b183      	cbz	r3, 800ba0a <__mdiff+0xb6>
 800b9e8:	6106      	str	r6, [r0, #16]
 800b9ea:	e7c5      	b.n	800b978 <__mdiff+0x24>
 800b9ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9f0:	fa1e f381 	uxtah	r3, lr, r1
 800b9f4:	141a      	asrs	r2, r3, #16
 800b9f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ba04:	f845 3b04 	str.w	r3, [r5], #4
 800ba08:	e7e9      	b.n	800b9de <__mdiff+0x8a>
 800ba0a:	3e01      	subs	r6, #1
 800ba0c:	e7e9      	b.n	800b9e2 <__mdiff+0x8e>
	...

0800ba10 <__ulp>:
 800ba10:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <__ulp+0x4c>)
 800ba12:	ee10 2a90 	vmov	r2, s1
 800ba16:	401a      	ands	r2, r3
 800ba18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dd04      	ble.n	800ba2a <__ulp+0x1a>
 800ba20:	2000      	movs	r0, #0
 800ba22:	4619      	mov	r1, r3
 800ba24:	ec41 0b10 	vmov	d0, r0, r1
 800ba28:	4770      	bx	lr
 800ba2a:	425b      	negs	r3, r3
 800ba2c:	151b      	asrs	r3, r3, #20
 800ba2e:	2b13      	cmp	r3, #19
 800ba30:	f04f 0000 	mov.w	r0, #0
 800ba34:	f04f 0100 	mov.w	r1, #0
 800ba38:	dc04      	bgt.n	800ba44 <__ulp+0x34>
 800ba3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba3e:	fa42 f103 	asr.w	r1, r2, r3
 800ba42:	e7ef      	b.n	800ba24 <__ulp+0x14>
 800ba44:	3b14      	subs	r3, #20
 800ba46:	2b1e      	cmp	r3, #30
 800ba48:	f04f 0201 	mov.w	r2, #1
 800ba4c:	bfda      	itte	le
 800ba4e:	f1c3 031f 	rsble	r3, r3, #31
 800ba52:	fa02 f303 	lslle.w	r3, r2, r3
 800ba56:	4613      	movgt	r3, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	e7e3      	b.n	800ba24 <__ulp+0x14>
 800ba5c:	7ff00000 	.word	0x7ff00000

0800ba60 <__b2d>:
 800ba60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba62:	6905      	ldr	r5, [r0, #16]
 800ba64:	f100 0714 	add.w	r7, r0, #20
 800ba68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba6c:	1f2e      	subs	r6, r5, #4
 800ba6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba72:	4620      	mov	r0, r4
 800ba74:	f7ff fdc4 	bl	800b600 <__hi0bits>
 800ba78:	f1c0 0320 	rsb	r3, r0, #32
 800ba7c:	280a      	cmp	r0, #10
 800ba7e:	600b      	str	r3, [r1, #0]
 800ba80:	f8df c074 	ldr.w	ip, [pc, #116]	; 800baf8 <__b2d+0x98>
 800ba84:	dc14      	bgt.n	800bab0 <__b2d+0x50>
 800ba86:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba8a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba8e:	42b7      	cmp	r7, r6
 800ba90:	ea41 030c 	orr.w	r3, r1, ip
 800ba94:	bf34      	ite	cc
 800ba96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba9a:	2100      	movcs	r1, #0
 800ba9c:	3015      	adds	r0, #21
 800ba9e:	fa04 f000 	lsl.w	r0, r4, r0
 800baa2:	fa21 f10e 	lsr.w	r1, r1, lr
 800baa6:	ea40 0201 	orr.w	r2, r0, r1
 800baaa:	ec43 2b10 	vmov	d0, r2, r3
 800baae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bab0:	42b7      	cmp	r7, r6
 800bab2:	bf3a      	itte	cc
 800bab4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bab8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800babc:	2100      	movcs	r1, #0
 800babe:	380b      	subs	r0, #11
 800bac0:	d015      	beq.n	800baee <__b2d+0x8e>
 800bac2:	4084      	lsls	r4, r0
 800bac4:	f1c0 0520 	rsb	r5, r0, #32
 800bac8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bacc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bad0:	42be      	cmp	r6, r7
 800bad2:	fa21 fc05 	lsr.w	ip, r1, r5
 800bad6:	ea44 030c 	orr.w	r3, r4, ip
 800bada:	bf8c      	ite	hi
 800badc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bae0:	2400      	movls	r4, #0
 800bae2:	fa01 f000 	lsl.w	r0, r1, r0
 800bae6:	40ec      	lsrs	r4, r5
 800bae8:	ea40 0204 	orr.w	r2, r0, r4
 800baec:	e7dd      	b.n	800baaa <__b2d+0x4a>
 800baee:	ea44 030c 	orr.w	r3, r4, ip
 800baf2:	460a      	mov	r2, r1
 800baf4:	e7d9      	b.n	800baaa <__b2d+0x4a>
 800baf6:	bf00      	nop
 800baf8:	3ff00000 	.word	0x3ff00000

0800bafc <__d2b>:
 800bafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb00:	460e      	mov	r6, r1
 800bb02:	2101      	movs	r1, #1
 800bb04:	ec59 8b10 	vmov	r8, r9, d0
 800bb08:	4615      	mov	r5, r2
 800bb0a:	f7ff fcb5 	bl	800b478 <_Balloc>
 800bb0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bb12:	4607      	mov	r7, r0
 800bb14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb18:	bb34      	cbnz	r4, 800bb68 <__d2b+0x6c>
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	f1b8 0300 	subs.w	r3, r8, #0
 800bb20:	d027      	beq.n	800bb72 <__d2b+0x76>
 800bb22:	a802      	add	r0, sp, #8
 800bb24:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bb28:	f7ff fd89 	bl	800b63e <__lo0bits>
 800bb2c:	9900      	ldr	r1, [sp, #0]
 800bb2e:	b1f0      	cbz	r0, 800bb6e <__d2b+0x72>
 800bb30:	9a01      	ldr	r2, [sp, #4]
 800bb32:	f1c0 0320 	rsb	r3, r0, #32
 800bb36:	fa02 f303 	lsl.w	r3, r2, r3
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	40c2      	lsrs	r2, r0
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	9201      	str	r2, [sp, #4]
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	61bb      	str	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bf14      	ite	ne
 800bb4a:	2102      	movne	r1, #2
 800bb4c:	2101      	moveq	r1, #1
 800bb4e:	6139      	str	r1, [r7, #16]
 800bb50:	b1c4      	cbz	r4, 800bb84 <__d2b+0x88>
 800bb52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb56:	4404      	add	r4, r0
 800bb58:	6034      	str	r4, [r6, #0]
 800bb5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb5e:	6028      	str	r0, [r5, #0]
 800bb60:	4638      	mov	r0, r7
 800bb62:	b003      	add	sp, #12
 800bb64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb6c:	e7d5      	b.n	800bb1a <__d2b+0x1e>
 800bb6e:	6179      	str	r1, [r7, #20]
 800bb70:	e7e7      	b.n	800bb42 <__d2b+0x46>
 800bb72:	a801      	add	r0, sp, #4
 800bb74:	f7ff fd63 	bl	800b63e <__lo0bits>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	6139      	str	r1, [r7, #16]
 800bb80:	3020      	adds	r0, #32
 800bb82:	e7e5      	b.n	800bb50 <__d2b+0x54>
 800bb84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb8c:	6030      	str	r0, [r6, #0]
 800bb8e:	6918      	ldr	r0, [r3, #16]
 800bb90:	f7ff fd36 	bl	800b600 <__hi0bits>
 800bb94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb98:	e7e1      	b.n	800bb5e <__d2b+0x62>

0800bb9a <__ratio>:
 800bb9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9e:	4688      	mov	r8, r1
 800bba0:	4669      	mov	r1, sp
 800bba2:	4681      	mov	r9, r0
 800bba4:	f7ff ff5c 	bl	800ba60 <__b2d>
 800bba8:	a901      	add	r1, sp, #4
 800bbaa:	4640      	mov	r0, r8
 800bbac:	ec57 6b10 	vmov	r6, r7, d0
 800bbb0:	ee10 4a10 	vmov	r4, s0
 800bbb4:	f7ff ff54 	bl	800ba60 <__b2d>
 800bbb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbc0:	eba3 0c02 	sub.w	ip, r3, r2
 800bbc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbce:	ec51 0b10 	vmov	r0, r1, d0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	ee10 aa10 	vmov	sl, s0
 800bbd8:	bfce      	itee	gt
 800bbda:	463a      	movgt	r2, r7
 800bbdc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbe0:	460a      	movle	r2, r1
 800bbe2:	463d      	mov	r5, r7
 800bbe4:	468b      	mov	fp, r1
 800bbe6:	bfcc      	ite	gt
 800bbe8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bbec:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bbf0:	ec45 4b17 	vmov	d7, r4, r5
 800bbf4:	ec4b ab16 	vmov	d6, sl, fp
 800bbf8:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800bbfc:	b003      	add	sp, #12
 800bbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc02 <__copybits>:
 800bc02:	3901      	subs	r1, #1
 800bc04:	b510      	push	{r4, lr}
 800bc06:	1149      	asrs	r1, r1, #5
 800bc08:	6914      	ldr	r4, [r2, #16]
 800bc0a:	3101      	adds	r1, #1
 800bc0c:	f102 0314 	add.w	r3, r2, #20
 800bc10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	d303      	bcc.n	800bc26 <__copybits+0x24>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	428a      	cmp	r2, r1
 800bc22:	d305      	bcc.n	800bc30 <__copybits+0x2e>
 800bc24:	bd10      	pop	{r4, pc}
 800bc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc2a:	f840 2b04 	str.w	r2, [r0], #4
 800bc2e:	e7f3      	b.n	800bc18 <__copybits+0x16>
 800bc30:	f842 3b04 	str.w	r3, [r2], #4
 800bc34:	e7f4      	b.n	800bc20 <__copybits+0x1e>

0800bc36 <__any_on>:
 800bc36:	f100 0214 	add.w	r2, r0, #20
 800bc3a:	6900      	ldr	r0, [r0, #16]
 800bc3c:	114b      	asrs	r3, r1, #5
 800bc3e:	4298      	cmp	r0, r3
 800bc40:	b510      	push	{r4, lr}
 800bc42:	db11      	blt.n	800bc68 <__any_on+0x32>
 800bc44:	dd0a      	ble.n	800bc5c <__any_on+0x26>
 800bc46:	f011 011f 	ands.w	r1, r1, #31
 800bc4a:	d007      	beq.n	800bc5c <__any_on+0x26>
 800bc4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc50:	fa24 f001 	lsr.w	r0, r4, r1
 800bc54:	fa00 f101 	lsl.w	r1, r0, r1
 800bc58:	428c      	cmp	r4, r1
 800bc5a:	d10b      	bne.n	800bc74 <__any_on+0x3e>
 800bc5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d803      	bhi.n	800bc6c <__any_on+0x36>
 800bc64:	2000      	movs	r0, #0
 800bc66:	bd10      	pop	{r4, pc}
 800bc68:	4603      	mov	r3, r0
 800bc6a:	e7f7      	b.n	800bc5c <__any_on+0x26>
 800bc6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc70:	2900      	cmp	r1, #0
 800bc72:	d0f5      	beq.n	800bc60 <__any_on+0x2a>
 800bc74:	2001      	movs	r0, #1
 800bc76:	e7f6      	b.n	800bc66 <__any_on+0x30>

0800bc78 <_calloc_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	fb02 f401 	mul.w	r4, r2, r1
 800bc7e:	4621      	mov	r1, r4
 800bc80:	f000 f856 	bl	800bd30 <_malloc_r>
 800bc84:	4605      	mov	r5, r0
 800bc86:	b118      	cbz	r0, 800bc90 <_calloc_r+0x18>
 800bc88:	4622      	mov	r2, r4
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	f7fc fdf1 	bl	8008872 <memset>
 800bc90:	4628      	mov	r0, r5
 800bc92:	bd38      	pop	{r3, r4, r5, pc}

0800bc94 <_free_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4605      	mov	r5, r0
 800bc98:	2900      	cmp	r1, #0
 800bc9a:	d045      	beq.n	800bd28 <_free_r+0x94>
 800bc9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca0:	1f0c      	subs	r4, r1, #4
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bfb8      	it	lt
 800bca6:	18e4      	addlt	r4, r4, r3
 800bca8:	f000 fa24 	bl	800c0f4 <__malloc_lock>
 800bcac:	4a1f      	ldr	r2, [pc, #124]	; (800bd2c <_free_r+0x98>)
 800bcae:	6813      	ldr	r3, [r2, #0]
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	b933      	cbnz	r3, 800bcc2 <_free_r+0x2e>
 800bcb4:	6063      	str	r3, [r4, #4]
 800bcb6:	6014      	str	r4, [r2, #0]
 800bcb8:	4628      	mov	r0, r5
 800bcba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcbe:	f000 ba1a 	b.w	800c0f6 <__malloc_unlock>
 800bcc2:	42a3      	cmp	r3, r4
 800bcc4:	d90c      	bls.n	800bce0 <_free_r+0x4c>
 800bcc6:	6821      	ldr	r1, [r4, #0]
 800bcc8:	1862      	adds	r2, r4, r1
 800bcca:	4293      	cmp	r3, r2
 800bccc:	bf04      	itt	eq
 800bcce:	681a      	ldreq	r2, [r3, #0]
 800bcd0:	685b      	ldreq	r3, [r3, #4]
 800bcd2:	6063      	str	r3, [r4, #4]
 800bcd4:	bf04      	itt	eq
 800bcd6:	1852      	addeq	r2, r2, r1
 800bcd8:	6022      	streq	r2, [r4, #0]
 800bcda:	6004      	str	r4, [r0, #0]
 800bcdc:	e7ec      	b.n	800bcb8 <_free_r+0x24>
 800bcde:	4613      	mov	r3, r2
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	b10a      	cbz	r2, 800bce8 <_free_r+0x54>
 800bce4:	42a2      	cmp	r2, r4
 800bce6:	d9fa      	bls.n	800bcde <_free_r+0x4a>
 800bce8:	6819      	ldr	r1, [r3, #0]
 800bcea:	1858      	adds	r0, r3, r1
 800bcec:	42a0      	cmp	r0, r4
 800bcee:	d10b      	bne.n	800bd08 <_free_r+0x74>
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	4401      	add	r1, r0
 800bcf4:	1858      	adds	r0, r3, r1
 800bcf6:	4282      	cmp	r2, r0
 800bcf8:	6019      	str	r1, [r3, #0]
 800bcfa:	d1dd      	bne.n	800bcb8 <_free_r+0x24>
 800bcfc:	6810      	ldr	r0, [r2, #0]
 800bcfe:	6852      	ldr	r2, [r2, #4]
 800bd00:	605a      	str	r2, [r3, #4]
 800bd02:	4401      	add	r1, r0
 800bd04:	6019      	str	r1, [r3, #0]
 800bd06:	e7d7      	b.n	800bcb8 <_free_r+0x24>
 800bd08:	d902      	bls.n	800bd10 <_free_r+0x7c>
 800bd0a:	230c      	movs	r3, #12
 800bd0c:	602b      	str	r3, [r5, #0]
 800bd0e:	e7d3      	b.n	800bcb8 <_free_r+0x24>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	1821      	adds	r1, r4, r0
 800bd14:	428a      	cmp	r2, r1
 800bd16:	bf04      	itt	eq
 800bd18:	6811      	ldreq	r1, [r2, #0]
 800bd1a:	6852      	ldreq	r2, [r2, #4]
 800bd1c:	6062      	str	r2, [r4, #4]
 800bd1e:	bf04      	itt	eq
 800bd20:	1809      	addeq	r1, r1, r0
 800bd22:	6021      	streq	r1, [r4, #0]
 800bd24:	605c      	str	r4, [r3, #4]
 800bd26:	e7c7      	b.n	800bcb8 <_free_r+0x24>
 800bd28:	bd38      	pop	{r3, r4, r5, pc}
 800bd2a:	bf00      	nop
 800bd2c:	200041d8 	.word	0x200041d8

0800bd30 <_malloc_r>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	1ccd      	adds	r5, r1, #3
 800bd34:	f025 0503 	bic.w	r5, r5, #3
 800bd38:	3508      	adds	r5, #8
 800bd3a:	2d0c      	cmp	r5, #12
 800bd3c:	bf38      	it	cc
 800bd3e:	250c      	movcc	r5, #12
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	4606      	mov	r6, r0
 800bd44:	db01      	blt.n	800bd4a <_malloc_r+0x1a>
 800bd46:	42a9      	cmp	r1, r5
 800bd48:	d903      	bls.n	800bd52 <_malloc_r+0x22>
 800bd4a:	230c      	movs	r3, #12
 800bd4c:	6033      	str	r3, [r6, #0]
 800bd4e:	2000      	movs	r0, #0
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	f000 f9cf 	bl	800c0f4 <__malloc_lock>
 800bd56:	4a21      	ldr	r2, [pc, #132]	; (800bddc <_malloc_r+0xac>)
 800bd58:	6814      	ldr	r4, [r2, #0]
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	b991      	cbnz	r1, 800bd84 <_malloc_r+0x54>
 800bd5e:	4c20      	ldr	r4, [pc, #128]	; (800bde0 <_malloc_r+0xb0>)
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	b91b      	cbnz	r3, 800bd6c <_malloc_r+0x3c>
 800bd64:	4630      	mov	r0, r6
 800bd66:	f000 f98f 	bl	800c088 <_sbrk_r>
 800bd6a:	6020      	str	r0, [r4, #0]
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	4630      	mov	r0, r6
 800bd70:	f000 f98a 	bl	800c088 <_sbrk_r>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d124      	bne.n	800bdc2 <_malloc_r+0x92>
 800bd78:	230c      	movs	r3, #12
 800bd7a:	6033      	str	r3, [r6, #0]
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 f9ba 	bl	800c0f6 <__malloc_unlock>
 800bd82:	e7e4      	b.n	800bd4e <_malloc_r+0x1e>
 800bd84:	680b      	ldr	r3, [r1, #0]
 800bd86:	1b5b      	subs	r3, r3, r5
 800bd88:	d418      	bmi.n	800bdbc <_malloc_r+0x8c>
 800bd8a:	2b0b      	cmp	r3, #11
 800bd8c:	d90f      	bls.n	800bdae <_malloc_r+0x7e>
 800bd8e:	600b      	str	r3, [r1, #0]
 800bd90:	50cd      	str	r5, [r1, r3]
 800bd92:	18cc      	adds	r4, r1, r3
 800bd94:	4630      	mov	r0, r6
 800bd96:	f000 f9ae 	bl	800c0f6 <__malloc_unlock>
 800bd9a:	f104 000b 	add.w	r0, r4, #11
 800bd9e:	1d23      	adds	r3, r4, #4
 800bda0:	f020 0007 	bic.w	r0, r0, #7
 800bda4:	1ac3      	subs	r3, r0, r3
 800bda6:	d0d3      	beq.n	800bd50 <_malloc_r+0x20>
 800bda8:	425a      	negs	r2, r3
 800bdaa:	50e2      	str	r2, [r4, r3]
 800bdac:	e7d0      	b.n	800bd50 <_malloc_r+0x20>
 800bdae:	428c      	cmp	r4, r1
 800bdb0:	684b      	ldr	r3, [r1, #4]
 800bdb2:	bf16      	itet	ne
 800bdb4:	6063      	strne	r3, [r4, #4]
 800bdb6:	6013      	streq	r3, [r2, #0]
 800bdb8:	460c      	movne	r4, r1
 800bdba:	e7eb      	b.n	800bd94 <_malloc_r+0x64>
 800bdbc:	460c      	mov	r4, r1
 800bdbe:	6849      	ldr	r1, [r1, #4]
 800bdc0:	e7cc      	b.n	800bd5c <_malloc_r+0x2c>
 800bdc2:	1cc4      	adds	r4, r0, #3
 800bdc4:	f024 0403 	bic.w	r4, r4, #3
 800bdc8:	42a0      	cmp	r0, r4
 800bdca:	d005      	beq.n	800bdd8 <_malloc_r+0xa8>
 800bdcc:	1a21      	subs	r1, r4, r0
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f000 f95a 	bl	800c088 <_sbrk_r>
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	d0cf      	beq.n	800bd78 <_malloc_r+0x48>
 800bdd8:	6025      	str	r5, [r4, #0]
 800bdda:	e7db      	b.n	800bd94 <_malloc_r+0x64>
 800bddc:	200041d8 	.word	0x200041d8
 800bde0:	200041dc 	.word	0x200041dc

0800bde4 <__ssputs_r>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	688e      	ldr	r6, [r1, #8]
 800bdea:	429e      	cmp	r6, r3
 800bdec:	4682      	mov	sl, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4690      	mov	r8, r2
 800bdf2:	4699      	mov	r9, r3
 800bdf4:	d837      	bhi.n	800be66 <__ssputs_r+0x82>
 800bdf6:	898a      	ldrh	r2, [r1, #12]
 800bdf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdfc:	d031      	beq.n	800be62 <__ssputs_r+0x7e>
 800bdfe:	6825      	ldr	r5, [r4, #0]
 800be00:	6909      	ldr	r1, [r1, #16]
 800be02:	1a6f      	subs	r7, r5, r1
 800be04:	6965      	ldr	r5, [r4, #20]
 800be06:	2302      	movs	r3, #2
 800be08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be0c:	fb95 f5f3 	sdiv	r5, r5, r3
 800be10:	f109 0301 	add.w	r3, r9, #1
 800be14:	443b      	add	r3, r7
 800be16:	429d      	cmp	r5, r3
 800be18:	bf38      	it	cc
 800be1a:	461d      	movcc	r5, r3
 800be1c:	0553      	lsls	r3, r2, #21
 800be1e:	d530      	bpl.n	800be82 <__ssputs_r+0x9e>
 800be20:	4629      	mov	r1, r5
 800be22:	f7ff ff85 	bl	800bd30 <_malloc_r>
 800be26:	4606      	mov	r6, r0
 800be28:	b950      	cbnz	r0, 800be40 <__ssputs_r+0x5c>
 800be2a:	230c      	movs	r3, #12
 800be2c:	f8ca 3000 	str.w	r3, [sl]
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295
 800be3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be40:	463a      	mov	r2, r7
 800be42:	6921      	ldr	r1, [r4, #16]
 800be44:	f7fc fd0a 	bl	800885c <memcpy>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	6126      	str	r6, [r4, #16]
 800be56:	6165      	str	r5, [r4, #20]
 800be58:	443e      	add	r6, r7
 800be5a:	1bed      	subs	r5, r5, r7
 800be5c:	6026      	str	r6, [r4, #0]
 800be5e:	60a5      	str	r5, [r4, #8]
 800be60:	464e      	mov	r6, r9
 800be62:	454e      	cmp	r6, r9
 800be64:	d900      	bls.n	800be68 <__ssputs_r+0x84>
 800be66:	464e      	mov	r6, r9
 800be68:	4632      	mov	r2, r6
 800be6a:	4641      	mov	r1, r8
 800be6c:	6820      	ldr	r0, [r4, #0]
 800be6e:	f000 f928 	bl	800c0c2 <memmove>
 800be72:	68a3      	ldr	r3, [r4, #8]
 800be74:	1b9b      	subs	r3, r3, r6
 800be76:	60a3      	str	r3, [r4, #8]
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	441e      	add	r6, r3
 800be7c:	6026      	str	r6, [r4, #0]
 800be7e:	2000      	movs	r0, #0
 800be80:	e7dc      	b.n	800be3c <__ssputs_r+0x58>
 800be82:	462a      	mov	r2, r5
 800be84:	f000 f938 	bl	800c0f8 <_realloc_r>
 800be88:	4606      	mov	r6, r0
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1e2      	bne.n	800be54 <__ssputs_r+0x70>
 800be8e:	6921      	ldr	r1, [r4, #16]
 800be90:	4650      	mov	r0, sl
 800be92:	f7ff feff 	bl	800bc94 <_free_r>
 800be96:	e7c8      	b.n	800be2a <__ssputs_r+0x46>

0800be98 <_svfiprintf_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	461d      	mov	r5, r3
 800be9e:	898b      	ldrh	r3, [r1, #12]
 800bea0:	061f      	lsls	r7, r3, #24
 800bea2:	b09d      	sub	sp, #116	; 0x74
 800bea4:	4680      	mov	r8, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	4616      	mov	r6, r2
 800beaa:	d50f      	bpl.n	800becc <_svfiprintf_r+0x34>
 800beac:	690b      	ldr	r3, [r1, #16]
 800beae:	b96b      	cbnz	r3, 800becc <_svfiprintf_r+0x34>
 800beb0:	2140      	movs	r1, #64	; 0x40
 800beb2:	f7ff ff3d 	bl	800bd30 <_malloc_r>
 800beb6:	6020      	str	r0, [r4, #0]
 800beb8:	6120      	str	r0, [r4, #16]
 800beba:	b928      	cbnz	r0, 800bec8 <_svfiprintf_r+0x30>
 800bebc:	230c      	movs	r3, #12
 800bebe:	f8c8 3000 	str.w	r3, [r8]
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	e0c8      	b.n	800c05a <_svfiprintf_r+0x1c2>
 800bec8:	2340      	movs	r3, #64	; 0x40
 800beca:	6163      	str	r3, [r4, #20]
 800becc:	2300      	movs	r3, #0
 800bece:	9309      	str	r3, [sp, #36]	; 0x24
 800bed0:	2320      	movs	r3, #32
 800bed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bed6:	2330      	movs	r3, #48	; 0x30
 800bed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bedc:	9503      	str	r5, [sp, #12]
 800bede:	f04f 0b01 	mov.w	fp, #1
 800bee2:	4637      	mov	r7, r6
 800bee4:	463d      	mov	r5, r7
 800bee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beea:	b10b      	cbz	r3, 800bef0 <_svfiprintf_r+0x58>
 800beec:	2b25      	cmp	r3, #37	; 0x25
 800beee:	d13e      	bne.n	800bf6e <_svfiprintf_r+0xd6>
 800bef0:	ebb7 0a06 	subs.w	sl, r7, r6
 800bef4:	d00b      	beq.n	800bf0e <_svfiprintf_r+0x76>
 800bef6:	4653      	mov	r3, sl
 800bef8:	4632      	mov	r2, r6
 800befa:	4621      	mov	r1, r4
 800befc:	4640      	mov	r0, r8
 800befe:	f7ff ff71 	bl	800bde4 <__ssputs_r>
 800bf02:	3001      	adds	r0, #1
 800bf04:	f000 80a4 	beq.w	800c050 <_svfiprintf_r+0x1b8>
 800bf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf0a:	4453      	add	r3, sl
 800bf0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0e:	783b      	ldrb	r3, [r7, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f000 809d 	beq.w	800c050 <_svfiprintf_r+0x1b8>
 800bf16:	2300      	movs	r3, #0
 800bf18:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	9307      	str	r3, [sp, #28]
 800bf24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf28:	931a      	str	r3, [sp, #104]	; 0x68
 800bf2a:	462f      	mov	r7, r5
 800bf2c:	2205      	movs	r2, #5
 800bf2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf32:	4850      	ldr	r0, [pc, #320]	; (800c074 <_svfiprintf_r+0x1dc>)
 800bf34:	f7f4 f98c 	bl	8000250 <memchr>
 800bf38:	9b04      	ldr	r3, [sp, #16]
 800bf3a:	b9d0      	cbnz	r0, 800bf72 <_svfiprintf_r+0xda>
 800bf3c:	06d9      	lsls	r1, r3, #27
 800bf3e:	bf44      	itt	mi
 800bf40:	2220      	movmi	r2, #32
 800bf42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf46:	071a      	lsls	r2, r3, #28
 800bf48:	bf44      	itt	mi
 800bf4a:	222b      	movmi	r2, #43	; 0x2b
 800bf4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf50:	782a      	ldrb	r2, [r5, #0]
 800bf52:	2a2a      	cmp	r2, #42	; 0x2a
 800bf54:	d015      	beq.n	800bf82 <_svfiprintf_r+0xea>
 800bf56:	9a07      	ldr	r2, [sp, #28]
 800bf58:	462f      	mov	r7, r5
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	250a      	movs	r5, #10
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf64:	3b30      	subs	r3, #48	; 0x30
 800bf66:	2b09      	cmp	r3, #9
 800bf68:	d94d      	bls.n	800c006 <_svfiprintf_r+0x16e>
 800bf6a:	b1b8      	cbz	r0, 800bf9c <_svfiprintf_r+0x104>
 800bf6c:	e00f      	b.n	800bf8e <_svfiprintf_r+0xf6>
 800bf6e:	462f      	mov	r7, r5
 800bf70:	e7b8      	b.n	800bee4 <_svfiprintf_r+0x4c>
 800bf72:	4a40      	ldr	r2, [pc, #256]	; (800c074 <_svfiprintf_r+0x1dc>)
 800bf74:	1a80      	subs	r0, r0, r2
 800bf76:	fa0b f000 	lsl.w	r0, fp, r0
 800bf7a:	4318      	orrs	r0, r3
 800bf7c:	9004      	str	r0, [sp, #16]
 800bf7e:	463d      	mov	r5, r7
 800bf80:	e7d3      	b.n	800bf2a <_svfiprintf_r+0x92>
 800bf82:	9a03      	ldr	r2, [sp, #12]
 800bf84:	1d11      	adds	r1, r2, #4
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	9103      	str	r1, [sp, #12]
 800bf8a:	2a00      	cmp	r2, #0
 800bf8c:	db01      	blt.n	800bf92 <_svfiprintf_r+0xfa>
 800bf8e:	9207      	str	r2, [sp, #28]
 800bf90:	e004      	b.n	800bf9c <_svfiprintf_r+0x104>
 800bf92:	4252      	negs	r2, r2
 800bf94:	f043 0302 	orr.w	r3, r3, #2
 800bf98:	9207      	str	r2, [sp, #28]
 800bf9a:	9304      	str	r3, [sp, #16]
 800bf9c:	783b      	ldrb	r3, [r7, #0]
 800bf9e:	2b2e      	cmp	r3, #46	; 0x2e
 800bfa0:	d10c      	bne.n	800bfbc <_svfiprintf_r+0x124>
 800bfa2:	787b      	ldrb	r3, [r7, #1]
 800bfa4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa6:	d133      	bne.n	800c010 <_svfiprintf_r+0x178>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	1d1a      	adds	r2, r3, #4
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	9203      	str	r2, [sp, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	bfb8      	it	lt
 800bfb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfb8:	3702      	adds	r7, #2
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	4d2e      	ldr	r5, [pc, #184]	; (800c078 <_svfiprintf_r+0x1e0>)
 800bfbe:	7839      	ldrb	r1, [r7, #0]
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7f4 f944 	bl	8000250 <memchr>
 800bfc8:	b138      	cbz	r0, 800bfda <_svfiprintf_r+0x142>
 800bfca:	2340      	movs	r3, #64	; 0x40
 800bfcc:	1b40      	subs	r0, r0, r5
 800bfce:	fa03 f000 	lsl.w	r0, r3, r0
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	4303      	orrs	r3, r0
 800bfd6:	3701      	adds	r7, #1
 800bfd8:	9304      	str	r3, [sp, #16]
 800bfda:	7839      	ldrb	r1, [r7, #0]
 800bfdc:	4827      	ldr	r0, [pc, #156]	; (800c07c <_svfiprintf_r+0x1e4>)
 800bfde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfe2:	2206      	movs	r2, #6
 800bfe4:	1c7e      	adds	r6, r7, #1
 800bfe6:	f7f4 f933 	bl	8000250 <memchr>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d038      	beq.n	800c060 <_svfiprintf_r+0x1c8>
 800bfee:	4b24      	ldr	r3, [pc, #144]	; (800c080 <_svfiprintf_r+0x1e8>)
 800bff0:	bb13      	cbnz	r3, 800c038 <_svfiprintf_r+0x1a0>
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	3307      	adds	r3, #7
 800bff6:	f023 0307 	bic.w	r3, r3, #7
 800bffa:	3308      	adds	r3, #8
 800bffc:	9303      	str	r3, [sp, #12]
 800bffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c000:	444b      	add	r3, r9
 800c002:	9309      	str	r3, [sp, #36]	; 0x24
 800c004:	e76d      	b.n	800bee2 <_svfiprintf_r+0x4a>
 800c006:	fb05 3202 	mla	r2, r5, r2, r3
 800c00a:	2001      	movs	r0, #1
 800c00c:	460f      	mov	r7, r1
 800c00e:	e7a6      	b.n	800bf5e <_svfiprintf_r+0xc6>
 800c010:	2300      	movs	r3, #0
 800c012:	3701      	adds	r7, #1
 800c014:	9305      	str	r3, [sp, #20]
 800c016:	4619      	mov	r1, r3
 800c018:	250a      	movs	r5, #10
 800c01a:	4638      	mov	r0, r7
 800c01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c020:	3a30      	subs	r2, #48	; 0x30
 800c022:	2a09      	cmp	r2, #9
 800c024:	d903      	bls.n	800c02e <_svfiprintf_r+0x196>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0c8      	beq.n	800bfbc <_svfiprintf_r+0x124>
 800c02a:	9105      	str	r1, [sp, #20]
 800c02c:	e7c6      	b.n	800bfbc <_svfiprintf_r+0x124>
 800c02e:	fb05 2101 	mla	r1, r5, r1, r2
 800c032:	2301      	movs	r3, #1
 800c034:	4607      	mov	r7, r0
 800c036:	e7f0      	b.n	800c01a <_svfiprintf_r+0x182>
 800c038:	ab03      	add	r3, sp, #12
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	4622      	mov	r2, r4
 800c03e:	4b11      	ldr	r3, [pc, #68]	; (800c084 <_svfiprintf_r+0x1ec>)
 800c040:	a904      	add	r1, sp, #16
 800c042:	4640      	mov	r0, r8
 800c044:	f7fc fca4 	bl	8008990 <_printf_float>
 800c048:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c04c:	4681      	mov	r9, r0
 800c04e:	d1d6      	bne.n	800bffe <_svfiprintf_r+0x166>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	065b      	lsls	r3, r3, #25
 800c054:	f53f af35 	bmi.w	800bec2 <_svfiprintf_r+0x2a>
 800c058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c05a:	b01d      	add	sp, #116	; 0x74
 800c05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c060:	ab03      	add	r3, sp, #12
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4622      	mov	r2, r4
 800c066:	4b07      	ldr	r3, [pc, #28]	; (800c084 <_svfiprintf_r+0x1ec>)
 800c068:	a904      	add	r1, sp, #16
 800c06a:	4640      	mov	r0, r8
 800c06c:	f7fc ff32 	bl	8008ed4 <_printf_i>
 800c070:	e7ea      	b.n	800c048 <_svfiprintf_r+0x1b0>
 800c072:	bf00      	nop
 800c074:	0800c3cc 	.word	0x0800c3cc
 800c078:	0800c3d2 	.word	0x0800c3d2
 800c07c:	0800c3d6 	.word	0x0800c3d6
 800c080:	08008991 	.word	0x08008991
 800c084:	0800bde5 	.word	0x0800bde5

0800c088 <_sbrk_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4c06      	ldr	r4, [pc, #24]	; (800c0a4 <_sbrk_r+0x1c>)
 800c08c:	2300      	movs	r3, #0
 800c08e:	4605      	mov	r5, r0
 800c090:	4608      	mov	r0, r1
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	f7f5 fb84 	bl	80017a0 <_sbrk>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	d102      	bne.n	800c0a2 <_sbrk_r+0x1a>
 800c09c:	6823      	ldr	r3, [r4, #0]
 800c09e:	b103      	cbz	r3, 800c0a2 <_sbrk_r+0x1a>
 800c0a0:	602b      	str	r3, [r5, #0]
 800c0a2:	bd38      	pop	{r3, r4, r5, pc}
 800c0a4:	2000aea0 	.word	0x2000aea0

0800c0a8 <__ascii_wctomb>:
 800c0a8:	b149      	cbz	r1, 800c0be <__ascii_wctomb+0x16>
 800c0aa:	2aff      	cmp	r2, #255	; 0xff
 800c0ac:	bf85      	ittet	hi
 800c0ae:	238a      	movhi	r3, #138	; 0x8a
 800c0b0:	6003      	strhi	r3, [r0, #0]
 800c0b2:	700a      	strbls	r2, [r1, #0]
 800c0b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0b8:	bf98      	it	ls
 800c0ba:	2001      	movls	r0, #1
 800c0bc:	4770      	bx	lr
 800c0be:	4608      	mov	r0, r1
 800c0c0:	4770      	bx	lr

0800c0c2 <memmove>:
 800c0c2:	4288      	cmp	r0, r1
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	eb01 0302 	add.w	r3, r1, r2
 800c0ca:	d807      	bhi.n	800c0dc <memmove+0x1a>
 800c0cc:	1e42      	subs	r2, r0, #1
 800c0ce:	4299      	cmp	r1, r3
 800c0d0:	d00a      	beq.n	800c0e8 <memmove+0x26>
 800c0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0d6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c0da:	e7f8      	b.n	800c0ce <memmove+0xc>
 800c0dc:	4283      	cmp	r3, r0
 800c0de:	d9f5      	bls.n	800c0cc <memmove+0xa>
 800c0e0:	1881      	adds	r1, r0, r2
 800c0e2:	1ad2      	subs	r2, r2, r3
 800c0e4:	42d3      	cmn	r3, r2
 800c0e6:	d100      	bne.n	800c0ea <memmove+0x28>
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c0f2:	e7f7      	b.n	800c0e4 <memmove+0x22>

0800c0f4 <__malloc_lock>:
 800c0f4:	4770      	bx	lr

0800c0f6 <__malloc_unlock>:
 800c0f6:	4770      	bx	lr

0800c0f8 <_realloc_r>:
 800c0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	4614      	mov	r4, r2
 800c0fe:	460e      	mov	r6, r1
 800c100:	b921      	cbnz	r1, 800c10c <_realloc_r+0x14>
 800c102:	4611      	mov	r1, r2
 800c104:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c108:	f7ff be12 	b.w	800bd30 <_malloc_r>
 800c10c:	b922      	cbnz	r2, 800c118 <_realloc_r+0x20>
 800c10e:	f7ff fdc1 	bl	800bc94 <_free_r>
 800c112:	4625      	mov	r5, r4
 800c114:	4628      	mov	r0, r5
 800c116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c118:	f000 f814 	bl	800c144 <_malloc_usable_size_r>
 800c11c:	42a0      	cmp	r0, r4
 800c11e:	d20f      	bcs.n	800c140 <_realloc_r+0x48>
 800c120:	4621      	mov	r1, r4
 800c122:	4638      	mov	r0, r7
 800c124:	f7ff fe04 	bl	800bd30 <_malloc_r>
 800c128:	4605      	mov	r5, r0
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d0f2      	beq.n	800c114 <_realloc_r+0x1c>
 800c12e:	4631      	mov	r1, r6
 800c130:	4622      	mov	r2, r4
 800c132:	f7fc fb93 	bl	800885c <memcpy>
 800c136:	4631      	mov	r1, r6
 800c138:	4638      	mov	r0, r7
 800c13a:	f7ff fdab 	bl	800bc94 <_free_r>
 800c13e:	e7e9      	b.n	800c114 <_realloc_r+0x1c>
 800c140:	4635      	mov	r5, r6
 800c142:	e7e7      	b.n	800c114 <_realloc_r+0x1c>

0800c144 <_malloc_usable_size_r>:
 800c144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c148:	1f18      	subs	r0, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bfbc      	itt	lt
 800c14e:	580b      	ldrlt	r3, [r1, r0]
 800c150:	18c0      	addlt	r0, r0, r3
 800c152:	4770      	bx	lr

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
