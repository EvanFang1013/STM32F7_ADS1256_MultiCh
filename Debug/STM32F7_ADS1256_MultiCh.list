
STM32F7_ADS1256_MultiCh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08009d38  08009d38  00019d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c7c  20000200  0800a27c  00020200  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  20006e7c  0800a27c  00026e7c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f714  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002346  00000000  00000000  0002f92e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf0  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026893  00000000  00000000  00033360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0cb  00000000  00000000  00059bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fab3e  00000000  00000000  00064cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015f7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  0015f878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	08009d20 	.word	0x08009d20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	08009d20 	.word	0x08009d20

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b08b      	sub	sp, #44	; 0x2c
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1d1a      	adds	r2, r3, #4
 800060a:	60fa      	str	r2, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3b01      	subs	r3, #1
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8000618:	e051      	b.n	80006be <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	1d1a      	adds	r2, r3, #4
 800061e:	60fa      	str	r2, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1d1a      	adds	r2, r3, #4
 8000628:	60fa      	str	r2, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800062e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000632:	edd7 7a05 	vldr	s15, [r7, #20]
 8000636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d504      	bpl.n	800064a <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1d1a      	adds	r2, r3, #4
 800064e:	60fa      	str	r2, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8000654:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000658:	edd7 7a04 	vldr	s15, [r7, #16]
 800065c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d504      	bpl.n	8000670 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3302      	adds	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	60fa      	str	r2, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800067a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800067e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d504      	bpl.n	8000696 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	3303      	adds	r3, #3
 8000694:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8000696:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800069a:	edd7 7a04 	vldr	s15, [r7, #16]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	d504      	bpl.n	80006b2 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3304      	adds	r3, #4
 80006b0:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	3304      	adds	r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1aa      	bne.n	800061a <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80006ce:	e016      	b.n	80006fe <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	60fa      	str	r2, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80006da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006de:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d505      	bpl.n	80006f8 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1e5      	bne.n	80006d0 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000708:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	69fa      	ldr	r2, [r7, #28]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	011b      	lsls	r3, r3, #4
 8000730:	b25a      	sxtb	r2, r3
 8000732:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000736:	4313      	orrs	r3, r2
 8000738:	b25b      	sxtb	r3, r3
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	f000 f832 	bl	80007a8 <writeByteToReg>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	733b      	strb	r3, [r7, #12]
	CS_0();
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4809      	ldr	r0, [pc, #36]	; (8000784 <writeCMD+0x38>)
 8000760:	f002 f9e4 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 8000764:	f107 010c 	add.w	r1, r7, #12
 8000768:	2332      	movs	r3, #50	; 0x32
 800076a:	2201      	movs	r2, #1
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <writeCMD+0x3c>)
 800076e:	f003 fbf2 	bl	8003f56 <HAL_SPI_Transmit>
	CS_1();
 8000772:	2201      	movs	r2, #1
 8000774:	2110      	movs	r1, #16
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <writeCMD+0x38>)
 8000778:	f002 f9d8 	bl	8002b2c <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020000 	.word	0x40020000
 8000788:	20006d28 	.word	0x20006d28

0800078c <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_DRATE,drate);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4619      	mov	r1, r3
 800079a:	2003      	movs	r0, #3
 800079c:	f000 f822 	bl	80007e4 <writeToReg>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	460a      	mov	r2, r1
 80007b2:	71fb      	strb	r3, [r7, #7]
 80007b4:	4613      	mov	r3, r2
 80007b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 80007c2:	2300      	movs	r3, #0
 80007c4:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit_DMA(&hspi1, Txbuffer ,3);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2203      	movs	r2, #3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4803      	ldr	r0, [pc, #12]	; (80007e0 <writeByteToReg+0x38>)
 80007d4:	f003 ff40 	bl	8004658 <HAL_SPI_Transmit_DMA>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20006d28 	.word	0x20006d28

080007e4 <writeToReg>:


void writeToReg(uint8_t registerID, uint8_t value)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
	CS_0();
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	480f      	ldr	r0, [pc, #60]	; (8000838 <writeToReg+0x54>)
 80007fa:	f002 f997 	bl	8002b2c <HAL_GPIO_WritePin>
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000804:	b2db      	uxtb	r3, r3
 8000806:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,50);
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	2332      	movs	r3, #50	; 0x32
 8000816:	2203      	movs	r2, #3
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <writeToReg+0x58>)
 800081a:	f003 fb9c 	bl	8003f56 <HAL_SPI_Transmit>
	delay_us(10);
 800081e:	200a      	movs	r0, #10
 8000820:	f000 f9aa 	bl	8000b78 <delay_us>
	CS_1();
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <writeToReg+0x54>)
 800082a:	f002 f97f 	bl	8002b2c <HAL_GPIO_WritePin>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40020000 	.word	0x40020000
 800083c:	20006d28 	.word	0x20006d28

08000840 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_ADCON,pga);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4619      	mov	r1, r3
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff ffc8 	bl	80007e4 <writeToReg>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e009      	b.n	800087c <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 8000868:	2108      	movs	r1, #8
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <waitDRDY+0x34>)
 800086c:	f002 f946 	bl	8002afc <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d007      	beq.n	8000886 <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3301      	adds	r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <waitDRDY+0x38>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d9f1      	bls.n	8000868 <waitDRDY+0xc>
				break;
			}
		}
}
 8000884:	e000      	b.n	8000888 <waitDRDY+0x2c>
				break;
 8000886:	bf00      	nop
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40020000 	.word	0x40020000
 8000894:	026259ff 	.word	0x026259ff

08000898 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	waitDRDY();
 800089e:	f7ff ffdd 	bl	800085c <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 f820 	bl	80008e8 <readByteFromReg>
 80008a8:	4603      	mov	r3, r0
 80008aa:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	b2db      	uxtb	r3, r3
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 80008c2:	23ff      	movs	r3, #255	; 0xff
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 80008ca:	1dba      	adds	r2, r7, #6
 80008cc:	1df9      	adds	r1, r7, #7
 80008ce:	2332      	movs	r3, #50	; 0x32
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <receive8bit+0x28>)
 80008d6:	f003 fcac 	bl	8004232 <HAL_SPI_TransmitReceive>
	return read;
 80008da:	79bb      	ldrb	r3, [r7, #6]

}
 80008dc:	4618      	mov	r0, r3
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20006d28 	.word	0x20006d28

080008e8 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f043 0310 	orr.w	r3, r3, #16
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	737b      	strb	r3, [r7, #13]
	CS_0();
 8000900:	2200      	movs	r2, #0
 8000902:	2110      	movs	r1, #16
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <readByteFromReg+0x54>)
 8000906:	f002 f911 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 800090a:	f107 010c 	add.w	r1, r7, #12
 800090e:	2332      	movs	r3, #50	; 0x32
 8000910:	2202      	movs	r2, #2
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <readByteFromReg+0x58>)
 8000914:	f003 fb1f 	bl	8003f56 <HAL_SPI_Transmit>
	uint8_t read = receive8bit();
 8000918:	f7ff ffd0 	bl	80008bc <receive8bit>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	delay_us(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f000 f929 	bl	8000b78 <delay_us>
	CS_1();
 8000926:	2201      	movs	r2, #1
 8000928:	2110      	movs	r1, #16
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <readByteFromReg+0x54>)
 800092c:	f002 f8fe 	bl	8002b2c <HAL_GPIO_WritePin>

	return read;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40020000 	.word	0x40020000
 8000940:	20006d28 	.word	0x20006d28

08000944 <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 800094e:	2350      	movs	r3, #80	; 0x50
 8000950:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b25b      	sxtb	r3, r3
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	b25b      	sxtb	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	717b      	strb	r3, [r7, #5]

	CS_0();
 8000962:	2200      	movs	r2, #0
 8000964:	2110      	movs	r1, #16
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <setBuffer+0x48>)
 8000968:	f002 f8e0 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 800096c:	1d39      	adds	r1, r7, #4
 800096e:	2332      	movs	r3, #50	; 0x32
 8000970:	2202      	movs	r2, #2
 8000972:	4807      	ldr	r0, [pc, #28]	; (8000990 <setBuffer+0x4c>)
 8000974:	f003 faef 	bl	8003f56 <HAL_SPI_Transmit>
	CS_1();
 8000978:	2201      	movs	r2, #1
 800097a:	2110      	movs	r1, #16
 800097c:	4803      	ldr	r0, [pc, #12]	; (800098c <setBuffer+0x48>)
 800097e:	f002 f8d5 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020000 	.word	0x40020000
 8000990:	20006d28 	.word	0x20006d28

08000994 <ADS1256_GetChannalValue>:

float ADS1256_GetChannalValue(int Channel)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]


	/**
	 * set channel
	 */
	CS_0();
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	483a      	ldr	r0, [pc, #232]	; (8000a8c <ADS1256_GetChannalValue+0xf8>)
 80009a2:	f002 f8c3 	bl	8002b2c <HAL_GPIO_WritePin>

    setDIFFChannel(posChannels[Channel], negChannels[Channel]);
 80009a6:	4a3a      	ldr	r2, [pc, #232]	; (8000a90 <ADS1256_GetChannalValue+0xfc>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	7818      	ldrb	r0, [r3, #0]
 80009ae:	4a39      	ldr	r2, [pc, #228]	; (8000a94 <ADS1256_GetChannalValue+0x100>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f7ff feb0 	bl	800071c <setDIFFChannel>
//    delay_us(5);
    TM_DelayMicros(5);
 80009bc:	2005      	movs	r0, #5
 80009be:	f000 f919 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Transmit_DMA(&hspi1, SYNCcmduffer ,1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	4934      	ldr	r1, [pc, #208]	; (8000a98 <ADS1256_GetChannalValue+0x104>)
 80009c6:	4835      	ldr	r0, [pc, #212]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009c8:	f003 fe46 	bl	8004658 <HAL_SPI_Transmit_DMA>
//    delay_us(5);
    TM_DelayMicros(5);
 80009cc:	2005      	movs	r0, #5
 80009ce:	f000 f911 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Transmit_DMA(&hspi1, WAKEUPcmduffer ,1);
 80009d2:	2201      	movs	r2, #1
 80009d4:	4932      	ldr	r1, [pc, #200]	; (8000aa0 <ADS1256_GetChannalValue+0x10c>)
 80009d6:	4831      	ldr	r0, [pc, #196]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009d8:	f003 fe3e 	bl	8004658 <HAL_SPI_Transmit_DMA>
//    delay_us(50);
    TM_DelayMicros(25);
 80009dc:	2019      	movs	r0, #25
 80009de:	f000 f909 	bl	8000bf4 <TM_DelayMicros>

    /**
     * receive data
     */
    HAL_SPI_Transmit_DMA(&hspi1, SDATACcmduffer ,1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	492f      	ldr	r1, [pc, #188]	; (8000aa4 <ADS1256_GetChannalValue+0x110>)
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009e8:	f003 fe36 	bl	8004658 <HAL_SPI_Transmit_DMA>
//    delay_us(7);
    TM_DelayMicros(7);
 80009ec:	2007      	movs	r0, #7
 80009ee:	f000 f901 	bl	8000bf4 <TM_DelayMicros>
    HAL_SPI_Receive_DMA(&hspi1,Databuffer,3);
 80009f2:	2203      	movs	r2, #3
 80009f4:	492c      	ldr	r1, [pc, #176]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <ADS1256_GetChannalValue+0x108>)
 80009f8:	f003 ff22 	bl	8004840 <HAL_SPI_Receive_DMA>
	read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	041b      	lsls	r3, r3, #16
 8000a02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a08:	6013      	str	r3, [r2, #0]
	read |= ((int32_t)Databuffer[1] << 8);
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	021a      	lsls	r2, r3, #8
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	4a25      	ldr	r2, [pc, #148]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a18:	6013      	str	r3, [r2, #0]
	read |= Databuffer[2];
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <ADS1256_GetChannalValue+0x114>)
 8000a1c:	789b      	ldrb	r3, [r3, #2]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a28:	6013      	str	r3, [r2, #0]
	if (read & 0x800000){
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <ADS1256_GetChannalValue+0xb0>
		read |= 0xFF000000;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a42:	601a      	str	r2, [r3, #0]

	}

	data = read;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <ADS1256_GetChannalValue+0x118>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a52:	edc3 7a00 	vstr	s15, [r3]
	data = data / 1670000;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a58:	ed93 7a00 	vldr	s14, [r3]
 8000a5c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000ab4 <ADS1256_GetChannalValue+0x120>
 8000a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a66:	edc3 7a00 	vstr	s15, [r3]
//	delay_us(100);
//	TM_DelayMicros(25);
	TM_DelayMicros(25);
 8000a6a:	2019      	movs	r0, #25
 8000a6c:	f000 f8c2 	bl	8000bf4 <TM_DelayMicros>
	CS_1();
 8000a70:	2201      	movs	r2, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <ADS1256_GetChannalValue+0xf8>)
 8000a76:	f002 f859 	bl	8002b2c <HAL_GPIO_WritePin>

	return data;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <ADS1256_GetChannalValue+0x11c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	ee07 3a90 	vmov	s15, r3
}
 8000a82:	eeb0 0a67 	vmov.f32	s0, s15
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40020000 	.word	0x40020000
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000004 	.word	0x20000004
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	20006d28 	.word	0x20006d28
 8000aa0:	2000021c 	.word	0x2000021c
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20000220 	.word	0x20000220
 8000aac:	20000224 	.word	0x20000224
 8000ab0:	20004250 	.word	0x20004250
 8000ab4:	49cbdb80 	.word	0x49cbdb80

08000ab8 <ADS1256_init>:


int ADS1256_init()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abe:	b672      	cpsid	i
	   __disable_irq();
      int id;
	  //Reset ADS1256
	  waitDRDY();
 8000ac0:	f7ff fecc 	bl	800085c <waitDRDY>
	  writeCMD(CMD_RESET);
 8000ac4:	20fe      	movs	r0, #254	; 0xfe
 8000ac6:	f7ff fe41 	bl	800074c <writeCMD>
//	  delay_us(100);
	  TM_DelayMicros(100);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f000 f892 	bl	8000bf4 <TM_DelayMicros>

	  //Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	  waitDRDY();
 8000ad0:	f7ff fec4 	bl	800085c <waitDRDY>
	  setBuffer();
 8000ad4:	f7ff ff36 	bl	8000944 <setBuffer>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f000 f88b 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000ade:	f7ff febd 	bl	800085c <waitDRDY>
	  setPGA(PGA_GAIN1);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff feac 	bl	8000840 <setPGA>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000ae8:	200a      	movs	r0, #10
 8000aea:	f000 f883 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000aee:	f7ff feb5 	bl	800085c <waitDRDY>
	  setDataRate(DRATE_7500);
 8000af2:	20d0      	movs	r0, #208	; 0xd0
 8000af4:	f7ff fe4a 	bl	800078c <setDataRate>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 f87b 	bl	8000bf4 <TM_DelayMicros>
	  waitDRDY();
 8000afe:	f7ff fead 	bl	800085c <waitDRDY>
	  writeCMD(CMD_SELFCAL);
 8000b02:	20f0      	movs	r0, #240	; 0xf0
 8000b04:	f7ff fe22 	bl	800074c <writeCMD>
	  waitDRDY();
 8000b08:	f7ff fea8 	bl	800085c <waitDRDY>

	  do {
		  id = readChipID();
 8000b0c:	f7ff fec4 	bl	8000898 <readChipID>
 8000b10:	4603      	mov	r3, r0
 8000b12:	607b      	str	r3, [r7, #4]
	  } while (id!=3);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d1f8      	bne.n	8000b0c <ADS1256_init+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b1a:	b662      	cpsie	i

	  __enable_irq();

	  return id;
 8000b1c:	687b      	ldr	r3, [r7, #4]


}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <delay_init+0x44>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <delay_init+0x44>)
 8000b38:	f023 0304 	bic.w	r3, r3, #4
 8000b3c:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	08db      	lsrs	r3, r3, #3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <delay_init+0x48>)
 8000b46:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <delay_init+0x48>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	0152      	lsls	r2, r2, #5
 8000b52:	1ad2      	subs	r2, r2, r3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <delay_init+0x4c>)
 8000b5e:	801a      	strh	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e010 	.word	0xe000e010
 8000b70:	20000228 	.word	0x20000228
 8000b74:	2000022a 	.word	0x2000022a

08000b78 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <delay_us+0x5c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <delay_us+0x60>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	fb03 f301 	mul.w	r3, r3, r1
 8000b8e:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <delay_us+0x60>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <delay_us+0x60>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <delay_us+0x60>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <delay_us+0x60>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <delay_us+0x44>
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f2      	beq.n	8000ba2 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <delay_us+0x60>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <delay_us+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	20000228 	.word	0x20000228
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 216000000 / 4000000;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <TM_Delay_Init+0x14>)
 8000be2:	2236      	movs	r2, #54	; 0x36
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	20004254 	.word	0x20004254

08000bf4 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <TM_DelayMicros+0x30>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	3b0a      	subs	r3, #10
 8000c08:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 8000c0a:	bf00      	nop
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1fa      	bne.n	8000c0c <TM_DelayMicros+0x18>
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20004254 	.word	0x20004254

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fdbc 	bl	80017aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f867 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 f9e3 	bl	8001000 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3a:	f000 f9b3 	bl	8000fa4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c3e:	f000 f943 	bl	8000ec8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000c42:	f000 f97f 	bl	8000f44 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000c46:	f000 f8ed 	bl	8000e24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   //TODO: Initialize delay systick
  delay_init(216);
 8000c4a:	20d8      	movs	r0, #216	; 0xd8
 8000c4c:	f7ff ff6c 	bl	8000b28 <delay_init>
  TM_Delay_Init();
 8000c50:	f7ff ffc4 	bl	8000bdc <TM_Delay_Init>

  //TODO: ADS1256 init
  numChannel = 2;
 8000c54:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <main+0xb0>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
  id = ADS1256_init();
 8000c5a:	f7ff ff2d 	bl	8000ab8 <ADS1256_init>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <main+0xb4>)
 8000c62:	601a      	str	r2, [r3, #0]
  v.cnt = 0;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <main+0xb8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
  i.cnt = 0;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <main+0xbc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (tf_status)
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <main+0xc0>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0fb      	beq.n	8000c70 <main+0x48>
	  {
		  tf_status = 0;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <main+0xc0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
//		  snprintf(tf_buff,35, "%.2f,%.2f,%.2f\n", v.max,i.max,R);
		  snprintf(tf_buff,35, "%.4f\n", R);
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <main+0xc4>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c88:	ed8d 7b00 	vstr	d7, [sp]
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <main+0xc8>)
 8000c8e:	2123      	movs	r1, #35	; 0x23
 8000c90:	4818      	ldr	r0, [pc, #96]	; (8000cf4 <main+0xcc>)
 8000c92:	f006 f9b7 	bl	8007004 <sniprintf>
		  USARTBLE.bufferSize = min_(tf_buff, strlen(tf_buff));
 8000c96:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <main+0xcc>)
 8000c98:	f7ff fad2 	bl	8000240 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <main+0xcc>)
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d804      	bhi.n	8000cb0 <main+0x88>
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <main+0xcc>)
 8000ca8:	f7ff faca 	bl	8000240 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	e000      	b.n	8000cb2 <main+0x8a>
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <main+0xcc>)
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <main+0xd0>)
 8000cb4:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
		  HAL_UART_Transmit_DMA(&huart6, tf_buff, USARTBLE.bufferSize);
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <main+0xd0>)
 8000cba:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <main+0xcc>)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <main+0xd4>)
 8000cc6:	f004 fbf3 	bl	80054b0 <HAL_UART_Transmit_DMA>
	//	  ADC1_Conv(&hadc1);
	//	  temp = (float)(ADC_1.Vol[0])/4096*3.3;
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <main+0xd8>)
 8000cd0:	f001 ff45 	bl	8002b5e <HAL_GPIO_TogglePin>
	  if (tf_status)
 8000cd4:	e7cc      	b.n	8000c70 <main+0x48>
 8000cd6:	bf00      	nop
 8000cd8:	20004264 	.word	0x20004264
 8000cdc:	2000022c 	.word	0x2000022c
 8000ce0:	200056b8 	.word	0x200056b8
 8000ce4:	2000431c 	.word	0x2000431c
 8000ce8:	20000234 	.word	0x20000234
 8000cec:	20006ca0 	.word	0x20006ca0
 8000cf0:	08009d38 	.word	0x08009d38
 8000cf4:	20006e50 	.word	0x20006e50
 8000cf8:	20006a60 	.word	0x20006a60
 8000cfc:	20006ca4 	.word	0x20006ca4
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0b8      	sub	sp, #224	; 0xe0
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0e:	2234      	movs	r2, #52	; 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 fb56 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2290      	movs	r2, #144	; 0x90
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 fb47 	bl	80063c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <SystemClock_Config+0x118>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <SystemClock_Config+0x118>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <SystemClock_Config+0x118>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a33      	ldr	r2, [pc, #204]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b31      	ldr	r3, [pc, #196]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d72:	2310      	movs	r3, #16
 8000d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d8a:	23d8      	movs	r3, #216	; 0xd8
 8000d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 ff5f 	bl	8002c64 <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dac:	f000 faa2 	bl	80012f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db0:	f001 ff08 	bl	8002bc4 <HAL_PWREx_EnableOverDrive>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dba:	f000 fa9b 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000de0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000de4:	2107      	movs	r1, #7
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f9ea 	bl	80031c0 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000df2:	f000 fa7f 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fbd3 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000e10:	f000 fa70 	bl	80012f4 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	37e0      	adds	r7, #224	; 0xe0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x9c>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0xa0>)
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e86:	f000 fced 	bl	8001864 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 fa30 	bl	80012f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e94:	230c      	movs	r3, #12
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000ea6:	f000 fd21 	bl	80018ec <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb0:	f000 fa20 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200042d4 	.word	0x200042d4
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	0f000001 	.word	0x0f000001

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_SPI1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ee2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000efe:	2228      	movs	r2, #40	; 0x28
 8000f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f28:	f002 ff6a 	bl	8003e00 <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f9df 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20006d28 	.word	0x20006d28
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <MX_USART6_UART_Init+0x5c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_USART6_UART_Init+0x58>)
 8000f88:	f004 fa44 	bl	8005414 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000f92:	f000 f9af 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20006ca4 	.word	0x20006ca4
 8000fa0:	40011400 	.word	0x40011400

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000faa:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <MX_DMA_Init+0x58>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_DMA_Init+0x58>)
 8000fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_DMA_Init+0x58>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	2038      	movs	r0, #56	; 0x38
 8000fc8:	f000 ffaf 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fcc:	2038      	movs	r0, #56	; 0x38
 8000fce:	f000 ffc8 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	203b      	movs	r0, #59	; 0x3b
 8000fd8:	f000 ffa7 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fdc:	203b      	movs	r0, #59	; 0x3b
 8000fde:	f000 ffc0 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2045      	movs	r0, #69	; 0x45
 8000fe8:	f000 ff9f 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fec:	2045      	movs	r0, #69	; 0x45
 8000fee:	f000 ffb8 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	4b49      	ldr	r3, [pc, #292]	; (800113c <MX_GPIO_Init+0x13c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a48      	ldr	r2, [pc, #288]	; (800113c <MX_GPIO_Init+0x13c>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <MX_GPIO_Init+0x13c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b43      	ldr	r3, [pc, #268]	; (800113c <MX_GPIO_Init+0x13c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a42      	ldr	r2, [pc, #264]	; (800113c <MX_GPIO_Init+0x13c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <MX_GPIO_Init+0x13c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b3d      	ldr	r3, [pc, #244]	; (800113c <MX_GPIO_Init+0x13c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a3c      	ldr	r2, [pc, #240]	; (800113c <MX_GPIO_Init+0x13c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_GPIO_Init+0x13c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_GPIO_Init+0x13c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a36      	ldr	r2, [pc, #216]	; (800113c <MX_GPIO_Init+0x13c>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_GPIO_Init+0x13c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2110      	movs	r1, #16
 800107a:	4831      	ldr	r0, [pc, #196]	; (8001140 <MX_GPIO_Init+0x140>)
 800107c:	f001 fd56 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001086:	482f      	ldr	r0, [pc, #188]	; (8001144 <MX_GPIO_Init+0x144>)
 8001088:	f001 fd50 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001092:	482d      	ldr	r0, [pc, #180]	; (8001148 <MX_GPIO_Init+0x148>)
 8001094:	f001 fd4a 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001098:	2308      	movs	r3, #8
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_GPIO_Init+0x14c>)
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4825      	ldr	r0, [pc, #148]	; (8001140 <MX_GPIO_Init+0x140>)
 80010ac:	f001 fb7c 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010b0:	2310      	movs	r3, #16
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_GPIO_Init+0x140>)
 80010c8:	f001 fb6e 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <MX_GPIO_Init+0x144>)
 80010e6:	f001 fb5f 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_GPIO_Init+0x14c>)
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_GPIO_Init+0x144>)
 8001100:	f001 fb52 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001104:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <MX_GPIO_Init+0x148>)
 800111e:	f001 fb43 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2107      	movs	r1, #7
 8001126:	2009      	movs	r0, #9
 8001128:	f000 feff 	bl	8001f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800112c:	2009      	movs	r0, #9
 800112e:	f000 ff18 	bl	8001f62 <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	; 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020c00 	.word	0x40020c00
 800114c:	10210000 	.word	0x10210000

08001150 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 &&id==3 )
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	2b08      	cmp	r3, #8
 800115e:	f040 8094 	bne.w	800128a <HAL_GPIO_EXTI_Callback+0x13a>
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_GPIO_EXTI_Callback+0x160>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b03      	cmp	r3, #3
 8001168:	f040 808f 	bne.w	800128a <HAL_GPIO_EXTI_Callback+0x13a>
	{
		switch(prechannel)
 800116c:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x164>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d002      	beq.n	800117a <HAL_GPIO_EXTI_Callback+0x2a>
 8001174:	2b01      	cmp	r3, #1
 8001176:	d024      	beq.n	80011c2 <HAL_GPIO_EXTI_Callback+0x72>
 8001178:	e04b      	b.n	8001212 <HAL_GPIO_EXTI_Callback+0xc2>
		{
		case sensor1:
			voltage_tmp = ADS1256_GetChannalValue(sensor1);
 800117a:	2000      	movs	r0, #0
 800117c:	f7ff fc0a 	bl	8000994 <ADS1256_GetChannalValue>
 8001180:	eef0 7a40 	vmov.f32	s15, s0
 8001184:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x168>)
 8001186:	edc3 7a00 	vstr	s15, [r3]
  			voltage = voltage_tmp*60.6;
 800118a:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x168>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001194:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001298 <HAL_GPIO_EXTI_Callback+0x148>
 8001198:	ee27 7b06 	vmul.f64	d7, d7, d6
 800119c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_GPIO_EXTI_Callback+0x16c>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
  			v_f[v.cnt]=voltage;
 80011a6:	4b46      	ldr	r3, [pc, #280]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a44      	ldr	r2, [pc, #272]	; (80012bc <HAL_GPIO_EXTI_Callback+0x16c>)
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	4945      	ldr	r1, [pc, #276]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x174>)
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	601a      	str	r2, [r3, #0]
  			v.cnt++;
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a40      	ldr	r2, [pc, #256]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 80011be:	6013      	str	r3, [r2, #0]
			break;
 80011c0:	e027      	b.n	8001212 <HAL_GPIO_EXTI_Callback+0xc2>
		case sensor2:
			current_tmp = ADS1256_GetChannalValue(sensor2);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f7ff fbe6 	bl	8000994 <ADS1256_GetChannalValue>
 80011c8:	eef0 7a40 	vmov.f32	s15, s0
 80011cc:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80011ce:	edc3 7a00 	vstr	s15, [r3]
  			current = (current_tmp-2.57)/0.025;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x178>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011dc:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80012a0 <HAL_GPIO_EXTI_Callback+0x150>
 80011e0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80011e4:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80012a8 <HAL_GPIO_EXTI_Callback+0x158>
 80011e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_GPIO_EXTI_Callback+0x17c>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
//			current = (current_tmp)/0.025;
  			i_f[i.cnt]=current;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a34      	ldr	r2, [pc, #208]	; (80012cc <HAL_GPIO_EXTI_Callback+0x17c>)
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4935      	ldr	r1, [pc, #212]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x184>)
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	601a      	str	r2, [r3, #0]
  			i.cnt++;
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 800120e:	6013      	str	r3, [r2, #0]
			break;
 8001210:	bf00      	nop
		}
		prechannel++;
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x164>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x164>)
 800121a:	6013      	str	r3, [r2, #0]
		if ((prechannel >=numChannel))
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x164>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_EXTI_Callback+0x188>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	db02      	blt.n	800122e <HAL_GPIO_EXTI_Callback+0xde>
		{
			prechannel=0;
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x164>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
		}
		if (v.cnt ==1250 && i.cnt ==1250)
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001236:	4293      	cmp	r3, r2
 8001238:	d127      	bne.n	800128a <HAL_GPIO_EXTI_Callback+0x13a>
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001242:	4293      	cmp	r3, r2
 8001244:	d121      	bne.n	800128a <HAL_GPIO_EXTI_Callback+0x13a>
		{
			v.cnt=0;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
			i.cnt=0;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
			arm_max_f32(v_f, 1250, &v.max, &v.index);
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_GPIO_EXTI_Callback+0x18c>)
 8001254:	4a22      	ldr	r2, [pc, #136]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x190>)
 8001256:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800125a:	481a      	ldr	r0, [pc, #104]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x174>)
 800125c:	f7ff f9c8 	bl	80005f0 <arm_max_f32>
			arm_max_f32(i_f, 1250, &i.max, &i.index);
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x194>)
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x198>)
 8001264:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8001268:	481a      	ldr	r0, [pc, #104]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x184>)
 800126a:	f7ff f9c1 	bl	80005f0 <arm_max_f32>
			R = v.max / i.max;
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x170>)
 8001270:	edd3 6a01 	vldr	s13, [r3, #4]
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x180>)
 8001276:	ed93 7a01 	vldr	s14, [r3, #4]
 800127a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_GPIO_EXTI_Callback+0x19c>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
			tf_status = 1;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]

		}


	}
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	f3af 8000 	nop.w
 8001298:	cccccccd 	.word	0xcccccccd
 800129c:	404e4ccc 	.word	0x404e4ccc
 80012a0:	28f5c28f 	.word	0x28f5c28f
 80012a4:	40048f5c 	.word	0x40048f5c
 80012a8:	9999999a 	.word	0x9999999a
 80012ac:	3f999999 	.word	0x3f999999
 80012b0:	2000022c 	.word	0x2000022c
 80012b4:	20000230 	.word	0x20000230
 80012b8:	20006dec 	.word	0x20006dec
 80012bc:	20004270 	.word	0x20004270
 80012c0:	200056b8 	.word	0x200056b8
 80012c4:	200056c4 	.word	0x200056c4
 80012c8:	20004328 	.word	0x20004328
 80012cc:	200056b4 	.word	0x200056b4
 80012d0:	2000431c 	.word	0x2000431c
 80012d4:	2000432c 	.word	0x2000432c
 80012d8:	20004264 	.word	0x20004264
 80012dc:	200056c0 	.word	0x200056c0
 80012e0:	200056bc 	.word	0x200056bc
 80012e4:	20004324 	.word	0x20004324
 80012e8:	20004320 	.word	0x20004320
 80012ec:	20006ca0 	.word	0x20006ca0
 80012f0:	20000234 	.word	0x20000234

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_MspInit+0x44>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_ADC_MspInit+0x74>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d123      	bne.n	80013b6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0x78>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139e:	2304      	movs	r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_ADC_MspInit+0x7c>)
 80013b2:	f001 f9f9 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40012000 	.word	0x40012000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800

080013cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a45      	ldr	r2, [pc, #276]	; (8001500 <HAL_SPI_MspInit+0x134>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f040 8084 	bne.w	80014f8 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f0:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_SPI_MspInit+0x138>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4a43      	ldr	r2, [pc, #268]	; (8001504 <HAL_SPI_MspInit+0x138>)
 80013f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fa:	6453      	str	r3, [r2, #68]	; 0x44
 80013fc:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_SPI_MspInit+0x138>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_SPI_MspInit+0x138>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_SPI_MspInit+0x138>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_SPI_MspInit+0x138>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001420:	23e0      	movs	r3, #224	; 0xe0
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001430:	2305      	movs	r3, #5
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4833      	ldr	r0, [pc, #204]	; (8001508 <HAL_SPI_MspInit+0x13c>)
 800143c:	f001 f9b4 	bl	80027a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001440:	4b32      	ldr	r3, [pc, #200]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_SPI_MspInit+0x144>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001448:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800144c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <HAL_SPI_MspInit+0x140>)
 800145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001460:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <HAL_SPI_MspInit+0x140>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147a:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_SPI_MspInit+0x140>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001480:	4822      	ldr	r0, [pc, #136]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001482:	f000 fd89 	bl	8001f98 <HAL_DMA_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800148c:	f7ff ff32 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001494:	659a      	str	r2, [r3, #88]	; 0x58
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_SPI_MspInit+0x140>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_SPI_MspInit+0x148>)
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <HAL_SPI_MspInit+0x14c>)
 80014a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014a4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014d8:	2200      	movs	r2, #0
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014de:	f000 fd5b 	bl	8001f98 <HAL_DMA_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80014e8:	f7ff ff04 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014f0:	655a      	str	r2, [r3, #84]	; 0x54
 80014f2:	4a08      	ldr	r2, [pc, #32]	; (8001514 <HAL_SPI_MspInit+0x148>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40013000 	.word	0x40013000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	20006d8c 	.word	0x20006d8c
 8001510:	40026410 	.word	0x40026410
 8001514:	20006df0 	.word	0x20006df0
 8001518:	40026458 	.word	0x40026458

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a32      	ldr	r2, [pc, #200]	; (8001604 <HAL_UART_MspInit+0xe8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d15d      	bne.n	80015fa <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <HAL_UART_MspInit+0xec>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a31      	ldr	r2, [pc, #196]	; (8001608 <HAL_UART_MspInit+0xec>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_UART_MspInit+0xec>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <HAL_UART_MspInit+0xec>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_UART_MspInit+0xec>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_UART_MspInit+0xec>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156e:	23c0      	movs	r3, #192	; 0xc0
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800157e:	2308      	movs	r3, #8
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4820      	ldr	r0, [pc, #128]	; (800160c <HAL_UART_MspInit+0xf0>)
 800158a:	f001 f90d 	bl	80027a8 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_UART_MspInit+0xf4>)
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_UART_MspInit+0xf8>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_UART_MspInit+0xf4>)
 8001596:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800159a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_UART_MspInit+0xf4>)
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80015ce:	4810      	ldr	r0, [pc, #64]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015d0:	f000 fce2 	bl	8001f98 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80015da:	f7ff fe8b 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_UART_MspInit+0xf4>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2105      	movs	r1, #5
 80015ee:	2047      	movs	r0, #71	; 0x47
 80015f0:	f000 fc9b 	bl	8001f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80015f4:	2047      	movs	r0, #71	; 0x47
 80015f6:	f000 fcb4 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	; 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40011400 	.word	0x40011400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020800 	.word	0x40020800
 8001610:	20004274 	.word	0x20004274
 8001614:	400264a0 	.word	0x400264a0

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f8da 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001678:	2008      	movs	r0, #8
 800167a:	f001 fa8b 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA2_Stream0_IRQHandler+0x10>)
 800168a:	f000 fe25 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20006d8c 	.word	0x20006d8c

08001698 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA2_Stream3_IRQHandler+0x10>)
 800169e:	f000 fe1b 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20006df0 	.word	0x20006df0

080016ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA2_Stream6_IRQHandler+0x10>)
 80016b2:	f000 fe11 	bl	80022d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20004274 	.word	0x20004274

080016c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART6_IRQHandler+0x10>)
 80016c6:	f003 ff71 	bl	80055ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20006ca4 	.word	0x20006ca4

080016d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x50>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x16>
		heap_end = &end;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <_sbrk+0x50>)
 80016e6:	4a10      	ldr	r2, [pc, #64]	; (8001728 <_sbrk+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <_sbrk+0x50>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <_sbrk+0x50>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	466a      	mov	r2, sp
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d907      	bls.n	800170e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016fe:	f004 fe37 	bl	8006370 <__errno>
 8001702:	4602      	mov	r2, r0
 8001704:	230c      	movs	r3, #12
 8001706:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	e006      	b.n	800171c <_sbrk+0x48>
	}

	heap_end += incr;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <_sbrk+0x50>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a03      	ldr	r2, [pc, #12]	; (8001724 <_sbrk+0x50>)
 8001718:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000238 	.word	0x20000238
 8001728:	20006e80 	.word	0x20006e80

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <SystemInit+0x28>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <SystemInit+0x28>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SystemInit+0x28>)
 8001742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001746:	609a      	str	r2, [r3, #8]
#endif
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800175c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800176e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
  ldr  r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800177e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001782:	f7ff ffd3 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f004 fdf9 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fa4d 	bl	8000c28 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001794:	0800a090 	.word	0x0800a090
  ldr  r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800179c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80017a0:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80017a4:	20006e7c 	.word	0x20006e7c

080017a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC_IRQHandler>

080017aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 fbb0 	bl	8001f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 f805 	bl	80017c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017ba:	f7ff fda3 	bl	8001304 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fbcb 	bl	8001f7e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 fb93 	bl	8001f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000010 	.word	0x20000010
 800181c:	20000018 	.word	0x20000018
 8001820:	20000014 	.word	0x20000014

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000018 	.word	0x20000018
 8001848:	20006e74 	.word	0x20006e74

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20006e74 	.word	0x20006e74

08001864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e031      	b.n	80018de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fd62 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_ADC_Init+0x84>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	f043 0202 	orr.w	r2, r3, #2
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f964 	bl	8001b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f023 0303 	bic.w	r3, r3, #3
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
 80018ce:	e001      	b.n	80018d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	ffffeefd 	.word	0xffffeefd

080018ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1c>
 8001904:	2302      	movs	r3, #2
 8001906:	e12a      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x272>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d93a      	bls.n	800198e <HAL_ADC_ConfigChannel+0xa2>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001920:	d035      	beq.n	800198e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68d9      	ldr	r1, [r3, #12]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	3b1e      	subs	r3, #30
 8001938:	2207      	movs	r2, #7
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a87      	ldr	r2, [pc, #540]	; (8001b6c <HAL_ADC_ConfigChannel+0x280>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10a      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68d9      	ldr	r1, [r3, #12]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	061a      	lsls	r2, r3, #24
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001966:	e035      	b.n	80019d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68d9      	ldr	r1, [r3, #12]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	4603      	mov	r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4403      	add	r3, r0
 8001980:	3b1e      	subs	r3, #30
 8001982:	409a      	lsls	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198c:	e022      	b.n	80019d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6919      	ldr	r1, [r3, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	2207      	movs	r2, #7
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43da      	mvns	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	400a      	ands	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6919      	ldr	r1, [r3, #16]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4403      	add	r3, r0
 80019ca:	409a      	lsls	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b06      	cmp	r3, #6
 80019da:	d824      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b05      	subs	r3, #5
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b05      	subs	r3, #5
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
 8001a24:	e04c      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d824      	bhi.n	8001a78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b23      	subs	r3, #35	; 0x23
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b23      	subs	r3, #35	; 0x23
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
 8001a76:	e023      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	3b41      	subs	r3, #65	; 0x41
 8001a8a:	221f      	movs	r2, #31
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43da      	mvns	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	400a      	ands	r2, r1
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b41      	subs	r3, #65	; 0x41
 8001ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a2a      	ldr	r2, [pc, #168]	; (8001b70 <HAL_ADC_ConfigChannel+0x284>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10a      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001ada:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ade:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_ADC_ConfigChannel+0x284>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d109      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x212>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_ADC_ConfigChannel+0x284>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d125      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x268>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_ADC_ConfigChannel+0x280>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d003      	beq.n	8001b1a <HAL_ADC_ConfigChannel+0x22e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b11      	cmp	r3, #17
 8001b18:	d11c      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_ADC_ConfigChannel+0x288>)
 8001b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_ADC_ConfigChannel+0x280>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d111      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_ADC_ConfigChannel+0x28c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_ADC_ConfigChannel+0x290>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9a      	lsrs	r2, r3, #18
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b46:	e002      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	10000012 	.word	0x10000012
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40012300 	.word	0x40012300
 8001b78:	20000010 	.word	0x20000010
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b88:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <ADC_Init+0x1ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <ADC_Init+0x1ec>)
 8001b8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <ADC_Init+0x1ec>)
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4973      	ldr	r1, [pc, #460]	; (8001d6c <ADC_Init+0x1ec>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	021a      	lsls	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <ADC_Init+0x1f0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e00f      	b.n	8001c7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0202 	bic.w	r2, r2, #2
 8001c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	005a      	lsls	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	035a      	lsls	r2, r3, #13
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e007      	b.n	8001cf0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	051a      	lsls	r2, r3, #20
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6899      	ldr	r1, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d32:	025a      	lsls	r2, r3, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	029a      	lsls	r2, r3, #10
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	0f000001 	.word	0x0f000001

08001d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <__NVIC_SetPriorityGrouping+0x40>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x40>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00
 8001db8:	05fa0000 	.word	0x05fa0000

08001dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	db0b      	blt.n	8001e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4907      	ldr	r1, [pc, #28]	; (8001e10 <__NVIC_EnableIRQ+0x38>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	2001      	movs	r0, #1
 8001dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db0a      	blt.n	8001e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	490c      	ldr	r1, [pc, #48]	; (8001e60 <__NVIC_SetPriority+0x4c>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	0112      	lsls	r2, r2, #4
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e3c:	e00a      	b.n	8001e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <__NVIC_SetPriority+0x50>)
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	3b04      	subs	r3, #4
 8001e4c:	0112      	lsls	r2, r2, #4
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	761a      	strb	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000e100 	.word	0xe000e100
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b089      	sub	sp, #36	; 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f1c3 0307 	rsb	r3, r3, #7
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	bf28      	it	cs
 8001e86:	2304      	movcs	r3, #4
 8001e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d902      	bls.n	8001e98 <NVIC_EncodePriority+0x30>
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	e000      	b.n	8001e9a <NVIC_EncodePriority+0x32>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	401a      	ands	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	4313      	orrs	r3, r2
         );
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3724      	adds	r7, #36	; 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee0:	d301      	bcc.n	8001ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00f      	b.n	8001f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <SysTick_Config+0x40>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eee:	210f      	movs	r1, #15
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f7ff ff8e 	bl	8001e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SysTick_Config+0x40>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SysTick_Config+0x40>)
 8001f00:	2207      	movs	r2, #7
 8001f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	e000e010 	.word	0xe000e010

08001f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ff29 	bl	8001d74 <__NVIC_SetPriorityGrouping>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b086      	sub	sp, #24
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff3e 	bl	8001dbc <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ff8e 	bl	8001e68 <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff5d 	bl	8001e14 <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff31 	bl	8001dd8 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa2 	bl	8001ed0 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff fc52 	bl	800184c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e099      	b.n	80020e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd4:	e00f      	b.n	8001ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd6:	f7ff fc39 	bl	800184c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d908      	bls.n	8001ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2203      	movs	r2, #3
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e078      	b.n	80020e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e8      	bne.n	8001fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_DMA_Init+0x158>)
 8002010:	4013      	ands	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b04      	cmp	r3, #4
 800204e:	d107      	bne.n	8002060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4313      	orrs	r3, r2
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f023 0307 	bic.w	r3, r3, #7
 8002076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2b04      	cmp	r3, #4
 8002088:	d117      	bne.n	80020ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fb09 	bl	80026b4 <DMA_CheckFifoParam>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020b6:	2301      	movs	r3, #1
 80020b8:	e016      	b.n	80020e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fac0 	bl	8002648 <DMA_CalcBaseAndBitshift>
 80020c8:	4603      	mov	r3, r0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	223f      	movs	r2, #63	; 0x3f
 80020d2:	409a      	lsls	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	e010803f 	.word	0xe010803f

080020f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_DMA_Start_IT+0x26>
 8002116:	2302      	movs	r3, #2
 8002118:	e048      	b.n	80021ac <HAL_DMA_Start_IT+0xb8>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d137      	bne.n	800219e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fa52 	bl	80025ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	223f      	movs	r2, #63	; 0x3f
 800214e:	409a      	lsls	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0216 	orr.w	r2, r2, #22
 8002162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695a      	ldr	r2, [r3, #20]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002172:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e005      	b.n	80021aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c2:	f7ff fb43 	bl	800184c <HAL_GetTick>
 80021c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e052      	b.n	800228c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0216 	bic.w	r2, r2, #22
 80021f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_DMA_Abort+0x62>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d007      	beq.n	8002226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0208 	bic.w	r2, r2, #8
 8002224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002236:	e013      	b.n	8002260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff fb08 	bl	800184c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b05      	cmp	r3, #5
 8002244:	d90c      	bls.n	8002260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2203      	movs	r2, #3
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e015      	b.n	800228c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e4      	bne.n	8002238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	223f      	movs	r2, #63	; 0x3f
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d004      	beq.n	80022b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00c      	b.n	80022cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022e4:	4b92      	ldr	r3, [pc, #584]	; (8002530 <HAL_DMA_IRQHandler+0x258>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a92      	ldr	r2, [pc, #584]	; (8002534 <HAL_DMA_IRQHandler+0x25c>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0a9b      	lsrs	r3, r3, #10
 80022f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2208      	movs	r2, #8
 8002304:	409a      	lsls	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01a      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	2208      	movs	r2, #8
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f043 0201 	orr.w	r2, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2201      	movs	r2, #1
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00b      	beq.n	800237a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2201      	movs	r2, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2204      	movs	r2, #4
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d012      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00b      	beq.n	80023b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2204      	movs	r2, #4
 800239e:	409a      	lsls	r2, r3
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	f043 0204 	orr.w	r2, r3, #4
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	2210      	movs	r2, #16
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d03c      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	2210      	movs	r2, #16
 80023d4:	409a      	lsls	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d018      	beq.n	800241a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d108      	bne.n	8002408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d024      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
 8002406:	e01f      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
 8002418:	e016      	b.n	8002448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0208 	bic.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	2220      	movs	r2, #32
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 808e 	beq.w	8002576 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8086 	beq.w	8002576 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	2220      	movs	r2, #32
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	d136      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0216 	bic.w	r2, r2, #22
 8002490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d103      	bne.n	80024b2 <HAL_DMA_IRQHandler+0x1da>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0208 	bic.w	r2, r2, #8
 80024c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d07d      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
        }
        return;
 80024ee:	e078      	b.n	80025e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01c      	beq.n	8002538 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d108      	bne.n	800251e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	2b00      	cmp	r3, #0
 8002512:	d030      	beq.n	8002576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e02b      	b.n	8002576 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d027      	beq.n	8002576 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
 800252e:	e022      	b.n	8002576 <HAL_DMA_IRQHandler+0x29e>
 8002530:	20000010 	.word	0x20000010
 8002534:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	2b00      	cmp	r3, #0
 800257c:	d032      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d307      	bcc.n	80025be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f2      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x2ca>
 80025bc:	e000      	b.n	80025c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
 80025e0:	e000      	b.n	80025e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025e2:	bf00      	nop
    }
  }
}
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop

080025ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002608:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	d108      	bne.n	800262c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800262a:	e007      	b.n	800263c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	3b10      	subs	r3, #16
 8002658:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <DMA_CalcBaseAndBitshift+0x60>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002662:	4a12      	ldr	r2, [pc, #72]	; (80026ac <DMA_CalcBaseAndBitshift+0x64>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b03      	cmp	r3, #3
 8002674:	d908      	bls.n	8002688 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <DMA_CalcBaseAndBitshift+0x68>)
 800267e:	4013      	ands	r3, r2
 8002680:	1d1a      	adds	r2, r3, #4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	659a      	str	r2, [r3, #88]	; 0x58
 8002686:	e006      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	08009d58 	.word	0x08009d58
 80026b0:	fffffc00 	.word	0xfffffc00

080026b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11f      	bne.n	800270e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d855      	bhi.n	8002780 <DMA_CheckFifoParam+0xcc>
 80026d4:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <DMA_CheckFifoParam+0x28>)
 80026d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026da:	bf00      	nop
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026ff 	.word	0x080026ff
 80026e4:	080026ed 	.word	0x080026ed
 80026e8:	08002781 	.word	0x08002781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d045      	beq.n	8002784 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e042      	b.n	8002784 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002706:	d13f      	bne.n	8002788 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e03c      	b.n	8002788 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002716:	d121      	bne.n	800275c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d836      	bhi.n	800278c <DMA_CheckFifoParam+0xd8>
 800271e:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <DMA_CheckFifoParam+0x70>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002735 	.word	0x08002735
 8002728:	0800273b 	.word	0x0800273b
 800272c:	08002735 	.word	0x08002735
 8002730:	0800274d 	.word	0x0800274d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      break;
 8002738:	e02f      	b.n	800279a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800274a:	e021      	b.n	8002790 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002754:	d11e      	bne.n	8002794 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800275a:	e01b      	b.n	8002794 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <DMA_CheckFifoParam+0xb4>
 8002762:	2b03      	cmp	r3, #3
 8002764:	d003      	beq.n	800276e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002766:	e018      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e015      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00e      	beq.n	8002798 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
      break;
 800277e:	e00b      	b.n	8002798 <DMA_CheckFifoParam+0xe4>
      break;
 8002780:	bf00      	nop
 8002782:	e00a      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002784:	bf00      	nop
 8002786:	e008      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002788:	bf00      	nop
 800278a:	e006      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 800278c:	bf00      	nop
 800278e:	e004      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002790:	bf00      	nop
 8002792:	e002      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;   
 8002794:	bf00      	nop
 8002796:	e000      	b.n	800279a <DMA_CheckFifoParam+0xe6>
      break;
 8002798:	bf00      	nop
    }
  } 
  
  return status; 
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e175      	b.n	8002ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	f040 8164 	bne.w	8002aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d00b      	beq.n	8002806 <HAL_GPIO_Init+0x5e>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027fa:	2b11      	cmp	r3, #17
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b12      	cmp	r3, #18
 8002804:	d130      	bne.n	8002868 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 0201 	and.w	r2, r3, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x100>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d123      	bne.n	80028f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	220f      	movs	r2, #15
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	08da      	lsrs	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3208      	adds	r2, #8
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80be 	beq.w	8002aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002932:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <HAL_GPIO_Init+0x320>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a64      	ldr	r2, [pc, #400]	; (8002ac8 <HAL_GPIO_Init+0x320>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b62      	ldr	r3, [pc, #392]	; (8002ac8 <HAL_GPIO_Init+0x320>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800294a:	4a60      	ldr	r2, [pc, #384]	; (8002acc <HAL_GPIO_Init+0x324>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_GPIO_Init+0x328>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d037      	beq.n	80029e6 <HAL_GPIO_Init+0x23e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_GPIO_Init+0x32c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <HAL_GPIO_Init+0x23a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <HAL_GPIO_Init+0x330>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x236>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x334>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x232>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_GPIO_Init+0x338>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x22e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_GPIO_Init+0x33c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x22a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a51      	ldr	r2, [pc, #324]	; (8002ae8 <HAL_GPIO_Init+0x340>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x226>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a50      	ldr	r2, [pc, #320]	; (8002aec <HAL_GPIO_Init+0x344>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x222>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_GPIO_Init+0x348>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x21e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4e      	ldr	r2, [pc, #312]	; (8002af4 <HAL_GPIO_Init+0x34c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x21a>
 80029be:	2309      	movs	r3, #9
 80029c0:	e012      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029c2:	230a      	movs	r3, #10
 80029c4:	e010      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e00e      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e00c      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029ce:	2306      	movs	r3, #6
 80029d0:	e00a      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e008      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x240>
 80029e6:	2300      	movs	r3, #0
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f002 0203 	and.w	r2, r2, #3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029f8:	4934      	ldr	r1, [pc, #208]	; (8002acc <HAL_GPIO_Init+0x324>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2a:	4a33      	ldr	r2, [pc, #204]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a54:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7e:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_GPIO_Init+0x350>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	f67f ae86 	bls.w	80027c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	3724      	adds	r7, #36	; 0x24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40013800 	.word	0x40013800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40020400 	.word	0x40020400
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40021400 	.word	0x40021400
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40021c00 	.word	0x40021c00
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40022400 	.word	0x40022400
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe facc 	bl	8001150 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf2:	f7fe fe2b 	bl	800184c <HAL_GetTick>
 8002bf6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bf8:	e009      	b.n	8002c0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bfa:	f7fe fe27 	bl	800184c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c08:	d901      	bls.n	8002c0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e022      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c28:	f7fe fe10 	bl	800184c <HAL_GetTick>
 8002c2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c2e:	e009      	b.n	8002c44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c30:	f7fe fe0c 	bl	800184c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c3e:	d901      	bls.n	8002c44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e007      	b.n	8002c54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c50:	d1ee      	bne.n	8002c30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e29b      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c88:	4b96      	ldr	r3, [pc, #600]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d00c      	beq.n	8002cae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c94:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d112      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62>
 8002ca0:	4b90      	ldr	r3, [pc, #576]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cae:	4b8d      	ldr	r3, [pc, #564]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d06c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x130>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d168      	bne.n	8002d94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e275      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x7a>
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e02e      	b.n	8002d3c <HAL_RCC_OscConfig+0xd8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x9c>
 8002ce6:	4b7f      	ldr	r3, [pc, #508]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7e      	ldr	r2, [pc, #504]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b7c      	ldr	r3, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7b      	ldr	r2, [pc, #492]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xd8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0xc0>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b73      	ldr	r3, [pc, #460]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a72      	ldr	r2, [pc, #456]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xd8>
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6b      	ldr	r2, [pc, #428]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe fd82 	bl	800184c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fd7e 	bl	800184c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e229      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b61      	ldr	r3, [pc, #388]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe8>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fd6e 	bl	800184c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fd6a 	bl	800184c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e215      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b57      	ldr	r3, [pc, #348]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x110>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d069      	beq.n	8002e76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	4b50      	ldr	r3, [pc, #320]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b4d      	ldr	r3, [pc, #308]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x190>
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x17a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1e9      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	493d      	ldr	r1, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e040      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d023      	beq.n	8002e44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fd20 	bl	800184c <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e10:	f7fe fd1c 	bl	800184c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1c7      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e22:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	4929      	ldr	r1, [pc, #164]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
 8002e42:	e018      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e44:	4b27      	ldr	r3, [pc, #156]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fcfc 	bl	800184c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe fcf8 	bl	800184c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1a3      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d038      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d019      	beq.n	8002ebe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8e:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe fcd9 	bl	800184c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fcd5 	bl	800184c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e180      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x23a>
 8002ebc:	e01a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fcbf 	bl	800184c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe fcbb 	bl	800184c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d903      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e166      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
 8002ee4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b92      	ldr	r3, [pc, #584]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a4 	beq.w	800304a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f02:	4b8c      	ldr	r3, [pc, #560]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10d      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0e:	4b89      	ldr	r3, [pc, #548]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a88      	ldr	r2, [pc, #544]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b86      	ldr	r3, [pc, #536]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2a:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCC_OscConfig+0x4d4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d118      	bne.n	8002f68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f36:	4b80      	ldr	r3, [pc, #512]	; (8003138 <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a7f      	ldr	r2, [pc, #508]	; (8003138 <HAL_RCC_OscConfig+0x4d4>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f42:	f7fe fc83 	bl	800184c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4a:	f7fe fc7f 	bl	800184c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b64      	cmp	r3, #100	; 0x64
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e12a      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5c:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x4d4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x31a>
 8002f70:	4b70      	ldr	r3, [pc, #448]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	4a6f      	ldr	r2, [pc, #444]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7c:	e02d      	b.n	8002fda <HAL_RCC_OscConfig+0x376>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x33c>
 8002f86:	4b6b      	ldr	r3, [pc, #428]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a6a      	ldr	r2, [pc, #424]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	4b68      	ldr	r3, [pc, #416]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	4a67      	ldr	r2, [pc, #412]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9e:	e01c      	b.n	8002fda <HAL_RCC_OscConfig+0x376>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d10c      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x35e>
 8002fa8:	4b62      	ldr	r3, [pc, #392]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a61      	ldr	r2, [pc, #388]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fae:	f043 0304 	orr.w	r3, r3, #4
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a5e      	ldr	r2, [pc, #376]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc0:	e00b      	b.n	8002fda <HAL_RCC_OscConfig+0x376>
 8002fc2:	4b5c      	ldr	r3, [pc, #368]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	f023 0301 	bic.w	r3, r3, #1
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a58      	ldr	r2, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d015      	beq.n	800300e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fc33 	bl	800184c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fc2f 	bl	800184c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0d8      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCC_OscConfig+0x386>
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fc1d 	bl	800184c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fc19 	bl	800184c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0c2      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	4b41      	ldr	r3, [pc, #260]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ee      	bne.n	8003016 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	4b3d      	ldr	r3, [pc, #244]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	4a3c      	ldr	r2, [pc, #240]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80ae 	beq.w	80031b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003054:	4b37      	ldr	r3, [pc, #220]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d06d      	beq.n	800313c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d14b      	bne.n	8003100 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 800306e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fbea 	bl	800184c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe fbe6 	bl	800184c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e091      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	019b      	lsls	r3, r3, #6
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	491b      	ldr	r1, [pc, #108]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe fbb8 	bl	800184c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fbb4 	bl	800184c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e05f      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x47c>
 80030fe:	e057      	b.n	80031b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fb9e 	bl	800184c <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003114:	f7fe fb9a 	bl	800184c <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e045      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_RCC_OscConfig+0x4d0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x4b0>
 8003132:	e03d      	b.n	80031b0 <HAL_RCC_OscConfig+0x54c>
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <HAL_RCC_OscConfig+0x558>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d030      	beq.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d129      	bne.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d122      	bne.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003172:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003174:	4293      	cmp	r3, r2
 8003176:	d119      	bne.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d10f      	bne.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d0      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d910      	bls.n	8003208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b67      	ldr	r3, [pc, #412]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 020f 	bic.w	r2, r3, #15
 80031ee:	4965      	ldr	r1, [pc, #404]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0b8      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a58      	ldr	r2, [pc, #352]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	494d      	ldr	r1, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d040      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	4b47      	ldr	r3, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d115      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07f      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e073      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e06b      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4936      	ldr	r1, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fe faca 	bl	800184c <HAL_GetTick>
 80032b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032bc:	f7fe fac6 	bl	800184c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e053      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 020c 	and.w	r2, r3, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1eb      	bne.n	80032bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d210      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e032      	b.n	800337a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003352:	f000 f821 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003356:	4601      	mov	r1, r0
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <HAL_RCC_ClockConfig+0x1cc>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	fa21 f303 	lsr.w	r3, r1, r3
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <HAL_RCC_ClockConfig+0x1d0>)
 800336c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800336e:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fa26 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023c00 	.word	0x40023c00
 8003388:	40023800 	.word	0x40023800
 800338c:	08009d40 	.word	0x08009d40
 8003390:	20000010 	.word	0x20000010
 8003394:	20000014 	.word	0x20000014

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d007      	beq.n	80033ca <HAL_RCC_GetSysClockFreq+0x32>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d008      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x38>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 80b4 	bne.w	800352c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b5e      	ldr	r3, [pc, #376]	; (8003540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033c6:	60bb      	str	r3, [r7, #8]
      break;
 80033c8:	e0b3      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ca:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033cc:	60bb      	str	r3, [r7, #8]
      break;
 80033ce:	e0b0      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d0:	4b5a      	ldr	r3, [pc, #360]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04a      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b55      	ldr	r3, [pc, #340]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	ea03 0501 	and.w	r5, r3, r1
 80033fc:	ea04 0602 	and.w	r6, r4, r2
 8003400:	4629      	mov	r1, r5
 8003402:	4632      	mov	r2, r6
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f04f 0400 	mov.w	r4, #0
 800340c:	0154      	lsls	r4, r2, #5
 800340e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003412:	014b      	lsls	r3, r1, #5
 8003414:	4619      	mov	r1, r3
 8003416:	4622      	mov	r2, r4
 8003418:	1b49      	subs	r1, r1, r5
 800341a:	eb62 0206 	sbc.w	r2, r2, r6
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0194      	lsls	r4, r2, #6
 8003428:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342c:	018b      	lsls	r3, r1, #6
 800342e:	1a5b      	subs	r3, r3, r1
 8003430:	eb64 0402 	sbc.w	r4, r4, r2
 8003434:	f04f 0100 	mov.w	r1, #0
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	00e2      	lsls	r2, r4, #3
 800343e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003442:	00d9      	lsls	r1, r3, #3
 8003444:	460b      	mov	r3, r1
 8003446:	4614      	mov	r4, r2
 8003448:	195b      	adds	r3, r3, r5
 800344a:	eb44 0406 	adc.w	r4, r4, r6
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	0262      	lsls	r2, r4, #9
 8003458:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800345c:	0259      	lsls	r1, r3, #9
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	4618      	mov	r0, r3
 8003464:	4621      	mov	r1, r4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	f7fc ff3e 	bl	80002f0 <__aeabi_uldivmod>
 8003474:	4603      	mov	r3, r0
 8003476:	460c      	mov	r4, r1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e049      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b2f      	ldr	r3, [pc, #188]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	f04f 0400 	mov.w	r4, #0
 8003486:	f240 11ff 	movw	r1, #511	; 0x1ff
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	ea03 0501 	and.w	r5, r3, r1
 8003492:	ea04 0602 	and.w	r6, r4, r2
 8003496:	4629      	mov	r1, r5
 8003498:	4632      	mov	r2, r6
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	0154      	lsls	r4, r2, #5
 80034a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a8:	014b      	lsls	r3, r1, #5
 80034aa:	4619      	mov	r1, r3
 80034ac:	4622      	mov	r2, r4
 80034ae:	1b49      	subs	r1, r1, r5
 80034b0:	eb62 0206 	sbc.w	r2, r2, r6
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	0194      	lsls	r4, r2, #6
 80034be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	1a5b      	subs	r3, r3, r1
 80034c6:	eb64 0402 	sbc.w	r4, r4, r2
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	00e2      	lsls	r2, r4, #3
 80034d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034d8:	00d9      	lsls	r1, r3, #3
 80034da:	460b      	mov	r3, r1
 80034dc:	4614      	mov	r4, r2
 80034de:	195b      	adds	r3, r3, r5
 80034e0:	eb44 0406 	adc.w	r4, r4, r6
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	02a2      	lsls	r2, r4, #10
 80034ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80034f2:	0299      	lsls	r1, r3, #10
 80034f4:	460b      	mov	r3, r1
 80034f6:	4614      	mov	r4, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	4621      	mov	r1, r4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f04f 0400 	mov.w	r4, #0
 8003502:	461a      	mov	r2, r3
 8003504:	4623      	mov	r3, r4
 8003506:	f7fc fef3 	bl	80002f0 <__aeabi_uldivmod>
 800350a:	4603      	mov	r3, r0
 800350c:	460c      	mov	r4, r1
 800350e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	60bb      	str	r3, [r7, #8]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800352e:	60bb      	str	r3, [r7, #8]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	68bb      	ldr	r3, [r7, #8]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000010 	.word	0x20000010

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4601      	mov	r1, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4a03      	ldr	r2, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5cd3      	ldrb	r3, [r2, r3]
 8003578:	fa21 f303 	lsr.w	r3, r1, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08009d50 	.word	0x08009d50

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4601      	mov	r1, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4a03      	ldr	r2, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08009d50 	.word	0x08009d50

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035d8:	4b69      	ldr	r3, [pc, #420]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a68      	ldr	r2, [pc, #416]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ec:	4964      	ldr	r1, [pc, #400]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d017      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360a:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	4959      	ldr	r1, [pc, #356]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d101      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800362a:	2301      	movs	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d017      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003646:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	494a      	ldr	r1, [pc, #296]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003664:	d101      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003666:	2301      	movs	r3, #1
 8003668:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808b 	beq.w	80037aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a39      	ldr	r2, [pc, #228]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a34      	ldr	r2, [pc, #208]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe f8c8 	bl	800184c <HAL_GetTick>
 80036bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c0:	f7fe f8c4 	bl	800184c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e38f      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036d2:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d035      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d02e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a1a      	ldr	r2, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800371e:	4a18      	ldr	r2, [pc, #96]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b01      	cmp	r3, #1
 800372e:	d114      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe f88c 	bl	800184c <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe f888 	bl	800184c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e351      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ee      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003766:	d111      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003776:	400b      	ands	r3, r1
 8003778:	4901      	ldr	r1, [pc, #4]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
 800377e:	e00b      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003780:	40023800 	.word	0x40023800
 8003784:	40007000 	.word	0x40007000
 8003788:	0ffffcff 	.word	0x0ffffcff
 800378c:	4bb3      	ldr	r3, [pc, #716]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4ab2      	ldr	r2, [pc, #712]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	4bb0      	ldr	r3, [pc, #704]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	49ad      	ldr	r1, [pc, #692]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037b6:	4ba9      	ldr	r3, [pc, #676]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037bc:	4aa7      	ldr	r2, [pc, #668]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037c6:	4ba5      	ldr	r3, [pc, #660]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	49a2      	ldr	r1, [pc, #648]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037e4:	4b9d      	ldr	r3, [pc, #628]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f2:	499a      	ldr	r1, [pc, #616]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003806:	4b95      	ldr	r3, [pc, #596]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003814:	4991      	ldr	r1, [pc, #580]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003828:	4b8c      	ldr	r3, [pc, #560]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003836:	4989      	ldr	r1, [pc, #548]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800384a:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003850:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4980      	ldr	r1, [pc, #512]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4978      	ldr	r1, [pc, #480]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388e:	4b73      	ldr	r3, [pc, #460]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f023 020c 	bic.w	r2, r3, #12
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	496f      	ldr	r1, [pc, #444]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4967      	ldr	r1, [pc, #412]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d2:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	495e      	ldr	r1, [pc, #376]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f4:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	4956      	ldr	r1, [pc, #344]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003916:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	494d      	ldr	r1, [pc, #308]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	4945      	ldr	r1, [pc, #276]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800395a:	4b40      	ldr	r3, [pc, #256]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	493c      	ldr	r1, [pc, #240]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800397c:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398a:	4934      	ldr	r1, [pc, #208]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	492b      	ldr	r1, [pc, #172]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	491b      	ldr	r1, [pc, #108]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a10:	4912      	ldr	r1, [pc, #72]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a34:	4909      	ldr	r1, [pc, #36]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00f      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a48:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	e002      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	4986      	ldr	r1, [pc, #536]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00b      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a74:	4b81      	ldr	r3, [pc, #516]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	497d      	ldr	r1, [pc, #500]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d006      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80d6 	beq.w	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aa0:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a75      	ldr	r2, [pc, #468]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aac:	f7fd fece 	bl	800184c <HAL_GetTick>
 8003ab0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ab4:	f7fd feca 	bl	800184c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e195      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ac6:	4b6d      	ldr	r3, [pc, #436]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d021      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003af4:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afa:	0e1b      	lsrs	r3, r3, #24
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	019a      	lsls	r2, r3, #6
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	071b      	lsls	r3, r3, #28
 8003b1a:	4958      	ldr	r1, [pc, #352]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02e      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4c:	d129      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b4e:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b5c:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b62:	0f1b      	lsrs	r3, r3, #28
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	019a      	lsls	r2, r3, #6
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	061b      	lsls	r3, r3, #24
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	071b      	lsls	r3, r3, #28
 8003b82:	493e      	ldr	r1, [pc, #248]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b8a:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b90:	f023 021f 	bic.w	r2, r3, #31
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	4938      	ldr	r1, [pc, #224]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bae:	4b33      	ldr	r3, [pc, #204]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	0e1b      	lsrs	r3, r3, #24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bbc:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc2:	0f1b      	lsrs	r3, r3, #28
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	019a      	lsls	r2, r3, #6
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	071b      	lsls	r3, r3, #28
 8003be2:	4926      	ldr	r1, [pc, #152]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d011      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	491a      	ldr	r1, [pc, #104]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c26:	f7fd fe11 	bl	800184c <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c2e:	f7fd fe0d 	bl	800184c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b64      	cmp	r3, #100	; 0x64
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e0d8      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	f040 80ce 	bne.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c60:	f7fd fdf4 	bl	800184c <HAL_GetTick>
 8003c64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c66:	e00b      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c68:	f7fd fdf0 	bl	800184c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d904      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0bb      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c8c:	d0ec      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02e      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d12a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cb6:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	0f1b      	lsrs	r3, r3, #28
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	019a      	lsls	r2, r3, #6
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	4944      	ldr	r1, [pc, #272]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cf2:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	493d      	ldr	r1, [pc, #244]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d022      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d20:	d11d      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	0e1b      	lsrs	r3, r3, #24
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d30:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	0f1b      	lsrs	r3, r3, #28
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	019a      	lsls	r2, r3, #6
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	061b      	lsls	r3, r3, #24
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	071b      	lsls	r3, r3, #28
 8003d56:	4929      	ldr	r1, [pc, #164]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d028      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	0c1b      	lsrs	r3, r3, #16
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	061b      	lsls	r3, r3, #24
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4917      	ldr	r1, [pc, #92]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4911      	ldr	r1, [pc, #68]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc8:	f7fd fd40 	bl	800184c <HAL_GetTick>
 8003dcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dd0:	f7fd fd3c 	bl	800184c <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e007      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d1ef      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800

08003e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e09d      	b.n	8003f4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d009      	beq.n	8003e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	e005      	b.n	8003e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd faba 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e78:	d902      	bls.n	8003e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e002      	b.n	8003e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e8e:	d007      	beq.n	8003ea0 <HAL_SPI_Init+0xa0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	ea42 0103 	orr.w	r1, r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	f003 0204 	and.w	r2, r3, #4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f1c:	ea42 0103 	orr.w	r1, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_SPI_Transmit+0x22>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e158      	b.n	800422a <HAL_SPI_Transmit+0x2d4>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f80:	f7fd fc64 	bl	800184c <HAL_GetTick>
 8003f84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
 8003f98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9a:	e13d      	b.n	8004218 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Transmit+0x52>
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fac:	e134      	b.n	8004218 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004040:	d94b      	bls.n	80040da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0xfa>
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13e      	bne.n	80040ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004074:	e02b      	b.n	80040ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040a8:	e011      	b.n	80040ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fd fbcf 	bl	800184c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x16c>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x172>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040cc:	e0a4      	b.n	8004218 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ce      	bne.n	8004076 <HAL_SPI_Transmit+0x120>
 80040d8:	e07c      	b.n	80041d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x192>
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d170      	bne.n	80041ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d912      	bls.n	8004118 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	1c9a      	adds	r2, r3, #2
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b02      	subs	r3, #2
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004116:	e058      	b.n	80041ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800413e:	e044      	b.n	80041ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d12b      	bne.n	80041a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d912      	bls.n	800417e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b02      	subs	r3, #2
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800417c:	e025      	b.n	80041ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041a4:	e011      	b.n	80041ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041a6:	f7fd fb51 	bl	800184c <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d803      	bhi.n	80041be <HAL_SPI_Transmit+0x268>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_Transmit+0x26e>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041c8:	e026      	b.n	8004218 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1b5      	bne.n	8004140 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	6839      	ldr	r1, [r7, #0]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f001 f8d5 	bl	8005388 <SPI_EndRxTxTransaction>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e000      	b.n	8004218 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004216:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004228:	7ffb      	ldrb	r3, [r7, #31]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3720      	adds	r7, #32
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x26>
 8004254:	2302      	movs	r3, #2
 8004256:	e1fb      	b.n	8004650 <HAL_SPI_TransmitReceive+0x41e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004260:	f7fd faf4 	bl	800184c <HAL_GetTick>
 8004264:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800426c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800427c:	7efb      	ldrb	r3, [r7, #27]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d00e      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x6e>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d106      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x66>
 8004292:	7efb      	ldrb	r3, [r7, #27]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d003      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800429e:	e1cd      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x80>
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042b8:	e1c0      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2205      	movs	r2, #5
 80042ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	887a      	ldrh	r2, [r7, #2]
 80042de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004310:	d802      	bhi.n	8004318 <HAL_SPI_TransmitReceive+0xe6>
 8004312:	8a3b      	ldrh	r3, [r7, #16]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d908      	bls.n	800432a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	e007      	b.n	800433a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d007      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004360:	d97c      	bls.n	800445c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x13e>
 800436a:	8a7b      	ldrh	r3, [r7, #18]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d169      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004394:	e056      	b.n	8004444 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11b      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d11c      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1f2>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	b292      	uxth	r2, r2
 8004402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004420:	2301      	movs	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004424:	f7fd fa12 	bl	800184c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	429a      	cmp	r2, r3
 8004432:	d807      	bhi.n	8004444 <HAL_SPI_TransmitReceive+0x212>
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d003      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004442:	e0fb      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1a3      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x164>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d19d      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x164>
 800445a:	e0df      	b.n	800461c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x23a>
 8004464:	8a7b      	ldrh	r3, [r7, #18]
 8004466:	2b01      	cmp	r3, #1
 8004468:	f040 80cb 	bne.w	8004602 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d912      	bls.n	800449c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b02      	subs	r3, #2
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800449a:	e0b2      	b.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c2:	e09e      	b.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d134      	bne.n	800453c <HAL_SPI_TransmitReceive+0x30a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02f      	beq.n	800453c <HAL_SPI_TransmitReceive+0x30a>
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12c      	bne.n	800453c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d912      	bls.n	8004512 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b02      	subs	r3, #2
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004510:	e012      	b.n	8004538 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d148      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x3aa>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d042      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d923      	bls.n	80045aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	b292      	uxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	1c9a      	adds	r2, r3, #2
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b02      	subs	r3, #2
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d81f      	bhi.n	80045d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	e016      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f103 020c 	add.w	r2, r3, #12
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045dc:	f7fd f936 	bl	800184c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d803      	bhi.n	80045f4 <HAL_SPI_TransmitReceive+0x3c2>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x3c8>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004600:	e01c      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af5b 	bne.w	80044c4 <HAL_SPI_TransmitReceive+0x292>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f47f af54 	bne.w	80044c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 feb1 	bl	8005388 <SPI_EndRxTxTransaction>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	661a      	str	r2, [r3, #96]	; 0x60
 8004638:	e000      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800463a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800464c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d101      	bne.n	8004678 <HAL_SPI_Transmit_DMA+0x20>
 8004674:	2302      	movs	r3, #2
 8004676:	e0d8      	b.n	800482a <HAL_SPI_Transmit_DMA+0x1d2>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800468c:	2302      	movs	r3, #2
 800468e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004690:	e0c6      	b.n	8004820 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_SPI_Transmit_DMA+0x46>
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80046a2:	e0bd      	b.n	8004820 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2203      	movs	r2, #3
 80046a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	88fa      	ldrh	r2, [r7, #6]
 80046c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ee:	d10f      	bne.n	8004710 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800470e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	4a47      	ldr	r2, [pc, #284]	; (8004834 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	4a46      	ldr	r2, [pc, #280]	; (8004838 <HAL_SPI_Transmit_DMA+0x1e0>)
 800471e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	4a45      	ldr	r2, [pc, #276]	; (800483c <HAL_SPI_Transmit_DMA+0x1e4>)
 8004726:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472c:	2200      	movs	r2, #0
 800472e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800473e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004748:	d82d      	bhi.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d127      	bne.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475a:	b29b      	uxth	r3, r3
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10f      	bne.n	8004784 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004772:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004782:	e010      	b.n	80047a6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004792:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	b29b      	uxth	r3, r3
 800479e:	3301      	adds	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	4619      	mov	r1, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80047be:	f7fd fc99 	bl	80020f4 <HAL_DMA_Start_IT>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80047e0:	e01e      	b.n	8004820 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0220 	orr.w	r2, r2, #32
 800480e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0202 	orr.w	r2, r2, #2
 800481e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	08005011 	.word	0x08005011
 8004838:	08004e2d 	.word	0x08004e2d
 800483c:	08005065 	.word	0x08005065

08004840 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d110      	bne.n	800487c <HAL_SPI_Receive_DMA+0x3c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004862:	d10b      	bne.n	800487c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2204      	movs	r2, #4
 8004868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 f908 	bl	8004a88 <HAL_SPI_TransmitReceive_DMA>
 8004878:	4603      	mov	r3, r0
 800487a:	e0fb      	b.n	8004a74 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_SPI_Receive_DMA+0x4a>
 8004886:	2302      	movs	r3, #2
 8004888:	e0f4      	b.n	8004a74 <HAL_SPI_Receive_DMA+0x234>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d002      	beq.n	80048a4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800489e:	2302      	movs	r3, #2
 80048a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048a2:	e0e2      	b.n	8004a6a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Receive_DMA+0x70>
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048b4:	e0d9      	b.n	8004a6a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2204      	movs	r2, #4
 80048ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048fa:	d10f      	bne.n	800491c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800491a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004934:	d908      	bls.n	8004948 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	e042      	b.n	80049ce <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004956:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004962:	d134      	bne.n	80049ce <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004972:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800497a:	b29b      	uxth	r3, r3
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d111      	bne.n	80049a8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004992:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800499a:	b29b      	uxth	r3, r3
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80049a6:	e012      	b.n	80049ce <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049be:	b29b      	uxth	r3, r3
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3301      	adds	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <HAL_SPI_Receive_DMA+0x23c>)
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_SPI_Receive_DMA+0x240>)
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <HAL_SPI_Receive_DMA+0x244>)
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	2200      	movs	r2, #0
 80049ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	4619      	mov	r1, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004a08:	f7fd fb74 	bl	80020f4 <HAL_DMA_Start_IT>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00c      	beq.n	8004a2c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a16:	f043 0210 	orr.w	r2, r3, #16
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004a2a:	e01e      	b.n	8004a6a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d007      	beq.n	8004a4a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a48:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0220 	orr.w	r2, r2, #32
 8004a58:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0201 	orr.w	r2, r2, #1
 8004a68:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	0800502d 	.word	0x0800502d
 8004a80:	08004ed5 	.word	0x08004ed5
 8004a84:	08005065 	.word	0x08005065

08004a88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e16c      	b.n	8004d82 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ab6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004abe:	7dbb      	ldrb	r3, [r7, #22]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aca:	d106      	bne.n	8004ada <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_TransmitReceive_DMA+0x52>
 8004ad4:	7dbb      	ldrb	r3, [r7, #22]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
 8004adc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ade:	e14b      	b.n	8004d78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004aec:	887b      	ldrh	r3, [r7, #2]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af6:	e13f      	b.n	8004d78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d003      	beq.n	8004b0c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2205      	movs	r2, #5
 8004b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	887a      	ldrh	r2, [r7, #2]
 8004b22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	887a      	ldrh	r2, [r7, #2]
 8004b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	887a      	ldrh	r2, [r7, #2]
 8004b36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004b54:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b5e:	d908      	bls.n	8004b72 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b6e:	605a      	str	r2, [r3, #4]
 8004b70:	e06f      	b.n	8004c52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b80:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8c:	d126      	bne.n	8004bdc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10f      	bne.n	8004bba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ba8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb8:	e010      	b.n	8004bdc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	d134      	bne.n	8004c52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bf6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d111      	bne.n	8004c2c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c16:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c2a:	e012      	b.n	8004c52 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3301      	adds	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d108      	bne.n	8004c70 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	4a4a      	ldr	r2, [pc, #296]	; (8004d8c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	4a49      	ldr	r2, [pc, #292]	; (8004d90 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c6e:	e007      	b.n	8004c80 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8004c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	4a45      	ldr	r2, [pc, #276]	; (8004d9c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8004c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004caa:	f7fd fa23 	bl	80020f4 <HAL_DMA_Start_IT>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00c      	beq.n	8004cce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb8:	f043 0210 	orr.w	r2, r3, #16
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004ccc:	e054      	b.n	8004d78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0201 	orr.w	r2, r2, #1
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cea:	2200      	movs	r2, #0
 8004cec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	4619      	mov	r1, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004d16:	f7fd f9ed 	bl	80020f4 <HAL_DMA_Start_IT>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	f043 0210 	orr.w	r2, r3, #16
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004d38:	e01e      	b.n	8004d78 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d007      	beq.n	8004d58 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d56:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0220 	orr.w	r2, r2, #32
 8004d66:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0202 	orr.w	r2, r2, #2
 8004d76:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0800502d 	.word	0x0800502d
 8004d90:	08004ed5 	.word	0x08004ed5
 8004d94:	08005049 	.word	0x08005049
 8004d98:	08004f7f 	.word	0x08004f7f
 8004d9c:	08005065 	.word	0x08005065

08004da0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e3a:	f7fc fd07 	bl	800184c <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d03b      	beq.n	8004ec8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0220 	bic.w	r2, r2, #32
 8004e5e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0202 	bic.w	r2, r2, #2
 8004e6e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	2164      	movs	r1, #100	; 0x64
 8004e74:	6978      	ldr	r0, [r7, #20]
 8004e76:	f000 fa87 	bl	8005388 <SPI_EndRxTxTransaction>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ec0:	6978      	ldr	r0, [r7, #20]
 8004ec2:	f7ff ffa9 	bl	8004e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004ec6:	e002      	b.n	8004ece <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004ec8:	6978      	ldr	r0, [r7, #20]
 8004eca:	f7ff ff69 	bl	8004da0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ee2:	f7fc fcb3 	bl	800184c <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef6:	d03c      	beq.n	8004f72 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0220 	bic.w	r2, r2, #32
 8004f06:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <SPI_DMAReceiveCplt+0x58>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f18:	d108      	bne.n	8004f2c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0203 	bic.w	r2, r2, #3
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	e007      	b.n	8004f3c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	2164      	movs	r1, #100	; 0x64
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f9c9 	bl	80052d8 <SPI_EndRxTransaction>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff ff54 	bl	8004e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004f70:	e002      	b.n	8004f78 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ff1e 	bl	8004db4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f8c:	f7fc fc5e 	bl	800184c <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa0:	d030      	beq.n	8005004 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0220 	bic.w	r2, r2, #32
 8004fb0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	2164      	movs	r1, #100	; 0x64
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f9e6 	bl	8005388 <SPI_EndRxTxTransaction>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0203 	bic.w	r2, r2, #3
 8004fdc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff0b 	bl	8004e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005002:	e002      	b.n	800500a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f7ff fedf 	bl	8004dc8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff fedc 	bl	8004ddc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff fed8 	bl	8004df0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fed4 	bl	8004e04 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0203 	bic.w	r2, r2, #3
 8005080:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff febe 	bl	8004e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050b4:	f7fc fbca 	bl	800184c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050c4:	f7fc fbc2 	bl	800184c <HAL_GetTick>
 80050c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	015b      	lsls	r3, r3, #5
 80050d0:	0d1b      	lsrs	r3, r3, #20
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	fb02 f303 	mul.w	r3, r2, r3
 80050d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050da:	e054      	b.n	8005186 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d050      	beq.n	8005186 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050e4:	f7fc fbb2 	bl	800184c <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d902      	bls.n	80050fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d13d      	bne.n	8005176 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005108:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005112:	d111      	bne.n	8005138 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	d004      	beq.n	8005128 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005126:	d107      	bne.n	8005138 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005136:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005140:	d10f      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005160:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e017      	b.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	3b01      	subs	r3, #1
 8005184:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4013      	ands	r3, r2
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	bf0c      	ite	eq
 8005196:	2301      	moveq	r3, #1
 8005198:	2300      	movne	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d19b      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000010 	.word	0x20000010

080051b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051c2:	f7fc fb43 	bl	800184c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4413      	add	r3, r2
 80051d0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d2:	f7fc fb3b 	bl	800184c <HAL_GetTick>
 80051d6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	00da      	lsls	r2, r3, #3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	0d1b      	lsrs	r3, r3, #20
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80051f0:	e062      	b.n	80052b8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051f8:	d109      	bne.n	800520e <SPI_WaitFifoStateUntilTimeout+0x5a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800520c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d050      	beq.n	80052b8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005216:	f7fc fb19 	bl	800184c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	429a      	cmp	r2, r3
 8005224:	d902      	bls.n	800522c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d13d      	bne.n	80052a8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800523a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005244:	d111      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524e:	d004      	beq.n	800525a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005258:	d107      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005268:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005272:	d10f      	bne.n	8005294 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005292:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e010      	b.n	80052ca <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d194      	bne.n	80051f2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ec:	d111      	bne.n	8005312 <SPI_EndRxTransaction+0x3a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	d004      	beq.n	8005302 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005300:	d107      	bne.n	8005312 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fec1 	bl	80050a4 <SPI_WaitFlagStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e023      	b.n	8005380 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005340:	d11d      	bne.n	800537e <SPI_EndRxTransaction+0xa6>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534a:	d004      	beq.n	8005356 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d113      	bne.n	800537e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff ff26 	bl	80051b4 <SPI_WaitFifoStateUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e000      	b.n	8005380 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff ff07 	bl	80051b4 <SPI_WaitFifoStateUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b0:	f043 0220 	orr.w	r2, r3, #32
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e027      	b.n	800540c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2180      	movs	r1, #128	; 0x80
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f7ff fe6c 	bl	80050a4 <SPI_WaitFlagStateUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e014      	b.n	800540c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fee0 	bl	80051b4 <SPI_WaitFifoStateUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d007      	beq.n	800540a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e000      	b.n	800540c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e040      	b.n	80054a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc f870 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fade 	bl	8005a14 <UART_SetConfig>
 8005458:	4603      	mov	r3, r0
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e022      	b.n	80054a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fd32 	bl	8005ed4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800548e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fdb9 	bl	8006018 <UART_CheckIdleState>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d166      	bne.n	8005594 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_Transmit_DMA+0x22>
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e05f      	b.n	8005596 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Transmit_DMA+0x34>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e058      	b.n	8005596 <HAL_UART_Transmit_DMA+0xe6>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2221      	movs	r2, #33	; 0x21
 800550e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02b      	beq.n	8005570 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551c:	4a20      	ldr	r2, [pc, #128]	; (80055a0 <HAL_UART_Transmit_DMA+0xf0>)
 800551e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_UART_Transmit_DMA+0xf4>)
 8005526:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800552c:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_UART_Transmit_DMA+0xf8>)
 800552e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005534:	2200      	movs	r2, #0
 8005536:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	4619      	mov	r1, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3328      	adds	r3, #40	; 0x28
 8005548:	461a      	mov	r2, r3
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	f7fc fdd2 	bl	80020f4 <HAL_DMA_Start_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2210      	movs	r2, #16
 800555a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e012      	b.n	8005596 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2240      	movs	r2, #64	; 0x40
 8005576:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800558e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	0800622b 	.word	0x0800622b
 80055a4:	0800627b 	.word	0x0800627b
 80055a8:	08006297 	.word	0x08006297

080055ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80055d2:	4013      	ands	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d113      	bne.n	8005604 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00e      	beq.n	8005604 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 81cd 	beq.w	8005994 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
      }
      return;
 8005602:	e1c7      	b.n	8005994 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80e3 	beq.w	80057d2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4ba5      	ldr	r3, [pc, #660]	; (80058b0 <HAL_UART_IRQHandler+0x304>)
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 80d8 	beq.w	80057d2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_UART_IRQHandler+0xa2>
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <HAL_UART_IRQHandler+0xce>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2202      	movs	r2, #2
 8005668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005670:	f043 0204 	orr.w	r2, r3, #4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d010      	beq.n	80056a6 <HAL_UART_IRQHandler+0xfa>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2204      	movs	r2, #4
 8005694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d015      	beq.n	80056dc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d2:	f043 0208 	orr.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <HAL_UART_IRQHandler+0x15e>
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8141 	beq.w	8005998 <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00c      	beq.n	800573a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005740:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d004      	beq.n	800575a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d031      	beq.n	80057be <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fd36 	bl	80061cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d123      	bne.n	80057b6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800577c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	2b00      	cmp	r3, #0
 8005784:	d013      	beq.n	80057ae <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a4a      	ldr	r2, [pc, #296]	; (80058b4 <HAL_UART_IRQHandler+0x308>)
 800578c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4618      	mov	r0, r3
 8005794:	f7fc fd7e 	bl	8002294 <HAL_DMA_Abort_IT>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d017      	beq.n	80057ce <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80057a8:	4610      	mov	r0, r2
 80057aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	e00f      	b.n	80057ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f910 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	e00b      	b.n	80057ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f90c 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057bc:	e007      	b.n	80057ce <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f908 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80057cc:	e0e4      	b.n	8005998 <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	bf00      	nop
    return;
 80057d0:	e0e2      	b.n	8005998 <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	f040 80a7 	bne.w	800592a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80a1 	beq.w	800592a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 809b 	beq.w	800592a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2210      	movs	r2, #16
 80057fa:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d156      	bne.n	80058b8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005814:	893b      	ldrh	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 80c0 	beq.w	800599c <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005822:	893a      	ldrh	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	f080 80b9 	bcs.w	800599c <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	893a      	ldrh	r2, [r7, #8]
 800582e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	d02a      	beq.n	8005894 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2220      	movs	r2, #32
 8005872:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0210 	bic.w	r2, r2, #16
 8005888:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4618      	mov	r0, r3
 8005890:	f7fc fc90 	bl	80021b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f89d 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058ae:	e075      	b.n	800599c <HAL_UART_IRQHandler+0x3f0>
 80058b0:	04000120 	.word	0x04000120
 80058b4:	08006313 	.word	0x08006313
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d064      	beq.n	80059a0 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 80058d6:	897b      	ldrh	r3, [r7, #10]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d061      	beq.n	80059a0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058ea:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0210 	bic.w	r2, r2, #16
 800591c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f860 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005928:	e03a      	b.n	80059a0 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <HAL_UART_IRQHandler+0x3a4>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005946:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f859 	bl	8005a00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800594e:	e02a      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00d      	beq.n	8005976 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
    }
    return;
 8005974:	e016      	b.n	80059a4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fcd7 	bl	800633e <UART_EndTransmit_IT>
    return;
 8005990:	bf00      	nop
 8005992:	e008      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
      return;
 8005994:	bf00      	nop
 8005996:	e006      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
    return;
 8005998:	bf00      	nop
 800599a:	e004      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
      return;
 800599c:	bf00      	nop
 800599e:	e002      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
      return;
 80059a0:	bf00      	nop
 80059a2:	e000      	b.n	80059a6 <HAL_UART_IRQHandler+0x3fa>
    return;
 80059a4:	bf00      	nop
  }

}
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4bb1      	ldr	r3, [pc, #708]	; (8005d04 <UART_SetConfig+0x2f0>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	6979      	ldr	r1, [r7, #20]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a9f      	ldr	r2, [pc, #636]	; (8005d08 <UART_SetConfig+0x2f4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d121      	bne.n	8005ad4 <UART_SetConfig+0xc0>
 8005a90:	4b9e      	ldr	r3, [pc, #632]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d816      	bhi.n	8005acc <UART_SetConfig+0xb8>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x90>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005abb 	.word	0x08005abb
 8005ab0:	08005ac7 	.word	0x08005ac7
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e151      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e14e      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e14b      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e148      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	bf00      	nop
 8005ad2:	e144      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a8d      	ldr	r2, [pc, #564]	; (8005d10 <UART_SetConfig+0x2fc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d134      	bne.n	8005b48 <UART_SetConfig+0x134>
 8005ade:	4b8b      	ldr	r3, [pc, #556]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d829      	bhi.n	8005b40 <UART_SetConfig+0x12c>
 8005aec:	a201      	add	r2, pc, #4	; (adr r2, 8005af4 <UART_SetConfig+0xe0>)
 8005aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af2:	bf00      	nop
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005b41 	.word	0x08005b41
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b41 	.word	0x08005b41
 8005b04:	08005b35 	.word	0x08005b35
 8005b08:	08005b41 	.word	0x08005b41
 8005b0c:	08005b41 	.word	0x08005b41
 8005b10:	08005b41 	.word	0x08005b41
 8005b14:	08005b2f 	.word	0x08005b2f
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b41 	.word	0x08005b41
 8005b20:	08005b41 	.word	0x08005b41
 8005b24:	08005b3b 	.word	0x08005b3b
 8005b28:	2300      	movs	r3, #0
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e117      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e114      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b34:	2304      	movs	r3, #4
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e111      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e10e      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b40:	2310      	movs	r3, #16
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	bf00      	nop
 8005b46:	e10a      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a71      	ldr	r2, [pc, #452]	; (8005d14 <UART_SetConfig+0x300>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d120      	bne.n	8005b94 <UART_SetConfig+0x180>
 8005b52:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d00f      	beq.n	8005b80 <UART_SetConfig+0x16c>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d802      	bhi.n	8005b6a <UART_SetConfig+0x156>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <UART_SetConfig+0x160>
 8005b68:	e010      	b.n	8005b8c <UART_SetConfig+0x178>
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d005      	beq.n	8005b7a <UART_SetConfig+0x166>
 8005b6e:	2b30      	cmp	r3, #48	; 0x30
 8005b70:	d009      	beq.n	8005b86 <UART_SetConfig+0x172>
 8005b72:	e00b      	b.n	8005b8c <UART_SetConfig+0x178>
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e0f1      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	77fb      	strb	r3, [r7, #31]
 8005b7e:	e0ee      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b80:	2304      	movs	r3, #4
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e0eb      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b86:	2308      	movs	r3, #8
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e0e8      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	bf00      	nop
 8005b92:	e0e4      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5f      	ldr	r2, [pc, #380]	; (8005d18 <UART_SetConfig+0x304>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d120      	bne.n	8005be0 <UART_SetConfig+0x1cc>
 8005b9e:	4b5b      	ldr	r3, [pc, #364]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ba8:	2b40      	cmp	r3, #64	; 0x40
 8005baa:	d00f      	beq.n	8005bcc <UART_SetConfig+0x1b8>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d802      	bhi.n	8005bb6 <UART_SetConfig+0x1a2>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <UART_SetConfig+0x1ac>
 8005bb4:	e010      	b.n	8005bd8 <UART_SetConfig+0x1c4>
 8005bb6:	2b80      	cmp	r3, #128	; 0x80
 8005bb8:	d005      	beq.n	8005bc6 <UART_SetConfig+0x1b2>
 8005bba:	2bc0      	cmp	r3, #192	; 0xc0
 8005bbc:	d009      	beq.n	8005bd2 <UART_SetConfig+0x1be>
 8005bbe:	e00b      	b.n	8005bd8 <UART_SetConfig+0x1c4>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e0cb      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e0c8      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e0c5      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	77fb      	strb	r3, [r7, #31]
 8005bd6:	e0c2      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005bd8:	2310      	movs	r3, #16
 8005bda:	77fb      	strb	r3, [r7, #31]
 8005bdc:	bf00      	nop
 8005bde:	e0be      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a4d      	ldr	r2, [pc, #308]	; (8005d1c <UART_SetConfig+0x308>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d124      	bne.n	8005c34 <UART_SetConfig+0x220>
 8005bea:	4b48      	ldr	r3, [pc, #288]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf8:	d012      	beq.n	8005c20 <UART_SetConfig+0x20c>
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bfe:	d802      	bhi.n	8005c06 <UART_SetConfig+0x1f2>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <UART_SetConfig+0x200>
 8005c04:	e012      	b.n	8005c2c <UART_SetConfig+0x218>
 8005c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0a:	d006      	beq.n	8005c1a <UART_SetConfig+0x206>
 8005c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c10:	d009      	beq.n	8005c26 <UART_SetConfig+0x212>
 8005c12:	e00b      	b.n	8005c2c <UART_SetConfig+0x218>
 8005c14:	2300      	movs	r3, #0
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e0a1      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e09e      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c20:	2304      	movs	r3, #4
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e09b      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c26:	2308      	movs	r3, #8
 8005c28:	77fb      	strb	r3, [r7, #31]
 8005c2a:	e098      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	bf00      	nop
 8005c32:	e094      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a39      	ldr	r2, [pc, #228]	; (8005d20 <UART_SetConfig+0x30c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d124      	bne.n	8005c88 <UART_SetConfig+0x274>
 8005c3e:	4b33      	ldr	r3, [pc, #204]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4c:	d012      	beq.n	8005c74 <UART_SetConfig+0x260>
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d802      	bhi.n	8005c5a <UART_SetConfig+0x246>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <UART_SetConfig+0x254>
 8005c58:	e012      	b.n	8005c80 <UART_SetConfig+0x26c>
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d006      	beq.n	8005c6e <UART_SetConfig+0x25a>
 8005c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c64:	d009      	beq.n	8005c7a <UART_SetConfig+0x266>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x26c>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e077      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e074      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e071      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e06e      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	bf00      	nop
 8005c86:	e06a      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a25      	ldr	r2, [pc, #148]	; (8005d24 <UART_SetConfig+0x310>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d124      	bne.n	8005cdc <UART_SetConfig+0x2c8>
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca0:	d012      	beq.n	8005cc8 <UART_SetConfig+0x2b4>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca6:	d802      	bhi.n	8005cae <UART_SetConfig+0x29a>
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <UART_SetConfig+0x2a8>
 8005cac:	e012      	b.n	8005cd4 <UART_SetConfig+0x2c0>
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	d006      	beq.n	8005cc2 <UART_SetConfig+0x2ae>
 8005cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005cb8:	d009      	beq.n	8005cce <UART_SetConfig+0x2ba>
 8005cba:	e00b      	b.n	8005cd4 <UART_SetConfig+0x2c0>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e04d      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	77fb      	strb	r3, [r7, #31]
 8005cc6:	e04a      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	77fb      	strb	r3, [r7, #31]
 8005ccc:	e047      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	77fb      	strb	r3, [r7, #31]
 8005cd2:	e044      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	77fb      	strb	r3, [r7, #31]
 8005cd8:	bf00      	nop
 8005cda:	e040      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <UART_SetConfig+0x314>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d139      	bne.n	8005d5a <UART_SetConfig+0x346>
 8005ce6:	4b09      	ldr	r3, [pc, #36]	; (8005d0c <UART_SetConfig+0x2f8>)
 8005ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf4:	d027      	beq.n	8005d46 <UART_SetConfig+0x332>
 8005cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cfa:	d817      	bhi.n	8005d2c <UART_SetConfig+0x318>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01c      	beq.n	8005d3a <UART_SetConfig+0x326>
 8005d00:	e027      	b.n	8005d52 <UART_SetConfig+0x33e>
 8005d02:	bf00      	nop
 8005d04:	efff69f3 	.word	0xefff69f3
 8005d08:	40011000 	.word	0x40011000
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	40004400 	.word	0x40004400
 8005d14:	40004800 	.word	0x40004800
 8005d18:	40004c00 	.word	0x40004c00
 8005d1c:	40005000 	.word	0x40005000
 8005d20:	40011400 	.word	0x40011400
 8005d24:	40007800 	.word	0x40007800
 8005d28:	40007c00 	.word	0x40007c00
 8005d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d30:	d006      	beq.n	8005d40 <UART_SetConfig+0x32c>
 8005d32:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d36:	d009      	beq.n	8005d4c <UART_SetConfig+0x338>
 8005d38:	e00b      	b.n	8005d52 <UART_SetConfig+0x33e>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e00e      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005d40:	2302      	movs	r3, #2
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e00b      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005d46:	2304      	movs	r3, #4
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e008      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e005      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005d52:	2310      	movs	r3, #16
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	bf00      	nop
 8005d58:	e001      	b.n	8005d5e <UART_SetConfig+0x34a>
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d66:	d15b      	bne.n	8005e20 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d827      	bhi.n	8005dbe <UART_SetConfig+0x3aa>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x360>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fd fbe2 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e013      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fd fbf2 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8005da4:	61b8      	str	r0, [r7, #24]
        break;
 8005da6:	e00f      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b49      	ldr	r3, [pc, #292]	; (8005ed0 <UART_SetConfig+0x4bc>)
 8005daa:	61bb      	str	r3, [r7, #24]
        break;
 8005dac:	e00c      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fd faf3 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8005db2:	61b8      	str	r0, [r7, #24]
        break;
 8005db4:	e008      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	61bb      	str	r3, [r7, #24]
        break;
 8005dbc:	e004      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d074      	beq.n	8005eb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	005a      	lsls	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b0f      	cmp	r3, #15
 8005dea:	d916      	bls.n	8005e1a <UART_SetConfig+0x406>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df2:	d212      	bcs.n	8005e1a <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	f023 030f 	bic.w	r3, r3, #15
 8005dfc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	89fb      	ldrh	r3, [r7, #14]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	89fa      	ldrh	r2, [r7, #14]
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	e04e      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	77bb      	strb	r3, [r7, #30]
 8005e1e:	e04b      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d827      	bhi.n	8005e76 <UART_SetConfig+0x462>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <UART_SetConfig+0x418>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08005e77 	.word	0x08005e77
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	08005e77 	.word	0x08005e77
 8005e44:	08005e77 	.word	0x08005e77
 8005e48:	08005e77 	.word	0x08005e77
 8005e4c:	08005e6f 	.word	0x08005e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7fd fb86 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8005e54:	61b8      	str	r0, [r7, #24]
        break;
 8005e56:	e013      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e58:	f7fd fb96 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8005e5c:	61b8      	str	r0, [r7, #24]
        break;
 8005e5e:	e00f      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <UART_SetConfig+0x4bc>)
 8005e62:	61bb      	str	r3, [r7, #24]
        break;
 8005e64:	e00c      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e66:	f7fd fa97 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8005e6a:	61b8      	str	r0, [r7, #24]
        break;
 8005e6c:	e008      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	61bb      	str	r3, [r7, #24]
        break;
 8005e74:	e004      	b.n	8005e80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d018      	beq.n	8005eb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	085a      	lsrs	r2, r3, #1
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	441a      	add	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	d908      	bls.n	8005eb4 <UART_SetConfig+0x4a0>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea8:	d204      	bcs.n	8005eb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	e001      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ec4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	00f42400 	.word	0x00f42400

08005ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0320 	and.w	r3, r3, #32
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01a      	beq.n	8005fea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd2:	d10a      	bne.n	8005fea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	605a      	str	r2, [r3, #4]
  }
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006028:	f7fb fc10 	bl	800184c <HAL_GetTick>
 800602c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b08      	cmp	r3, #8
 800603a:	d10e      	bne.n	800605a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800603c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f82d 	bl	80060aa <UART_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e023      	b.n	80060a2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d10e      	bne.n	8006086 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006068:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f817 	bl	80060aa <UART_WaitOnFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e00d      	b.n	80060a2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	603b      	str	r3, [r7, #0]
 80060b6:	4613      	mov	r3, r2
 80060b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ba:	e05e      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c2:	d05a      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c4:	f7fb fbc2 	bl	800184c <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <UART_WaitOnFlagUntilTimeout+0x30>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d11b      	bne.n	8006112 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2220      	movs	r2, #32
 80060fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2220      	movs	r2, #32
 8006104:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e043      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02c      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612e:	d124      	bne.n	800617a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006138:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006148:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0201 	bic.w	r2, r2, #1
 8006158:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e00f      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	bf0c      	ite	eq
 800618a:	2301      	moveq	r3, #1
 800618c:	2300      	movne	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	429a      	cmp	r2, r3
 8006196:	d091      	beq.n	80060bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80061b8:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	679a      	str	r2, [r3, #120]	; 0x78
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d107      	bne.n	800620c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0210 	bic.w	r2, r2, #16
 800620a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d014      	beq.n	800626c <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006258:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006268:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800626a:	e002      	b.n	8006272 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff fb9d 	bl	80059ac <HAL_UART_TxCpltCallback>
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fb99 	bl	80059c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d109      	bne.n	80062d2 <UART_DMAError+0x3c>
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2b21      	cmp	r3, #33	; 0x21
 80062c2:	d106      	bne.n	80062d2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80062cc:	6978      	ldr	r0, [r7, #20]
 80062ce:	f7ff ff68 	bl	80061a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d109      	bne.n	80062f4 <UART_DMAError+0x5e>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b22      	cmp	r3, #34	; 0x22
 80062e4:	d106      	bne.n	80062f4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7ff ff6c 	bl	80061cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fa:	f043 0210 	orr.w	r2, r3, #16
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7ff fb65 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630a:	bf00      	nop
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fb4f 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006354:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7ff fb22 	bl	80059ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <__errno>:
 8006370:	4b01      	ldr	r3, [pc, #4]	; (8006378 <__errno+0x8>)
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	2000001c 	.word	0x2000001c

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f003 fcc6 	bl	8009d20 <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	0800a088 	.word	0x0800a088
 80063b8:	0800a088 	.word	0x0800a088
 80063bc:	0800a088 	.word	0x0800a088
 80063c0:	0800a08c 	.word	0x0800a08c

080063c4 <memset>:
 80063c4:	4402      	add	r2, r0
 80063c6:	4603      	mov	r3, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <__cvt>:
 80063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d6:	ed2d 8b02 	vpush	{d8}
 80063da:	eeb0 8b40 	vmov.f64	d8, d0
 80063de:	b085      	sub	sp, #20
 80063e0:	4617      	mov	r7, r2
 80063e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80063e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80063e6:	ee18 2a90 	vmov	r2, s17
 80063ea:	f025 0520 	bic.w	r5, r5, #32
 80063ee:	2a00      	cmp	r2, #0
 80063f0:	bfb6      	itet	lt
 80063f2:	222d      	movlt	r2, #45	; 0x2d
 80063f4:	2200      	movge	r2, #0
 80063f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80063fa:	2d46      	cmp	r5, #70	; 0x46
 80063fc:	460c      	mov	r4, r1
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	d004      	beq.n	800640c <__cvt+0x38>
 8006402:	2d45      	cmp	r5, #69	; 0x45
 8006404:	d100      	bne.n	8006408 <__cvt+0x34>
 8006406:	3401      	adds	r4, #1
 8006408:	2102      	movs	r1, #2
 800640a:	e000      	b.n	800640e <__cvt+0x3a>
 800640c:	2103      	movs	r1, #3
 800640e:	ab03      	add	r3, sp, #12
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	ab02      	add	r3, sp, #8
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4622      	mov	r2, r4
 8006418:	4633      	mov	r3, r6
 800641a:	eeb0 0b48 	vmov.f64	d0, d8
 800641e:	f001 fd67 	bl	8007ef0 <_dtoa_r>
 8006422:	2d47      	cmp	r5, #71	; 0x47
 8006424:	d101      	bne.n	800642a <__cvt+0x56>
 8006426:	07fb      	lsls	r3, r7, #31
 8006428:	d51e      	bpl.n	8006468 <__cvt+0x94>
 800642a:	2d46      	cmp	r5, #70	; 0x46
 800642c:	eb00 0304 	add.w	r3, r0, r4
 8006430:	d10c      	bne.n	800644c <__cvt+0x78>
 8006432:	7802      	ldrb	r2, [r0, #0]
 8006434:	2a30      	cmp	r2, #48	; 0x30
 8006436:	d107      	bne.n	8006448 <__cvt+0x74>
 8006438:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800643c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006440:	bf1c      	itt	ne
 8006442:	f1c4 0401 	rsbne	r4, r4, #1
 8006446:	6034      	strne	r4, [r6, #0]
 8006448:	6832      	ldr	r2, [r6, #0]
 800644a:	4413      	add	r3, r2
 800644c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006454:	d007      	beq.n	8006466 <__cvt+0x92>
 8006456:	2130      	movs	r1, #48	; 0x30
 8006458:	9a03      	ldr	r2, [sp, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d204      	bcs.n	8006468 <__cvt+0x94>
 800645e:	1c54      	adds	r4, r2, #1
 8006460:	9403      	str	r4, [sp, #12]
 8006462:	7011      	strb	r1, [r2, #0]
 8006464:	e7f8      	b.n	8006458 <__cvt+0x84>
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800646c:	1a1b      	subs	r3, r3, r0
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	b005      	add	sp, #20
 8006472:	ecbd 8b02 	vpop	{d8}
 8006476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006478 <__exponent>:
 8006478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800647a:	2900      	cmp	r1, #0
 800647c:	4604      	mov	r4, r0
 800647e:	bfba      	itte	lt
 8006480:	4249      	neglt	r1, r1
 8006482:	232d      	movlt	r3, #45	; 0x2d
 8006484:	232b      	movge	r3, #43	; 0x2b
 8006486:	2909      	cmp	r1, #9
 8006488:	f804 2b02 	strb.w	r2, [r4], #2
 800648c:	7043      	strb	r3, [r0, #1]
 800648e:	dd20      	ble.n	80064d2 <__exponent+0x5a>
 8006490:	f10d 0307 	add.w	r3, sp, #7
 8006494:	461f      	mov	r7, r3
 8006496:	260a      	movs	r6, #10
 8006498:	fb91 f5f6 	sdiv	r5, r1, r6
 800649c:	fb06 1115 	mls	r1, r6, r5, r1
 80064a0:	3130      	adds	r1, #48	; 0x30
 80064a2:	2d09      	cmp	r5, #9
 80064a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80064ac:	4629      	mov	r1, r5
 80064ae:	dc09      	bgt.n	80064c4 <__exponent+0x4c>
 80064b0:	3130      	adds	r1, #48	; 0x30
 80064b2:	3b02      	subs	r3, #2
 80064b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064b8:	42bb      	cmp	r3, r7
 80064ba:	4622      	mov	r2, r4
 80064bc:	d304      	bcc.n	80064c8 <__exponent+0x50>
 80064be:	1a10      	subs	r0, r2, r0
 80064c0:	b003      	add	sp, #12
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c4:	4613      	mov	r3, r2
 80064c6:	e7e7      	b.n	8006498 <__exponent+0x20>
 80064c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064cc:	f804 2b01 	strb.w	r2, [r4], #1
 80064d0:	e7f2      	b.n	80064b8 <__exponent+0x40>
 80064d2:	2330      	movs	r3, #48	; 0x30
 80064d4:	4419      	add	r1, r3
 80064d6:	7083      	strb	r3, [r0, #2]
 80064d8:	1d02      	adds	r2, r0, #4
 80064da:	70c1      	strb	r1, [r0, #3]
 80064dc:	e7ef      	b.n	80064be <__exponent+0x46>
	...

080064e0 <_printf_float>:
 80064e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e4:	b08d      	sub	sp, #52	; 0x34
 80064e6:	460c      	mov	r4, r1
 80064e8:	4616      	mov	r6, r2
 80064ea:	461f      	mov	r7, r3
 80064ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80064f0:	4605      	mov	r5, r0
 80064f2:	f002 fd75 	bl	8008fe0 <_localeconv_r>
 80064f6:	f8d0 b000 	ldr.w	fp, [r0]
 80064fa:	4658      	mov	r0, fp
 80064fc:	f7f9 fea0 	bl	8000240 <strlen>
 8006500:	2300      	movs	r3, #0
 8006502:	930a      	str	r3, [sp, #40]	; 0x28
 8006504:	f8d8 3000 	ldr.w	r3, [r8]
 8006508:	9005      	str	r0, [sp, #20]
 800650a:	3307      	adds	r3, #7
 800650c:	f023 0307 	bic.w	r3, r3, #7
 8006510:	f103 0108 	add.w	r1, r3, #8
 8006514:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	f8c8 1000 	str.w	r1, [r8]
 800651e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006522:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006526:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80067b0 <_printf_float+0x2d0>
 800652a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800652e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006532:	eeb4 6b47 	vcmp.f64	d6, d7
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	dd24      	ble.n	8006586 <_printf_float+0xa6>
 800653c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006544:	d502      	bpl.n	800654c <_printf_float+0x6c>
 8006546:	232d      	movs	r3, #45	; 0x2d
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800654c:	499a      	ldr	r1, [pc, #616]	; (80067b8 <_printf_float+0x2d8>)
 800654e:	4b9b      	ldr	r3, [pc, #620]	; (80067bc <_printf_float+0x2dc>)
 8006550:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006554:	bf8c      	ite	hi
 8006556:	4688      	movhi	r8, r1
 8006558:	4698      	movls	r8, r3
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	2303      	movs	r3, #3
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	f04f 0a00 	mov.w	sl, #0
 8006568:	9700      	str	r7, [sp, #0]
 800656a:	4633      	mov	r3, r6
 800656c:	aa0b      	add	r2, sp, #44	; 0x2c
 800656e:	4621      	mov	r1, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f000 f9e1 	bl	8006938 <_printf_common>
 8006576:	3001      	adds	r0, #1
 8006578:	f040 8089 	bne.w	800668e <_printf_float+0x1ae>
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	b00d      	add	sp, #52	; 0x34
 8006582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006586:	eeb4 0b40 	vcmp.f64	d0, d0
 800658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658e:	d702      	bvc.n	8006596 <_printf_float+0xb6>
 8006590:	498b      	ldr	r1, [pc, #556]	; (80067c0 <_printf_float+0x2e0>)
 8006592:	4b8c      	ldr	r3, [pc, #560]	; (80067c4 <_printf_float+0x2e4>)
 8006594:	e7dc      	b.n	8006550 <_printf_float+0x70>
 8006596:	6861      	ldr	r1, [r4, #4]
 8006598:	1c4b      	adds	r3, r1, #1
 800659a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800659e:	ab0a      	add	r3, sp, #40	; 0x28
 80065a0:	a809      	add	r0, sp, #36	; 0x24
 80065a2:	d13b      	bne.n	800661c <_printf_float+0x13c>
 80065a4:	2106      	movs	r1, #6
 80065a6:	6061      	str	r1, [r4, #4]
 80065a8:	f04f 0c00 	mov.w	ip, #0
 80065ac:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80065b0:	e9cd 0900 	strd	r0, r9, [sp]
 80065b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065b8:	6022      	str	r2, [r4, #0]
 80065ba:	6861      	ldr	r1, [r4, #4]
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff ff09 	bl	80063d4 <__cvt>
 80065c2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80065c6:	2b47      	cmp	r3, #71	; 0x47
 80065c8:	4680      	mov	r8, r0
 80065ca:	d109      	bne.n	80065e0 <_printf_float+0x100>
 80065cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ce:	1cd8      	adds	r0, r3, #3
 80065d0:	db02      	blt.n	80065d8 <_printf_float+0xf8>
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	dd47      	ble.n	8006668 <_printf_float+0x188>
 80065d8:	f1a9 0902 	sub.w	r9, r9, #2
 80065dc:	fa5f f989 	uxtb.w	r9, r9
 80065e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80065e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065e6:	d824      	bhi.n	8006632 <_printf_float+0x152>
 80065e8:	3901      	subs	r1, #1
 80065ea:	464a      	mov	r2, r9
 80065ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065f0:	9109      	str	r1, [sp, #36]	; 0x24
 80065f2:	f7ff ff41 	bl	8006478 <__exponent>
 80065f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f8:	1813      	adds	r3, r2, r0
 80065fa:	2a01      	cmp	r2, #1
 80065fc:	4682      	mov	sl, r0
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	dc02      	bgt.n	8006608 <_printf_float+0x128>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	07d1      	lsls	r1, r2, #31
 8006606:	d501      	bpl.n	800660c <_printf_float+0x12c>
 8006608:	3301      	adds	r3, #1
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0a9      	beq.n	8006568 <_printf_float+0x88>
 8006614:	232d      	movs	r3, #45	; 0x2d
 8006616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661a:	e7a5      	b.n	8006568 <_printf_float+0x88>
 800661c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006620:	f000 8178 	beq.w	8006914 <_printf_float+0x434>
 8006624:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006628:	d1be      	bne.n	80065a8 <_printf_float+0xc8>
 800662a:	2900      	cmp	r1, #0
 800662c:	d1bc      	bne.n	80065a8 <_printf_float+0xc8>
 800662e:	2101      	movs	r1, #1
 8006630:	e7b9      	b.n	80065a6 <_printf_float+0xc6>
 8006632:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006636:	d119      	bne.n	800666c <_printf_float+0x18c>
 8006638:	2900      	cmp	r1, #0
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	dd0c      	ble.n	8006658 <_printf_float+0x178>
 800663e:	6121      	str	r1, [r4, #16]
 8006640:	b913      	cbnz	r3, 8006648 <_printf_float+0x168>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	07d2      	lsls	r2, r2, #31
 8006646:	d502      	bpl.n	800664e <_printf_float+0x16e>
 8006648:	3301      	adds	r3, #1
 800664a:	440b      	add	r3, r1
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	65a3      	str	r3, [r4, #88]	; 0x58
 8006652:	f04f 0a00 	mov.w	sl, #0
 8006656:	e7d9      	b.n	800660c <_printf_float+0x12c>
 8006658:	b913      	cbnz	r3, 8006660 <_printf_float+0x180>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d0      	lsls	r0, r2, #31
 800665e:	d501      	bpl.n	8006664 <_printf_float+0x184>
 8006660:	3302      	adds	r3, #2
 8006662:	e7f3      	b.n	800664c <_printf_float+0x16c>
 8006664:	2301      	movs	r3, #1
 8006666:	e7f1      	b.n	800664c <_printf_float+0x16c>
 8006668:	f04f 0967 	mov.w	r9, #103	; 0x67
 800666c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006670:	4293      	cmp	r3, r2
 8006672:	db05      	blt.n	8006680 <_printf_float+0x1a0>
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	07d1      	lsls	r1, r2, #31
 800667a:	d5e8      	bpl.n	800664e <_printf_float+0x16e>
 800667c:	3301      	adds	r3, #1
 800667e:	e7e5      	b.n	800664c <_printf_float+0x16c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	bfd4      	ite	le
 8006684:	f1c3 0302 	rsble	r3, r3, #2
 8006688:	2301      	movgt	r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	e7de      	b.n	800664c <_printf_float+0x16c>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	055a      	lsls	r2, r3, #21
 8006692:	d407      	bmi.n	80066a4 <_printf_float+0x1c4>
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	4642      	mov	r2, r8
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	d12a      	bne.n	80066f8 <_printf_float+0x218>
 80066a2:	e76b      	b.n	800657c <_printf_float+0x9c>
 80066a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80066a8:	f240 80de 	bls.w	8006868 <_printf_float+0x388>
 80066ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80066b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	d133      	bne.n	8006722 <_printf_float+0x242>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4a42      	ldr	r2, [pc, #264]	; (80067c8 <_printf_float+0x2e8>)
 80066be:	4631      	mov	r1, r6
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f af59 	beq.w	800657c <_printf_float+0x9c>
 80066ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ce:	429a      	cmp	r2, r3
 80066d0:	db02      	blt.n	80066d8 <_printf_float+0x1f8>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07d8      	lsls	r0, r3, #31
 80066d6:	d50f      	bpl.n	80066f8 <_printf_float+0x218>
 80066d8:	9b05      	ldr	r3, [sp, #20]
 80066da:	465a      	mov	r2, fp
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af4a 	beq.w	800657c <_printf_float+0x9c>
 80066e8:	f04f 0800 	mov.w	r8, #0
 80066ec:	f104 091a 	add.w	r9, r4, #26
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	4543      	cmp	r3, r8
 80066f6:	dc09      	bgt.n	800670c <_printf_float+0x22c>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	079b      	lsls	r3, r3, #30
 80066fc:	f100 8105 	bmi.w	800690a <_printf_float+0x42a>
 8006700:	68e0      	ldr	r0, [r4, #12]
 8006702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006704:	4298      	cmp	r0, r3
 8006706:	bfb8      	it	lt
 8006708:	4618      	movlt	r0, r3
 800670a:	e739      	b.n	8006580 <_printf_float+0xa0>
 800670c:	2301      	movs	r3, #1
 800670e:	464a      	mov	r2, r9
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f af30 	beq.w	800657c <_printf_float+0x9c>
 800671c:	f108 0801 	add.w	r8, r8, #1
 8006720:	e7e6      	b.n	80066f0 <_printf_float+0x210>
 8006722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc2b      	bgt.n	8006780 <_printf_float+0x2a0>
 8006728:	2301      	movs	r3, #1
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <_printf_float+0x2e8>)
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af22 	beq.w	800657c <_printf_float+0x9c>
 8006738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673a:	b923      	cbnz	r3, 8006746 <_printf_float+0x266>
 800673c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673e:	b913      	cbnz	r3, 8006746 <_printf_float+0x266>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07d9      	lsls	r1, r3, #31
 8006744:	d5d8      	bpl.n	80066f8 <_printf_float+0x218>
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	465a      	mov	r2, fp
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f af13 	beq.w	800657c <_printf_float+0x9c>
 8006756:	f04f 0900 	mov.w	r9, #0
 800675a:	f104 0a1a 	add.w	sl, r4, #26
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	425b      	negs	r3, r3
 8006762:	454b      	cmp	r3, r9
 8006764:	dc01      	bgt.n	800676a <_printf_float+0x28a>
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	e795      	b.n	8006696 <_printf_float+0x1b6>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f af01 	beq.w	800657c <_printf_float+0x9c>
 800677a:	f109 0901 	add.w	r9, r9, #1
 800677e:	e7ee      	b.n	800675e <_printf_float+0x27e>
 8006780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006784:	429a      	cmp	r2, r3
 8006786:	bfa8      	it	ge
 8006788:	461a      	movge	r2, r3
 800678a:	2a00      	cmp	r2, #0
 800678c:	4691      	mov	r9, r2
 800678e:	dd07      	ble.n	80067a0 <_printf_float+0x2c0>
 8006790:	4613      	mov	r3, r2
 8006792:	4631      	mov	r1, r6
 8006794:	4642      	mov	r2, r8
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f aeee 	beq.w	800657c <_printf_float+0x9c>
 80067a0:	f104 031a 	add.w	r3, r4, #26
 80067a4:	f04f 0a00 	mov.w	sl, #0
 80067a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	e017      	b.n	80067e0 <_printf_float+0x300>
 80067b0:	ffffffff 	.word	0xffffffff
 80067b4:	7fefffff 	.word	0x7fefffff
 80067b8:	08009d64 	.word	0x08009d64
 80067bc:	08009d60 	.word	0x08009d60
 80067c0:	08009d6c 	.word	0x08009d6c
 80067c4:	08009d68 	.word	0x08009d68
 80067c8:	08009d70 	.word	0x08009d70
 80067cc:	2301      	movs	r3, #1
 80067ce:	9a07      	ldr	r2, [sp, #28]
 80067d0:	4631      	mov	r1, r6
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f aed0 	beq.w	800657c <_printf_float+0x9c>
 80067dc:	f10a 0a01 	add.w	sl, sl, #1
 80067e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067e2:	9306      	str	r3, [sp, #24]
 80067e4:	eba3 0309 	sub.w	r3, r3, r9
 80067e8:	4553      	cmp	r3, sl
 80067ea:	dcef      	bgt.n	80067cc <_printf_float+0x2ec>
 80067ec:	9b06      	ldr	r3, [sp, #24]
 80067ee:	4498      	add	r8, r3
 80067f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067f4:	429a      	cmp	r2, r3
 80067f6:	db15      	blt.n	8006824 <_printf_float+0x344>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	07da      	lsls	r2, r3, #31
 80067fc:	d412      	bmi.n	8006824 <_printf_float+0x344>
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	9a06      	ldr	r2, [sp, #24]
 8006802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006804:	1a9a      	subs	r2, r3, r2
 8006806:	eba3 0a01 	sub.w	sl, r3, r1
 800680a:	4592      	cmp	sl, r2
 800680c:	bfa8      	it	ge
 800680e:	4692      	movge	sl, r2
 8006810:	f1ba 0f00 	cmp.w	sl, #0
 8006814:	dc0e      	bgt.n	8006834 <_printf_float+0x354>
 8006816:	f04f 0800 	mov.w	r8, #0
 800681a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800681e:	f104 091a 	add.w	r9, r4, #26
 8006822:	e019      	b.n	8006858 <_printf_float+0x378>
 8006824:	9b05      	ldr	r3, [sp, #20]
 8006826:	465a      	mov	r2, fp
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	d1e5      	bne.n	80067fe <_printf_float+0x31e>
 8006832:	e6a3      	b.n	800657c <_printf_float+0x9c>
 8006834:	4653      	mov	r3, sl
 8006836:	4642      	mov	r2, r8
 8006838:	4631      	mov	r1, r6
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d1e9      	bne.n	8006816 <_printf_float+0x336>
 8006842:	e69b      	b.n	800657c <_printf_float+0x9c>
 8006844:	2301      	movs	r3, #1
 8006846:	464a      	mov	r2, r9
 8006848:	4631      	mov	r1, r6
 800684a:	4628      	mov	r0, r5
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f ae94 	beq.w	800657c <_printf_float+0x9c>
 8006854:	f108 0801 	add.w	r8, r8, #1
 8006858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800685c:	1a9b      	subs	r3, r3, r2
 800685e:	eba3 030a 	sub.w	r3, r3, sl
 8006862:	4543      	cmp	r3, r8
 8006864:	dcee      	bgt.n	8006844 <_printf_float+0x364>
 8006866:	e747      	b.n	80066f8 <_printf_float+0x218>
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	2a01      	cmp	r2, #1
 800686c:	dc01      	bgt.n	8006872 <_printf_float+0x392>
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d539      	bpl.n	80068e6 <_printf_float+0x406>
 8006872:	2301      	movs	r3, #1
 8006874:	4642      	mov	r2, r8
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae7d 	beq.w	800657c <_printf_float+0x9c>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	465a      	mov	r2, fp
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f108 0801 	add.w	r8, r8, #1
 8006892:	f43f ae73 	beq.w	800657c <_printf_float+0x9c>
 8006896:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800689a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80068a8:	d018      	beq.n	80068dc <_printf_float+0x3fc>
 80068aa:	4642      	mov	r2, r8
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	d10e      	bne.n	80068d4 <_printf_float+0x3f4>
 80068b6:	e661      	b.n	800657c <_printf_float+0x9c>
 80068b8:	2301      	movs	r3, #1
 80068ba:	464a      	mov	r2, r9
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f ae5a 	beq.w	800657c <_printf_float+0x9c>
 80068c8:	f108 0801 	add.w	r8, r8, #1
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4543      	cmp	r3, r8
 80068d2:	dcf1      	bgt.n	80068b8 <_printf_float+0x3d8>
 80068d4:	4653      	mov	r3, sl
 80068d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068da:	e6dd      	b.n	8006698 <_printf_float+0x1b8>
 80068dc:	f04f 0800 	mov.w	r8, #0
 80068e0:	f104 091a 	add.w	r9, r4, #26
 80068e4:	e7f2      	b.n	80068cc <_printf_float+0x3ec>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e7df      	b.n	80068aa <_printf_float+0x3ca>
 80068ea:	2301      	movs	r3, #1
 80068ec:	464a      	mov	r2, r9
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f ae41 	beq.w	800657c <_printf_float+0x9c>
 80068fa:	f108 0801 	add.w	r8, r8, #1
 80068fe:	68e3      	ldr	r3, [r4, #12]
 8006900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006902:	1a9b      	subs	r3, r3, r2
 8006904:	4543      	cmp	r3, r8
 8006906:	dcf0      	bgt.n	80068ea <_printf_float+0x40a>
 8006908:	e6fa      	b.n	8006700 <_printf_float+0x220>
 800690a:	f04f 0800 	mov.w	r8, #0
 800690e:	f104 0919 	add.w	r9, r4, #25
 8006912:	e7f4      	b.n	80068fe <_printf_float+0x41e>
 8006914:	2900      	cmp	r1, #0
 8006916:	f43f ae8a 	beq.w	800662e <_printf_float+0x14e>
 800691a:	f04f 0c00 	mov.w	ip, #0
 800691e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006922:	e9cd 0900 	strd	r0, r9, [sp]
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800692c:	4628      	mov	r0, r5
 800692e:	f7ff fd51 	bl	80063d4 <__cvt>
 8006932:	4680      	mov	r8, r0
 8006934:	e64a      	b.n	80065cc <_printf_float+0xec>
 8006936:	bf00      	nop

08006938 <_printf_common>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	4691      	mov	r9, r2
 800693e:	461f      	mov	r7, r3
 8006940:	688a      	ldr	r2, [r1, #8]
 8006942:	690b      	ldr	r3, [r1, #16]
 8006944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006948:	4293      	cmp	r3, r2
 800694a:	bfb8      	it	lt
 800694c:	4613      	movlt	r3, r2
 800694e:	f8c9 3000 	str.w	r3, [r9]
 8006952:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006956:	4606      	mov	r6, r0
 8006958:	460c      	mov	r4, r1
 800695a:	b112      	cbz	r2, 8006962 <_printf_common+0x2a>
 800695c:	3301      	adds	r3, #1
 800695e:	f8c9 3000 	str.w	r3, [r9]
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	0699      	lsls	r1, r3, #26
 8006966:	bf42      	ittt	mi
 8006968:	f8d9 3000 	ldrmi.w	r3, [r9]
 800696c:	3302      	addmi	r3, #2
 800696e:	f8c9 3000 	strmi.w	r3, [r9]
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	f015 0506 	ands.w	r5, r5, #6
 8006978:	d107      	bne.n	800698a <_printf_common+0x52>
 800697a:	f104 0a19 	add.w	sl, r4, #25
 800697e:	68e3      	ldr	r3, [r4, #12]
 8006980:	f8d9 2000 	ldr.w	r2, [r9]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	42ab      	cmp	r3, r5
 8006988:	dc28      	bgt.n	80069dc <_printf_common+0xa4>
 800698a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	3300      	adds	r3, #0
 8006992:	bf18      	it	ne
 8006994:	2301      	movne	r3, #1
 8006996:	0692      	lsls	r2, r2, #26
 8006998:	d42d      	bmi.n	80069f6 <_printf_common+0xbe>
 800699a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800699e:	4639      	mov	r1, r7
 80069a0:	4630      	mov	r0, r6
 80069a2:	47c0      	blx	r8
 80069a4:	3001      	adds	r0, #1
 80069a6:	d020      	beq.n	80069ea <_printf_common+0xb2>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	68e5      	ldr	r5, [r4, #12]
 80069ac:	f8d9 2000 	ldr.w	r2, [r9]
 80069b0:	f003 0306 	and.w	r3, r3, #6
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	bf08      	it	eq
 80069b8:	1aad      	subeq	r5, r5, r2
 80069ba:	68a3      	ldr	r3, [r4, #8]
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	bf0c      	ite	eq
 80069c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c4:	2500      	movne	r5, #0
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bfc4      	itt	gt
 80069ca:	1a9b      	subgt	r3, r3, r2
 80069cc:	18ed      	addgt	r5, r5, r3
 80069ce:	f04f 0900 	mov.w	r9, #0
 80069d2:	341a      	adds	r4, #26
 80069d4:	454d      	cmp	r5, r9
 80069d6:	d11a      	bne.n	8006a0e <_printf_common+0xd6>
 80069d8:	2000      	movs	r0, #0
 80069da:	e008      	b.n	80069ee <_printf_common+0xb6>
 80069dc:	2301      	movs	r3, #1
 80069de:	4652      	mov	r2, sl
 80069e0:	4639      	mov	r1, r7
 80069e2:	4630      	mov	r0, r6
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d103      	bne.n	80069f2 <_printf_common+0xba>
 80069ea:	f04f 30ff 	mov.w	r0, #4294967295
 80069ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f2:	3501      	adds	r5, #1
 80069f4:	e7c3      	b.n	800697e <_printf_common+0x46>
 80069f6:	18e1      	adds	r1, r4, r3
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	2030      	movs	r0, #48	; 0x30
 80069fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a00:	4422      	add	r2, r4
 8006a02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	e7c5      	b.n	800699a <_printf_common+0x62>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4622      	mov	r2, r4
 8006a12:	4639      	mov	r1, r7
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0e6      	beq.n	80069ea <_printf_common+0xb2>
 8006a1c:	f109 0901 	add.w	r9, r9, #1
 8006a20:	e7d8      	b.n	80069d4 <_printf_common+0x9c>
	...

08006a24 <_printf_i>:
 8006a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	7e09      	ldrb	r1, [r1, #24]
 8006a30:	b085      	sub	sp, #20
 8006a32:	296e      	cmp	r1, #110	; 0x6e
 8006a34:	4617      	mov	r7, r2
 8006a36:	4606      	mov	r6, r0
 8006a38:	4698      	mov	r8, r3
 8006a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a3c:	f000 80b3 	beq.w	8006ba6 <_printf_i+0x182>
 8006a40:	d822      	bhi.n	8006a88 <_printf_i+0x64>
 8006a42:	2963      	cmp	r1, #99	; 0x63
 8006a44:	d036      	beq.n	8006ab4 <_printf_i+0x90>
 8006a46:	d80a      	bhi.n	8006a5e <_printf_i+0x3a>
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	f000 80b9 	beq.w	8006bc0 <_printf_i+0x19c>
 8006a4e:	2958      	cmp	r1, #88	; 0x58
 8006a50:	f000 8083 	beq.w	8006b5a <_printf_i+0x136>
 8006a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006a5c:	e032      	b.n	8006ac4 <_printf_i+0xa0>
 8006a5e:	2964      	cmp	r1, #100	; 0x64
 8006a60:	d001      	beq.n	8006a66 <_printf_i+0x42>
 8006a62:	2969      	cmp	r1, #105	; 0x69
 8006a64:	d1f6      	bne.n	8006a54 <_printf_i+0x30>
 8006a66:	6820      	ldr	r0, [r4, #0]
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	0605      	lsls	r5, r0, #24
 8006a6c:	f103 0104 	add.w	r1, r3, #4
 8006a70:	d52a      	bpl.n	8006ac8 <_printf_i+0xa4>
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	da03      	bge.n	8006a82 <_printf_i+0x5e>
 8006a7a:	222d      	movs	r2, #45	; 0x2d
 8006a7c:	425b      	negs	r3, r3
 8006a7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006a82:	486f      	ldr	r0, [pc, #444]	; (8006c40 <_printf_i+0x21c>)
 8006a84:	220a      	movs	r2, #10
 8006a86:	e039      	b.n	8006afc <_printf_i+0xd8>
 8006a88:	2973      	cmp	r1, #115	; 0x73
 8006a8a:	f000 809d 	beq.w	8006bc8 <_printf_i+0x1a4>
 8006a8e:	d808      	bhi.n	8006aa2 <_printf_i+0x7e>
 8006a90:	296f      	cmp	r1, #111	; 0x6f
 8006a92:	d020      	beq.n	8006ad6 <_printf_i+0xb2>
 8006a94:	2970      	cmp	r1, #112	; 0x70
 8006a96:	d1dd      	bne.n	8006a54 <_printf_i+0x30>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	f043 0320 	orr.w	r3, r3, #32
 8006a9e:	6023      	str	r3, [r4, #0]
 8006aa0:	e003      	b.n	8006aaa <_printf_i+0x86>
 8006aa2:	2975      	cmp	r1, #117	; 0x75
 8006aa4:	d017      	beq.n	8006ad6 <_printf_i+0xb2>
 8006aa6:	2978      	cmp	r1, #120	; 0x78
 8006aa8:	d1d4      	bne.n	8006a54 <_printf_i+0x30>
 8006aaa:	2378      	movs	r3, #120	; 0x78
 8006aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ab0:	4864      	ldr	r0, [pc, #400]	; (8006c44 <_printf_i+0x220>)
 8006ab2:	e055      	b.n	8006b60 <_printf_i+0x13c>
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6011      	str	r1, [r2, #0]
 8006abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e08c      	b.n	8006be2 <_printf_i+0x1be>
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6011      	str	r1, [r2, #0]
 8006acc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ad0:	bf18      	it	ne
 8006ad2:	b21b      	sxthne	r3, r3
 8006ad4:	e7cf      	b.n	8006a76 <_printf_i+0x52>
 8006ad6:	6813      	ldr	r3, [r2, #0]
 8006ad8:	6825      	ldr	r5, [r4, #0]
 8006ada:	1d18      	adds	r0, r3, #4
 8006adc:	6010      	str	r0, [r2, #0]
 8006ade:	0628      	lsls	r0, r5, #24
 8006ae0:	d501      	bpl.n	8006ae6 <_printf_i+0xc2>
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	e002      	b.n	8006aec <_printf_i+0xc8>
 8006ae6:	0668      	lsls	r0, r5, #25
 8006ae8:	d5fb      	bpl.n	8006ae2 <_printf_i+0xbe>
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	4854      	ldr	r0, [pc, #336]	; (8006c40 <_printf_i+0x21c>)
 8006aee:	296f      	cmp	r1, #111	; 0x6f
 8006af0:	bf14      	ite	ne
 8006af2:	220a      	movne	r2, #10
 8006af4:	2208      	moveq	r2, #8
 8006af6:	2100      	movs	r1, #0
 8006af8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006afc:	6865      	ldr	r5, [r4, #4]
 8006afe:	60a5      	str	r5, [r4, #8]
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	f2c0 8095 	blt.w	8006c30 <_printf_i+0x20c>
 8006b06:	6821      	ldr	r1, [r4, #0]
 8006b08:	f021 0104 	bic.w	r1, r1, #4
 8006b0c:	6021      	str	r1, [r4, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d13d      	bne.n	8006b8e <_printf_i+0x16a>
 8006b12:	2d00      	cmp	r5, #0
 8006b14:	f040 808e 	bne.w	8006c34 <_printf_i+0x210>
 8006b18:	4665      	mov	r5, ip
 8006b1a:	2a08      	cmp	r2, #8
 8006b1c:	d10b      	bne.n	8006b36 <_printf_i+0x112>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	07db      	lsls	r3, r3, #31
 8006b22:	d508      	bpl.n	8006b36 <_printf_i+0x112>
 8006b24:	6923      	ldr	r3, [r4, #16]
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	bfde      	ittt	le
 8006b2c:	2330      	movle	r3, #48	; 0x30
 8006b2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b36:	ebac 0305 	sub.w	r3, ip, r5
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	f8cd 8000 	str.w	r8, [sp]
 8006b40:	463b      	mov	r3, r7
 8006b42:	aa03      	add	r2, sp, #12
 8006b44:	4621      	mov	r1, r4
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7ff fef6 	bl	8006938 <_printf_common>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d14d      	bne.n	8006bec <_printf_i+0x1c8>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	b005      	add	sp, #20
 8006b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b5a:	4839      	ldr	r0, [pc, #228]	; (8006c40 <_printf_i+0x21c>)
 8006b5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006b60:	6813      	ldr	r3, [r2, #0]
 8006b62:	6821      	ldr	r1, [r4, #0]
 8006b64:	1d1d      	adds	r5, r3, #4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6015      	str	r5, [r2, #0]
 8006b6a:	060a      	lsls	r2, r1, #24
 8006b6c:	d50b      	bpl.n	8006b86 <_printf_i+0x162>
 8006b6e:	07ca      	lsls	r2, r1, #31
 8006b70:	bf44      	itt	mi
 8006b72:	f041 0120 	orrmi.w	r1, r1, #32
 8006b76:	6021      	strmi	r1, [r4, #0]
 8006b78:	b91b      	cbnz	r3, 8006b82 <_printf_i+0x15e>
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	f022 0220 	bic.w	r2, r2, #32
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	2210      	movs	r2, #16
 8006b84:	e7b7      	b.n	8006af6 <_printf_i+0xd2>
 8006b86:	064d      	lsls	r5, r1, #25
 8006b88:	bf48      	it	mi
 8006b8a:	b29b      	uxthmi	r3, r3
 8006b8c:	e7ef      	b.n	8006b6e <_printf_i+0x14a>
 8006b8e:	4665      	mov	r5, ip
 8006b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b94:	fb02 3311 	mls	r3, r2, r1, r3
 8006b98:	5cc3      	ldrb	r3, [r0, r3]
 8006b9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d1f5      	bne.n	8006b90 <_printf_i+0x16c>
 8006ba4:	e7b9      	b.n	8006b1a <_printf_i+0xf6>
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	6825      	ldr	r5, [r4, #0]
 8006baa:	6961      	ldr	r1, [r4, #20]
 8006bac:	1d18      	adds	r0, r3, #4
 8006bae:	6010      	str	r0, [r2, #0]
 8006bb0:	0628      	lsls	r0, r5, #24
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	d501      	bpl.n	8006bba <_printf_i+0x196>
 8006bb6:	6019      	str	r1, [r3, #0]
 8006bb8:	e002      	b.n	8006bc0 <_printf_i+0x19c>
 8006bba:	066a      	lsls	r2, r5, #25
 8006bbc:	d5fb      	bpl.n	8006bb6 <_printf_i+0x192>
 8006bbe:	8019      	strh	r1, [r3, #0]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6123      	str	r3, [r4, #16]
 8006bc4:	4665      	mov	r5, ip
 8006bc6:	e7b9      	b.n	8006b3c <_printf_i+0x118>
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	1d19      	adds	r1, r3, #4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	681d      	ldr	r5, [r3, #0]
 8006bd0:	6862      	ldr	r2, [r4, #4]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f7f9 fb3b 	bl	8000250 <memchr>
 8006bda:	b108      	cbz	r0, 8006be0 <_printf_i+0x1bc>
 8006bdc:	1b40      	subs	r0, r0, r5
 8006bde:	6060      	str	r0, [r4, #4]
 8006be0:	6863      	ldr	r3, [r4, #4]
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	2300      	movs	r3, #0
 8006be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bea:	e7a7      	b.n	8006b3c <_printf_i+0x118>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	462a      	mov	r2, r5
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	47c0      	blx	r8
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d0aa      	beq.n	8006b50 <_printf_i+0x12c>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	079b      	lsls	r3, r3, #30
 8006bfe:	d413      	bmi.n	8006c28 <_printf_i+0x204>
 8006c00:	68e0      	ldr	r0, [r4, #12]
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	4298      	cmp	r0, r3
 8006c06:	bfb8      	it	lt
 8006c08:	4618      	movlt	r0, r3
 8006c0a:	e7a3      	b.n	8006b54 <_printf_i+0x130>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	464a      	mov	r2, r9
 8006c10:	4639      	mov	r1, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	47c0      	blx	r8
 8006c16:	3001      	adds	r0, #1
 8006c18:	d09a      	beq.n	8006b50 <_printf_i+0x12c>
 8006c1a:	3501      	adds	r5, #1
 8006c1c:	68e3      	ldr	r3, [r4, #12]
 8006c1e:	9a03      	ldr	r2, [sp, #12]
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	42ab      	cmp	r3, r5
 8006c24:	dcf2      	bgt.n	8006c0c <_printf_i+0x1e8>
 8006c26:	e7eb      	b.n	8006c00 <_printf_i+0x1dc>
 8006c28:	2500      	movs	r5, #0
 8006c2a:	f104 0919 	add.w	r9, r4, #25
 8006c2e:	e7f5      	b.n	8006c1c <_printf_i+0x1f8>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1ac      	bne.n	8006b8e <_printf_i+0x16a>
 8006c34:	7803      	ldrb	r3, [r0, #0]
 8006c36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c3e:	e76c      	b.n	8006b1a <_printf_i+0xf6>
 8006c40:	08009d72 	.word	0x08009d72
 8006c44:	08009d83 	.word	0x08009d83

08006c48 <_scanf_float>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	469a      	mov	sl, r3
 8006c4e:	688b      	ldr	r3, [r1, #8]
 8006c50:	4616      	mov	r6, r2
 8006c52:	1e5a      	subs	r2, r3, #1
 8006c54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c58:	b087      	sub	sp, #28
 8006c5a:	bf83      	ittte	hi
 8006c5c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006c60:	189b      	addhi	r3, r3, r2
 8006c62:	9301      	strhi	r3, [sp, #4]
 8006c64:	2300      	movls	r3, #0
 8006c66:	bf86      	itte	hi
 8006c68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c6c:	608b      	strhi	r3, [r1, #8]
 8006c6e:	9301      	strls	r3, [sp, #4]
 8006c70:	680b      	ldr	r3, [r1, #0]
 8006c72:	4688      	mov	r8, r1
 8006c74:	f04f 0b00 	mov.w	fp, #0
 8006c78:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c7c:	f848 3b1c 	str.w	r3, [r8], #28
 8006c80:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006c84:	4607      	mov	r7, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	4645      	mov	r5, r8
 8006c8a:	465a      	mov	r2, fp
 8006c8c:	46d9      	mov	r9, fp
 8006c8e:	f8cd b008 	str.w	fp, [sp, #8]
 8006c92:	68a1      	ldr	r1, [r4, #8]
 8006c94:	b181      	cbz	r1, 8006cb8 <_scanf_float+0x70>
 8006c96:	6833      	ldr	r3, [r6, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b49      	cmp	r3, #73	; 0x49
 8006c9c:	d071      	beq.n	8006d82 <_scanf_float+0x13a>
 8006c9e:	d84d      	bhi.n	8006d3c <_scanf_float+0xf4>
 8006ca0:	2b39      	cmp	r3, #57	; 0x39
 8006ca2:	d840      	bhi.n	8006d26 <_scanf_float+0xde>
 8006ca4:	2b31      	cmp	r3, #49	; 0x31
 8006ca6:	f080 8088 	bcs.w	8006dba <_scanf_float+0x172>
 8006caa:	2b2d      	cmp	r3, #45	; 0x2d
 8006cac:	f000 8090 	beq.w	8006dd0 <_scanf_float+0x188>
 8006cb0:	d815      	bhi.n	8006cde <_scanf_float+0x96>
 8006cb2:	2b2b      	cmp	r3, #43	; 0x2b
 8006cb4:	f000 808c 	beq.w	8006dd0 <_scanf_float+0x188>
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	d003      	beq.n	8006cc6 <_scanf_float+0x7e>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	3a01      	subs	r2, #1
 8006cc8:	2a01      	cmp	r2, #1
 8006cca:	f200 80ea 	bhi.w	8006ea2 <_scanf_float+0x25a>
 8006cce:	4545      	cmp	r5, r8
 8006cd0:	f200 80dc 	bhi.w	8006e8c <_scanf_float+0x244>
 8006cd4:	2601      	movs	r6, #1
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	b007      	add	sp, #28
 8006cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cde:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce0:	f000 809f 	beq.w	8006e22 <_scanf_float+0x1da>
 8006ce4:	2b30      	cmp	r3, #48	; 0x30
 8006ce6:	d1e7      	bne.n	8006cb8 <_scanf_float+0x70>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006cee:	d064      	beq.n	8006dba <_scanf_float+0x172>
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	f109 0901 	add.w	r9, r9, #1
 8006cfc:	b11b      	cbz	r3, 8006d06 <_scanf_float+0xbe>
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	3101      	adds	r1, #1
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	60a1      	str	r1, [r4, #8]
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	60a3      	str	r3, [r4, #8]
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	6873      	ldr	r3, [r6, #4]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	6073      	str	r3, [r6, #4]
 8006d1a:	f340 80ac 	ble.w	8006e76 <_scanf_float+0x22e>
 8006d1e:	6833      	ldr	r3, [r6, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	e7b5      	b.n	8006c92 <_scanf_float+0x4a>
 8006d26:	2b45      	cmp	r3, #69	; 0x45
 8006d28:	f000 8085 	beq.w	8006e36 <_scanf_float+0x1ee>
 8006d2c:	2b46      	cmp	r3, #70	; 0x46
 8006d2e:	d06a      	beq.n	8006e06 <_scanf_float+0x1be>
 8006d30:	2b41      	cmp	r3, #65	; 0x41
 8006d32:	d1c1      	bne.n	8006cb8 <_scanf_float+0x70>
 8006d34:	2a01      	cmp	r2, #1
 8006d36:	d1bf      	bne.n	8006cb8 <_scanf_float+0x70>
 8006d38:	2202      	movs	r2, #2
 8006d3a:	e046      	b.n	8006dca <_scanf_float+0x182>
 8006d3c:	2b65      	cmp	r3, #101	; 0x65
 8006d3e:	d07a      	beq.n	8006e36 <_scanf_float+0x1ee>
 8006d40:	d818      	bhi.n	8006d74 <_scanf_float+0x12c>
 8006d42:	2b54      	cmp	r3, #84	; 0x54
 8006d44:	d066      	beq.n	8006e14 <_scanf_float+0x1cc>
 8006d46:	d811      	bhi.n	8006d6c <_scanf_float+0x124>
 8006d48:	2b4e      	cmp	r3, #78	; 0x4e
 8006d4a:	d1b5      	bne.n	8006cb8 <_scanf_float+0x70>
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	d146      	bne.n	8006dde <_scanf_float+0x196>
 8006d50:	f1b9 0f00 	cmp.w	r9, #0
 8006d54:	d145      	bne.n	8006de2 <_scanf_float+0x19a>
 8006d56:	6821      	ldr	r1, [r4, #0]
 8006d58:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d5c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d60:	d13f      	bne.n	8006de2 <_scanf_float+0x19a>
 8006d62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d66:	6021      	str	r1, [r4, #0]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	e02e      	b.n	8006dca <_scanf_float+0x182>
 8006d6c:	2b59      	cmp	r3, #89	; 0x59
 8006d6e:	d01e      	beq.n	8006dae <_scanf_float+0x166>
 8006d70:	2b61      	cmp	r3, #97	; 0x61
 8006d72:	e7de      	b.n	8006d32 <_scanf_float+0xea>
 8006d74:	2b6e      	cmp	r3, #110	; 0x6e
 8006d76:	d0e9      	beq.n	8006d4c <_scanf_float+0x104>
 8006d78:	d815      	bhi.n	8006da6 <_scanf_float+0x15e>
 8006d7a:	2b66      	cmp	r3, #102	; 0x66
 8006d7c:	d043      	beq.n	8006e06 <_scanf_float+0x1be>
 8006d7e:	2b69      	cmp	r3, #105	; 0x69
 8006d80:	d19a      	bne.n	8006cb8 <_scanf_float+0x70>
 8006d82:	f1bb 0f00 	cmp.w	fp, #0
 8006d86:	d138      	bne.n	8006dfa <_scanf_float+0x1b2>
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	d197      	bne.n	8006cbe <_scanf_float+0x76>
 8006d8e:	6821      	ldr	r1, [r4, #0]
 8006d90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006d94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006d98:	d195      	bne.n	8006cc6 <_scanf_float+0x7e>
 8006d9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d9e:	6021      	str	r1, [r4, #0]
 8006da0:	f04f 0b01 	mov.w	fp, #1
 8006da4:	e011      	b.n	8006dca <_scanf_float+0x182>
 8006da6:	2b74      	cmp	r3, #116	; 0x74
 8006da8:	d034      	beq.n	8006e14 <_scanf_float+0x1cc>
 8006daa:	2b79      	cmp	r3, #121	; 0x79
 8006dac:	d184      	bne.n	8006cb8 <_scanf_float+0x70>
 8006dae:	f1bb 0f07 	cmp.w	fp, #7
 8006db2:	d181      	bne.n	8006cb8 <_scanf_float+0x70>
 8006db4:	f04f 0b08 	mov.w	fp, #8
 8006db8:	e007      	b.n	8006dca <_scanf_float+0x182>
 8006dba:	eb12 0f0b 	cmn.w	r2, fp
 8006dbe:	f47f af7b 	bne.w	8006cb8 <_scanf_float+0x70>
 8006dc2:	6821      	ldr	r1, [r4, #0]
 8006dc4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006dc8:	6021      	str	r1, [r4, #0]
 8006dca:	702b      	strb	r3, [r5, #0]
 8006dcc:	3501      	adds	r5, #1
 8006dce:	e79a      	b.n	8006d06 <_scanf_float+0xbe>
 8006dd0:	6821      	ldr	r1, [r4, #0]
 8006dd2:	0608      	lsls	r0, r1, #24
 8006dd4:	f57f af70 	bpl.w	8006cb8 <_scanf_float+0x70>
 8006dd8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ddc:	e7f4      	b.n	8006dc8 <_scanf_float+0x180>
 8006dde:	2a02      	cmp	r2, #2
 8006de0:	d047      	beq.n	8006e72 <_scanf_float+0x22a>
 8006de2:	f1bb 0f01 	cmp.w	fp, #1
 8006de6:	d003      	beq.n	8006df0 <_scanf_float+0x1a8>
 8006de8:	f1bb 0f04 	cmp.w	fp, #4
 8006dec:	f47f af64 	bne.w	8006cb8 <_scanf_float+0x70>
 8006df0:	f10b 0b01 	add.w	fp, fp, #1
 8006df4:	fa5f fb8b 	uxtb.w	fp, fp
 8006df8:	e7e7      	b.n	8006dca <_scanf_float+0x182>
 8006dfa:	f1bb 0f03 	cmp.w	fp, #3
 8006dfe:	d0f7      	beq.n	8006df0 <_scanf_float+0x1a8>
 8006e00:	f1bb 0f05 	cmp.w	fp, #5
 8006e04:	e7f2      	b.n	8006dec <_scanf_float+0x1a4>
 8006e06:	f1bb 0f02 	cmp.w	fp, #2
 8006e0a:	f47f af55 	bne.w	8006cb8 <_scanf_float+0x70>
 8006e0e:	f04f 0b03 	mov.w	fp, #3
 8006e12:	e7da      	b.n	8006dca <_scanf_float+0x182>
 8006e14:	f1bb 0f06 	cmp.w	fp, #6
 8006e18:	f47f af4e 	bne.w	8006cb8 <_scanf_float+0x70>
 8006e1c:	f04f 0b07 	mov.w	fp, #7
 8006e20:	e7d3      	b.n	8006dca <_scanf_float+0x182>
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	0588      	lsls	r0, r1, #22
 8006e26:	f57f af47 	bpl.w	8006cb8 <_scanf_float+0x70>
 8006e2a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006e2e:	6021      	str	r1, [r4, #0]
 8006e30:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e34:	e7c9      	b.n	8006dca <_scanf_float+0x182>
 8006e36:	6821      	ldr	r1, [r4, #0]
 8006e38:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006e3c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006e40:	d006      	beq.n	8006e50 <_scanf_float+0x208>
 8006e42:	0548      	lsls	r0, r1, #21
 8006e44:	f57f af38 	bpl.w	8006cb8 <_scanf_float+0x70>
 8006e48:	f1b9 0f00 	cmp.w	r9, #0
 8006e4c:	f43f af3b 	beq.w	8006cc6 <_scanf_float+0x7e>
 8006e50:	0588      	lsls	r0, r1, #22
 8006e52:	bf58      	it	pl
 8006e54:	9802      	ldrpl	r0, [sp, #8]
 8006e56:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006e5a:	bf58      	it	pl
 8006e5c:	eba9 0000 	subpl.w	r0, r9, r0
 8006e60:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006e64:	bf58      	it	pl
 8006e66:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006e6a:	6021      	str	r1, [r4, #0]
 8006e6c:	f04f 0900 	mov.w	r9, #0
 8006e70:	e7ab      	b.n	8006dca <_scanf_float+0x182>
 8006e72:	2203      	movs	r2, #3
 8006e74:	e7a9      	b.n	8006dca <_scanf_float+0x182>
 8006e76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e7a:	9205      	str	r2, [sp, #20]
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4638      	mov	r0, r7
 8006e80:	4798      	blx	r3
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f43f af04 	beq.w	8006c92 <_scanf_float+0x4a>
 8006e8a:	e715      	b.n	8006cb8 <_scanf_float+0x70>
 8006e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e94:	4632      	mov	r2, r6
 8006e96:	4638      	mov	r0, r7
 8006e98:	4798      	blx	r3
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	e715      	b.n	8006cce <_scanf_float+0x86>
 8006ea2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006ea6:	2b06      	cmp	r3, #6
 8006ea8:	d80a      	bhi.n	8006ec0 <_scanf_float+0x278>
 8006eaa:	f1bb 0f02 	cmp.w	fp, #2
 8006eae:	d966      	bls.n	8006f7e <_scanf_float+0x336>
 8006eb0:	f1ab 0b03 	sub.w	fp, fp, #3
 8006eb4:	fa5f fb8b 	uxtb.w	fp, fp
 8006eb8:	eba5 0b0b 	sub.w	fp, r5, fp
 8006ebc:	455d      	cmp	r5, fp
 8006ebe:	d149      	bne.n	8006f54 <_scanf_float+0x30c>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	05da      	lsls	r2, r3, #23
 8006ec4:	d51f      	bpl.n	8006f06 <_scanf_float+0x2be>
 8006ec6:	055b      	lsls	r3, r3, #21
 8006ec8:	d466      	bmi.n	8006f98 <_scanf_float+0x350>
 8006eca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	2965      	cmp	r1, #101	; 0x65
 8006ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ed6:	f105 3bff 	add.w	fp, r5, #4294967295
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	d00d      	beq.n	8006efa <_scanf_float+0x2b2>
 8006ede:	2945      	cmp	r1, #69	; 0x45
 8006ee0:	d00b      	beq.n	8006efa <_scanf_float+0x2b2>
 8006ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	4638      	mov	r0, r7
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	f1a5 0b02 	sub.w	fp, r5, #2
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006efe:	4632      	mov	r2, r6
 8006f00:	4638      	mov	r0, r7
 8006f02:	4798      	blx	r3
 8006f04:	465d      	mov	r5, fp
 8006f06:	6826      	ldr	r6, [r4, #0]
 8006f08:	f016 0610 	ands.w	r6, r6, #16
 8006f0c:	d170      	bne.n	8006ff0 <_scanf_float+0x3a8>
 8006f0e:	702e      	strb	r6, [r5, #0]
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1a:	d140      	bne.n	8006f9e <_scanf_float+0x356>
 8006f1c:	9b02      	ldr	r3, [sp, #8]
 8006f1e:	eba9 0303 	sub.w	r3, r9, r3
 8006f22:	425a      	negs	r2, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d147      	bne.n	8006fb8 <_scanf_float+0x370>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	f000 feb3 	bl	8007c98 <_strtod_r>
 8006f32:	6820      	ldr	r0, [r4, #0]
 8006f34:	f8da 3000 	ldr.w	r3, [sl]
 8006f38:	f010 0f02 	tst.w	r0, #2
 8006f3c:	f103 0204 	add.w	r2, r3, #4
 8006f40:	f8ca 2000 	str.w	r2, [sl]
 8006f44:	d043      	beq.n	8006fce <_scanf_float+0x386>
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	ed83 0b00 	vstr	d0, [r3]
 8006f4c:	68e3      	ldr	r3, [r4, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60e3      	str	r3, [r4, #12]
 8006f52:	e6c0      	b.n	8006cd6 <_scanf_float+0x8e>
 8006f54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	4638      	mov	r0, r7
 8006f60:	4798      	blx	r3
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	e7a8      	b.n	8006ebc <_scanf_float+0x274>
 8006f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f6e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f72:	4632      	mov	r2, r6
 8006f74:	4638      	mov	r0, r7
 8006f76:	4798      	blx	r3
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	4545      	cmp	r5, r8
 8006f80:	d8f3      	bhi.n	8006f6a <_scanf_float+0x322>
 8006f82:	e6a7      	b.n	8006cd4 <_scanf_float+0x8c>
 8006f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	4638      	mov	r0, r7
 8006f90:	4798      	blx	r3
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	4545      	cmp	r5, r8
 8006f9a:	d8f3      	bhi.n	8006f84 <_scanf_float+0x33c>
 8006f9c:	e69a      	b.n	8006cd4 <_scanf_float+0x8c>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0c1      	beq.n	8006f28 <_scanf_float+0x2e0>
 8006fa4:	9904      	ldr	r1, [sp, #16]
 8006fa6:	230a      	movs	r3, #10
 8006fa8:	4632      	mov	r2, r6
 8006faa:	3101      	adds	r1, #1
 8006fac:	4638      	mov	r0, r7
 8006fae:	f000 feff 	bl	8007db0 <_strtol_r>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	9d04      	ldr	r5, [sp, #16]
 8006fb6:	1ac2      	subs	r2, r0, r3
 8006fb8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006fbc:	429d      	cmp	r5, r3
 8006fbe:	bf28      	it	cs
 8006fc0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006fc4:	490b      	ldr	r1, [pc, #44]	; (8006ff4 <_scanf_float+0x3ac>)
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f000 f850 	bl	800706c <siprintf>
 8006fcc:	e7ac      	b.n	8006f28 <_scanf_float+0x2e0>
 8006fce:	f010 0004 	ands.w	r0, r0, #4
 8006fd2:	d1b8      	bne.n	8006f46 <_scanf_float+0x2fe>
 8006fd4:	eeb4 0b40 	vcmp.f64	d0, d0
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	d704      	bvc.n	8006fea <_scanf_float+0x3a2>
 8006fe0:	f000 f80a 	bl	8006ff8 <nanf>
 8006fe4:	ed85 0a00 	vstr	s0, [r5]
 8006fe8:	e7b0      	b.n	8006f4c <_scanf_float+0x304>
 8006fea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006fee:	e7f9      	b.n	8006fe4 <_scanf_float+0x39c>
 8006ff0:	2600      	movs	r6, #0
 8006ff2:	e670      	b.n	8006cd6 <_scanf_float+0x8e>
 8006ff4:	08009d94 	.word	0x08009d94

08006ff8 <nanf>:
 8006ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007000 <nanf+0x8>
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	7fc00000 	.word	0x7fc00000

08007004 <sniprintf>:
 8007004:	b40c      	push	{r2, r3}
 8007006:	b530      	push	{r4, r5, lr}
 8007008:	4b17      	ldr	r3, [pc, #92]	; (8007068 <sniprintf+0x64>)
 800700a:	1e0c      	subs	r4, r1, #0
 800700c:	b09d      	sub	sp, #116	; 0x74
 800700e:	681d      	ldr	r5, [r3, #0]
 8007010:	da08      	bge.n	8007024 <sniprintf+0x20>
 8007012:	238b      	movs	r3, #139	; 0x8b
 8007014:	602b      	str	r3, [r5, #0]
 8007016:	f04f 30ff 	mov.w	r0, #4294967295
 800701a:	b01d      	add	sp, #116	; 0x74
 800701c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007020:	b002      	add	sp, #8
 8007022:	4770      	bx	lr
 8007024:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800702c:	bf14      	ite	ne
 800702e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007032:	4623      	moveq	r3, r4
 8007034:	9304      	str	r3, [sp, #16]
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800703c:	9002      	str	r0, [sp, #8]
 800703e:	9006      	str	r0, [sp, #24]
 8007040:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007044:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007046:	ab21      	add	r3, sp, #132	; 0x84
 8007048:	a902      	add	r1, sp, #8
 800704a:	4628      	mov	r0, r5
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	f002 fd09 	bl	8009a64 <_svfiprintf_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	bfbc      	itt	lt
 8007056:	238b      	movlt	r3, #139	; 0x8b
 8007058:	602b      	strlt	r3, [r5, #0]
 800705a:	2c00      	cmp	r4, #0
 800705c:	d0dd      	beq.n	800701a <sniprintf+0x16>
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e7d9      	b.n	800701a <sniprintf+0x16>
 8007066:	bf00      	nop
 8007068:	2000001c 	.word	0x2000001c

0800706c <siprintf>:
 800706c:	b40e      	push	{r1, r2, r3}
 800706e:	b500      	push	{lr}
 8007070:	b09c      	sub	sp, #112	; 0x70
 8007072:	ab1d      	add	r3, sp, #116	; 0x74
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800707c:	4809      	ldr	r0, [pc, #36]	; (80070a4 <siprintf+0x38>)
 800707e:	9107      	str	r1, [sp, #28]
 8007080:	9104      	str	r1, [sp, #16]
 8007082:	4909      	ldr	r1, [pc, #36]	; (80070a8 <siprintf+0x3c>)
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	9105      	str	r1, [sp, #20]
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	a902      	add	r1, sp, #8
 8007090:	f002 fce8 	bl	8009a64 <_svfiprintf_r>
 8007094:	9b02      	ldr	r3, [sp, #8]
 8007096:	2200      	movs	r2, #0
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	b01c      	add	sp, #112	; 0x70
 800709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a0:	b003      	add	sp, #12
 80070a2:	4770      	bx	lr
 80070a4:	2000001c 	.word	0x2000001c
 80070a8:	ffff0208 	.word	0xffff0208

080070ac <strncmp>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	b16a      	cbz	r2, 80070cc <strncmp+0x20>
 80070b0:	3901      	subs	r1, #1
 80070b2:	1884      	adds	r4, r0, r2
 80070b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070bc:	4293      	cmp	r3, r2
 80070be:	d103      	bne.n	80070c8 <strncmp+0x1c>
 80070c0:	42a0      	cmp	r0, r4
 80070c2:	d001      	beq.n	80070c8 <strncmp+0x1c>
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f5      	bne.n	80070b4 <strncmp+0x8>
 80070c8:	1a98      	subs	r0, r3, r2
 80070ca:	bd10      	pop	{r4, pc}
 80070cc:	4610      	mov	r0, r2
 80070ce:	e7fc      	b.n	80070ca <strncmp+0x1e>

080070d0 <sulp>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4604      	mov	r4, r0
 80070d4:	460d      	mov	r5, r1
 80070d6:	4616      	mov	r6, r2
 80070d8:	ec45 4b10 	vmov	d0, r4, r5
 80070dc:	f002 fa7e 	bl	80095dc <__ulp>
 80070e0:	b17e      	cbz	r6, 8007102 <sulp+0x32>
 80070e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	dd09      	ble.n	8007102 <sulp+0x32>
 80070ee:	051b      	lsls	r3, r3, #20
 80070f0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80070f4:	2000      	movs	r0, #0
 80070f6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80070fa:	ec41 0b17 	vmov	d7, r0, r1
 80070fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	0000      	movs	r0, r0
	...

08007108 <_strtod_l>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	ed2d 8b0c 	vpush	{d8-d13}
 8007110:	4698      	mov	r8, r3
 8007112:	b09d      	sub	sp, #116	; 0x74
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4640      	mov	r0, r8
 800711a:	460e      	mov	r6, r1
 800711c:	9214      	str	r2, [sp, #80]	; 0x50
 800711e:	9318      	str	r3, [sp, #96]	; 0x60
 8007120:	f001 ff5b 	bl	8008fda <__localeconv_l>
 8007124:	4681      	mov	r9, r0
 8007126:	6800      	ldr	r0, [r0, #0]
 8007128:	f7f9 f88a 	bl	8000240 <strlen>
 800712c:	f04f 0a00 	mov.w	sl, #0
 8007130:	4607      	mov	r7, r0
 8007132:	f04f 0b00 	mov.w	fp, #0
 8007136:	9617      	str	r6, [sp, #92]	; 0x5c
 8007138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	2a0d      	cmp	r2, #13
 800713e:	d834      	bhi.n	80071aa <_strtod_l+0xa2>
 8007140:	2a09      	cmp	r2, #9
 8007142:	d238      	bcs.n	80071b6 <_strtod_l+0xae>
 8007144:	2a00      	cmp	r2, #0
 8007146:	d040      	beq.n	80071ca <_strtod_l+0xc2>
 8007148:	2300      	movs	r3, #0
 800714a:	930d      	str	r3, [sp, #52]	; 0x34
 800714c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800714e:	782b      	ldrb	r3, [r5, #0]
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	f040 80b3 	bne.w	80072bc <_strtod_l+0x1b4>
 8007156:	786b      	ldrb	r3, [r5, #1]
 8007158:	2b58      	cmp	r3, #88	; 0x58
 800715a:	d001      	beq.n	8007160 <_strtod_l+0x58>
 800715c:	2b78      	cmp	r3, #120	; 0x78
 800715e:	d169      	bne.n	8007234 <_strtod_l+0x12c>
 8007160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	ab18      	add	r3, sp, #96	; 0x60
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	f8cd 8008 	str.w	r8, [sp, #8]
 800716c:	ab19      	add	r3, sp, #100	; 0x64
 800716e:	4a8f      	ldr	r2, [pc, #572]	; (80073ac <_strtod_l+0x2a4>)
 8007170:	a917      	add	r1, sp, #92	; 0x5c
 8007172:	4620      	mov	r0, r4
 8007174:	f001 fc57 	bl	8008a26 <__gethex>
 8007178:	f010 0607 	ands.w	r6, r0, #7
 800717c:	4607      	mov	r7, r0
 800717e:	d005      	beq.n	800718c <_strtod_l+0x84>
 8007180:	2e06      	cmp	r6, #6
 8007182:	d12c      	bne.n	80071de <_strtod_l+0xd6>
 8007184:	3501      	adds	r5, #1
 8007186:	2300      	movs	r3, #0
 8007188:	9517      	str	r5, [sp, #92]	; 0x5c
 800718a:	930d      	str	r3, [sp, #52]	; 0x34
 800718c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 855e 	bne.w	8007c50 <_strtod_l+0xb48>
 8007194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007196:	b1eb      	cbz	r3, 80071d4 <_strtod_l+0xcc>
 8007198:	ec4b ab17 	vmov	d7, sl, fp
 800719c:	eeb1 0b47 	vneg.f64	d0, d7
 80071a0:	b01d      	add	sp, #116	; 0x74
 80071a2:	ecbd 8b0c 	vpop	{d8-d13}
 80071a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071aa:	2a2b      	cmp	r2, #43	; 0x2b
 80071ac:	d015      	beq.n	80071da <_strtod_l+0xd2>
 80071ae:	2a2d      	cmp	r2, #45	; 0x2d
 80071b0:	d004      	beq.n	80071bc <_strtod_l+0xb4>
 80071b2:	2a20      	cmp	r2, #32
 80071b4:	d1c8      	bne.n	8007148 <_strtod_l+0x40>
 80071b6:	3301      	adds	r3, #1
 80071b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80071ba:	e7bd      	b.n	8007138 <_strtod_l+0x30>
 80071bc:	2201      	movs	r2, #1
 80071be:	920d      	str	r2, [sp, #52]	; 0x34
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1c0      	bne.n	800714c <_strtod_l+0x44>
 80071ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 853c 	bne.w	8007c4c <_strtod_l+0xb44>
 80071d4:	ec4b ab10 	vmov	d0, sl, fp
 80071d8:	e7e2      	b.n	80071a0 <_strtod_l+0x98>
 80071da:	2200      	movs	r2, #0
 80071dc:	e7ef      	b.n	80071be <_strtod_l+0xb6>
 80071de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071e0:	b13a      	cbz	r2, 80071f2 <_strtod_l+0xea>
 80071e2:	2135      	movs	r1, #53	; 0x35
 80071e4:	a81a      	add	r0, sp, #104	; 0x68
 80071e6:	f002 faf2 	bl	80097ce <__copybits>
 80071ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071ec:	4620      	mov	r0, r4
 80071ee:	f001 ff5e 	bl	80090ae <_Bfree>
 80071f2:	3e01      	subs	r6, #1
 80071f4:	2e04      	cmp	r6, #4
 80071f6:	d806      	bhi.n	8007206 <_strtod_l+0xfe>
 80071f8:	e8df f006 	tbb	[pc, r6]
 80071fc:	1714030a 	.word	0x1714030a
 8007200:	0a          	.byte	0x0a
 8007201:	00          	.byte	0x00
 8007202:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007206:	073b      	lsls	r3, r7, #28
 8007208:	d5c0      	bpl.n	800718c <_strtod_l+0x84>
 800720a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800720e:	e7bd      	b.n	800718c <_strtod_l+0x84>
 8007210:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007214:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007216:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800721a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800721e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007222:	e7f0      	b.n	8007206 <_strtod_l+0xfe>
 8007224:	f8df b188 	ldr.w	fp, [pc, #392]	; 80073b0 <_strtod_l+0x2a8>
 8007228:	e7ed      	b.n	8007206 <_strtod_l+0xfe>
 800722a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800722e:	f04f 3aff 	mov.w	sl, #4294967295
 8007232:	e7e8      	b.n	8007206 <_strtod_l+0xfe>
 8007234:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	9217      	str	r2, [sp, #92]	; 0x5c
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b30      	cmp	r3, #48	; 0x30
 800723e:	d0f9      	beq.n	8007234 <_strtod_l+0x12c>
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0a3      	beq.n	800718c <_strtod_l+0x84>
 8007244:	2301      	movs	r3, #1
 8007246:	930a      	str	r3, [sp, #40]	; 0x28
 8007248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800724a:	930c      	str	r3, [sp, #48]	; 0x30
 800724c:	2300      	movs	r3, #0
 800724e:	9306      	str	r3, [sp, #24]
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	461d      	mov	r5, r3
 8007254:	220a      	movs	r2, #10
 8007256:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007258:	f890 8000 	ldrb.w	r8, [r0]
 800725c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8007260:	b2d9      	uxtb	r1, r3
 8007262:	2909      	cmp	r1, #9
 8007264:	d92c      	bls.n	80072c0 <_strtod_l+0x1b8>
 8007266:	463a      	mov	r2, r7
 8007268:	f8d9 1000 	ldr.w	r1, [r9]
 800726c:	f7ff ff1e 	bl	80070ac <strncmp>
 8007270:	2800      	cmp	r0, #0
 8007272:	d035      	beq.n	80072e0 <_strtod_l+0x1d8>
 8007274:	2000      	movs	r0, #0
 8007276:	4642      	mov	r2, r8
 8007278:	462b      	mov	r3, r5
 800727a:	4601      	mov	r1, r0
 800727c:	9004      	str	r0, [sp, #16]
 800727e:	2a65      	cmp	r2, #101	; 0x65
 8007280:	d001      	beq.n	8007286 <_strtod_l+0x17e>
 8007282:	2a45      	cmp	r2, #69	; 0x45
 8007284:	d117      	bne.n	80072b6 <_strtod_l+0x1ae>
 8007286:	b923      	cbnz	r3, 8007292 <_strtod_l+0x18a>
 8007288:	b910      	cbnz	r0, 8007290 <_strtod_l+0x188>
 800728a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728c:	2b00      	cmp	r3, #0
 800728e:	d09c      	beq.n	80071ca <_strtod_l+0xc2>
 8007290:	2300      	movs	r3, #0
 8007292:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007294:	1c72      	adds	r2, r6, #1
 8007296:	9217      	str	r2, [sp, #92]	; 0x5c
 8007298:	7872      	ldrb	r2, [r6, #1]
 800729a:	2a2b      	cmp	r2, #43	; 0x2b
 800729c:	f000 8082 	beq.w	80073a4 <_strtod_l+0x29c>
 80072a0:	2a2d      	cmp	r2, #45	; 0x2d
 80072a2:	d079      	beq.n	8007398 <_strtod_l+0x290>
 80072a4:	f04f 0e00 	mov.w	lr, #0
 80072a8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80072ac:	f1bc 0f09 	cmp.w	ip, #9
 80072b0:	f240 8086 	bls.w	80073c0 <_strtod_l+0x2b8>
 80072b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80072b6:	f04f 0800 	mov.w	r8, #0
 80072ba:	e0a8      	b.n	800740e <_strtod_l+0x306>
 80072bc:	2300      	movs	r3, #0
 80072be:	e7c2      	b.n	8007246 <_strtod_l+0x13e>
 80072c0:	2d08      	cmp	r5, #8
 80072c2:	bfd5      	itete	le
 80072c4:	9908      	ldrle	r1, [sp, #32]
 80072c6:	9906      	ldrgt	r1, [sp, #24]
 80072c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80072cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80072d0:	f100 0001 	add.w	r0, r0, #1
 80072d4:	bfd4      	ite	le
 80072d6:	9308      	strle	r3, [sp, #32]
 80072d8:	9306      	strgt	r3, [sp, #24]
 80072da:	3501      	adds	r5, #1
 80072dc:	9017      	str	r0, [sp, #92]	; 0x5c
 80072de:	e7ba      	b.n	8007256 <_strtod_l+0x14e>
 80072e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072e2:	19da      	adds	r2, r3, r7
 80072e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072e6:	5dda      	ldrb	r2, [r3, r7]
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	d038      	beq.n	800735e <_strtod_l+0x256>
 80072ec:	4601      	mov	r1, r0
 80072ee:	462b      	mov	r3, r5
 80072f0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80072f4:	2f09      	cmp	r7, #9
 80072f6:	d913      	bls.n	8007320 <_strtod_l+0x218>
 80072f8:	2701      	movs	r7, #1
 80072fa:	9704      	str	r7, [sp, #16]
 80072fc:	e7bf      	b.n	800727e <_strtod_l+0x176>
 80072fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	9217      	str	r2, [sp, #92]	; 0x5c
 8007304:	785a      	ldrb	r2, [r3, #1]
 8007306:	3001      	adds	r0, #1
 8007308:	2a30      	cmp	r2, #48	; 0x30
 800730a:	d0f8      	beq.n	80072fe <_strtod_l+0x1f6>
 800730c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007310:	2b08      	cmp	r3, #8
 8007312:	f200 84a2 	bhi.w	8007c5a <_strtod_l+0xb52>
 8007316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007318:	930c      	str	r3, [sp, #48]	; 0x30
 800731a:	4601      	mov	r1, r0
 800731c:	2000      	movs	r0, #0
 800731e:	4603      	mov	r3, r0
 8007320:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8007324:	f100 0701 	add.w	r7, r0, #1
 8007328:	d013      	beq.n	8007352 <_strtod_l+0x24a>
 800732a:	4439      	add	r1, r7
 800732c:	eb00 0e03 	add.w	lr, r0, r3
 8007330:	461f      	mov	r7, r3
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	45be      	cmp	lr, r7
 8007338:	d113      	bne.n	8007362 <_strtod_l+0x25a>
 800733a:	181f      	adds	r7, r3, r0
 800733c:	2f08      	cmp	r7, #8
 800733e:	f103 0301 	add.w	r3, r3, #1
 8007342:	4403      	add	r3, r0
 8007344:	dc1d      	bgt.n	8007382 <_strtod_l+0x27a>
 8007346:	9a08      	ldr	r2, [sp, #32]
 8007348:	200a      	movs	r0, #10
 800734a:	fb00 8202 	mla	r2, r0, r2, r8
 800734e:	9208      	str	r2, [sp, #32]
 8007350:	2700      	movs	r7, #0
 8007352:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007354:	1c50      	adds	r0, r2, #1
 8007356:	9017      	str	r0, [sp, #92]	; 0x5c
 8007358:	7852      	ldrb	r2, [r2, #1]
 800735a:	4638      	mov	r0, r7
 800735c:	e7c8      	b.n	80072f0 <_strtod_l+0x1e8>
 800735e:	4628      	mov	r0, r5
 8007360:	e7d2      	b.n	8007308 <_strtod_l+0x200>
 8007362:	2f08      	cmp	r7, #8
 8007364:	f107 0701 	add.w	r7, r7, #1
 8007368:	dc04      	bgt.n	8007374 <_strtod_l+0x26c>
 800736a:	9a08      	ldr	r2, [sp, #32]
 800736c:	fb0c f202 	mul.w	r2, ip, r2
 8007370:	9208      	str	r2, [sp, #32]
 8007372:	e7e0      	b.n	8007336 <_strtod_l+0x22e>
 8007374:	2f10      	cmp	r7, #16
 8007376:	bfde      	ittt	le
 8007378:	9a06      	ldrle	r2, [sp, #24]
 800737a:	fb0c f202 	mulle.w	r2, ip, r2
 800737e:	9206      	strle	r2, [sp, #24]
 8007380:	e7d9      	b.n	8007336 <_strtod_l+0x22e>
 8007382:	2b10      	cmp	r3, #16
 8007384:	bfdf      	itttt	le
 8007386:	9a06      	ldrle	r2, [sp, #24]
 8007388:	200a      	movle	r0, #10
 800738a:	fb00 8202 	mlale	r2, r0, r2, r8
 800738e:	9206      	strle	r2, [sp, #24]
 8007390:	e7de      	b.n	8007350 <_strtod_l+0x248>
 8007392:	2301      	movs	r3, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	e777      	b.n	8007288 <_strtod_l+0x180>
 8007398:	f04f 0e01 	mov.w	lr, #1
 800739c:	1cb2      	adds	r2, r6, #2
 800739e:	9217      	str	r2, [sp, #92]	; 0x5c
 80073a0:	78b2      	ldrb	r2, [r6, #2]
 80073a2:	e781      	b.n	80072a8 <_strtod_l+0x1a0>
 80073a4:	f04f 0e00 	mov.w	lr, #0
 80073a8:	e7f8      	b.n	800739c <_strtod_l+0x294>
 80073aa:	bf00      	nop
 80073ac:	08009d9c 	.word	0x08009d9c
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073b6:	f102 0c01 	add.w	ip, r2, #1
 80073ba:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80073be:	7852      	ldrb	r2, [r2, #1]
 80073c0:	2a30      	cmp	r2, #48	; 0x30
 80073c2:	d0f7      	beq.n	80073b4 <_strtod_l+0x2ac>
 80073c4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80073c8:	f1bc 0f08 	cmp.w	ip, #8
 80073cc:	f63f af73 	bhi.w	80072b6 <_strtod_l+0x1ae>
 80073d0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80073d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073d6:	920e      	str	r2, [sp, #56]	; 0x38
 80073d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073da:	f102 0c01 	add.w	ip, r2, #1
 80073de:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80073e2:	7852      	ldrb	r2, [r2, #1]
 80073e4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80073e8:	f1b9 0f09 	cmp.w	r9, #9
 80073ec:	d939      	bls.n	8007462 <_strtod_l+0x35a>
 80073ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80073f0:	ebac 0c07 	sub.w	ip, ip, r7
 80073f4:	f1bc 0f08 	cmp.w	ip, #8
 80073f8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 80073fc:	dc37      	bgt.n	800746e <_strtod_l+0x366>
 80073fe:	45e0      	cmp	r8, ip
 8007400:	bfa8      	it	ge
 8007402:	46e0      	movge	r8, ip
 8007404:	f1be 0f00 	cmp.w	lr, #0
 8007408:	d001      	beq.n	800740e <_strtod_l+0x306>
 800740a:	f1c8 0800 	rsb	r8, r8, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d151      	bne.n	80074b6 <_strtod_l+0x3ae>
 8007412:	2800      	cmp	r0, #0
 8007414:	f47f aeba 	bne.w	800718c <_strtod_l+0x84>
 8007418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f aeb6 	bne.w	800718c <_strtod_l+0x84>
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f47f aed1 	bne.w	80071ca <_strtod_l+0xc2>
 8007428:	2a4e      	cmp	r2, #78	; 0x4e
 800742a:	d027      	beq.n	800747c <_strtod_l+0x374>
 800742c:	dc21      	bgt.n	8007472 <_strtod_l+0x36a>
 800742e:	2a49      	cmp	r2, #73	; 0x49
 8007430:	f47f aecb 	bne.w	80071ca <_strtod_l+0xc2>
 8007434:	499a      	ldr	r1, [pc, #616]	; (80076a0 <_strtod_l+0x598>)
 8007436:	a817      	add	r0, sp, #92	; 0x5c
 8007438:	f001 fd28 	bl	8008e8c <__match>
 800743c:	2800      	cmp	r0, #0
 800743e:	f43f aec4 	beq.w	80071ca <_strtod_l+0xc2>
 8007442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007444:	4997      	ldr	r1, [pc, #604]	; (80076a4 <_strtod_l+0x59c>)
 8007446:	3b01      	subs	r3, #1
 8007448:	a817      	add	r0, sp, #92	; 0x5c
 800744a:	9317      	str	r3, [sp, #92]	; 0x5c
 800744c:	f001 fd1e 	bl	8008e8c <__match>
 8007450:	b910      	cbnz	r0, 8007458 <_strtod_l+0x350>
 8007452:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007454:	3301      	adds	r3, #1
 8007456:	9317      	str	r3, [sp, #92]	; 0x5c
 8007458:	f8df b260 	ldr.w	fp, [pc, #608]	; 80076bc <_strtod_l+0x5b4>
 800745c:	f04f 0a00 	mov.w	sl, #0
 8007460:	e694      	b.n	800718c <_strtod_l+0x84>
 8007462:	270a      	movs	r7, #10
 8007464:	fb07 2808 	mla	r8, r7, r8, r2
 8007468:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800746c:	e7b4      	b.n	80073d8 <_strtod_l+0x2d0>
 800746e:	46e0      	mov	r8, ip
 8007470:	e7c8      	b.n	8007404 <_strtod_l+0x2fc>
 8007472:	2a69      	cmp	r2, #105	; 0x69
 8007474:	d0de      	beq.n	8007434 <_strtod_l+0x32c>
 8007476:	2a6e      	cmp	r2, #110	; 0x6e
 8007478:	f47f aea7 	bne.w	80071ca <_strtod_l+0xc2>
 800747c:	498a      	ldr	r1, [pc, #552]	; (80076a8 <_strtod_l+0x5a0>)
 800747e:	a817      	add	r0, sp, #92	; 0x5c
 8007480:	f001 fd04 	bl	8008e8c <__match>
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f aea0 	beq.w	80071ca <_strtod_l+0xc2>
 800748a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b28      	cmp	r3, #40	; 0x28
 8007490:	d10e      	bne.n	80074b0 <_strtod_l+0x3a8>
 8007492:	aa1a      	add	r2, sp, #104	; 0x68
 8007494:	4985      	ldr	r1, [pc, #532]	; (80076ac <_strtod_l+0x5a4>)
 8007496:	a817      	add	r0, sp, #92	; 0x5c
 8007498:	f001 fd0c 	bl	8008eb4 <__hexnan>
 800749c:	2805      	cmp	r0, #5
 800749e:	d107      	bne.n	80074b0 <_strtod_l+0x3a8>
 80074a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074a2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80074a6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80074aa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80074ae:	e66d      	b.n	800718c <_strtod_l+0x84>
 80074b0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80076c0 <_strtod_l+0x5b8>
 80074b4:	e7d2      	b.n	800745c <_strtod_l+0x354>
 80074b6:	eddd 7a08 	vldr	s15, [sp, #32]
 80074ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80074be:	eba8 0201 	sub.w	r2, r8, r1
 80074c2:	2d00      	cmp	r5, #0
 80074c4:	bf08      	it	eq
 80074c6:	461d      	moveq	r5, r3
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	9204      	str	r2, [sp, #16]
 80074cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80074d0:	461a      	mov	r2, r3
 80074d2:	bfa8      	it	ge
 80074d4:	2210      	movge	r2, #16
 80074d6:	2b09      	cmp	r3, #9
 80074d8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80074dc:	dc14      	bgt.n	8007508 <_strtod_l+0x400>
 80074de:	9904      	ldr	r1, [sp, #16]
 80074e0:	2900      	cmp	r1, #0
 80074e2:	f43f ae53 	beq.w	800718c <_strtod_l+0x84>
 80074e6:	9904      	ldr	r1, [sp, #16]
 80074e8:	dd72      	ble.n	80075d0 <_strtod_l+0x4c8>
 80074ea:	2916      	cmp	r1, #22
 80074ec:	dc5a      	bgt.n	80075a4 <_strtod_l+0x49c>
 80074ee:	4970      	ldr	r1, [pc, #448]	; (80076b0 <_strtod_l+0x5a8>)
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074f6:	ed91 7b00 	vldr	d7, [r1]
 80074fa:	ec4b ab16 	vmov	d6, sl, fp
 80074fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007502:	ec5b ab17 	vmov	sl, fp, d7
 8007506:	e641      	b.n	800718c <_strtod_l+0x84>
 8007508:	4969      	ldr	r1, [pc, #420]	; (80076b0 <_strtod_l+0x5a8>)
 800750a:	eddd 7a06 	vldr	s15, [sp, #24]
 800750e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007512:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007516:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800751a:	2b0f      	cmp	r3, #15
 800751c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007520:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007524:	ec5b ab17 	vmov	sl, fp, d7
 8007528:	ddd9      	ble.n	80074de <_strtod_l+0x3d6>
 800752a:	9904      	ldr	r1, [sp, #16]
 800752c:	1a9a      	subs	r2, r3, r2
 800752e:	440a      	add	r2, r1
 8007530:	2a00      	cmp	r2, #0
 8007532:	f340 8096 	ble.w	8007662 <_strtod_l+0x55a>
 8007536:	f012 000f 	ands.w	r0, r2, #15
 800753a:	d00a      	beq.n	8007552 <_strtod_l+0x44a>
 800753c:	495c      	ldr	r1, [pc, #368]	; (80076b0 <_strtod_l+0x5a8>)
 800753e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007542:	ed91 7b00 	vldr	d7, [r1]
 8007546:	ec4b ab16 	vmov	d6, sl, fp
 800754a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800754e:	ec5b ab17 	vmov	sl, fp, d7
 8007552:	f032 020f 	bics.w	r2, r2, #15
 8007556:	d072      	beq.n	800763e <_strtod_l+0x536>
 8007558:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800755c:	dd45      	ble.n	80075ea <_strtod_l+0x4e2>
 800755e:	2500      	movs	r5, #0
 8007560:	46a8      	mov	r8, r5
 8007562:	9506      	str	r5, [sp, #24]
 8007564:	46a9      	mov	r9, r5
 8007566:	2322      	movs	r3, #34	; 0x22
 8007568:	f8df b150 	ldr.w	fp, [pc, #336]	; 80076bc <_strtod_l+0x5b4>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	f04f 0a00 	mov.w	sl, #0
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f43f ae09 	beq.w	800718c <_strtod_l+0x84>
 800757a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800757c:	4620      	mov	r0, r4
 800757e:	f001 fd96 	bl	80090ae <_Bfree>
 8007582:	4649      	mov	r1, r9
 8007584:	4620      	mov	r0, r4
 8007586:	f001 fd92 	bl	80090ae <_Bfree>
 800758a:	4641      	mov	r1, r8
 800758c:	4620      	mov	r0, r4
 800758e:	f001 fd8e 	bl	80090ae <_Bfree>
 8007592:	9906      	ldr	r1, [sp, #24]
 8007594:	4620      	mov	r0, r4
 8007596:	f001 fd8a 	bl	80090ae <_Bfree>
 800759a:	4629      	mov	r1, r5
 800759c:	4620      	mov	r0, r4
 800759e:	f001 fd86 	bl	80090ae <_Bfree>
 80075a2:	e5f3      	b.n	800718c <_strtod_l+0x84>
 80075a4:	9804      	ldr	r0, [sp, #16]
 80075a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80075aa:	4281      	cmp	r1, r0
 80075ac:	dbbd      	blt.n	800752a <_strtod_l+0x422>
 80075ae:	4a40      	ldr	r2, [pc, #256]	; (80076b0 <_strtod_l+0x5a8>)
 80075b0:	f1c3 030f 	rsb	r3, r3, #15
 80075b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80075b8:	ed91 7b00 	vldr	d7, [r1]
 80075bc:	ec4b ab16 	vmov	d6, sl, fp
 80075c0:	1ac3      	subs	r3, r0, r3
 80075c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80075c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075ca:	ed92 6b00 	vldr	d6, [r2]
 80075ce:	e796      	b.n	80074fe <_strtod_l+0x3f6>
 80075d0:	3116      	adds	r1, #22
 80075d2:	dbaa      	blt.n	800752a <_strtod_l+0x422>
 80075d4:	4936      	ldr	r1, [pc, #216]	; (80076b0 <_strtod_l+0x5a8>)
 80075d6:	9b04      	ldr	r3, [sp, #16]
 80075d8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80075dc:	ed91 7b00 	vldr	d7, [r1]
 80075e0:	ec4b ab16 	vmov	d6, sl, fp
 80075e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075e8:	e78b      	b.n	8007502 <_strtod_l+0x3fa>
 80075ea:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80075ee:	2000      	movs	r0, #0
 80075f0:	4e30      	ldr	r6, [pc, #192]	; (80076b4 <_strtod_l+0x5ac>)
 80075f2:	1112      	asrs	r2, r2, #4
 80075f4:	4601      	mov	r1, r0
 80075f6:	2a01      	cmp	r2, #1
 80075f8:	dc23      	bgt.n	8007642 <_strtod_l+0x53a>
 80075fa:	b108      	cbz	r0, 8007600 <_strtod_l+0x4f8>
 80075fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007600:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <_strtod_l+0x5ac>)
 8007602:	482d      	ldr	r0, [pc, #180]	; (80076b8 <_strtod_l+0x5b0>)
 8007604:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007608:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800760c:	ed91 7b00 	vldr	d7, [r1]
 8007610:	ec4b ab16 	vmov	d6, sl, fp
 8007614:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007618:	ed8d 7b06 	vstr	d7, [sp, #24]
 800761c:	9907      	ldr	r1, [sp, #28]
 800761e:	4a27      	ldr	r2, [pc, #156]	; (80076bc <_strtod_l+0x5b4>)
 8007620:	400a      	ands	r2, r1
 8007622:	4282      	cmp	r2, r0
 8007624:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007628:	d899      	bhi.n	800755e <_strtod_l+0x456>
 800762a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800762e:	4282      	cmp	r2, r0
 8007630:	bf86      	itte	hi
 8007632:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80076c4 <_strtod_l+0x5bc>
 8007636:	f04f 3aff 	movhi.w	sl, #4294967295
 800763a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800763e:	2700      	movs	r7, #0
 8007640:	e070      	b.n	8007724 <_strtod_l+0x61c>
 8007642:	07d7      	lsls	r7, r2, #31
 8007644:	d50a      	bpl.n	800765c <_strtod_l+0x554>
 8007646:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800764a:	ed90 7b00 	vldr	d7, [r0]
 800764e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8007652:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800765a:	2001      	movs	r0, #1
 800765c:	3101      	adds	r1, #1
 800765e:	1052      	asrs	r2, r2, #1
 8007660:	e7c9      	b.n	80075f6 <_strtod_l+0x4ee>
 8007662:	d0ec      	beq.n	800763e <_strtod_l+0x536>
 8007664:	4252      	negs	r2, r2
 8007666:	f012 000f 	ands.w	r0, r2, #15
 800766a:	d00a      	beq.n	8007682 <_strtod_l+0x57a>
 800766c:	4910      	ldr	r1, [pc, #64]	; (80076b0 <_strtod_l+0x5a8>)
 800766e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007672:	ed91 7b00 	vldr	d7, [r1]
 8007676:	ec4b ab16 	vmov	d6, sl, fp
 800767a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800767e:	ec5b ab17 	vmov	sl, fp, d7
 8007682:	1112      	asrs	r2, r2, #4
 8007684:	d0db      	beq.n	800763e <_strtod_l+0x536>
 8007686:	2a1f      	cmp	r2, #31
 8007688:	dd1e      	ble.n	80076c8 <_strtod_l+0x5c0>
 800768a:	2500      	movs	r5, #0
 800768c:	46a8      	mov	r8, r5
 800768e:	9506      	str	r5, [sp, #24]
 8007690:	46a9      	mov	r9, r5
 8007692:	2322      	movs	r3, #34	; 0x22
 8007694:	f04f 0a00 	mov.w	sl, #0
 8007698:	f04f 0b00 	mov.w	fp, #0
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	e768      	b.n	8007572 <_strtod_l+0x46a>
 80076a0:	08009d65 	.word	0x08009d65
 80076a4:	08009df3 	.word	0x08009df3
 80076a8:	08009d6d 	.word	0x08009d6d
 80076ac:	08009db0 	.word	0x08009db0
 80076b0:	08009e98 	.word	0x08009e98
 80076b4:	08009e70 	.word	0x08009e70
 80076b8:	7ca00000 	.word	0x7ca00000
 80076bc:	7ff00000 	.word	0x7ff00000
 80076c0:	fff80000 	.word	0xfff80000
 80076c4:	7fefffff 	.word	0x7fefffff
 80076c8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80076cc:	f012 0710 	ands.w	r7, r2, #16
 80076d0:	49ab      	ldr	r1, [pc, #684]	; (8007980 <_strtod_l+0x878>)
 80076d2:	bf18      	it	ne
 80076d4:	276a      	movne	r7, #106	; 0x6a
 80076d6:	2000      	movs	r0, #0
 80076d8:	2a00      	cmp	r2, #0
 80076da:	f300 8113 	bgt.w	8007904 <_strtod_l+0x7fc>
 80076de:	b108      	cbz	r0, 80076e4 <_strtod_l+0x5dc>
 80076e0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80076e4:	b1bf      	cbz	r7, 8007716 <_strtod_l+0x60e>
 80076e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80076ea:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	4659      	mov	r1, fp
 80076f2:	dd10      	ble.n	8007716 <_strtod_l+0x60e>
 80076f4:	2a1f      	cmp	r2, #31
 80076f6:	f340 8113 	ble.w	8007920 <_strtod_l+0x818>
 80076fa:	2a34      	cmp	r2, #52	; 0x34
 80076fc:	bfde      	ittt	le
 80076fe:	3a20      	suble	r2, #32
 8007700:	f04f 30ff 	movle.w	r0, #4294967295
 8007704:	fa00 f202 	lslle.w	r2, r0, r2
 8007708:	f04f 0a00 	mov.w	sl, #0
 800770c:	bfcc      	ite	gt
 800770e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007712:	ea02 0b01 	andle.w	fp, r2, r1
 8007716:	ec4b ab17 	vmov	d7, sl, fp
 800771a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d0b2      	beq.n	800768a <_strtod_l+0x582>
 8007724:	9a08      	ldr	r2, [sp, #32]
 8007726:	9200      	str	r2, [sp, #0]
 8007728:	990c      	ldr	r1, [sp, #48]	; 0x30
 800772a:	462a      	mov	r2, r5
 800772c:	4620      	mov	r0, r4
 800772e:	f001 fd10 	bl	8009152 <__s2b>
 8007732:	9006      	str	r0, [sp, #24]
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f af12 	beq.w	800755e <_strtod_l+0x456>
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	2a00      	cmp	r2, #0
 8007740:	f1c3 0300 	rsb	r3, r3, #0
 8007744:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8007968 <_strtod_l+0x860>
 8007748:	bfa8      	it	ge
 800774a:	2300      	movge	r3, #0
 800774c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8007970 <_strtod_l+0x868>
 8007750:	ed9f bb89 	vldr	d11, [pc, #548]	; 8007978 <_strtod_l+0x870>
 8007754:	930e      	str	r3, [sp, #56]	; 0x38
 8007756:	2500      	movs	r5, #0
 8007758:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800775c:	9310      	str	r3, [sp, #64]	; 0x40
 800775e:	46a8      	mov	r8, r5
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	4620      	mov	r0, r4
 8007764:	6859      	ldr	r1, [r3, #4]
 8007766:	f001 fc6e 	bl	8009046 <_Balloc>
 800776a:	4681      	mov	r9, r0
 800776c:	2800      	cmp	r0, #0
 800776e:	f43f aefa 	beq.w	8007566 <_strtod_l+0x45e>
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	3202      	adds	r2, #2
 8007778:	f103 010c 	add.w	r1, r3, #12
 800777c:	0092      	lsls	r2, r2, #2
 800777e:	300c      	adds	r0, #12
 8007780:	f001 fc56 	bl	8009030 <memcpy>
 8007784:	aa1a      	add	r2, sp, #104	; 0x68
 8007786:	a919      	add	r1, sp, #100	; 0x64
 8007788:	ec4b ab10 	vmov	d0, sl, fp
 800778c:	4620      	mov	r0, r4
 800778e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007792:	f001 ff99 	bl	80096c8 <__d2b>
 8007796:	9018      	str	r0, [sp, #96]	; 0x60
 8007798:	2800      	cmp	r0, #0
 800779a:	f43f aee4 	beq.w	8007566 <_strtod_l+0x45e>
 800779e:	2101      	movs	r1, #1
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 fd62 	bl	800926a <__i2b>
 80077a6:	4680      	mov	r8, r0
 80077a8:	2800      	cmp	r0, #0
 80077aa:	f43f aedc 	beq.w	8007566 <_strtod_l+0x45e>
 80077ae:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80077b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	bfb1      	iteee	lt
 80077b6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80077b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80077ba:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80077bc:	18f3      	addge	r3, r6, r3
 80077be:	bfba      	itte	lt
 80077c0:	1b98      	sublt	r0, r3, r6
 80077c2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80077c4:	9308      	strge	r3, [sp, #32]
 80077c6:	eba6 0607 	sub.w	r6, r6, r7
 80077ca:	bfb8      	it	lt
 80077cc:	9308      	strlt	r3, [sp, #32]
 80077ce:	4416      	add	r6, r2
 80077d0:	4b6c      	ldr	r3, [pc, #432]	; (8007984 <_strtod_l+0x87c>)
 80077d2:	3e01      	subs	r6, #1
 80077d4:	429e      	cmp	r6, r3
 80077d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077da:	f280 80b4 	bge.w	8007946 <_strtod_l+0x83e>
 80077de:	1b9b      	subs	r3, r3, r6
 80077e0:	2b1f      	cmp	r3, #31
 80077e2:	eba2 0203 	sub.w	r2, r2, r3
 80077e6:	f04f 0101 	mov.w	r1, #1
 80077ea:	f300 80a0 	bgt.w	800792e <_strtod_l+0x826>
 80077ee:	fa01 f303 	lsl.w	r3, r1, r3
 80077f2:	9311      	str	r3, [sp, #68]	; 0x44
 80077f4:	2300      	movs	r3, #0
 80077f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	4413      	add	r3, r2
 80077fc:	4402      	add	r2, r0
 80077fe:	18be      	adds	r6, r7, r2
 8007800:	9a08      	ldr	r2, [sp, #32]
 8007802:	429a      	cmp	r2, r3
 8007804:	bfa8      	it	ge
 8007806:	461a      	movge	r2, r3
 8007808:	42b2      	cmp	r2, r6
 800780a:	bfa8      	it	ge
 800780c:	4632      	movge	r2, r6
 800780e:	2a00      	cmp	r2, #0
 8007810:	dd04      	ble.n	800781c <_strtod_l+0x714>
 8007812:	9908      	ldr	r1, [sp, #32]
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	1ab6      	subs	r6, r6, r2
 8007818:	1a8a      	subs	r2, r1, r2
 800781a:	9208      	str	r2, [sp, #32]
 800781c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800781e:	b1c2      	cbz	r2, 8007852 <_strtod_l+0x74a>
 8007820:	4641      	mov	r1, r8
 8007822:	4620      	mov	r0, r4
 8007824:	9315      	str	r3, [sp, #84]	; 0x54
 8007826:	f001 fdbf 	bl	80093a8 <__pow5mult>
 800782a:	4680      	mov	r8, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	f43f ae9a 	beq.w	8007566 <_strtod_l+0x45e>
 8007832:	4601      	mov	r1, r0
 8007834:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007836:	4620      	mov	r0, r4
 8007838:	f001 fd20 	bl	800927c <__multiply>
 800783c:	900c      	str	r0, [sp, #48]	; 0x30
 800783e:	2800      	cmp	r0, #0
 8007840:	f43f ae91 	beq.w	8007566 <_strtod_l+0x45e>
 8007844:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007846:	4620      	mov	r0, r4
 8007848:	f001 fc31 	bl	80090ae <_Bfree>
 800784c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800784e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007850:	9218      	str	r2, [sp, #96]	; 0x60
 8007852:	2b00      	cmp	r3, #0
 8007854:	dc7c      	bgt.n	8007950 <_strtod_l+0x848>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	dd08      	ble.n	800786e <_strtod_l+0x766>
 800785c:	4649      	mov	r1, r9
 800785e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007860:	4620      	mov	r0, r4
 8007862:	f001 fda1 	bl	80093a8 <__pow5mult>
 8007866:	4681      	mov	r9, r0
 8007868:	2800      	cmp	r0, #0
 800786a:	f43f ae7c 	beq.w	8007566 <_strtod_l+0x45e>
 800786e:	2e00      	cmp	r6, #0
 8007870:	dd08      	ble.n	8007884 <_strtod_l+0x77c>
 8007872:	4649      	mov	r1, r9
 8007874:	4632      	mov	r2, r6
 8007876:	4620      	mov	r0, r4
 8007878:	f001 fde4 	bl	8009444 <__lshift>
 800787c:	4681      	mov	r9, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f ae71 	beq.w	8007566 <_strtod_l+0x45e>
 8007884:	9b08      	ldr	r3, [sp, #32]
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd08      	ble.n	800789c <_strtod_l+0x794>
 800788a:	4641      	mov	r1, r8
 800788c:	461a      	mov	r2, r3
 800788e:	4620      	mov	r0, r4
 8007890:	f001 fdd8 	bl	8009444 <__lshift>
 8007894:	4680      	mov	r8, r0
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f ae65 	beq.w	8007566 <_strtod_l+0x45e>
 800789c:	464a      	mov	r2, r9
 800789e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fe3d 	bl	8009520 <__mdiff>
 80078a6:	4605      	mov	r5, r0
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f43f ae5c 	beq.w	8007566 <_strtod_l+0x45e>
 80078ae:	68c3      	ldr	r3, [r0, #12]
 80078b0:	930c      	str	r3, [sp, #48]	; 0x30
 80078b2:	2300      	movs	r3, #0
 80078b4:	60c3      	str	r3, [r0, #12]
 80078b6:	4641      	mov	r1, r8
 80078b8:	f001 fe18 	bl	80094ec <__mcmp>
 80078bc:	2800      	cmp	r0, #0
 80078be:	da63      	bge.n	8007988 <_strtod_l+0x880>
 80078c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078c2:	b9e3      	cbnz	r3, 80078fe <_strtod_l+0x7f6>
 80078c4:	f1ba 0f00 	cmp.w	sl, #0
 80078c8:	d119      	bne.n	80078fe <_strtod_l+0x7f6>
 80078ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ce:	b9b3      	cbnz	r3, 80078fe <_strtod_l+0x7f6>
 80078d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078d4:	0d1b      	lsrs	r3, r3, #20
 80078d6:	051b      	lsls	r3, r3, #20
 80078d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80078dc:	d90f      	bls.n	80078fe <_strtod_l+0x7f6>
 80078de:	696b      	ldr	r3, [r5, #20]
 80078e0:	b913      	cbnz	r3, 80078e8 <_strtod_l+0x7e0>
 80078e2:	692b      	ldr	r3, [r5, #16]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	dd0a      	ble.n	80078fe <_strtod_l+0x7f6>
 80078e8:	4629      	mov	r1, r5
 80078ea:	2201      	movs	r2, #1
 80078ec:	4620      	mov	r0, r4
 80078ee:	f001 fda9 	bl	8009444 <__lshift>
 80078f2:	4641      	mov	r1, r8
 80078f4:	4605      	mov	r5, r0
 80078f6:	f001 fdf9 	bl	80094ec <__mcmp>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	dc75      	bgt.n	80079ea <_strtod_l+0x8e2>
 80078fe:	2f00      	cmp	r7, #0
 8007900:	d17f      	bne.n	8007a02 <_strtod_l+0x8fa>
 8007902:	e63a      	b.n	800757a <_strtod_l+0x472>
 8007904:	07d6      	lsls	r6, r2, #31
 8007906:	d508      	bpl.n	800791a <_strtod_l+0x812>
 8007908:	ed9d 6b06 	vldr	d6, [sp, #24]
 800790c:	ed91 7b00 	vldr	d7, [r1]
 8007910:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007918:	2001      	movs	r0, #1
 800791a:	1052      	asrs	r2, r2, #1
 800791c:	3108      	adds	r1, #8
 800791e:	e6db      	b.n	80076d8 <_strtod_l+0x5d0>
 8007920:	f04f 31ff 	mov.w	r1, #4294967295
 8007924:	fa01 f202 	lsl.w	r2, r1, r2
 8007928:	ea02 0a0a 	and.w	sl, r2, sl
 800792c:	e6f3      	b.n	8007716 <_strtod_l+0x60e>
 800792e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007932:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007936:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800793a:	36e2      	adds	r6, #226	; 0xe2
 800793c:	fa01 f306 	lsl.w	r3, r1, r6
 8007940:	930f      	str	r3, [sp, #60]	; 0x3c
 8007942:	9111      	str	r1, [sp, #68]	; 0x44
 8007944:	e758      	b.n	80077f8 <_strtod_l+0x6f0>
 8007946:	2300      	movs	r3, #0
 8007948:	930f      	str	r3, [sp, #60]	; 0x3c
 800794a:	2301      	movs	r3, #1
 800794c:	9311      	str	r3, [sp, #68]	; 0x44
 800794e:	e753      	b.n	80077f8 <_strtod_l+0x6f0>
 8007950:	461a      	mov	r2, r3
 8007952:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007954:	4620      	mov	r0, r4
 8007956:	f001 fd75 	bl	8009444 <__lshift>
 800795a:	9018      	str	r0, [sp, #96]	; 0x60
 800795c:	2800      	cmp	r0, #0
 800795e:	f47f af7a 	bne.w	8007856 <_strtod_l+0x74e>
 8007962:	e600      	b.n	8007566 <_strtod_l+0x45e>
 8007964:	f3af 8000 	nop.w
 8007968:	94a03595 	.word	0x94a03595
 800796c:	3fdfffff 	.word	0x3fdfffff
 8007970:	35afe535 	.word	0x35afe535
 8007974:	3fe00000 	.word	0x3fe00000
 8007978:	94a03595 	.word	0x94a03595
 800797c:	3fcfffff 	.word	0x3fcfffff
 8007980:	08009dc8 	.word	0x08009dc8
 8007984:	fffffc02 	.word	0xfffffc02
 8007988:	f8cd b020 	str.w	fp, [sp, #32]
 800798c:	f040 8085 	bne.w	8007a9a <_strtod_l+0x992>
 8007990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007996:	b322      	cbz	r2, 80079e2 <_strtod_l+0x8da>
 8007998:	4ab7      	ldr	r2, [pc, #732]	; (8007c78 <_strtod_l+0xb70>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d154      	bne.n	8007a48 <_strtod_l+0x940>
 800799e:	4651      	mov	r1, sl
 80079a0:	b1e7      	cbz	r7, 80079dc <_strtod_l+0x8d4>
 80079a2:	4bb6      	ldr	r3, [pc, #728]	; (8007c7c <_strtod_l+0xb74>)
 80079a4:	465a      	mov	r2, fp
 80079a6:	4013      	ands	r3, r2
 80079a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	d803      	bhi.n	80079ba <_strtod_l+0x8b2>
 80079b2:	0d1b      	lsrs	r3, r3, #20
 80079b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079b8:	409a      	lsls	r2, r3
 80079ba:	4291      	cmp	r1, r2
 80079bc:	d144      	bne.n	8007a48 <_strtod_l+0x940>
 80079be:	4bb0      	ldr	r3, [pc, #704]	; (8007c80 <_strtod_l+0xb78>)
 80079c0:	9a08      	ldr	r2, [sp, #32]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d102      	bne.n	80079cc <_strtod_l+0x8c4>
 80079c6:	3101      	adds	r1, #1
 80079c8:	f43f adcd 	beq.w	8007566 <_strtod_l+0x45e>
 80079cc:	4bab      	ldr	r3, [pc, #684]	; (8007c7c <_strtod_l+0xb74>)
 80079ce:	9a08      	ldr	r2, [sp, #32]
 80079d0:	401a      	ands	r2, r3
 80079d2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	e790      	b.n	80078fe <_strtod_l+0x7f6>
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e7eb      	b.n	80079ba <_strtod_l+0x8b2>
 80079e2:	bb8b      	cbnz	r3, 8007a48 <_strtod_l+0x940>
 80079e4:	f1ba 0f00 	cmp.w	sl, #0
 80079e8:	d12e      	bne.n	8007a48 <_strtod_l+0x940>
 80079ea:	465b      	mov	r3, fp
 80079ec:	4aa3      	ldr	r2, [pc, #652]	; (8007c7c <_strtod_l+0xb74>)
 80079ee:	b30f      	cbz	r7, 8007a34 <_strtod_l+0x92c>
 80079f0:	ea02 010b 	and.w	r1, r2, fp
 80079f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079f8:	dc1c      	bgt.n	8007a34 <_strtod_l+0x92c>
 80079fa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079fe:	f77f ae48 	ble.w	8007692 <_strtod_l+0x58a>
 8007a02:	4aa0      	ldr	r2, [pc, #640]	; (8007c84 <_strtod_l+0xb7c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8007a0a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8007a0e:	ec4b ab17 	vmov	d7, sl, fp
 8007a12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a16:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a1a:	9b05      	ldr	r3, [sp, #20]
 8007a1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f47f adaa 	bne.w	800757a <_strtod_l+0x472>
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f47f ada6 	bne.w	800757a <_strtod_l+0x472>
 8007a2e:	2322      	movs	r3, #34	; 0x22
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	e5a2      	b.n	800757a <_strtod_l+0x472>
 8007a34:	4013      	ands	r3, r2
 8007a36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a3a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a3e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a42:	f04f 3aff 	mov.w	sl, #4294967295
 8007a46:	e75a      	b.n	80078fe <_strtod_l+0x7f6>
 8007a48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a4a:	b18b      	cbz	r3, 8007a70 <_strtod_l+0x968>
 8007a4c:	9a08      	ldr	r2, [sp, #32]
 8007a4e:	4213      	tst	r3, r2
 8007a50:	f43f af55 	beq.w	80078fe <_strtod_l+0x7f6>
 8007a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a56:	463a      	mov	r2, r7
 8007a58:	4650      	mov	r0, sl
 8007a5a:	4659      	mov	r1, fp
 8007a5c:	b163      	cbz	r3, 8007a78 <_strtod_l+0x970>
 8007a5e:	f7ff fb37 	bl	80070d0 <sulp>
 8007a62:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8007a66:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007a6a:	ec5b ab17 	vmov	sl, fp, d7
 8007a6e:	e746      	b.n	80078fe <_strtod_l+0x7f6>
 8007a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a72:	ea13 0f0a 	tst.w	r3, sl
 8007a76:	e7eb      	b.n	8007a50 <_strtod_l+0x948>
 8007a78:	f7ff fb2a 	bl	80070d0 <sulp>
 8007a7c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8007a80:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007a84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a90:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007a94:	f43f adfd 	beq.w	8007692 <_strtod_l+0x58a>
 8007a98:	e731      	b.n	80078fe <_strtod_l+0x7f6>
 8007a9a:	4641      	mov	r1, r8
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f001 fe62 	bl	8009766 <__ratio>
 8007aa2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007aa6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	d869      	bhi.n	8007b84 <_strtod_l+0xa7c>
 8007ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d045      	beq.n	8007b42 <_strtod_l+0xa3a>
 8007ab6:	4b74      	ldr	r3, [pc, #464]	; (8007c88 <_strtod_l+0xb80>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007abe:	9808      	ldr	r0, [sp, #32]
 8007ac0:	496e      	ldr	r1, [pc, #440]	; (8007c7c <_strtod_l+0xb74>)
 8007ac2:	ea00 0601 	and.w	r6, r0, r1
 8007ac6:	4871      	ldr	r0, [pc, #452]	; (8007c8c <_strtod_l+0xb84>)
 8007ac8:	4286      	cmp	r6, r0
 8007aca:	f040 8089 	bne.w	8007be0 <_strtod_l+0xad8>
 8007ace:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ad4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007ad8:	9908      	ldr	r1, [sp, #32]
 8007ada:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8007ade:	ec4b ab10 	vmov	d0, sl, fp
 8007ae2:	ec43 2b1c 	vmov	d12, r2, r3
 8007ae6:	f001 fd79 	bl	80095dc <__ulp>
 8007aea:	ec4b ab1d 	vmov	d13, sl, fp
 8007aee:	eeac db00 	vfma.f64	d13, d12, d0
 8007af2:	ed8d db08 	vstr	d13, [sp, #32]
 8007af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007afa:	4a65      	ldr	r2, [pc, #404]	; (8007c90 <_strtod_l+0xb88>)
 8007afc:	4019      	ands	r1, r3
 8007afe:	4291      	cmp	r1, r2
 8007b00:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8007b04:	d948      	bls.n	8007b98 <_strtod_l+0xa90>
 8007b06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b08:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d103      	bne.n	8007b18 <_strtod_l+0xa10>
 8007b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b12:	3301      	adds	r3, #1
 8007b14:	f43f ad27 	beq.w	8007566 <_strtod_l+0x45e>
 8007b18:	f8df b164 	ldr.w	fp, [pc, #356]	; 8007c80 <_strtod_l+0xb78>
 8007b1c:	f04f 3aff 	mov.w	sl, #4294967295
 8007b20:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b22:	4620      	mov	r0, r4
 8007b24:	f001 fac3 	bl	80090ae <_Bfree>
 8007b28:	4649      	mov	r1, r9
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f001 fabf 	bl	80090ae <_Bfree>
 8007b30:	4641      	mov	r1, r8
 8007b32:	4620      	mov	r0, r4
 8007b34:	f001 fabb 	bl	80090ae <_Bfree>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f001 fab7 	bl	80090ae <_Bfree>
 8007b40:	e60e      	b.n	8007760 <_strtod_l+0x658>
 8007b42:	f1ba 0f00 	cmp.w	sl, #0
 8007b46:	d113      	bne.n	8007b70 <_strtod_l+0xa68>
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4e:	b9b3      	cbnz	r3, 8007b7e <_strtod_l+0xa76>
 8007b50:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007b54:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007b60:	d401      	bmi.n	8007b66 <_strtod_l+0xa5e>
 8007b62:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007b66:	eeb1 7b48 	vneg.f64	d7, d8
 8007b6a:	ec53 2b17 	vmov	r2, r3, d7
 8007b6e:	e7a6      	b.n	8007abe <_strtod_l+0x9b6>
 8007b70:	f1ba 0f01 	cmp.w	sl, #1
 8007b74:	d103      	bne.n	8007b7e <_strtod_l+0xa76>
 8007b76:	9b08      	ldr	r3, [sp, #32]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f43f ad8a 	beq.w	8007692 <_strtod_l+0x58a>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	4b44      	ldr	r3, [pc, #272]	; (8007c94 <_strtod_l+0xb8c>)
 8007b82:	e79a      	b.n	8007aba <_strtod_l+0x9b2>
 8007b84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b86:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007b8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0e9      	beq.n	8007b66 <_strtod_l+0xa5e>
 8007b92:	ec53 2b18 	vmov	r2, r3, d8
 8007b96:	e792      	b.n	8007abe <_strtod_l+0x9b6>
 8007b98:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	d1bf      	bne.n	8007b20 <_strtod_l+0xa18>
 8007ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ba4:	0d1b      	lsrs	r3, r3, #20
 8007ba6:	051b      	lsls	r3, r3, #20
 8007ba8:	429e      	cmp	r6, r3
 8007baa:	d1b9      	bne.n	8007b20 <_strtod_l+0xa18>
 8007bac:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8007bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bb2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8007bb6:	ee38 8b40 	vsub.f64	d8, d8, d0
 8007bba:	b92b      	cbnz	r3, 8007bc8 <_strtod_l+0xac0>
 8007bbc:	f1ba 0f00 	cmp.w	sl, #0
 8007bc0:	d102      	bne.n	8007bc8 <_strtod_l+0xac0>
 8007bc2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8007bc6:	b3d2      	cbz	r2, 8007c3e <_strtod_l+0xb36>
 8007bc8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	f53f acd3 	bmi.w	800757a <_strtod_l+0x472>
 8007bd4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bdc:	dda0      	ble.n	8007b20 <_strtod_l+0xa18>
 8007bde:	e4cc      	b.n	800757a <_strtod_l+0x472>
 8007be0:	b1ef      	cbz	r7, 8007c1e <_strtod_l+0xb16>
 8007be2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8007be6:	d81a      	bhi.n	8007c1e <_strtod_l+0xb16>
 8007be8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007c70 <_strtod_l+0xb68>
 8007bec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf4:	d810      	bhi.n	8007c18 <_strtod_l+0xb10>
 8007bf6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8007bfa:	ee17 3a90 	vmov	r3, s15
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bf08      	it	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	ee07 3a90 	vmov	s15, r3
 8007c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c0a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8007c0e:	b99b      	cbnz	r3, 8007c38 <_strtod_l+0xb30>
 8007c10:	eeb1 7b48 	vneg.f64	d7, d8
 8007c14:	ec53 2b17 	vmov	r2, r3, d7
 8007c18:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007c1c:	1b8b      	subs	r3, r1, r6
 8007c1e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c22:	ec43 2b1c 	vmov	d12, r2, r3
 8007c26:	f001 fcd9 	bl	80095dc <__ulp>
 8007c2a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8007c2e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007c32:	ec5b ab17 	vmov	sl, fp, d7
 8007c36:	e7b1      	b.n	8007b9c <_strtod_l+0xa94>
 8007c38:	ec53 2b18 	vmov	r2, r3, d8
 8007c3c:	e7ec      	b.n	8007c18 <_strtod_l+0xb10>
 8007c3e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c46:	f57f af6b 	bpl.w	8007b20 <_strtod_l+0xa18>
 8007c4a:	e496      	b.n	800757a <_strtod_l+0x472>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007c50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	f7ff ba9d 	b.w	8007194 <_strtod_l+0x8c>
 8007c5a:	2a65      	cmp	r2, #101	; 0x65
 8007c5c:	f04f 0100 	mov.w	r1, #0
 8007c60:	f43f ab97 	beq.w	8007392 <_strtod_l+0x28a>
 8007c64:	2701      	movs	r7, #1
 8007c66:	460b      	mov	r3, r1
 8007c68:	9704      	str	r7, [sp, #16]
 8007c6a:	f7ff bb0a 	b.w	8007282 <_strtod_l+0x17a>
 8007c6e:	bf00      	nop
 8007c70:	ffc00000 	.word	0xffc00000
 8007c74:	41dfffff 	.word	0x41dfffff
 8007c78:	000fffff 	.word	0x000fffff
 8007c7c:	7ff00000 	.word	0x7ff00000
 8007c80:	7fefffff 	.word	0x7fefffff
 8007c84:	39500000 	.word	0x39500000
 8007c88:	3ff00000 	.word	0x3ff00000
 8007c8c:	7fe00000 	.word	0x7fe00000
 8007c90:	7c9fffff 	.word	0x7c9fffff
 8007c94:	bff00000 	.word	0xbff00000

08007c98 <_strtod_r>:
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <_strtod_r+0x18>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	b410      	push	{r4}
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	4c04      	ldr	r4, [pc, #16]	; (8007cb4 <_strtod_r+0x1c>)
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bf08      	it	eq
 8007ca6:	4623      	moveq	r3, r4
 8007ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cac:	f7ff ba2c 	b.w	8007108 <_strtod_l>
 8007cb0:	2000001c 	.word	0x2000001c
 8007cb4:	20000080 	.word	0x20000080

08007cb8 <_strtol_l.isra.0>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	4692      	mov	sl, r2
 8007cc2:	461e      	mov	r6, r3
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	463d      	mov	r5, r7
 8007cc8:	9808      	ldr	r0, [sp, #32]
 8007cca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cce:	f001 f981 	bl	8008fd4 <__locale_ctype_ptr_l>
 8007cd2:	4420      	add	r0, r4
 8007cd4:	7843      	ldrb	r3, [r0, #1]
 8007cd6:	f013 0308 	ands.w	r3, r3, #8
 8007cda:	d132      	bne.n	8007d42 <_strtol_l.isra.0+0x8a>
 8007cdc:	2c2d      	cmp	r4, #45	; 0x2d
 8007cde:	d132      	bne.n	8007d46 <_strtol_l.isra.0+0x8e>
 8007ce0:	787c      	ldrb	r4, [r7, #1]
 8007ce2:	1cbd      	adds	r5, r7, #2
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	2e00      	cmp	r6, #0
 8007ce8:	d05d      	beq.n	8007da6 <_strtol_l.isra.0+0xee>
 8007cea:	2e10      	cmp	r6, #16
 8007cec:	d109      	bne.n	8007d02 <_strtol_l.isra.0+0x4a>
 8007cee:	2c30      	cmp	r4, #48	; 0x30
 8007cf0:	d107      	bne.n	8007d02 <_strtol_l.isra.0+0x4a>
 8007cf2:	782b      	ldrb	r3, [r5, #0]
 8007cf4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007cf8:	2b58      	cmp	r3, #88	; 0x58
 8007cfa:	d14f      	bne.n	8007d9c <_strtol_l.isra.0+0xe4>
 8007cfc:	786c      	ldrb	r4, [r5, #1]
 8007cfe:	2610      	movs	r6, #16
 8007d00:	3502      	adds	r5, #2
 8007d02:	2a00      	cmp	r2, #0
 8007d04:	bf14      	ite	ne
 8007d06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007d0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007d0e:	2700      	movs	r7, #0
 8007d10:	fbb1 fcf6 	udiv	ip, r1, r6
 8007d14:	4638      	mov	r0, r7
 8007d16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007d1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d817      	bhi.n	8007d52 <_strtol_l.isra.0+0x9a>
 8007d22:	461c      	mov	r4, r3
 8007d24:	42a6      	cmp	r6, r4
 8007d26:	dd23      	ble.n	8007d70 <_strtol_l.isra.0+0xb8>
 8007d28:	1c7b      	adds	r3, r7, #1
 8007d2a:	d007      	beq.n	8007d3c <_strtol_l.isra.0+0x84>
 8007d2c:	4584      	cmp	ip, r0
 8007d2e:	d31c      	bcc.n	8007d6a <_strtol_l.isra.0+0xb2>
 8007d30:	d101      	bne.n	8007d36 <_strtol_l.isra.0+0x7e>
 8007d32:	45a6      	cmp	lr, r4
 8007d34:	db19      	blt.n	8007d6a <_strtol_l.isra.0+0xb2>
 8007d36:	fb00 4006 	mla	r0, r0, r6, r4
 8007d3a:	2701      	movs	r7, #1
 8007d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d40:	e7eb      	b.n	8007d1a <_strtol_l.isra.0+0x62>
 8007d42:	462f      	mov	r7, r5
 8007d44:	e7bf      	b.n	8007cc6 <_strtol_l.isra.0+0xe>
 8007d46:	2c2b      	cmp	r4, #43	; 0x2b
 8007d48:	bf04      	itt	eq
 8007d4a:	1cbd      	addeq	r5, r7, #2
 8007d4c:	787c      	ldrbeq	r4, [r7, #1]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	e7c9      	b.n	8007ce6 <_strtol_l.isra.0+0x2e>
 8007d52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007d56:	2b19      	cmp	r3, #25
 8007d58:	d801      	bhi.n	8007d5e <_strtol_l.isra.0+0xa6>
 8007d5a:	3c37      	subs	r4, #55	; 0x37
 8007d5c:	e7e2      	b.n	8007d24 <_strtol_l.isra.0+0x6c>
 8007d5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007d62:	2b19      	cmp	r3, #25
 8007d64:	d804      	bhi.n	8007d70 <_strtol_l.isra.0+0xb8>
 8007d66:	3c57      	subs	r4, #87	; 0x57
 8007d68:	e7dc      	b.n	8007d24 <_strtol_l.isra.0+0x6c>
 8007d6a:	f04f 37ff 	mov.w	r7, #4294967295
 8007d6e:	e7e5      	b.n	8007d3c <_strtol_l.isra.0+0x84>
 8007d70:	1c7b      	adds	r3, r7, #1
 8007d72:	d108      	bne.n	8007d86 <_strtol_l.isra.0+0xce>
 8007d74:	2322      	movs	r3, #34	; 0x22
 8007d76:	f8c8 3000 	str.w	r3, [r8]
 8007d7a:	4608      	mov	r0, r1
 8007d7c:	f1ba 0f00 	cmp.w	sl, #0
 8007d80:	d107      	bne.n	8007d92 <_strtol_l.isra.0+0xda>
 8007d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d86:	b102      	cbz	r2, 8007d8a <_strtol_l.isra.0+0xd2>
 8007d88:	4240      	negs	r0, r0
 8007d8a:	f1ba 0f00 	cmp.w	sl, #0
 8007d8e:	d0f8      	beq.n	8007d82 <_strtol_l.isra.0+0xca>
 8007d90:	b10f      	cbz	r7, 8007d96 <_strtol_l.isra.0+0xde>
 8007d92:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d96:	f8ca 9000 	str.w	r9, [sl]
 8007d9a:	e7f2      	b.n	8007d82 <_strtol_l.isra.0+0xca>
 8007d9c:	2430      	movs	r4, #48	; 0x30
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d1af      	bne.n	8007d02 <_strtol_l.isra.0+0x4a>
 8007da2:	2608      	movs	r6, #8
 8007da4:	e7ad      	b.n	8007d02 <_strtol_l.isra.0+0x4a>
 8007da6:	2c30      	cmp	r4, #48	; 0x30
 8007da8:	d0a3      	beq.n	8007cf2 <_strtol_l.isra.0+0x3a>
 8007daa:	260a      	movs	r6, #10
 8007dac:	e7a9      	b.n	8007d02 <_strtol_l.isra.0+0x4a>
	...

08007db0 <_strtol_r>:
 8007db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007db2:	4c06      	ldr	r4, [pc, #24]	; (8007dcc <_strtol_r+0x1c>)
 8007db4:	4d06      	ldr	r5, [pc, #24]	; (8007dd0 <_strtol_r+0x20>)
 8007db6:	6824      	ldr	r4, [r4, #0]
 8007db8:	6a24      	ldr	r4, [r4, #32]
 8007dba:	2c00      	cmp	r4, #0
 8007dbc:	bf08      	it	eq
 8007dbe:	462c      	moveq	r4, r5
 8007dc0:	9400      	str	r4, [sp, #0]
 8007dc2:	f7ff ff79 	bl	8007cb8 <_strtol_l.isra.0>
 8007dc6:	b003      	add	sp, #12
 8007dc8:	bd30      	pop	{r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000001c 	.word	0x2000001c
 8007dd0:	20000080 	.word	0x20000080

08007dd4 <quorem>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	6903      	ldr	r3, [r0, #16]
 8007dda:	690c      	ldr	r4, [r1, #16]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	4680      	mov	r8, r0
 8007de0:	f2c0 8082 	blt.w	8007ee8 <quorem+0x114>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	f101 0714 	add.w	r7, r1, #20
 8007dea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007dee:	f100 0614 	add.w	r6, r0, #20
 8007df2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007df6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007dfa:	eb06 030c 	add.w	r3, r6, ip
 8007dfe:	3501      	adds	r5, #1
 8007e00:	eb07 090c 	add.w	r9, r7, ip
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e0a:	b395      	cbz	r5, 8007e72 <quorem+0x9e>
 8007e0c:	f04f 0a00 	mov.w	sl, #0
 8007e10:	4638      	mov	r0, r7
 8007e12:	46b6      	mov	lr, r6
 8007e14:	46d3      	mov	fp, sl
 8007e16:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e1a:	b293      	uxth	r3, r2
 8007e1c:	fb05 a303 	mla	r3, r5, r3, sl
 8007e20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	ebab 0303 	sub.w	r3, fp, r3
 8007e2a:	0c12      	lsrs	r2, r2, #16
 8007e2c:	f8de b000 	ldr.w	fp, [lr]
 8007e30:	fb05 a202 	mla	r2, r5, r2, sl
 8007e34:	fa13 f38b 	uxtah	r3, r3, fp
 8007e38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007e3c:	fa1f fb82 	uxth.w	fp, r2
 8007e40:	f8de 2000 	ldr.w	r2, [lr]
 8007e44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e52:	4581      	cmp	r9, r0
 8007e54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007e58:	f84e 3b04 	str.w	r3, [lr], #4
 8007e5c:	d2db      	bcs.n	8007e16 <quorem+0x42>
 8007e5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007e62:	b933      	cbnz	r3, 8007e72 <quorem+0x9e>
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	d330      	bcc.n	8007ed0 <quorem+0xfc>
 8007e6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007e72:	4640      	mov	r0, r8
 8007e74:	f001 fb3a 	bl	80094ec <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	db25      	blt.n	8007ec8 <quorem+0xf4>
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f04f 0c00 	mov.w	ip, #0
 8007e84:	f857 2b04 	ldr.w	r2, [r7], #4
 8007e88:	f8d0 e000 	ldr.w	lr, [r0]
 8007e8c:	b293      	uxth	r3, r2
 8007e8e:	ebac 0303 	sub.w	r3, ip, r3
 8007e92:	0c12      	lsrs	r2, r2, #16
 8007e94:	fa13 f38e 	uxtah	r3, r3, lr
 8007e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea6:	45b9      	cmp	r9, r7
 8007ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007eac:	f840 3b04 	str.w	r3, [r0], #4
 8007eb0:	d2e8      	bcs.n	8007e84 <quorem+0xb0>
 8007eb2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007eb6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007eba:	b92a      	cbnz	r2, 8007ec8 <quorem+0xf4>
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	429e      	cmp	r6, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	d30b      	bcc.n	8007edc <quorem+0x108>
 8007ec4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007ec8:	4628      	mov	r0, r5
 8007eca:	b003      	add	sp, #12
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	d1ca      	bne.n	8007e6e <quorem+0x9a>
 8007ed8:	3c01      	subs	r4, #1
 8007eda:	e7c5      	b.n	8007e68 <quorem+0x94>
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	d1ef      	bne.n	8007ec4 <quorem+0xf0>
 8007ee4:	3c01      	subs	r4, #1
 8007ee6:	e7ea      	b.n	8007ebe <quorem+0xea>
 8007ee8:	2000      	movs	r0, #0
 8007eea:	e7ee      	b.n	8007eca <quorem+0xf6>
 8007eec:	0000      	movs	r0, r0
	...

08007ef0 <_dtoa_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ec57 6b10 	vmov	r6, r7, d0
 8007ef8:	b095      	sub	sp, #84	; 0x54
 8007efa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007efc:	9108      	str	r1, [sp, #32]
 8007efe:	4604      	mov	r4, r0
 8007f00:	920a      	str	r2, [sp, #40]	; 0x28
 8007f02:	9311      	str	r3, [sp, #68]	; 0x44
 8007f04:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007f08:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f0c:	b93d      	cbnz	r5, 8007f1e <_dtoa_r+0x2e>
 8007f0e:	2010      	movs	r0, #16
 8007f10:	f001 f874 	bl	8008ffc <malloc>
 8007f14:	6260      	str	r0, [r4, #36]	; 0x24
 8007f16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f1a:	6005      	str	r5, [r0, #0]
 8007f1c:	60c5      	str	r5, [r0, #12]
 8007f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f20:	6819      	ldr	r1, [r3, #0]
 8007f22:	b151      	cbz	r1, 8007f3a <_dtoa_r+0x4a>
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	604a      	str	r2, [r1, #4]
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4093      	lsls	r3, r2
 8007f2c:	608b      	str	r3, [r1, #8]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 f8bd 	bl	80090ae <_Bfree>
 8007f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	1e3b      	subs	r3, r7, #0
 8007f3c:	bfb9      	ittee	lt
 8007f3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	9303      	strlt	r3, [sp, #12]
 8007f44:	2300      	movge	r3, #0
 8007f46:	f8c8 3000 	strge.w	r3, [r8]
 8007f4a:	9d03      	ldr	r5, [sp, #12]
 8007f4c:	4bac      	ldr	r3, [pc, #688]	; (8008200 <_dtoa_r+0x310>)
 8007f4e:	bfbc      	itt	lt
 8007f50:	2201      	movlt	r2, #1
 8007f52:	f8c8 2000 	strlt.w	r2, [r8]
 8007f56:	43ab      	bics	r3, r5
 8007f58:	d11b      	bne.n	8007f92 <_dtoa_r+0xa2>
 8007f5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f5c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	b923      	cbnz	r3, 8007f70 <_dtoa_r+0x80>
 8007f66:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	f000 84dd 	beq.w	800892a <_dtoa_r+0xa3a>
 8007f70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f72:	b953      	cbnz	r3, 8007f8a <_dtoa_r+0x9a>
 8007f74:	4ba3      	ldr	r3, [pc, #652]	; (8008204 <_dtoa_r+0x314>)
 8007f76:	e020      	b.n	8007fba <_dtoa_r+0xca>
 8007f78:	4ba3      	ldr	r3, [pc, #652]	; (8008208 <_dtoa_r+0x318>)
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	9804      	ldr	r0, [sp, #16]
 8007f84:	b015      	add	sp, #84	; 0x54
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	4b9e      	ldr	r3, [pc, #632]	; (8008204 <_dtoa_r+0x314>)
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	3303      	adds	r3, #3
 8007f90:	e7f5      	b.n	8007f7e <_dtoa_r+0x8e>
 8007f92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fa2:	d10c      	bne.n	8007fbe <_dtoa_r+0xce>
 8007fa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 84b9 	beq.w	8008924 <_dtoa_r+0xa34>
 8007fb2:	4b96      	ldr	r3, [pc, #600]	; (800820c <_dtoa_r+0x31c>)
 8007fb4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	e7e1      	b.n	8007f82 <_dtoa_r+0x92>
 8007fbe:	a913      	add	r1, sp, #76	; 0x4c
 8007fc0:	aa12      	add	r2, sp, #72	; 0x48
 8007fc2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f001 fb7e 	bl	80096c8 <__d2b>
 8007fcc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8007fd0:	9001      	str	r0, [sp, #4]
 8007fd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007fd4:	2e00      	cmp	r6, #0
 8007fd6:	d046      	beq.n	8008066 <_dtoa_r+0x176>
 8007fd8:	9805      	ldr	r0, [sp, #20]
 8007fda:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8007fe6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007fea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8007fee:	2700      	movs	r7, #0
 8007ff0:	ee07 aa90 	vmov	s15, sl
 8007ff4:	ec43 2b16 	vmov	d6, r2, r3
 8007ff8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007ffc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80081e8 <_dtoa_r+0x2f8>
 8008000:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008004:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008008:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80081f0 <_dtoa_r+0x300>
 800800c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8008010:	eeb0 7b46 	vmov.f64	d7, d6
 8008014:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80081f8 <_dtoa_r+0x308>
 8008018:	eea5 7b06 	vfma.f64	d7, d5, d6
 800801c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008020:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008028:	ee16 ba90 	vmov	fp, s13
 800802c:	d508      	bpl.n	8008040 <_dtoa_r+0x150>
 800802e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008032:	eeb4 6b47 	vcmp.f64	d6, d7
 8008036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803a:	bf18      	it	ne
 800803c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008040:	f1bb 0f16 	cmp.w	fp, #22
 8008044:	d834      	bhi.n	80080b0 <_dtoa_r+0x1c0>
 8008046:	4b72      	ldr	r3, [pc, #456]	; (8008210 <_dtoa_r+0x320>)
 8008048:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800804c:	ed93 7b00 	vldr	d7, [r3]
 8008050:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008054:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805c:	dd01      	ble.n	8008062 <_dtoa_r+0x172>
 800805e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008062:	2300      	movs	r3, #0
 8008064:	e025      	b.n	80080b2 <_dtoa_r+0x1c2>
 8008066:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008068:	eb01 0a03 	add.w	sl, r1, r3
 800806c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008070:	2b20      	cmp	r3, #32
 8008072:	dd17      	ble.n	80080a4 <_dtoa_r+0x1b4>
 8008074:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008078:	9a02      	ldr	r2, [sp, #8]
 800807a:	409d      	lsls	r5, r3
 800807c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008080:	fa22 f303 	lsr.w	r3, r2, r3
 8008084:	432b      	orrs	r3, r5
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800808e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008092:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008096:	9805      	ldr	r0, [sp, #20]
 8008098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809c:	2701      	movs	r7, #1
 800809e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80080a2:	e7a5      	b.n	8007ff0 <_dtoa_r+0x100>
 80080a4:	9a02      	ldr	r2, [sp, #8]
 80080a6:	f1c3 0320 	rsb	r3, r3, #32
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	e7ea      	b.n	8008086 <_dtoa_r+0x196>
 80080b0:	2301      	movs	r3, #1
 80080b2:	eba1 0a0a 	sub.w	sl, r1, sl
 80080b6:	9310      	str	r3, [sp, #64]	; 0x40
 80080b8:	f1ba 0301 	subs.w	r3, sl, #1
 80080bc:	9307      	str	r3, [sp, #28]
 80080be:	bf43      	ittte	mi
 80080c0:	2300      	movmi	r3, #0
 80080c2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80080c6:	9307      	strmi	r3, [sp, #28]
 80080c8:	f04f 0a00 	movpl.w	sl, #0
 80080cc:	f1bb 0f00 	cmp.w	fp, #0
 80080d0:	db19      	blt.n	8008106 <_dtoa_r+0x216>
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80080d8:	445b      	add	r3, fp
 80080da:	9307      	str	r3, [sp, #28]
 80080dc:	f04f 0800 	mov.w	r8, #0
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	2b09      	cmp	r3, #9
 80080e4:	d866      	bhi.n	80081b4 <_dtoa_r+0x2c4>
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	bfc4      	itt	gt
 80080ea:	3b04      	subgt	r3, #4
 80080ec:	9308      	strgt	r3, [sp, #32]
 80080ee:	9b08      	ldr	r3, [sp, #32]
 80080f0:	f1a3 0302 	sub.w	r3, r3, #2
 80080f4:	bfcc      	ite	gt
 80080f6:	2500      	movgt	r5, #0
 80080f8:	2501      	movle	r5, #1
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d866      	bhi.n	80081cc <_dtoa_r+0x2dc>
 80080fe:	e8df f003 	tbb	[pc, r3]
 8008102:	5755      	.short	0x5755
 8008104:	4909      	.short	0x4909
 8008106:	2300      	movs	r3, #0
 8008108:	ebaa 0a0b 	sub.w	sl, sl, fp
 800810c:	f1cb 0800 	rsb	r8, fp, #0
 8008110:	930b      	str	r3, [sp, #44]	; 0x2c
 8008112:	e7e5      	b.n	80080e0 <_dtoa_r+0x1f0>
 8008114:	2301      	movs	r3, #1
 8008116:	9309      	str	r3, [sp, #36]	; 0x24
 8008118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	dd59      	ble.n	80081d2 <_dtoa_r+0x2e2>
 800811e:	9306      	str	r3, [sp, #24]
 8008120:	4699      	mov	r9, r3
 8008122:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008124:	2200      	movs	r2, #0
 8008126:	6072      	str	r2, [r6, #4]
 8008128:	2204      	movs	r2, #4
 800812a:	f102 0014 	add.w	r0, r2, #20
 800812e:	4298      	cmp	r0, r3
 8008130:	6871      	ldr	r1, [r6, #4]
 8008132:	d953      	bls.n	80081dc <_dtoa_r+0x2ec>
 8008134:	4620      	mov	r0, r4
 8008136:	f000 ff86 	bl	8009046 <_Balloc>
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	6030      	str	r0, [r6, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	f1b9 0f0e 	cmp.w	r9, #14
 8008146:	f200 80c2 	bhi.w	80082ce <_dtoa_r+0x3de>
 800814a:	2d00      	cmp	r5, #0
 800814c:	f000 80bf 	beq.w	80082ce <_dtoa_r+0x3de>
 8008150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008154:	f1bb 0f00 	cmp.w	fp, #0
 8008158:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800815c:	f340 80e6 	ble.w	800832c <_dtoa_r+0x43c>
 8008160:	4a2b      	ldr	r2, [pc, #172]	; (8008210 <_dtoa_r+0x320>)
 8008162:	f00b 030f 	and.w	r3, fp, #15
 8008166:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800816a:	ed93 7b00 	vldr	d7, [r3]
 800816e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8008172:	06da      	lsls	r2, r3, #27
 8008174:	f140 80d8 	bpl.w	8008328 <_dtoa_r+0x438>
 8008178:	4a26      	ldr	r2, [pc, #152]	; (8008214 <_dtoa_r+0x324>)
 800817a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800817e:	ed92 6b08 	vldr	d6, [r2, #32]
 8008182:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008186:	ed8d 6b02 	vstr	d6, [sp, #8]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	2203      	movs	r2, #3
 8008190:	4920      	ldr	r1, [pc, #128]	; (8008214 <_dtoa_r+0x324>)
 8008192:	e04a      	b.n	800822a <_dtoa_r+0x33a>
 8008194:	2301      	movs	r3, #1
 8008196:	9309      	str	r3, [sp, #36]	; 0x24
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	445b      	add	r3, fp
 800819c:	f103 0901 	add.w	r9, r3, #1
 80081a0:	9306      	str	r3, [sp, #24]
 80081a2:	464b      	mov	r3, r9
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	bfb8      	it	lt
 80081a8:	2301      	movlt	r3, #1
 80081aa:	e7ba      	b.n	8008122 <_dtoa_r+0x232>
 80081ac:	2300      	movs	r3, #0
 80081ae:	e7b2      	b.n	8008116 <_dtoa_r+0x226>
 80081b0:	2300      	movs	r3, #0
 80081b2:	e7f0      	b.n	8008196 <_dtoa_r+0x2a6>
 80081b4:	2501      	movs	r5, #1
 80081b6:	2300      	movs	r3, #0
 80081b8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80081bc:	f04f 33ff 	mov.w	r3, #4294967295
 80081c0:	9306      	str	r3, [sp, #24]
 80081c2:	4699      	mov	r9, r3
 80081c4:	2200      	movs	r2, #0
 80081c6:	2312      	movs	r3, #18
 80081c8:	920a      	str	r2, [sp, #40]	; 0x28
 80081ca:	e7aa      	b.n	8008122 <_dtoa_r+0x232>
 80081cc:	2301      	movs	r3, #1
 80081ce:	9309      	str	r3, [sp, #36]	; 0x24
 80081d0:	e7f4      	b.n	80081bc <_dtoa_r+0x2cc>
 80081d2:	2301      	movs	r3, #1
 80081d4:	9306      	str	r3, [sp, #24]
 80081d6:	4699      	mov	r9, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	e7f5      	b.n	80081c8 <_dtoa_r+0x2d8>
 80081dc:	3101      	adds	r1, #1
 80081de:	6071      	str	r1, [r6, #4]
 80081e0:	0052      	lsls	r2, r2, #1
 80081e2:	e7a2      	b.n	800812a <_dtoa_r+0x23a>
 80081e4:	f3af 8000 	nop.w
 80081e8:	636f4361 	.word	0x636f4361
 80081ec:	3fd287a7 	.word	0x3fd287a7
 80081f0:	8b60c8b3 	.word	0x8b60c8b3
 80081f4:	3fc68a28 	.word	0x3fc68a28
 80081f8:	509f79fb 	.word	0x509f79fb
 80081fc:	3fd34413 	.word	0x3fd34413
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	08009df9 	.word	0x08009df9
 8008208:	08009df0 	.word	0x08009df0
 800820c:	08009d71 	.word	0x08009d71
 8008210:	08009e98 	.word	0x08009e98
 8008214:	08009e70 	.word	0x08009e70
 8008218:	07de      	lsls	r6, r3, #31
 800821a:	d504      	bpl.n	8008226 <_dtoa_r+0x336>
 800821c:	ed91 6b00 	vldr	d6, [r1]
 8008220:	3201      	adds	r2, #1
 8008222:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008226:	105b      	asrs	r3, r3, #1
 8008228:	3108      	adds	r1, #8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1f4      	bne.n	8008218 <_dtoa_r+0x328>
 800822e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008232:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008236:	ed8d 7b02 	vstr	d7, [sp, #8]
 800823a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a7 	beq.w	8008390 <_dtoa_r+0x4a0>
 8008242:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800824a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008252:	f140 809d 	bpl.w	8008390 <_dtoa_r+0x4a0>
 8008256:	f1b9 0f00 	cmp.w	r9, #0
 800825a:	f000 8099 	beq.w	8008390 <_dtoa_r+0x4a0>
 800825e:	9b06      	ldr	r3, [sp, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	dd30      	ble.n	80082c6 <_dtoa_r+0x3d6>
 8008264:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008268:	ee27 7b06 	vmul.f64	d7, d7, d6
 800826c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008270:	9d06      	ldr	r5, [sp, #24]
 8008272:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008276:	3201      	adds	r2, #1
 8008278:	ed9d 6b02 	vldr	d6, [sp, #8]
 800827c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008280:	ee07 2a90 	vmov	s15, r2
 8008284:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008288:	eea7 5b06 	vfma.f64	d5, d7, d6
 800828c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008290:	9a03      	ldr	r2, [sp, #12]
 8008292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008296:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800829a:	2d00      	cmp	r5, #0
 800829c:	d17b      	bne.n	8008396 <_dtoa_r+0x4a6>
 800829e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80082a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082a6:	ec41 0b17 	vmov	d7, r0, r1
 80082aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b2:	f300 8253 	bgt.w	800875c <_dtoa_r+0x86c>
 80082b6:	eeb1 7b47 	vneg.f64	d7, d7
 80082ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	f100 8249 	bmi.w	8008758 <_dtoa_r+0x868>
 80082c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80082ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f2c0 8119 	blt.w	8008508 <_dtoa_r+0x618>
 80082d6:	f1bb 0f0e 	cmp.w	fp, #14
 80082da:	f300 8115 	bgt.w	8008508 <_dtoa_r+0x618>
 80082de:	4bc3      	ldr	r3, [pc, #780]	; (80085ec <_dtoa_r+0x6fc>)
 80082e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082e4:	ed93 6b00 	vldr	d6, [r3]
 80082e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f280 80ba 	bge.w	8008464 <_dtoa_r+0x574>
 80082f0:	f1b9 0f00 	cmp.w	r9, #0
 80082f4:	f300 80b6 	bgt.w	8008464 <_dtoa_r+0x574>
 80082f8:	f040 822d 	bne.w	8008756 <_dtoa_r+0x866>
 80082fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008300:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008308:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008310:	464d      	mov	r5, r9
 8008312:	464f      	mov	r7, r9
 8008314:	f280 8204 	bge.w	8008720 <_dtoa_r+0x830>
 8008318:	9b04      	ldr	r3, [sp, #16]
 800831a:	9a04      	ldr	r2, [sp, #16]
 800831c:	1c5e      	adds	r6, r3, #1
 800831e:	2331      	movs	r3, #49	; 0x31
 8008320:	7013      	strb	r3, [r2, #0]
 8008322:	f10b 0b01 	add.w	fp, fp, #1
 8008326:	e1ff      	b.n	8008728 <_dtoa_r+0x838>
 8008328:	2202      	movs	r2, #2
 800832a:	e731      	b.n	8008190 <_dtoa_r+0x2a0>
 800832c:	d02e      	beq.n	800838c <_dtoa_r+0x49c>
 800832e:	f1cb 0300 	rsb	r3, fp, #0
 8008332:	4aae      	ldr	r2, [pc, #696]	; (80085ec <_dtoa_r+0x6fc>)
 8008334:	f003 010f 	and.w	r1, r3, #15
 8008338:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800833c:	ed92 7b00 	vldr	d7, [r2]
 8008340:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8008344:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008348:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800834c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8008350:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008354:	49a6      	ldr	r1, [pc, #664]	; (80085f0 <_dtoa_r+0x700>)
 8008356:	111b      	asrs	r3, r3, #4
 8008358:	2000      	movs	r0, #0
 800835a:	2202      	movs	r2, #2
 800835c:	b93b      	cbnz	r3, 800836e <_dtoa_r+0x47e>
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f af6b 	beq.w	800823a <_dtoa_r+0x34a>
 8008364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008368:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800836c:	e765      	b.n	800823a <_dtoa_r+0x34a>
 800836e:	07dd      	lsls	r5, r3, #31
 8008370:	d509      	bpl.n	8008386 <_dtoa_r+0x496>
 8008372:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008376:	ed91 7b00 	vldr	d7, [r1]
 800837a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800837e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008382:	3201      	adds	r2, #1
 8008384:	2001      	movs	r0, #1
 8008386:	105b      	asrs	r3, r3, #1
 8008388:	3108      	adds	r1, #8
 800838a:	e7e7      	b.n	800835c <_dtoa_r+0x46c>
 800838c:	2202      	movs	r2, #2
 800838e:	e754      	b.n	800823a <_dtoa_r+0x34a>
 8008390:	465b      	mov	r3, fp
 8008392:	464d      	mov	r5, r9
 8008394:	e770      	b.n	8008278 <_dtoa_r+0x388>
 8008396:	4a95      	ldr	r2, [pc, #596]	; (80085ec <_dtoa_r+0x6fc>)
 8008398:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800839c:	ed12 4b02 	vldr	d4, [r2, #-8]
 80083a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a2:	ec41 0b17 	vmov	d7, r0, r1
 80083a6:	b35a      	cbz	r2, 8008400 <_dtoa_r+0x510>
 80083a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80083ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80083b0:	9e04      	ldr	r6, [sp, #16]
 80083b2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80083b6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80083ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083be:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083c2:	ee14 2a90 	vmov	r2, s9
 80083c6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083ca:	3230      	adds	r2, #48	; 0x30
 80083cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d8:	f806 2b01 	strb.w	r2, [r6], #1
 80083dc:	d43b      	bmi.n	8008456 <_dtoa_r+0x566>
 80083de:	ee32 5b46 	vsub.f64	d5, d2, d6
 80083e2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80083e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ea:	d472      	bmi.n	80084d2 <_dtoa_r+0x5e2>
 80083ec:	9a04      	ldr	r2, [sp, #16]
 80083ee:	1ab2      	subs	r2, r6, r2
 80083f0:	4295      	cmp	r5, r2
 80083f2:	f77f af68 	ble.w	80082c6 <_dtoa_r+0x3d6>
 80083f6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80083fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083fe:	e7de      	b.n	80083be <_dtoa_r+0x4ce>
 8008400:	9a04      	ldr	r2, [sp, #16]
 8008402:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008406:	1956      	adds	r6, r2, r5
 8008408:	4611      	mov	r1, r2
 800840a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800840e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008412:	ee14 2a90 	vmov	r2, s9
 8008416:	3230      	adds	r2, #48	; 0x30
 8008418:	f801 2b01 	strb.w	r2, [r1], #1
 800841c:	42b1      	cmp	r1, r6
 800841e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008422:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008426:	d11a      	bne.n	800845e <_dtoa_r+0x56e>
 8008428:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800842c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008430:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008438:	dc4b      	bgt.n	80084d2 <_dtoa_r+0x5e2>
 800843a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800843e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	f57f af3e 	bpl.w	80082c6 <_dtoa_r+0x3d6>
 800844a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800844e:	2a30      	cmp	r2, #48	; 0x30
 8008450:	f106 31ff 	add.w	r1, r6, #4294967295
 8008454:	d001      	beq.n	800845a <_dtoa_r+0x56a>
 8008456:	469b      	mov	fp, r3
 8008458:	e02a      	b.n	80084b0 <_dtoa_r+0x5c0>
 800845a:	460e      	mov	r6, r1
 800845c:	e7f5      	b.n	800844a <_dtoa_r+0x55a>
 800845e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008462:	e7d4      	b.n	800840e <_dtoa_r+0x51e>
 8008464:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008468:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800846c:	9e04      	ldr	r6, [sp, #16]
 800846e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008472:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008476:	ee15 3a10 	vmov	r3, s10
 800847a:	3330      	adds	r3, #48	; 0x30
 800847c:	f806 3b01 	strb.w	r3, [r6], #1
 8008480:	9b04      	ldr	r3, [sp, #16]
 8008482:	1af3      	subs	r3, r6, r3
 8008484:	4599      	cmp	r9, r3
 8008486:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800848a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800848e:	d133      	bne.n	80084f8 <_dtoa_r+0x608>
 8008490:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008494:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849c:	dc18      	bgt.n	80084d0 <_dtoa_r+0x5e0>
 800849e:	eeb4 7b46 	vcmp.f64	d7, d6
 80084a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a6:	d103      	bne.n	80084b0 <_dtoa_r+0x5c0>
 80084a8:	ee15 3a10 	vmov	r3, s10
 80084ac:	07db      	lsls	r3, r3, #31
 80084ae:	d40f      	bmi.n	80084d0 <_dtoa_r+0x5e0>
 80084b0:	9901      	ldr	r1, [sp, #4]
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fdfb 	bl	80090ae <_Bfree>
 80084b8:	2300      	movs	r3, #0
 80084ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084bc:	7033      	strb	r3, [r6, #0]
 80084be:	f10b 0301 	add.w	r3, fp, #1
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f43f ad5b 	beq.w	8007f82 <_dtoa_r+0x92>
 80084cc:	601e      	str	r6, [r3, #0]
 80084ce:	e558      	b.n	8007f82 <_dtoa_r+0x92>
 80084d0:	465b      	mov	r3, fp
 80084d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084d6:	2939      	cmp	r1, #57	; 0x39
 80084d8:	f106 32ff 	add.w	r2, r6, #4294967295
 80084dc:	d106      	bne.n	80084ec <_dtoa_r+0x5fc>
 80084de:	9904      	ldr	r1, [sp, #16]
 80084e0:	4291      	cmp	r1, r2
 80084e2:	d107      	bne.n	80084f4 <_dtoa_r+0x604>
 80084e4:	2230      	movs	r2, #48	; 0x30
 80084e6:	700a      	strb	r2, [r1, #0]
 80084e8:	3301      	adds	r3, #1
 80084ea:	460a      	mov	r2, r1
 80084ec:	7811      	ldrb	r1, [r2, #0]
 80084ee:	3101      	adds	r1, #1
 80084f0:	7011      	strb	r1, [r2, #0]
 80084f2:	e7b0      	b.n	8008456 <_dtoa_r+0x566>
 80084f4:	4616      	mov	r6, r2
 80084f6:	e7ec      	b.n	80084d2 <_dtoa_r+0x5e2>
 80084f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008504:	d1b3      	bne.n	800846e <_dtoa_r+0x57e>
 8008506:	e7d3      	b.n	80084b0 <_dtoa_r+0x5c0>
 8008508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800850a:	2a00      	cmp	r2, #0
 800850c:	f000 808d 	beq.w	800862a <_dtoa_r+0x73a>
 8008510:	9a08      	ldr	r2, [sp, #32]
 8008512:	2a01      	cmp	r2, #1
 8008514:	dc72      	bgt.n	80085fc <_dtoa_r+0x70c>
 8008516:	2f00      	cmp	r7, #0
 8008518:	d06c      	beq.n	80085f4 <_dtoa_r+0x704>
 800851a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800851e:	4645      	mov	r5, r8
 8008520:	4656      	mov	r6, sl
 8008522:	9a07      	ldr	r2, [sp, #28]
 8008524:	2101      	movs	r1, #1
 8008526:	441a      	add	r2, r3
 8008528:	4620      	mov	r0, r4
 800852a:	449a      	add	sl, r3
 800852c:	9207      	str	r2, [sp, #28]
 800852e:	f000 fe9c 	bl	800926a <__i2b>
 8008532:	4607      	mov	r7, r0
 8008534:	2e00      	cmp	r6, #0
 8008536:	dd0b      	ble.n	8008550 <_dtoa_r+0x660>
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dd08      	ble.n	8008550 <_dtoa_r+0x660>
 800853e:	42b3      	cmp	r3, r6
 8008540:	9a07      	ldr	r2, [sp, #28]
 8008542:	bfa8      	it	ge
 8008544:	4633      	movge	r3, r6
 8008546:	ebaa 0a03 	sub.w	sl, sl, r3
 800854a:	1af6      	subs	r6, r6, r3
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	f1b8 0f00 	cmp.w	r8, #0
 8008554:	d01d      	beq.n	8008592 <_dtoa_r+0x6a2>
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	2b00      	cmp	r3, #0
 800855a:	d06a      	beq.n	8008632 <_dtoa_r+0x742>
 800855c:	b18d      	cbz	r5, 8008582 <_dtoa_r+0x692>
 800855e:	4639      	mov	r1, r7
 8008560:	462a      	mov	r2, r5
 8008562:	4620      	mov	r0, r4
 8008564:	f000 ff20 	bl	80093a8 <__pow5mult>
 8008568:	9a01      	ldr	r2, [sp, #4]
 800856a:	4601      	mov	r1, r0
 800856c:	4607      	mov	r7, r0
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fe84 	bl	800927c <__multiply>
 8008574:	9901      	ldr	r1, [sp, #4]
 8008576:	900c      	str	r0, [sp, #48]	; 0x30
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fd98 	bl	80090ae <_Bfree>
 800857e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	ebb8 0205 	subs.w	r2, r8, r5
 8008586:	d004      	beq.n	8008592 <_dtoa_r+0x6a2>
 8008588:	9901      	ldr	r1, [sp, #4]
 800858a:	4620      	mov	r0, r4
 800858c:	f000 ff0c 	bl	80093a8 <__pow5mult>
 8008590:	9001      	str	r0, [sp, #4]
 8008592:	2101      	movs	r1, #1
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fe68 	bl	800926a <__i2b>
 800859a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800859c:	4605      	mov	r5, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 81ca 	beq.w	8008938 <_dtoa_r+0xa48>
 80085a4:	461a      	mov	r2, r3
 80085a6:	4601      	mov	r1, r0
 80085a8:	4620      	mov	r0, r4
 80085aa:	f000 fefd 	bl	80093a8 <__pow5mult>
 80085ae:	9b08      	ldr	r3, [sp, #32]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	4605      	mov	r5, r0
 80085b4:	dc44      	bgt.n	8008640 <_dtoa_r+0x750>
 80085b6:	9b02      	ldr	r3, [sp, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d13c      	bne.n	8008636 <_dtoa_r+0x746>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d137      	bne.n	8008636 <_dtoa_r+0x746>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	0d1b      	lsrs	r3, r3, #20
 80085ce:	051b      	lsls	r3, r3, #20
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d033      	beq.n	800863c <_dtoa_r+0x74c>
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	3301      	adds	r3, #1
 80085d8:	f10a 0a01 	add.w	sl, sl, #1
 80085dc:	9307      	str	r3, [sp, #28]
 80085de:	f04f 0801 	mov.w	r8, #1
 80085e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e4:	bb73      	cbnz	r3, 8008644 <_dtoa_r+0x754>
 80085e6:	2001      	movs	r0, #1
 80085e8:	e034      	b.n	8008654 <_dtoa_r+0x764>
 80085ea:	bf00      	nop
 80085ec:	08009e98 	.word	0x08009e98
 80085f0:	08009e70 	.word	0x08009e70
 80085f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085fa:	e790      	b.n	800851e <_dtoa_r+0x62e>
 80085fc:	f109 35ff 	add.w	r5, r9, #4294967295
 8008600:	45a8      	cmp	r8, r5
 8008602:	bfbf      	itttt	lt
 8008604:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008606:	eba5 0808 	sublt.w	r8, r5, r8
 800860a:	4443      	addlt	r3, r8
 800860c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800860e:	bfb6      	itet	lt
 8008610:	46a8      	movlt	r8, r5
 8008612:	eba8 0505 	subge.w	r5, r8, r5
 8008616:	2500      	movlt	r5, #0
 8008618:	f1b9 0f00 	cmp.w	r9, #0
 800861c:	bfb9      	ittee	lt
 800861e:	ebaa 0609 	sublt.w	r6, sl, r9
 8008622:	2300      	movlt	r3, #0
 8008624:	4656      	movge	r6, sl
 8008626:	464b      	movge	r3, r9
 8008628:	e77b      	b.n	8008522 <_dtoa_r+0x632>
 800862a:	4645      	mov	r5, r8
 800862c:	4656      	mov	r6, sl
 800862e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008630:	e780      	b.n	8008534 <_dtoa_r+0x644>
 8008632:	4642      	mov	r2, r8
 8008634:	e7a8      	b.n	8008588 <_dtoa_r+0x698>
 8008636:	f04f 0800 	mov.w	r8, #0
 800863a:	e7d2      	b.n	80085e2 <_dtoa_r+0x6f2>
 800863c:	4698      	mov	r8, r3
 800863e:	e7d0      	b.n	80085e2 <_dtoa_r+0x6f2>
 8008640:	f04f 0800 	mov.w	r8, #0
 8008644:	692b      	ldr	r3, [r5, #16]
 8008646:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800864a:	6918      	ldr	r0, [r3, #16]
 800864c:	f000 fdbf 	bl	80091ce <__hi0bits>
 8008650:	f1c0 0020 	rsb	r0, r0, #32
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	4418      	add	r0, r3
 8008658:	f010 001f 	ands.w	r0, r0, #31
 800865c:	d047      	beq.n	80086ee <_dtoa_r+0x7fe>
 800865e:	f1c0 0320 	rsb	r3, r0, #32
 8008662:	2b04      	cmp	r3, #4
 8008664:	dd3b      	ble.n	80086de <_dtoa_r+0x7ee>
 8008666:	9b07      	ldr	r3, [sp, #28]
 8008668:	f1c0 001c 	rsb	r0, r0, #28
 800866c:	4482      	add	sl, r0
 800866e:	4406      	add	r6, r0
 8008670:	4403      	add	r3, r0
 8008672:	9307      	str	r3, [sp, #28]
 8008674:	f1ba 0f00 	cmp.w	sl, #0
 8008678:	dd05      	ble.n	8008686 <_dtoa_r+0x796>
 800867a:	4652      	mov	r2, sl
 800867c:	9901      	ldr	r1, [sp, #4]
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fee0 	bl	8009444 <__lshift>
 8008684:	9001      	str	r0, [sp, #4]
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	2b00      	cmp	r3, #0
 800868a:	dd05      	ble.n	8008698 <_dtoa_r+0x7a8>
 800868c:	4629      	mov	r1, r5
 800868e:	461a      	mov	r2, r3
 8008690:	4620      	mov	r0, r4
 8008692:	f000 fed7 	bl	8009444 <__lshift>
 8008696:	4605      	mov	r5, r0
 8008698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800869a:	b353      	cbz	r3, 80086f2 <_dtoa_r+0x802>
 800869c:	4629      	mov	r1, r5
 800869e:	9801      	ldr	r0, [sp, #4]
 80086a0:	f000 ff24 	bl	80094ec <__mcmp>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	da24      	bge.n	80086f2 <_dtoa_r+0x802>
 80086a8:	2300      	movs	r3, #0
 80086aa:	220a      	movs	r2, #10
 80086ac:	9901      	ldr	r1, [sp, #4]
 80086ae:	4620      	mov	r0, r4
 80086b0:	f000 fd14 	bl	80090dc <__multadd>
 80086b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b6:	9001      	str	r0, [sp, #4]
 80086b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8142 	beq.w	8008946 <_dtoa_r+0xa56>
 80086c2:	2300      	movs	r3, #0
 80086c4:	4639      	mov	r1, r7
 80086c6:	220a      	movs	r2, #10
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fd07 	bl	80090dc <__multadd>
 80086ce:	9b06      	ldr	r3, [sp, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	4607      	mov	r7, r0
 80086d4:	dc4b      	bgt.n	800876e <_dtoa_r+0x87e>
 80086d6:	9b08      	ldr	r3, [sp, #32]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	dd48      	ble.n	800876e <_dtoa_r+0x87e>
 80086dc:	e011      	b.n	8008702 <_dtoa_r+0x812>
 80086de:	d0c9      	beq.n	8008674 <_dtoa_r+0x784>
 80086e0:	9a07      	ldr	r2, [sp, #28]
 80086e2:	331c      	adds	r3, #28
 80086e4:	441a      	add	r2, r3
 80086e6:	449a      	add	sl, r3
 80086e8:	441e      	add	r6, r3
 80086ea:	4613      	mov	r3, r2
 80086ec:	e7c1      	b.n	8008672 <_dtoa_r+0x782>
 80086ee:	4603      	mov	r3, r0
 80086f0:	e7f6      	b.n	80086e0 <_dtoa_r+0x7f0>
 80086f2:	f1b9 0f00 	cmp.w	r9, #0
 80086f6:	dc34      	bgt.n	8008762 <_dtoa_r+0x872>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	dd31      	ble.n	8008762 <_dtoa_r+0x872>
 80086fe:	f8cd 9018 	str.w	r9, [sp, #24]
 8008702:	9b06      	ldr	r3, [sp, #24]
 8008704:	b963      	cbnz	r3, 8008720 <_dtoa_r+0x830>
 8008706:	4629      	mov	r1, r5
 8008708:	2205      	movs	r2, #5
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fce6 	bl	80090dc <__multadd>
 8008710:	4601      	mov	r1, r0
 8008712:	4605      	mov	r5, r0
 8008714:	9801      	ldr	r0, [sp, #4]
 8008716:	f000 fee9 	bl	80094ec <__mcmp>
 800871a:	2800      	cmp	r0, #0
 800871c:	f73f adfc 	bgt.w	8008318 <_dtoa_r+0x428>
 8008720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008722:	9e04      	ldr	r6, [sp, #16]
 8008724:	ea6f 0b03 	mvn.w	fp, r3
 8008728:	f04f 0900 	mov.w	r9, #0
 800872c:	4629      	mov	r1, r5
 800872e:	4620      	mov	r0, r4
 8008730:	f000 fcbd 	bl	80090ae <_Bfree>
 8008734:	2f00      	cmp	r7, #0
 8008736:	f43f aebb 	beq.w	80084b0 <_dtoa_r+0x5c0>
 800873a:	f1b9 0f00 	cmp.w	r9, #0
 800873e:	d005      	beq.n	800874c <_dtoa_r+0x85c>
 8008740:	45b9      	cmp	r9, r7
 8008742:	d003      	beq.n	800874c <_dtoa_r+0x85c>
 8008744:	4649      	mov	r1, r9
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fcb1 	bl	80090ae <_Bfree>
 800874c:	4639      	mov	r1, r7
 800874e:	4620      	mov	r0, r4
 8008750:	f000 fcad 	bl	80090ae <_Bfree>
 8008754:	e6ac      	b.n	80084b0 <_dtoa_r+0x5c0>
 8008756:	2500      	movs	r5, #0
 8008758:	462f      	mov	r7, r5
 800875a:	e7e1      	b.n	8008720 <_dtoa_r+0x830>
 800875c:	469b      	mov	fp, r3
 800875e:	462f      	mov	r7, r5
 8008760:	e5da      	b.n	8008318 <_dtoa_r+0x428>
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	f8cd 9018 	str.w	r9, [sp, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80f3 	beq.w	8008954 <_dtoa_r+0xa64>
 800876e:	2e00      	cmp	r6, #0
 8008770:	dd05      	ble.n	800877e <_dtoa_r+0x88e>
 8008772:	4639      	mov	r1, r7
 8008774:	4632      	mov	r2, r6
 8008776:	4620      	mov	r0, r4
 8008778:	f000 fe64 	bl	8009444 <__lshift>
 800877c:	4607      	mov	r7, r0
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	d04c      	beq.n	800881e <_dtoa_r+0x92e>
 8008784:	6879      	ldr	r1, [r7, #4]
 8008786:	4620      	mov	r0, r4
 8008788:	f000 fc5d 	bl	8009046 <_Balloc>
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	3202      	adds	r2, #2
 8008790:	4606      	mov	r6, r0
 8008792:	0092      	lsls	r2, r2, #2
 8008794:	f107 010c 	add.w	r1, r7, #12
 8008798:	300c      	adds	r0, #12
 800879a:	f000 fc49 	bl	8009030 <memcpy>
 800879e:	2201      	movs	r2, #1
 80087a0:	4631      	mov	r1, r6
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fe4e 	bl	8009444 <__lshift>
 80087a8:	9b02      	ldr	r3, [sp, #8]
 80087aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	46b9      	mov	r9, r7
 80087b4:	9307      	str	r3, [sp, #28]
 80087b6:	4607      	mov	r7, r0
 80087b8:	4629      	mov	r1, r5
 80087ba:	9801      	ldr	r0, [sp, #4]
 80087bc:	f7ff fb0a 	bl	8007dd4 <quorem>
 80087c0:	4649      	mov	r1, r9
 80087c2:	4606      	mov	r6, r0
 80087c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087c8:	9801      	ldr	r0, [sp, #4]
 80087ca:	f000 fe8f 	bl	80094ec <__mcmp>
 80087ce:	463a      	mov	r2, r7
 80087d0:	9002      	str	r0, [sp, #8]
 80087d2:	4629      	mov	r1, r5
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fea3 	bl	8009520 <__mdiff>
 80087da:	68c3      	ldr	r3, [r0, #12]
 80087dc:	4602      	mov	r2, r0
 80087de:	bb03      	cbnz	r3, 8008822 <_dtoa_r+0x932>
 80087e0:	4601      	mov	r1, r0
 80087e2:	9009      	str	r0, [sp, #36]	; 0x24
 80087e4:	9801      	ldr	r0, [sp, #4]
 80087e6:	f000 fe81 	bl	80094ec <__mcmp>
 80087ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ec:	4603      	mov	r3, r0
 80087ee:	4611      	mov	r1, r2
 80087f0:	4620      	mov	r0, r4
 80087f2:	9309      	str	r3, [sp, #36]	; 0x24
 80087f4:	f000 fc5b 	bl	80090ae <_Bfree>
 80087f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fa:	b9a3      	cbnz	r3, 8008826 <_dtoa_r+0x936>
 80087fc:	9a08      	ldr	r2, [sp, #32]
 80087fe:	b992      	cbnz	r2, 8008826 <_dtoa_r+0x936>
 8008800:	9a07      	ldr	r2, [sp, #28]
 8008802:	b982      	cbnz	r2, 8008826 <_dtoa_r+0x936>
 8008804:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008808:	d029      	beq.n	800885e <_dtoa_r+0x96e>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	dd01      	ble.n	8008814 <_dtoa_r+0x924>
 8008810:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008814:	f10a 0601 	add.w	r6, sl, #1
 8008818:	f88a 8000 	strb.w	r8, [sl]
 800881c:	e786      	b.n	800872c <_dtoa_r+0x83c>
 800881e:	4638      	mov	r0, r7
 8008820:	e7c2      	b.n	80087a8 <_dtoa_r+0x8b8>
 8008822:	2301      	movs	r3, #1
 8008824:	e7e3      	b.n	80087ee <_dtoa_r+0x8fe>
 8008826:	9a02      	ldr	r2, [sp, #8]
 8008828:	2a00      	cmp	r2, #0
 800882a:	db04      	blt.n	8008836 <_dtoa_r+0x946>
 800882c:	d124      	bne.n	8008878 <_dtoa_r+0x988>
 800882e:	9a08      	ldr	r2, [sp, #32]
 8008830:	bb12      	cbnz	r2, 8008878 <_dtoa_r+0x988>
 8008832:	9a07      	ldr	r2, [sp, #28]
 8008834:	bb02      	cbnz	r2, 8008878 <_dtoa_r+0x988>
 8008836:	2b00      	cmp	r3, #0
 8008838:	ddec      	ble.n	8008814 <_dtoa_r+0x924>
 800883a:	2201      	movs	r2, #1
 800883c:	9901      	ldr	r1, [sp, #4]
 800883e:	4620      	mov	r0, r4
 8008840:	f000 fe00 	bl	8009444 <__lshift>
 8008844:	4629      	mov	r1, r5
 8008846:	9001      	str	r0, [sp, #4]
 8008848:	f000 fe50 	bl	80094ec <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	dc03      	bgt.n	8008858 <_dtoa_r+0x968>
 8008850:	d1e0      	bne.n	8008814 <_dtoa_r+0x924>
 8008852:	f018 0f01 	tst.w	r8, #1
 8008856:	d0dd      	beq.n	8008814 <_dtoa_r+0x924>
 8008858:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800885c:	d1d8      	bne.n	8008810 <_dtoa_r+0x920>
 800885e:	2339      	movs	r3, #57	; 0x39
 8008860:	f10a 0601 	add.w	r6, sl, #1
 8008864:	f88a 3000 	strb.w	r3, [sl]
 8008868:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800886c:	2b39      	cmp	r3, #57	; 0x39
 800886e:	f106 32ff 	add.w	r2, r6, #4294967295
 8008872:	d04c      	beq.n	800890e <_dtoa_r+0xa1e>
 8008874:	3301      	adds	r3, #1
 8008876:	e051      	b.n	800891c <_dtoa_r+0xa2c>
 8008878:	2b00      	cmp	r3, #0
 800887a:	f10a 0601 	add.w	r6, sl, #1
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x99c>
 8008880:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008884:	d0eb      	beq.n	800885e <_dtoa_r+0x96e>
 8008886:	f108 0801 	add.w	r8, r8, #1
 800888a:	e7c5      	b.n	8008818 <_dtoa_r+0x928>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	9a06      	ldr	r2, [sp, #24]
 8008890:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008894:	1af3      	subs	r3, r6, r3
 8008896:	4293      	cmp	r3, r2
 8008898:	d021      	beq.n	80088de <_dtoa_r+0x9ee>
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	9901      	ldr	r1, [sp, #4]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fc1b 	bl	80090dc <__multadd>
 80088a6:	45b9      	cmp	r9, r7
 80088a8:	9001      	str	r0, [sp, #4]
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 020a 	mov.w	r2, #10
 80088b2:	4649      	mov	r1, r9
 80088b4:	4620      	mov	r0, r4
 80088b6:	d105      	bne.n	80088c4 <_dtoa_r+0x9d4>
 80088b8:	f000 fc10 	bl	80090dc <__multadd>
 80088bc:	4681      	mov	r9, r0
 80088be:	4607      	mov	r7, r0
 80088c0:	46b2      	mov	sl, r6
 80088c2:	e779      	b.n	80087b8 <_dtoa_r+0x8c8>
 80088c4:	f000 fc0a 	bl	80090dc <__multadd>
 80088c8:	4639      	mov	r1, r7
 80088ca:	4681      	mov	r9, r0
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fc03 	bl	80090dc <__multadd>
 80088d6:	4607      	mov	r7, r0
 80088d8:	e7f2      	b.n	80088c0 <_dtoa_r+0x9d0>
 80088da:	f04f 0900 	mov.w	r9, #0
 80088de:	2201      	movs	r2, #1
 80088e0:	9901      	ldr	r1, [sp, #4]
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fdae 	bl	8009444 <__lshift>
 80088e8:	4629      	mov	r1, r5
 80088ea:	9001      	str	r0, [sp, #4]
 80088ec:	f000 fdfe 	bl	80094ec <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dcb9      	bgt.n	8008868 <_dtoa_r+0x978>
 80088f4:	d102      	bne.n	80088fc <_dtoa_r+0xa0c>
 80088f6:	f018 0f01 	tst.w	r8, #1
 80088fa:	d1b5      	bne.n	8008868 <_dtoa_r+0x978>
 80088fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008900:	2b30      	cmp	r3, #48	; 0x30
 8008902:	f106 32ff 	add.w	r2, r6, #4294967295
 8008906:	f47f af11 	bne.w	800872c <_dtoa_r+0x83c>
 800890a:	4616      	mov	r6, r2
 800890c:	e7f6      	b.n	80088fc <_dtoa_r+0xa0c>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	4293      	cmp	r3, r2
 8008912:	d105      	bne.n	8008920 <_dtoa_r+0xa30>
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	f10b 0b01 	add.w	fp, fp, #1
 800891a:	2331      	movs	r3, #49	; 0x31
 800891c:	7013      	strb	r3, [r2, #0]
 800891e:	e705      	b.n	800872c <_dtoa_r+0x83c>
 8008920:	4616      	mov	r6, r2
 8008922:	e7a1      	b.n	8008868 <_dtoa_r+0x978>
 8008924:	4b16      	ldr	r3, [pc, #88]	; (8008980 <_dtoa_r+0xa90>)
 8008926:	f7ff bb48 	b.w	8007fba <_dtoa_r+0xca>
 800892a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800892c:	2b00      	cmp	r3, #0
 800892e:	f47f ab23 	bne.w	8007f78 <_dtoa_r+0x88>
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <_dtoa_r+0xa94>)
 8008934:	f7ff bb41 	b.w	8007fba <_dtoa_r+0xca>
 8008938:	9b08      	ldr	r3, [sp, #32]
 800893a:	2b01      	cmp	r3, #1
 800893c:	f77f ae3b 	ble.w	80085b6 <_dtoa_r+0x6c6>
 8008940:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008944:	e64f      	b.n	80085e6 <_dtoa_r+0x6f6>
 8008946:	9b06      	ldr	r3, [sp, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dc03      	bgt.n	8008954 <_dtoa_r+0xa64>
 800894c:	9b08      	ldr	r3, [sp, #32]
 800894e:	2b02      	cmp	r3, #2
 8008950:	f73f aed7 	bgt.w	8008702 <_dtoa_r+0x812>
 8008954:	9e04      	ldr	r6, [sp, #16]
 8008956:	9801      	ldr	r0, [sp, #4]
 8008958:	4629      	mov	r1, r5
 800895a:	f7ff fa3b 	bl	8007dd4 <quorem>
 800895e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008962:	f806 8b01 	strb.w	r8, [r6], #1
 8008966:	9b04      	ldr	r3, [sp, #16]
 8008968:	9a06      	ldr	r2, [sp, #24]
 800896a:	1af3      	subs	r3, r6, r3
 800896c:	429a      	cmp	r2, r3
 800896e:	ddb4      	ble.n	80088da <_dtoa_r+0x9ea>
 8008970:	2300      	movs	r3, #0
 8008972:	220a      	movs	r2, #10
 8008974:	9901      	ldr	r1, [sp, #4]
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fbb0 	bl	80090dc <__multadd>
 800897c:	9001      	str	r0, [sp, #4]
 800897e:	e7ea      	b.n	8008956 <_dtoa_r+0xa66>
 8008980:	08009d70 	.word	0x08009d70
 8008984:	08009df0 	.word	0x08009df0

08008988 <rshift>:
 8008988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898a:	6906      	ldr	r6, [r0, #16]
 800898c:	114b      	asrs	r3, r1, #5
 800898e:	429e      	cmp	r6, r3
 8008990:	f100 0414 	add.w	r4, r0, #20
 8008994:	dd30      	ble.n	80089f8 <rshift+0x70>
 8008996:	f011 011f 	ands.w	r1, r1, #31
 800899a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800899e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80089a2:	d108      	bne.n	80089b6 <rshift+0x2e>
 80089a4:	4621      	mov	r1, r4
 80089a6:	42b2      	cmp	r2, r6
 80089a8:	460b      	mov	r3, r1
 80089aa:	d211      	bcs.n	80089d0 <rshift+0x48>
 80089ac:	f852 3b04 	ldr.w	r3, [r2], #4
 80089b0:	f841 3b04 	str.w	r3, [r1], #4
 80089b4:	e7f7      	b.n	80089a6 <rshift+0x1e>
 80089b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80089ba:	f1c1 0c20 	rsb	ip, r1, #32
 80089be:	40cd      	lsrs	r5, r1
 80089c0:	3204      	adds	r2, #4
 80089c2:	4623      	mov	r3, r4
 80089c4:	42b2      	cmp	r2, r6
 80089c6:	4617      	mov	r7, r2
 80089c8:	d30c      	bcc.n	80089e4 <rshift+0x5c>
 80089ca:	601d      	str	r5, [r3, #0]
 80089cc:	b105      	cbz	r5, 80089d0 <rshift+0x48>
 80089ce:	3304      	adds	r3, #4
 80089d0:	1b1a      	subs	r2, r3, r4
 80089d2:	42a3      	cmp	r3, r4
 80089d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089d8:	bf08      	it	eq
 80089da:	2300      	moveq	r3, #0
 80089dc:	6102      	str	r2, [r0, #16]
 80089de:	bf08      	it	eq
 80089e0:	6143      	streq	r3, [r0, #20]
 80089e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e4:	683f      	ldr	r7, [r7, #0]
 80089e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80089ea:	433d      	orrs	r5, r7
 80089ec:	f843 5b04 	str.w	r5, [r3], #4
 80089f0:	f852 5b04 	ldr.w	r5, [r2], #4
 80089f4:	40cd      	lsrs	r5, r1
 80089f6:	e7e5      	b.n	80089c4 <rshift+0x3c>
 80089f8:	4623      	mov	r3, r4
 80089fa:	e7e9      	b.n	80089d0 <rshift+0x48>

080089fc <__hexdig_fun>:
 80089fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a00:	2b09      	cmp	r3, #9
 8008a02:	d802      	bhi.n	8008a0a <__hexdig_fun+0xe>
 8008a04:	3820      	subs	r0, #32
 8008a06:	b2c0      	uxtb	r0, r0
 8008a08:	4770      	bx	lr
 8008a0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d801      	bhi.n	8008a16 <__hexdig_fun+0x1a>
 8008a12:	3847      	subs	r0, #71	; 0x47
 8008a14:	e7f7      	b.n	8008a06 <__hexdig_fun+0xa>
 8008a16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a1a:	2b05      	cmp	r3, #5
 8008a1c:	d801      	bhi.n	8008a22 <__hexdig_fun+0x26>
 8008a1e:	3827      	subs	r0, #39	; 0x27
 8008a20:	e7f1      	b.n	8008a06 <__hexdig_fun+0xa>
 8008a22:	2000      	movs	r0, #0
 8008a24:	4770      	bx	lr

08008a26 <__gethex>:
 8008a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	b08b      	sub	sp, #44	; 0x2c
 8008a2c:	468a      	mov	sl, r1
 8008a2e:	9002      	str	r0, [sp, #8]
 8008a30:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008a32:	9306      	str	r3, [sp, #24]
 8008a34:	4690      	mov	r8, r2
 8008a36:	f000 fad0 	bl	8008fda <__localeconv_l>
 8008a3a:	6803      	ldr	r3, [r0, #0]
 8008a3c:	9303      	str	r3, [sp, #12]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fbfe 	bl	8000240 <strlen>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	4403      	add	r3, r0
 8008a4a:	f04f 0b00 	mov.w	fp, #0
 8008a4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	f8da 3000 	ldr.w	r3, [sl]
 8008a58:	3302      	adds	r3, #2
 8008a5a:	461f      	mov	r7, r3
 8008a5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a60:	2830      	cmp	r0, #48	; 0x30
 8008a62:	d06c      	beq.n	8008b3e <__gethex+0x118>
 8008a64:	f7ff ffca 	bl	80089fc <__hexdig_fun>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d16a      	bne.n	8008b44 <__gethex+0x11e>
 8008a6e:	9a01      	ldr	r2, [sp, #4]
 8008a70:	9903      	ldr	r1, [sp, #12]
 8008a72:	4638      	mov	r0, r7
 8008a74:	f7fe fb1a 	bl	80070ac <strncmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d166      	bne.n	8008b4a <__gethex+0x124>
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	5cf8      	ldrb	r0, [r7, r3]
 8008a80:	18fe      	adds	r6, r7, r3
 8008a82:	f7ff ffbb 	bl	80089fc <__hexdig_fun>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	d062      	beq.n	8008b50 <__gethex+0x12a>
 8008a8a:	4633      	mov	r3, r6
 8008a8c:	7818      	ldrb	r0, [r3, #0]
 8008a8e:	2830      	cmp	r0, #48	; 0x30
 8008a90:	461f      	mov	r7, r3
 8008a92:	f103 0301 	add.w	r3, r3, #1
 8008a96:	d0f9      	beq.n	8008a8c <__gethex+0x66>
 8008a98:	f7ff ffb0 	bl	80089fc <__hexdig_fun>
 8008a9c:	fab0 f580 	clz	r5, r0
 8008aa0:	096d      	lsrs	r5, r5, #5
 8008aa2:	4634      	mov	r4, r6
 8008aa4:	f04f 0b01 	mov.w	fp, #1
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	4616      	mov	r6, r2
 8008aac:	3201      	adds	r2, #1
 8008aae:	7830      	ldrb	r0, [r6, #0]
 8008ab0:	f7ff ffa4 	bl	80089fc <__hexdig_fun>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d1f8      	bne.n	8008aaa <__gethex+0x84>
 8008ab8:	9a01      	ldr	r2, [sp, #4]
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fe faf5 	bl	80070ac <strncmp>
 8008ac2:	b950      	cbnz	r0, 8008ada <__gethex+0xb4>
 8008ac4:	b954      	cbnz	r4, 8008adc <__gethex+0xb6>
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	18f4      	adds	r4, r6, r3
 8008aca:	4622      	mov	r2, r4
 8008acc:	4616      	mov	r6, r2
 8008ace:	3201      	adds	r2, #1
 8008ad0:	7830      	ldrb	r0, [r6, #0]
 8008ad2:	f7ff ff93 	bl	80089fc <__hexdig_fun>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d1f8      	bne.n	8008acc <__gethex+0xa6>
 8008ada:	b10c      	cbz	r4, 8008ae0 <__gethex+0xba>
 8008adc:	1ba4      	subs	r4, r4, r6
 8008ade:	00a4      	lsls	r4, r4, #2
 8008ae0:	7833      	ldrb	r3, [r6, #0]
 8008ae2:	2b50      	cmp	r3, #80	; 0x50
 8008ae4:	d001      	beq.n	8008aea <__gethex+0xc4>
 8008ae6:	2b70      	cmp	r3, #112	; 0x70
 8008ae8:	d140      	bne.n	8008b6c <__gethex+0x146>
 8008aea:	7873      	ldrb	r3, [r6, #1]
 8008aec:	2b2b      	cmp	r3, #43	; 0x2b
 8008aee:	d031      	beq.n	8008b54 <__gethex+0x12e>
 8008af0:	2b2d      	cmp	r3, #45	; 0x2d
 8008af2:	d033      	beq.n	8008b5c <__gethex+0x136>
 8008af4:	1c71      	adds	r1, r6, #1
 8008af6:	f04f 0900 	mov.w	r9, #0
 8008afa:	7808      	ldrb	r0, [r1, #0]
 8008afc:	f7ff ff7e 	bl	80089fc <__hexdig_fun>
 8008b00:	1e43      	subs	r3, r0, #1
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b18      	cmp	r3, #24
 8008b06:	d831      	bhi.n	8008b6c <__gethex+0x146>
 8008b08:	f1a0 0210 	sub.w	r2, r0, #16
 8008b0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b10:	f7ff ff74 	bl	80089fc <__hexdig_fun>
 8008b14:	1e43      	subs	r3, r0, #1
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b18      	cmp	r3, #24
 8008b1a:	d922      	bls.n	8008b62 <__gethex+0x13c>
 8008b1c:	f1b9 0f00 	cmp.w	r9, #0
 8008b20:	d000      	beq.n	8008b24 <__gethex+0xfe>
 8008b22:	4252      	negs	r2, r2
 8008b24:	4414      	add	r4, r2
 8008b26:	f8ca 1000 	str.w	r1, [sl]
 8008b2a:	b30d      	cbz	r5, 8008b70 <__gethex+0x14a>
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	bf0c      	ite	eq
 8008b32:	2706      	moveq	r7, #6
 8008b34:	2700      	movne	r7, #0
 8008b36:	4638      	mov	r0, r7
 8008b38:	b00b      	add	sp, #44	; 0x2c
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	f10b 0b01 	add.w	fp, fp, #1
 8008b42:	e78a      	b.n	8008a5a <__gethex+0x34>
 8008b44:	2500      	movs	r5, #0
 8008b46:	462c      	mov	r4, r5
 8008b48:	e7ae      	b.n	8008aa8 <__gethex+0x82>
 8008b4a:	463e      	mov	r6, r7
 8008b4c:	2501      	movs	r5, #1
 8008b4e:	e7c7      	b.n	8008ae0 <__gethex+0xba>
 8008b50:	4604      	mov	r4, r0
 8008b52:	e7fb      	b.n	8008b4c <__gethex+0x126>
 8008b54:	f04f 0900 	mov.w	r9, #0
 8008b58:	1cb1      	adds	r1, r6, #2
 8008b5a:	e7ce      	b.n	8008afa <__gethex+0xd4>
 8008b5c:	f04f 0901 	mov.w	r9, #1
 8008b60:	e7fa      	b.n	8008b58 <__gethex+0x132>
 8008b62:	230a      	movs	r3, #10
 8008b64:	fb03 0202 	mla	r2, r3, r2, r0
 8008b68:	3a10      	subs	r2, #16
 8008b6a:	e7cf      	b.n	8008b0c <__gethex+0xe6>
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	e7da      	b.n	8008b26 <__gethex+0x100>
 8008b70:	1bf3      	subs	r3, r6, r7
 8008b72:	3b01      	subs	r3, #1
 8008b74:	4629      	mov	r1, r5
 8008b76:	2b07      	cmp	r3, #7
 8008b78:	dc49      	bgt.n	8008c0e <__gethex+0x1e8>
 8008b7a:	9802      	ldr	r0, [sp, #8]
 8008b7c:	f000 fa63 	bl	8009046 <_Balloc>
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	f100 0914 	add.w	r9, r0, #20
 8008b86:	f04f 0b00 	mov.w	fp, #0
 8008b8a:	f1c3 0301 	rsb	r3, r3, #1
 8008b8e:	4605      	mov	r5, r0
 8008b90:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b94:	46da      	mov	sl, fp
 8008b96:	9308      	str	r3, [sp, #32]
 8008b98:	42b7      	cmp	r7, r6
 8008b9a:	d33b      	bcc.n	8008c14 <__gethex+0x1ee>
 8008b9c:	9804      	ldr	r0, [sp, #16]
 8008b9e:	f840 ab04 	str.w	sl, [r0], #4
 8008ba2:	eba0 0009 	sub.w	r0, r0, r9
 8008ba6:	1080      	asrs	r0, r0, #2
 8008ba8:	6128      	str	r0, [r5, #16]
 8008baa:	0147      	lsls	r7, r0, #5
 8008bac:	4650      	mov	r0, sl
 8008bae:	f000 fb0e 	bl	80091ce <__hi0bits>
 8008bb2:	f8d8 6000 	ldr.w	r6, [r8]
 8008bb6:	1a3f      	subs	r7, r7, r0
 8008bb8:	42b7      	cmp	r7, r6
 8008bba:	dd64      	ble.n	8008c86 <__gethex+0x260>
 8008bbc:	1bbf      	subs	r7, r7, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 fe1e 	bl	8009802 <__any_on>
 8008bc6:	4682      	mov	sl, r0
 8008bc8:	b178      	cbz	r0, 8008bea <__gethex+0x1c4>
 8008bca:	1e7b      	subs	r3, r7, #1
 8008bcc:	1159      	asrs	r1, r3, #5
 8008bce:	f003 021f 	and.w	r2, r3, #31
 8008bd2:	f04f 0a01 	mov.w	sl, #1
 8008bd6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bda:	fa0a f202 	lsl.w	r2, sl, r2
 8008bde:	420a      	tst	r2, r1
 8008be0:	d003      	beq.n	8008bea <__gethex+0x1c4>
 8008be2:	4553      	cmp	r3, sl
 8008be4:	dc46      	bgt.n	8008c74 <__gethex+0x24e>
 8008be6:	f04f 0a02 	mov.w	sl, #2
 8008bea:	4639      	mov	r1, r7
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7ff fecb 	bl	8008988 <rshift>
 8008bf2:	443c      	add	r4, r7
 8008bf4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	da52      	bge.n	8008ca2 <__gethex+0x27c>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	9802      	ldr	r0, [sp, #8]
 8008c00:	f000 fa55 	bl	80090ae <_Bfree>
 8008c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c06:	2300      	movs	r3, #0
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	27a3      	movs	r7, #163	; 0xa3
 8008c0c:	e793      	b.n	8008b36 <__gethex+0x110>
 8008c0e:	3101      	adds	r1, #1
 8008c10:	105b      	asrs	r3, r3, #1
 8008c12:	e7b0      	b.n	8008b76 <__gethex+0x150>
 8008c14:	1e73      	subs	r3, r6, #1
 8008c16:	9305      	str	r3, [sp, #20]
 8008c18:	9a07      	ldr	r2, [sp, #28]
 8008c1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d018      	beq.n	8008c54 <__gethex+0x22e>
 8008c22:	f1bb 0f20 	cmp.w	fp, #32
 8008c26:	d107      	bne.n	8008c38 <__gethex+0x212>
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	f8c3 a000 	str.w	sl, [r3]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	f04f 0a00 	mov.w	sl, #0
 8008c34:	9304      	str	r3, [sp, #16]
 8008c36:	46d3      	mov	fp, sl
 8008c38:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c3c:	f7ff fede 	bl	80089fc <__hexdig_fun>
 8008c40:	f000 000f 	and.w	r0, r0, #15
 8008c44:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c48:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c4c:	f10b 0b04 	add.w	fp, fp, #4
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	e00d      	b.n	8008c70 <__gethex+0x24a>
 8008c54:	9b05      	ldr	r3, [sp, #20]
 8008c56:	9a08      	ldr	r2, [sp, #32]
 8008c58:	4413      	add	r3, r2
 8008c5a:	42bb      	cmp	r3, r7
 8008c5c:	d3e1      	bcc.n	8008c22 <__gethex+0x1fc>
 8008c5e:	4618      	mov	r0, r3
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	9903      	ldr	r1, [sp, #12]
 8008c64:	9309      	str	r3, [sp, #36]	; 0x24
 8008c66:	f7fe fa21 	bl	80070ac <strncmp>
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d1d8      	bne.n	8008c22 <__gethex+0x1fc>
 8008c70:	461e      	mov	r6, r3
 8008c72:	e791      	b.n	8008b98 <__gethex+0x172>
 8008c74:	1eb9      	subs	r1, r7, #2
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 fdc3 	bl	8009802 <__any_on>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d0b2      	beq.n	8008be6 <__gethex+0x1c0>
 8008c80:	f04f 0a03 	mov.w	sl, #3
 8008c84:	e7b1      	b.n	8008bea <__gethex+0x1c4>
 8008c86:	da09      	bge.n	8008c9c <__gethex+0x276>
 8008c88:	1bf7      	subs	r7, r6, r7
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	463a      	mov	r2, r7
 8008c8e:	9802      	ldr	r0, [sp, #8]
 8008c90:	f000 fbd8 	bl	8009444 <__lshift>
 8008c94:	1be4      	subs	r4, r4, r7
 8008c96:	4605      	mov	r5, r0
 8008c98:	f100 0914 	add.w	r9, r0, #20
 8008c9c:	f04f 0a00 	mov.w	sl, #0
 8008ca0:	e7a8      	b.n	8008bf4 <__gethex+0x1ce>
 8008ca2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008ca6:	42a0      	cmp	r0, r4
 8008ca8:	dd6a      	ble.n	8008d80 <__gethex+0x35a>
 8008caa:	1b04      	subs	r4, r0, r4
 8008cac:	42a6      	cmp	r6, r4
 8008cae:	dc2e      	bgt.n	8008d0e <__gethex+0x2e8>
 8008cb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d022      	beq.n	8008cfe <__gethex+0x2d8>
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d024      	beq.n	8008d06 <__gethex+0x2e0>
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d115      	bne.n	8008cec <__gethex+0x2c6>
 8008cc0:	42a6      	cmp	r6, r4
 8008cc2:	d113      	bne.n	8008cec <__gethex+0x2c6>
 8008cc4:	2e01      	cmp	r6, #1
 8008cc6:	dc0b      	bgt.n	8008ce0 <__gethex+0x2ba>
 8008cc8:	9a06      	ldr	r2, [sp, #24]
 8008cca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	612b      	str	r3, [r5, #16]
 8008cd4:	f8c9 3000 	str.w	r3, [r9]
 8008cd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cda:	2762      	movs	r7, #98	; 0x62
 8008cdc:	601d      	str	r5, [r3, #0]
 8008cde:	e72a      	b.n	8008b36 <__gethex+0x110>
 8008ce0:	1e71      	subs	r1, r6, #1
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fd8d 	bl	8009802 <__any_on>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1ed      	bne.n	8008cc8 <__gethex+0x2a2>
 8008cec:	4629      	mov	r1, r5
 8008cee:	9802      	ldr	r0, [sp, #8]
 8008cf0:	f000 f9dd 	bl	80090ae <_Bfree>
 8008cf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	2750      	movs	r7, #80	; 0x50
 8008cfc:	e71b      	b.n	8008b36 <__gethex+0x110>
 8008cfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0e1      	beq.n	8008cc8 <__gethex+0x2a2>
 8008d04:	e7f2      	b.n	8008cec <__gethex+0x2c6>
 8008d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1dd      	bne.n	8008cc8 <__gethex+0x2a2>
 8008d0c:	e7ee      	b.n	8008cec <__gethex+0x2c6>
 8008d0e:	1e67      	subs	r7, r4, #1
 8008d10:	f1ba 0f00 	cmp.w	sl, #0
 8008d14:	d131      	bne.n	8008d7a <__gethex+0x354>
 8008d16:	b127      	cbz	r7, 8008d22 <__gethex+0x2fc>
 8008d18:	4639      	mov	r1, r7
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 fd71 	bl	8009802 <__any_on>
 8008d20:	4682      	mov	sl, r0
 8008d22:	117a      	asrs	r2, r7, #5
 8008d24:	2301      	movs	r3, #1
 8008d26:	f007 071f 	and.w	r7, r7, #31
 8008d2a:	fa03 f707 	lsl.w	r7, r3, r7
 8008d2e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008d32:	4621      	mov	r1, r4
 8008d34:	421f      	tst	r7, r3
 8008d36:	4628      	mov	r0, r5
 8008d38:	bf18      	it	ne
 8008d3a:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d3e:	1b36      	subs	r6, r6, r4
 8008d40:	f7ff fe22 	bl	8008988 <rshift>
 8008d44:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008d48:	2702      	movs	r7, #2
 8008d4a:	f1ba 0f00 	cmp.w	sl, #0
 8008d4e:	d048      	beq.n	8008de2 <__gethex+0x3bc>
 8008d50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d015      	beq.n	8008d84 <__gethex+0x35e>
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d017      	beq.n	8008d8c <__gethex+0x366>
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d109      	bne.n	8008d74 <__gethex+0x34e>
 8008d60:	f01a 0f02 	tst.w	sl, #2
 8008d64:	d006      	beq.n	8008d74 <__gethex+0x34e>
 8008d66:	f8d9 3000 	ldr.w	r3, [r9]
 8008d6a:	ea4a 0a03 	orr.w	sl, sl, r3
 8008d6e:	f01a 0f01 	tst.w	sl, #1
 8008d72:	d10e      	bne.n	8008d92 <__gethex+0x36c>
 8008d74:	f047 0710 	orr.w	r7, r7, #16
 8008d78:	e033      	b.n	8008de2 <__gethex+0x3bc>
 8008d7a:	f04f 0a01 	mov.w	sl, #1
 8008d7e:	e7d0      	b.n	8008d22 <__gethex+0x2fc>
 8008d80:	2701      	movs	r7, #1
 8008d82:	e7e2      	b.n	8008d4a <__gethex+0x324>
 8008d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d86:	f1c3 0301 	rsb	r3, r3, #1
 8008d8a:	9315      	str	r3, [sp, #84]	; 0x54
 8008d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0f0      	beq.n	8008d74 <__gethex+0x34e>
 8008d92:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d96:	f105 0314 	add.w	r3, r5, #20
 8008d9a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008d9e:	eb03 010a 	add.w	r1, r3, sl
 8008da2:	f04f 0c00 	mov.w	ip, #0
 8008da6:	4618      	mov	r0, r3
 8008da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008db0:	d01c      	beq.n	8008dec <__gethex+0x3c6>
 8008db2:	3201      	adds	r2, #1
 8008db4:	6002      	str	r2, [r0, #0]
 8008db6:	2f02      	cmp	r7, #2
 8008db8:	f105 0314 	add.w	r3, r5, #20
 8008dbc:	d138      	bne.n	8008e30 <__gethex+0x40a>
 8008dbe:	f8d8 2000 	ldr.w	r2, [r8]
 8008dc2:	3a01      	subs	r2, #1
 8008dc4:	42b2      	cmp	r2, r6
 8008dc6:	d10a      	bne.n	8008dde <__gethex+0x3b8>
 8008dc8:	1171      	asrs	r1, r6, #5
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f006 061f 	and.w	r6, r6, #31
 8008dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dd4:	fa02 f606 	lsl.w	r6, r2, r6
 8008dd8:	421e      	tst	r6, r3
 8008dda:	bf18      	it	ne
 8008ddc:	4617      	movne	r7, r2
 8008dde:	f047 0720 	orr.w	r7, r7, #32
 8008de2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de4:	601d      	str	r5, [r3, #0]
 8008de6:	9b06      	ldr	r3, [sp, #24]
 8008de8:	601c      	str	r4, [r3, #0]
 8008dea:	e6a4      	b.n	8008b36 <__gethex+0x110>
 8008dec:	4299      	cmp	r1, r3
 8008dee:	f843 cc04 	str.w	ip, [r3, #-4]
 8008df2:	d8d8      	bhi.n	8008da6 <__gethex+0x380>
 8008df4:	68ab      	ldr	r3, [r5, #8]
 8008df6:	4599      	cmp	r9, r3
 8008df8:	db12      	blt.n	8008e20 <__gethex+0x3fa>
 8008dfa:	6869      	ldr	r1, [r5, #4]
 8008dfc:	9802      	ldr	r0, [sp, #8]
 8008dfe:	3101      	adds	r1, #1
 8008e00:	f000 f921 	bl	8009046 <_Balloc>
 8008e04:	692a      	ldr	r2, [r5, #16]
 8008e06:	3202      	adds	r2, #2
 8008e08:	f105 010c 	add.w	r1, r5, #12
 8008e0c:	4683      	mov	fp, r0
 8008e0e:	0092      	lsls	r2, r2, #2
 8008e10:	300c      	adds	r0, #12
 8008e12:	f000 f90d 	bl	8009030 <memcpy>
 8008e16:	4629      	mov	r1, r5
 8008e18:	9802      	ldr	r0, [sp, #8]
 8008e1a:	f000 f948 	bl	80090ae <_Bfree>
 8008e1e:	465d      	mov	r5, fp
 8008e20:	692b      	ldr	r3, [r5, #16]
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e28:	612a      	str	r2, [r5, #16]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	615a      	str	r2, [r3, #20]
 8008e2e:	e7c2      	b.n	8008db6 <__gethex+0x390>
 8008e30:	692a      	ldr	r2, [r5, #16]
 8008e32:	454a      	cmp	r2, r9
 8008e34:	dd0b      	ble.n	8008e4e <__gethex+0x428>
 8008e36:	2101      	movs	r1, #1
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f7ff fda5 	bl	8008988 <rshift>
 8008e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e42:	3401      	adds	r4, #1
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	f6ff aed9 	blt.w	8008bfc <__gethex+0x1d6>
 8008e4a:	2701      	movs	r7, #1
 8008e4c:	e7c7      	b.n	8008dde <__gethex+0x3b8>
 8008e4e:	f016 061f 	ands.w	r6, r6, #31
 8008e52:	d0fa      	beq.n	8008e4a <__gethex+0x424>
 8008e54:	449a      	add	sl, r3
 8008e56:	f1c6 0620 	rsb	r6, r6, #32
 8008e5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e5e:	f000 f9b6 	bl	80091ce <__hi0bits>
 8008e62:	42b0      	cmp	r0, r6
 8008e64:	dbe7      	blt.n	8008e36 <__gethex+0x410>
 8008e66:	e7f0      	b.n	8008e4a <__gethex+0x424>

08008e68 <L_shift>:
 8008e68:	f1c2 0208 	rsb	r2, r2, #8
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	f1c2 0620 	rsb	r6, r2, #32
 8008e74:	6843      	ldr	r3, [r0, #4]
 8008e76:	6804      	ldr	r4, [r0, #0]
 8008e78:	fa03 f506 	lsl.w	r5, r3, r6
 8008e7c:	432c      	orrs	r4, r5
 8008e7e:	40d3      	lsrs	r3, r2
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e86:	4288      	cmp	r0, r1
 8008e88:	d3f4      	bcc.n	8008e74 <L_shift+0xc>
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}

08008e8c <__match>:
 8008e8c:	b530      	push	{r4, r5, lr}
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e96:	b914      	cbnz	r4, 8008e9e <__match+0x12>
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	bd30      	pop	{r4, r5, pc}
 8008e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ea6:	2d19      	cmp	r5, #25
 8008ea8:	bf98      	it	ls
 8008eaa:	3220      	addls	r2, #32
 8008eac:	42a2      	cmp	r2, r4
 8008eae:	d0f0      	beq.n	8008e92 <__match+0x6>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e7f3      	b.n	8008e9c <__match+0x10>

08008eb4 <__hexnan>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	6801      	ldr	r1, [r0, #0]
 8008ebc:	115f      	asrs	r7, r3, #5
 8008ebe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008ec2:	f013 031f 	ands.w	r3, r3, #31
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	bf18      	it	ne
 8008eca:	3704      	addne	r7, #4
 8008ecc:	2500      	movs	r5, #0
 8008ece:	1f3e      	subs	r6, r7, #4
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	4690      	mov	r8, r2
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	f847 5c04 	str.w	r5, [r7, #-4]
 8008eda:	46b1      	mov	r9, r6
 8008edc:	4634      	mov	r4, r6
 8008ede:	9502      	str	r5, [sp, #8]
 8008ee0:	46ab      	mov	fp, r5
 8008ee2:	784a      	ldrb	r2, [r1, #1]
 8008ee4:	1c4b      	adds	r3, r1, #1
 8008ee6:	9303      	str	r3, [sp, #12]
 8008ee8:	b342      	cbz	r2, 8008f3c <__hexnan+0x88>
 8008eea:	4610      	mov	r0, r2
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	9204      	str	r2, [sp, #16]
 8008ef0:	f7ff fd84 	bl	80089fc <__hexdig_fun>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d143      	bne.n	8008f80 <__hexnan+0xcc>
 8008ef8:	9a04      	ldr	r2, [sp, #16]
 8008efa:	9905      	ldr	r1, [sp, #20]
 8008efc:	2a20      	cmp	r2, #32
 8008efe:	d818      	bhi.n	8008f32 <__hexnan+0x7e>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	459b      	cmp	fp, r3
 8008f04:	dd13      	ble.n	8008f2e <__hexnan+0x7a>
 8008f06:	454c      	cmp	r4, r9
 8008f08:	d206      	bcs.n	8008f18 <__hexnan+0x64>
 8008f0a:	2d07      	cmp	r5, #7
 8008f0c:	dc04      	bgt.n	8008f18 <__hexnan+0x64>
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4649      	mov	r1, r9
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7ff ffa8 	bl	8008e68 <L_shift>
 8008f18:	4544      	cmp	r4, r8
 8008f1a:	d944      	bls.n	8008fa6 <__hexnan+0xf2>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f22:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f26:	f8cd b008 	str.w	fp, [sp, #8]
 8008f2a:	464c      	mov	r4, r9
 8008f2c:	461d      	mov	r5, r3
 8008f2e:	9903      	ldr	r1, [sp, #12]
 8008f30:	e7d7      	b.n	8008ee2 <__hexnan+0x2e>
 8008f32:	2a29      	cmp	r2, #41	; 0x29
 8008f34:	d14a      	bne.n	8008fcc <__hexnan+0x118>
 8008f36:	3102      	adds	r1, #2
 8008f38:	f8ca 1000 	str.w	r1, [sl]
 8008f3c:	f1bb 0f00 	cmp.w	fp, #0
 8008f40:	d044      	beq.n	8008fcc <__hexnan+0x118>
 8008f42:	454c      	cmp	r4, r9
 8008f44:	d206      	bcs.n	8008f54 <__hexnan+0xa0>
 8008f46:	2d07      	cmp	r5, #7
 8008f48:	dc04      	bgt.n	8008f54 <__hexnan+0xa0>
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff ff8a 	bl	8008e68 <L_shift>
 8008f54:	4544      	cmp	r4, r8
 8008f56:	d928      	bls.n	8008faa <__hexnan+0xf6>
 8008f58:	4643      	mov	r3, r8
 8008f5a:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f5e:	f843 2b04 	str.w	r2, [r3], #4
 8008f62:	42a6      	cmp	r6, r4
 8008f64:	d2f9      	bcs.n	8008f5a <__hexnan+0xa6>
 8008f66:	2200      	movs	r2, #0
 8008f68:	f843 2b04 	str.w	r2, [r3], #4
 8008f6c:	429e      	cmp	r6, r3
 8008f6e:	d2fb      	bcs.n	8008f68 <__hexnan+0xb4>
 8008f70:	6833      	ldr	r3, [r6, #0]
 8008f72:	b91b      	cbnz	r3, 8008f7c <__hexnan+0xc8>
 8008f74:	4546      	cmp	r6, r8
 8008f76:	d127      	bne.n	8008fc8 <__hexnan+0x114>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	6033      	str	r3, [r6, #0]
 8008f7c:	2005      	movs	r0, #5
 8008f7e:	e026      	b.n	8008fce <__hexnan+0x11a>
 8008f80:	3501      	adds	r5, #1
 8008f82:	2d08      	cmp	r5, #8
 8008f84:	f10b 0b01 	add.w	fp, fp, #1
 8008f88:	dd06      	ble.n	8008f98 <__hexnan+0xe4>
 8008f8a:	4544      	cmp	r4, r8
 8008f8c:	d9cf      	bls.n	8008f2e <__hexnan+0x7a>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f94:	2501      	movs	r5, #1
 8008f96:	3c04      	subs	r4, #4
 8008f98:	6822      	ldr	r2, [r4, #0]
 8008f9a:	f000 000f 	and.w	r0, r0, #15
 8008f9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008fa2:	6020      	str	r0, [r4, #0]
 8008fa4:	e7c3      	b.n	8008f2e <__hexnan+0x7a>
 8008fa6:	2508      	movs	r5, #8
 8008fa8:	e7c1      	b.n	8008f2e <__hexnan+0x7a>
 8008faa:	9b01      	ldr	r3, [sp, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0df      	beq.n	8008f70 <__hexnan+0xbc>
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	f1c3 0320 	rsb	r3, r3, #32
 8008fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fbc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008fc0:	401a      	ands	r2, r3
 8008fc2:	f847 2c04 	str.w	r2, [r7, #-4]
 8008fc6:	e7d3      	b.n	8008f70 <__hexnan+0xbc>
 8008fc8:	3e04      	subs	r6, #4
 8008fca:	e7d1      	b.n	8008f70 <__hexnan+0xbc>
 8008fcc:	2004      	movs	r0, #4
 8008fce:	b007      	add	sp, #28
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fd4 <__locale_ctype_ptr_l>:
 8008fd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008fd8:	4770      	bx	lr

08008fda <__localeconv_l>:
 8008fda:	30f0      	adds	r0, #240	; 0xf0
 8008fdc:	4770      	bx	lr
	...

08008fe0 <_localeconv_r>:
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <_localeconv_r+0x14>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6a18      	ldr	r0, [r3, #32]
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <_localeconv_r+0x18>)
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	bf08      	it	eq
 8008fec:	4618      	moveq	r0, r3
 8008fee:	30f0      	adds	r0, #240	; 0xf0
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	2000001c 	.word	0x2000001c
 8008ff8:	20000080 	.word	0x20000080

08008ffc <malloc>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <malloc+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f000 bc7b 	b.w	80098fc <_malloc_r>
 8009006:	bf00      	nop
 8009008:	2000001c 	.word	0x2000001c

0800900c <__ascii_mbtowc>:
 800900c:	b082      	sub	sp, #8
 800900e:	b901      	cbnz	r1, 8009012 <__ascii_mbtowc+0x6>
 8009010:	a901      	add	r1, sp, #4
 8009012:	b142      	cbz	r2, 8009026 <__ascii_mbtowc+0x1a>
 8009014:	b14b      	cbz	r3, 800902a <__ascii_mbtowc+0x1e>
 8009016:	7813      	ldrb	r3, [r2, #0]
 8009018:	600b      	str	r3, [r1, #0]
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	1c10      	adds	r0, r2, #0
 800901e:	bf18      	it	ne
 8009020:	2001      	movne	r0, #1
 8009022:	b002      	add	sp, #8
 8009024:	4770      	bx	lr
 8009026:	4610      	mov	r0, r2
 8009028:	e7fb      	b.n	8009022 <__ascii_mbtowc+0x16>
 800902a:	f06f 0001 	mvn.w	r0, #1
 800902e:	e7f8      	b.n	8009022 <__ascii_mbtowc+0x16>

08009030 <memcpy>:
 8009030:	b510      	push	{r4, lr}
 8009032:	1e43      	subs	r3, r0, #1
 8009034:	440a      	add	r2, r1
 8009036:	4291      	cmp	r1, r2
 8009038:	d100      	bne.n	800903c <memcpy+0xc>
 800903a:	bd10      	pop	{r4, pc}
 800903c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009044:	e7f7      	b.n	8009036 <memcpy+0x6>

08009046 <_Balloc>:
 8009046:	b570      	push	{r4, r5, r6, lr}
 8009048:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800904a:	4604      	mov	r4, r0
 800904c:	460e      	mov	r6, r1
 800904e:	b93d      	cbnz	r5, 8009060 <_Balloc+0x1a>
 8009050:	2010      	movs	r0, #16
 8009052:	f7ff ffd3 	bl	8008ffc <malloc>
 8009056:	6260      	str	r0, [r4, #36]	; 0x24
 8009058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800905c:	6005      	str	r5, [r0, #0]
 800905e:	60c5      	str	r5, [r0, #12]
 8009060:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009062:	68eb      	ldr	r3, [r5, #12]
 8009064:	b183      	cbz	r3, 8009088 <_Balloc+0x42>
 8009066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800906e:	b9b8      	cbnz	r0, 80090a0 <_Balloc+0x5a>
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f506 	lsl.w	r5, r1, r6
 8009076:	1d6a      	adds	r2, r5, #5
 8009078:	0092      	lsls	r2, r2, #2
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fbe2 	bl	8009844 <_calloc_r>
 8009080:	b160      	cbz	r0, 800909c <_Balloc+0x56>
 8009082:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009086:	e00e      	b.n	80090a6 <_Balloc+0x60>
 8009088:	2221      	movs	r2, #33	; 0x21
 800908a:	2104      	movs	r1, #4
 800908c:	4620      	mov	r0, r4
 800908e:	f000 fbd9 	bl	8009844 <_calloc_r>
 8009092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009094:	60e8      	str	r0, [r5, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e4      	bne.n	8009066 <_Balloc+0x20>
 800909c:	2000      	movs	r0, #0
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80090a6:	2300      	movs	r3, #0
 80090a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090ac:	e7f7      	b.n	800909e <_Balloc+0x58>

080090ae <_Bfree>:
 80090ae:	b570      	push	{r4, r5, r6, lr}
 80090b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090b2:	4606      	mov	r6, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	b93c      	cbnz	r4, 80090c8 <_Bfree+0x1a>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f7ff ff9f 	bl	8008ffc <malloc>
 80090be:	6270      	str	r0, [r6, #36]	; 0x24
 80090c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090c4:	6004      	str	r4, [r0, #0]
 80090c6:	60c4      	str	r4, [r0, #12]
 80090c8:	b13d      	cbz	r5, 80090da <_Bfree+0x2c>
 80090ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090cc:	686a      	ldr	r2, [r5, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090d4:	6029      	str	r1, [r5, #0]
 80090d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80090da:	bd70      	pop	{r4, r5, r6, pc}

080090dc <__multadd>:
 80090dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e0:	690d      	ldr	r5, [r1, #16]
 80090e2:	461f      	mov	r7, r3
 80090e4:	4606      	mov	r6, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	f101 0c14 	add.w	ip, r1, #20
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8dc 0000 	ldr.w	r0, [ip]
 80090f2:	b281      	uxth	r1, r0
 80090f4:	fb02 7101 	mla	r1, r2, r1, r7
 80090f8:	0c0f      	lsrs	r7, r1, #16
 80090fa:	0c00      	lsrs	r0, r0, #16
 80090fc:	fb02 7000 	mla	r0, r2, r0, r7
 8009100:	b289      	uxth	r1, r1
 8009102:	3301      	adds	r3, #1
 8009104:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009108:	429d      	cmp	r5, r3
 800910a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800910e:	f84c 1b04 	str.w	r1, [ip], #4
 8009112:	dcec      	bgt.n	80090ee <__multadd+0x12>
 8009114:	b1d7      	cbz	r7, 800914c <__multadd+0x70>
 8009116:	68a3      	ldr	r3, [r4, #8]
 8009118:	42ab      	cmp	r3, r5
 800911a:	dc12      	bgt.n	8009142 <__multadd+0x66>
 800911c:	6861      	ldr	r1, [r4, #4]
 800911e:	4630      	mov	r0, r6
 8009120:	3101      	adds	r1, #1
 8009122:	f7ff ff90 	bl	8009046 <_Balloc>
 8009126:	6922      	ldr	r2, [r4, #16]
 8009128:	3202      	adds	r2, #2
 800912a:	f104 010c 	add.w	r1, r4, #12
 800912e:	4680      	mov	r8, r0
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	300c      	adds	r0, #12
 8009134:	f7ff ff7c 	bl	8009030 <memcpy>
 8009138:	4621      	mov	r1, r4
 800913a:	4630      	mov	r0, r6
 800913c:	f7ff ffb7 	bl	80090ae <_Bfree>
 8009140:	4644      	mov	r4, r8
 8009142:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009146:	3501      	adds	r5, #1
 8009148:	615f      	str	r7, [r3, #20]
 800914a:	6125      	str	r5, [r4, #16]
 800914c:	4620      	mov	r0, r4
 800914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009152 <__s2b>:
 8009152:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009156:	460c      	mov	r4, r1
 8009158:	4615      	mov	r5, r2
 800915a:	461f      	mov	r7, r3
 800915c:	2209      	movs	r2, #9
 800915e:	3308      	adds	r3, #8
 8009160:	4606      	mov	r6, r0
 8009162:	fb93 f3f2 	sdiv	r3, r3, r2
 8009166:	2100      	movs	r1, #0
 8009168:	2201      	movs	r2, #1
 800916a:	429a      	cmp	r2, r3
 800916c:	db20      	blt.n	80091b0 <__s2b+0x5e>
 800916e:	4630      	mov	r0, r6
 8009170:	f7ff ff69 	bl	8009046 <_Balloc>
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	6143      	str	r3, [r0, #20]
 8009178:	2d09      	cmp	r5, #9
 800917a:	f04f 0301 	mov.w	r3, #1
 800917e:	6103      	str	r3, [r0, #16]
 8009180:	dd19      	ble.n	80091b6 <__s2b+0x64>
 8009182:	f104 0809 	add.w	r8, r4, #9
 8009186:	46c1      	mov	r9, r8
 8009188:	442c      	add	r4, r5
 800918a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800918e:	4601      	mov	r1, r0
 8009190:	3b30      	subs	r3, #48	; 0x30
 8009192:	220a      	movs	r2, #10
 8009194:	4630      	mov	r0, r6
 8009196:	f7ff ffa1 	bl	80090dc <__multadd>
 800919a:	45a1      	cmp	r9, r4
 800919c:	d1f5      	bne.n	800918a <__s2b+0x38>
 800919e:	eb08 0405 	add.w	r4, r8, r5
 80091a2:	3c08      	subs	r4, #8
 80091a4:	1b2d      	subs	r5, r5, r4
 80091a6:	1963      	adds	r3, r4, r5
 80091a8:	42bb      	cmp	r3, r7
 80091aa:	db07      	blt.n	80091bc <__s2b+0x6a>
 80091ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b0:	0052      	lsls	r2, r2, #1
 80091b2:	3101      	adds	r1, #1
 80091b4:	e7d9      	b.n	800916a <__s2b+0x18>
 80091b6:	340a      	adds	r4, #10
 80091b8:	2509      	movs	r5, #9
 80091ba:	e7f3      	b.n	80091a4 <__s2b+0x52>
 80091bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091c0:	4601      	mov	r1, r0
 80091c2:	3b30      	subs	r3, #48	; 0x30
 80091c4:	220a      	movs	r2, #10
 80091c6:	4630      	mov	r0, r6
 80091c8:	f7ff ff88 	bl	80090dc <__multadd>
 80091cc:	e7eb      	b.n	80091a6 <__s2b+0x54>

080091ce <__hi0bits>:
 80091ce:	0c02      	lsrs	r2, r0, #16
 80091d0:	0412      	lsls	r2, r2, #16
 80091d2:	4603      	mov	r3, r0
 80091d4:	b9b2      	cbnz	r2, 8009204 <__hi0bits+0x36>
 80091d6:	0403      	lsls	r3, r0, #16
 80091d8:	2010      	movs	r0, #16
 80091da:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80091de:	bf04      	itt	eq
 80091e0:	021b      	lsleq	r3, r3, #8
 80091e2:	3008      	addeq	r0, #8
 80091e4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80091e8:	bf04      	itt	eq
 80091ea:	011b      	lsleq	r3, r3, #4
 80091ec:	3004      	addeq	r0, #4
 80091ee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80091f2:	bf04      	itt	eq
 80091f4:	009b      	lsleq	r3, r3, #2
 80091f6:	3002      	addeq	r0, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	db06      	blt.n	800920a <__hi0bits+0x3c>
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	d503      	bpl.n	8009208 <__hi0bits+0x3a>
 8009200:	3001      	adds	r0, #1
 8009202:	4770      	bx	lr
 8009204:	2000      	movs	r0, #0
 8009206:	e7e8      	b.n	80091da <__hi0bits+0xc>
 8009208:	2020      	movs	r0, #32
 800920a:	4770      	bx	lr

0800920c <__lo0bits>:
 800920c:	6803      	ldr	r3, [r0, #0]
 800920e:	f013 0207 	ands.w	r2, r3, #7
 8009212:	4601      	mov	r1, r0
 8009214:	d00b      	beq.n	800922e <__lo0bits+0x22>
 8009216:	07da      	lsls	r2, r3, #31
 8009218:	d423      	bmi.n	8009262 <__lo0bits+0x56>
 800921a:	0798      	lsls	r0, r3, #30
 800921c:	bf49      	itett	mi
 800921e:	085b      	lsrmi	r3, r3, #1
 8009220:	089b      	lsrpl	r3, r3, #2
 8009222:	2001      	movmi	r0, #1
 8009224:	600b      	strmi	r3, [r1, #0]
 8009226:	bf5c      	itt	pl
 8009228:	600b      	strpl	r3, [r1, #0]
 800922a:	2002      	movpl	r0, #2
 800922c:	4770      	bx	lr
 800922e:	b298      	uxth	r0, r3
 8009230:	b9a8      	cbnz	r0, 800925e <__lo0bits+0x52>
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	2010      	movs	r0, #16
 8009236:	f013 0fff 	tst.w	r3, #255	; 0xff
 800923a:	bf04      	itt	eq
 800923c:	0a1b      	lsreq	r3, r3, #8
 800923e:	3008      	addeq	r0, #8
 8009240:	071a      	lsls	r2, r3, #28
 8009242:	bf04      	itt	eq
 8009244:	091b      	lsreq	r3, r3, #4
 8009246:	3004      	addeq	r0, #4
 8009248:	079a      	lsls	r2, r3, #30
 800924a:	bf04      	itt	eq
 800924c:	089b      	lsreq	r3, r3, #2
 800924e:	3002      	addeq	r0, #2
 8009250:	07da      	lsls	r2, r3, #31
 8009252:	d402      	bmi.n	800925a <__lo0bits+0x4e>
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	d006      	beq.n	8009266 <__lo0bits+0x5a>
 8009258:	3001      	adds	r0, #1
 800925a:	600b      	str	r3, [r1, #0]
 800925c:	4770      	bx	lr
 800925e:	4610      	mov	r0, r2
 8009260:	e7e9      	b.n	8009236 <__lo0bits+0x2a>
 8009262:	2000      	movs	r0, #0
 8009264:	4770      	bx	lr
 8009266:	2020      	movs	r0, #32
 8009268:	4770      	bx	lr

0800926a <__i2b>:
 800926a:	b510      	push	{r4, lr}
 800926c:	460c      	mov	r4, r1
 800926e:	2101      	movs	r1, #1
 8009270:	f7ff fee9 	bl	8009046 <_Balloc>
 8009274:	2201      	movs	r2, #1
 8009276:	6144      	str	r4, [r0, #20]
 8009278:	6102      	str	r2, [r0, #16]
 800927a:	bd10      	pop	{r4, pc}

0800927c <__multiply>:
 800927c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	4614      	mov	r4, r2
 8009282:	690a      	ldr	r2, [r1, #16]
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	429a      	cmp	r2, r3
 8009288:	bfb8      	it	lt
 800928a:	460b      	movlt	r3, r1
 800928c:	4688      	mov	r8, r1
 800928e:	bfbc      	itt	lt
 8009290:	46a0      	movlt	r8, r4
 8009292:	461c      	movlt	r4, r3
 8009294:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009298:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800929c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092a4:	eb07 0609 	add.w	r6, r7, r9
 80092a8:	42b3      	cmp	r3, r6
 80092aa:	bfb8      	it	lt
 80092ac:	3101      	addlt	r1, #1
 80092ae:	f7ff feca 	bl	8009046 <_Balloc>
 80092b2:	f100 0514 	add.w	r5, r0, #20
 80092b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80092ba:	462b      	mov	r3, r5
 80092bc:	2200      	movs	r2, #0
 80092be:	4573      	cmp	r3, lr
 80092c0:	d316      	bcc.n	80092f0 <__multiply+0x74>
 80092c2:	f104 0214 	add.w	r2, r4, #20
 80092c6:	f108 0114 	add.w	r1, r8, #20
 80092ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80092ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	9b00      	ldr	r3, [sp, #0]
 80092d6:	9201      	str	r2, [sp, #4]
 80092d8:	4293      	cmp	r3, r2
 80092da:	d80c      	bhi.n	80092f6 <__multiply+0x7a>
 80092dc:	2e00      	cmp	r6, #0
 80092de:	dd03      	ble.n	80092e8 <__multiply+0x6c>
 80092e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d05d      	beq.n	80093a4 <__multiply+0x128>
 80092e8:	6106      	str	r6, [r0, #16]
 80092ea:	b003      	add	sp, #12
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f0:	f843 2b04 	str.w	r2, [r3], #4
 80092f4:	e7e3      	b.n	80092be <__multiply+0x42>
 80092f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80092fa:	f1bb 0f00 	cmp.w	fp, #0
 80092fe:	d023      	beq.n	8009348 <__multiply+0xcc>
 8009300:	4689      	mov	r9, r1
 8009302:	46ac      	mov	ip, r5
 8009304:	f04f 0800 	mov.w	r8, #0
 8009308:	f859 4b04 	ldr.w	r4, [r9], #4
 800930c:	f8dc a000 	ldr.w	sl, [ip]
 8009310:	b2a3      	uxth	r3, r4
 8009312:	fa1f fa8a 	uxth.w	sl, sl
 8009316:	fb0b a303 	mla	r3, fp, r3, sl
 800931a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800931e:	f8dc 4000 	ldr.w	r4, [ip]
 8009322:	4443      	add	r3, r8
 8009324:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009328:	fb0b 840a 	mla	r4, fp, sl, r8
 800932c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009330:	46e2      	mov	sl, ip
 8009332:	b29b      	uxth	r3, r3
 8009334:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009338:	454f      	cmp	r7, r9
 800933a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800933e:	f84a 3b04 	str.w	r3, [sl], #4
 8009342:	d82b      	bhi.n	800939c <__multiply+0x120>
 8009344:	f8cc 8004 	str.w	r8, [ip, #4]
 8009348:	9b01      	ldr	r3, [sp, #4]
 800934a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800934e:	3204      	adds	r2, #4
 8009350:	f1ba 0f00 	cmp.w	sl, #0
 8009354:	d020      	beq.n	8009398 <__multiply+0x11c>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	4689      	mov	r9, r1
 800935a:	46a8      	mov	r8, r5
 800935c:	f04f 0b00 	mov.w	fp, #0
 8009360:	f8b9 c000 	ldrh.w	ip, [r9]
 8009364:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009368:	fb0a 440c 	mla	r4, sl, ip, r4
 800936c:	445c      	add	r4, fp
 800936e:	46c4      	mov	ip, r8
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009376:	f84c 3b04 	str.w	r3, [ip], #4
 800937a:	f859 3b04 	ldr.w	r3, [r9], #4
 800937e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	fb0a b303 	mla	r3, sl, r3, fp
 8009388:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800938c:	454f      	cmp	r7, r9
 800938e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009392:	d805      	bhi.n	80093a0 <__multiply+0x124>
 8009394:	f8c8 3004 	str.w	r3, [r8, #4]
 8009398:	3504      	adds	r5, #4
 800939a:	e79b      	b.n	80092d4 <__multiply+0x58>
 800939c:	46d4      	mov	ip, sl
 800939e:	e7b3      	b.n	8009308 <__multiply+0x8c>
 80093a0:	46e0      	mov	r8, ip
 80093a2:	e7dd      	b.n	8009360 <__multiply+0xe4>
 80093a4:	3e01      	subs	r6, #1
 80093a6:	e799      	b.n	80092dc <__multiply+0x60>

080093a8 <__pow5mult>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	4615      	mov	r5, r2
 80093ae:	f012 0203 	ands.w	r2, r2, #3
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	d007      	beq.n	80093c8 <__pow5mult+0x20>
 80093b8:	3a01      	subs	r2, #1
 80093ba:	4c21      	ldr	r4, [pc, #132]	; (8009440 <__pow5mult+0x98>)
 80093bc:	2300      	movs	r3, #0
 80093be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c2:	f7ff fe8b 	bl	80090dc <__multadd>
 80093c6:	4607      	mov	r7, r0
 80093c8:	10ad      	asrs	r5, r5, #2
 80093ca:	d035      	beq.n	8009438 <__pow5mult+0x90>
 80093cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ce:	b93c      	cbnz	r4, 80093e0 <__pow5mult+0x38>
 80093d0:	2010      	movs	r0, #16
 80093d2:	f7ff fe13 	bl	8008ffc <malloc>
 80093d6:	6270      	str	r0, [r6, #36]	; 0x24
 80093d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093dc:	6004      	str	r4, [r0, #0]
 80093de:	60c4      	str	r4, [r0, #12]
 80093e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093e8:	b94c      	cbnz	r4, 80093fe <__pow5mult+0x56>
 80093ea:	f240 2171 	movw	r1, #625	; 0x271
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ff3b 	bl	800926a <__i2b>
 80093f4:	2300      	movs	r3, #0
 80093f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093fa:	4604      	mov	r4, r0
 80093fc:	6003      	str	r3, [r0, #0]
 80093fe:	f04f 0800 	mov.w	r8, #0
 8009402:	07eb      	lsls	r3, r5, #31
 8009404:	d50a      	bpl.n	800941c <__pow5mult+0x74>
 8009406:	4639      	mov	r1, r7
 8009408:	4622      	mov	r2, r4
 800940a:	4630      	mov	r0, r6
 800940c:	f7ff ff36 	bl	800927c <__multiply>
 8009410:	4639      	mov	r1, r7
 8009412:	4681      	mov	r9, r0
 8009414:	4630      	mov	r0, r6
 8009416:	f7ff fe4a 	bl	80090ae <_Bfree>
 800941a:	464f      	mov	r7, r9
 800941c:	106d      	asrs	r5, r5, #1
 800941e:	d00b      	beq.n	8009438 <__pow5mult+0x90>
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	b938      	cbnz	r0, 8009434 <__pow5mult+0x8c>
 8009424:	4622      	mov	r2, r4
 8009426:	4621      	mov	r1, r4
 8009428:	4630      	mov	r0, r6
 800942a:	f7ff ff27 	bl	800927c <__multiply>
 800942e:	6020      	str	r0, [r4, #0]
 8009430:	f8c0 8000 	str.w	r8, [r0]
 8009434:	4604      	mov	r4, r0
 8009436:	e7e4      	b.n	8009402 <__pow5mult+0x5a>
 8009438:	4638      	mov	r0, r7
 800943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800943e:	bf00      	nop
 8009440:	08009f60 	.word	0x08009f60

08009444 <__lshift>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	460c      	mov	r4, r1
 800944a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800944e:	6923      	ldr	r3, [r4, #16]
 8009450:	6849      	ldr	r1, [r1, #4]
 8009452:	eb0a 0903 	add.w	r9, sl, r3
 8009456:	68a3      	ldr	r3, [r4, #8]
 8009458:	4607      	mov	r7, r0
 800945a:	4616      	mov	r6, r2
 800945c:	f109 0501 	add.w	r5, r9, #1
 8009460:	42ab      	cmp	r3, r5
 8009462:	db32      	blt.n	80094ca <__lshift+0x86>
 8009464:	4638      	mov	r0, r7
 8009466:	f7ff fdee 	bl	8009046 <_Balloc>
 800946a:	2300      	movs	r3, #0
 800946c:	4680      	mov	r8, r0
 800946e:	f100 0114 	add.w	r1, r0, #20
 8009472:	461a      	mov	r2, r3
 8009474:	4553      	cmp	r3, sl
 8009476:	db2b      	blt.n	80094d0 <__lshift+0x8c>
 8009478:	6920      	ldr	r0, [r4, #16]
 800947a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800947e:	f104 0314 	add.w	r3, r4, #20
 8009482:	f016 021f 	ands.w	r2, r6, #31
 8009486:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800948a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800948e:	d025      	beq.n	80094dc <__lshift+0x98>
 8009490:	f1c2 0e20 	rsb	lr, r2, #32
 8009494:	2000      	movs	r0, #0
 8009496:	681e      	ldr	r6, [r3, #0]
 8009498:	468a      	mov	sl, r1
 800949a:	4096      	lsls	r6, r2
 800949c:	4330      	orrs	r0, r6
 800949e:	f84a 0b04 	str.w	r0, [sl], #4
 80094a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80094a6:	459c      	cmp	ip, r3
 80094a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80094ac:	d814      	bhi.n	80094d8 <__lshift+0x94>
 80094ae:	6048      	str	r0, [r1, #4]
 80094b0:	b108      	cbz	r0, 80094b6 <__lshift+0x72>
 80094b2:	f109 0502 	add.w	r5, r9, #2
 80094b6:	3d01      	subs	r5, #1
 80094b8:	4638      	mov	r0, r7
 80094ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80094be:	4621      	mov	r1, r4
 80094c0:	f7ff fdf5 	bl	80090ae <_Bfree>
 80094c4:	4640      	mov	r0, r8
 80094c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ca:	3101      	adds	r1, #1
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	e7c7      	b.n	8009460 <__lshift+0x1c>
 80094d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80094d4:	3301      	adds	r3, #1
 80094d6:	e7cd      	b.n	8009474 <__lshift+0x30>
 80094d8:	4651      	mov	r1, sl
 80094da:	e7dc      	b.n	8009496 <__lshift+0x52>
 80094dc:	3904      	subs	r1, #4
 80094de:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80094e6:	459c      	cmp	ip, r3
 80094e8:	d8f9      	bhi.n	80094de <__lshift+0x9a>
 80094ea:	e7e4      	b.n	80094b6 <__lshift+0x72>

080094ec <__mcmp>:
 80094ec:	6903      	ldr	r3, [r0, #16]
 80094ee:	690a      	ldr	r2, [r1, #16]
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	b530      	push	{r4, r5, lr}
 80094f4:	d10c      	bne.n	8009510 <__mcmp+0x24>
 80094f6:	0092      	lsls	r2, r2, #2
 80094f8:	3014      	adds	r0, #20
 80094fa:	3114      	adds	r1, #20
 80094fc:	1884      	adds	r4, r0, r2
 80094fe:	4411      	add	r1, r2
 8009500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009508:	4295      	cmp	r5, r2
 800950a:	d003      	beq.n	8009514 <__mcmp+0x28>
 800950c:	d305      	bcc.n	800951a <__mcmp+0x2e>
 800950e:	2301      	movs	r3, #1
 8009510:	4618      	mov	r0, r3
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	42a0      	cmp	r0, r4
 8009516:	d3f3      	bcc.n	8009500 <__mcmp+0x14>
 8009518:	e7fa      	b.n	8009510 <__mcmp+0x24>
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	e7f7      	b.n	8009510 <__mcmp+0x24>

08009520 <__mdiff>:
 8009520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	460d      	mov	r5, r1
 8009526:	4607      	mov	r7, r0
 8009528:	4611      	mov	r1, r2
 800952a:	4628      	mov	r0, r5
 800952c:	4614      	mov	r4, r2
 800952e:	f7ff ffdd 	bl	80094ec <__mcmp>
 8009532:	1e06      	subs	r6, r0, #0
 8009534:	d108      	bne.n	8009548 <__mdiff+0x28>
 8009536:	4631      	mov	r1, r6
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff fd84 	bl	8009046 <_Balloc>
 800953e:	2301      	movs	r3, #1
 8009540:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009548:	bfa4      	itt	ge
 800954a:	4623      	movge	r3, r4
 800954c:	462c      	movge	r4, r5
 800954e:	4638      	mov	r0, r7
 8009550:	6861      	ldr	r1, [r4, #4]
 8009552:	bfa6      	itte	ge
 8009554:	461d      	movge	r5, r3
 8009556:	2600      	movge	r6, #0
 8009558:	2601      	movlt	r6, #1
 800955a:	f7ff fd74 	bl	8009046 <_Balloc>
 800955e:	692b      	ldr	r3, [r5, #16]
 8009560:	60c6      	str	r6, [r0, #12]
 8009562:	6926      	ldr	r6, [r4, #16]
 8009564:	f105 0914 	add.w	r9, r5, #20
 8009568:	f104 0214 	add.w	r2, r4, #20
 800956c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009570:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009574:	f100 0514 	add.w	r5, r0, #20
 8009578:	f04f 0e00 	mov.w	lr, #0
 800957c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009580:	f859 4b04 	ldr.w	r4, [r9], #4
 8009584:	fa1e f18a 	uxtah	r1, lr, sl
 8009588:	b2a3      	uxth	r3, r4
 800958a:	1ac9      	subs	r1, r1, r3
 800958c:	0c23      	lsrs	r3, r4, #16
 800958e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009592:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009596:	b289      	uxth	r1, r1
 8009598:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800959c:	45c8      	cmp	r8, r9
 800959e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095a2:	4694      	mov	ip, r2
 80095a4:	f845 3b04 	str.w	r3, [r5], #4
 80095a8:	d8e8      	bhi.n	800957c <__mdiff+0x5c>
 80095aa:	45bc      	cmp	ip, r7
 80095ac:	d304      	bcc.n	80095b8 <__mdiff+0x98>
 80095ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80095b2:	b183      	cbz	r3, 80095d6 <__mdiff+0xb6>
 80095b4:	6106      	str	r6, [r0, #16]
 80095b6:	e7c5      	b.n	8009544 <__mdiff+0x24>
 80095b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80095bc:	fa1e f381 	uxtah	r3, lr, r1
 80095c0:	141a      	asrs	r2, r3, #16
 80095c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80095d0:	f845 3b04 	str.w	r3, [r5], #4
 80095d4:	e7e9      	b.n	80095aa <__mdiff+0x8a>
 80095d6:	3e01      	subs	r6, #1
 80095d8:	e7e9      	b.n	80095ae <__mdiff+0x8e>
	...

080095dc <__ulp>:
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <__ulp+0x4c>)
 80095de:	ee10 2a90 	vmov	r2, s1
 80095e2:	401a      	ands	r2, r3
 80095e4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dd04      	ble.n	80095f6 <__ulp+0x1a>
 80095ec:	2000      	movs	r0, #0
 80095ee:	4619      	mov	r1, r3
 80095f0:	ec41 0b10 	vmov	d0, r0, r1
 80095f4:	4770      	bx	lr
 80095f6:	425b      	negs	r3, r3
 80095f8:	151b      	asrs	r3, r3, #20
 80095fa:	2b13      	cmp	r3, #19
 80095fc:	f04f 0000 	mov.w	r0, #0
 8009600:	f04f 0100 	mov.w	r1, #0
 8009604:	dc04      	bgt.n	8009610 <__ulp+0x34>
 8009606:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800960a:	fa42 f103 	asr.w	r1, r2, r3
 800960e:	e7ef      	b.n	80095f0 <__ulp+0x14>
 8009610:	3b14      	subs	r3, #20
 8009612:	2b1e      	cmp	r3, #30
 8009614:	f04f 0201 	mov.w	r2, #1
 8009618:	bfda      	itte	le
 800961a:	f1c3 031f 	rsble	r3, r3, #31
 800961e:	fa02 f303 	lslle.w	r3, r2, r3
 8009622:	4613      	movgt	r3, r2
 8009624:	4618      	mov	r0, r3
 8009626:	e7e3      	b.n	80095f0 <__ulp+0x14>
 8009628:	7ff00000 	.word	0x7ff00000

0800962c <__b2d>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	6905      	ldr	r5, [r0, #16]
 8009630:	f100 0714 	add.w	r7, r0, #20
 8009634:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009638:	1f2e      	subs	r6, r5, #4
 800963a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff fdc5 	bl	80091ce <__hi0bits>
 8009644:	f1c0 0320 	rsb	r3, r0, #32
 8009648:	280a      	cmp	r0, #10
 800964a:	600b      	str	r3, [r1, #0]
 800964c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80096c4 <__b2d+0x98>
 8009650:	dc14      	bgt.n	800967c <__b2d+0x50>
 8009652:	f1c0 0e0b 	rsb	lr, r0, #11
 8009656:	fa24 f10e 	lsr.w	r1, r4, lr
 800965a:	42b7      	cmp	r7, r6
 800965c:	ea41 030c 	orr.w	r3, r1, ip
 8009660:	bf34      	ite	cc
 8009662:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009666:	2100      	movcs	r1, #0
 8009668:	3015      	adds	r0, #21
 800966a:	fa04 f000 	lsl.w	r0, r4, r0
 800966e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009672:	ea40 0201 	orr.w	r2, r0, r1
 8009676:	ec43 2b10 	vmov	d0, r2, r3
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967c:	42b7      	cmp	r7, r6
 800967e:	bf3a      	itte	cc
 8009680:	f1a5 0608 	subcc.w	r6, r5, #8
 8009684:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009688:	2100      	movcs	r1, #0
 800968a:	380b      	subs	r0, #11
 800968c:	d015      	beq.n	80096ba <__b2d+0x8e>
 800968e:	4084      	lsls	r4, r0
 8009690:	f1c0 0520 	rsb	r5, r0, #32
 8009694:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009698:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800969c:	42be      	cmp	r6, r7
 800969e:	fa21 fc05 	lsr.w	ip, r1, r5
 80096a2:	ea44 030c 	orr.w	r3, r4, ip
 80096a6:	bf8c      	ite	hi
 80096a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80096ac:	2400      	movls	r4, #0
 80096ae:	fa01 f000 	lsl.w	r0, r1, r0
 80096b2:	40ec      	lsrs	r4, r5
 80096b4:	ea40 0204 	orr.w	r2, r0, r4
 80096b8:	e7dd      	b.n	8009676 <__b2d+0x4a>
 80096ba:	ea44 030c 	orr.w	r3, r4, ip
 80096be:	460a      	mov	r2, r1
 80096c0:	e7d9      	b.n	8009676 <__b2d+0x4a>
 80096c2:	bf00      	nop
 80096c4:	3ff00000 	.word	0x3ff00000

080096c8 <__d2b>:
 80096c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096cc:	460e      	mov	r6, r1
 80096ce:	2101      	movs	r1, #1
 80096d0:	ec59 8b10 	vmov	r8, r9, d0
 80096d4:	4615      	mov	r5, r2
 80096d6:	f7ff fcb6 	bl	8009046 <_Balloc>
 80096da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80096de:	4607      	mov	r7, r0
 80096e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096e4:	bb34      	cbnz	r4, 8009734 <__d2b+0x6c>
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	f1b8 0300 	subs.w	r3, r8, #0
 80096ec:	d027      	beq.n	800973e <__d2b+0x76>
 80096ee:	a802      	add	r0, sp, #8
 80096f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80096f4:	f7ff fd8a 	bl	800920c <__lo0bits>
 80096f8:	9900      	ldr	r1, [sp, #0]
 80096fa:	b1f0      	cbz	r0, 800973a <__d2b+0x72>
 80096fc:	9a01      	ldr	r2, [sp, #4]
 80096fe:	f1c0 0320 	rsb	r3, r0, #32
 8009702:	fa02 f303 	lsl.w	r3, r2, r3
 8009706:	430b      	orrs	r3, r1
 8009708:	40c2      	lsrs	r2, r0
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	9201      	str	r2, [sp, #4]
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	bf14      	ite	ne
 8009716:	2102      	movne	r1, #2
 8009718:	2101      	moveq	r1, #1
 800971a:	6139      	str	r1, [r7, #16]
 800971c:	b1c4      	cbz	r4, 8009750 <__d2b+0x88>
 800971e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009722:	4404      	add	r4, r0
 8009724:	6034      	str	r4, [r6, #0]
 8009726:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800972a:	6028      	str	r0, [r5, #0]
 800972c:	4638      	mov	r0, r7
 800972e:	b003      	add	sp, #12
 8009730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009738:	e7d5      	b.n	80096e6 <__d2b+0x1e>
 800973a:	6179      	str	r1, [r7, #20]
 800973c:	e7e7      	b.n	800970e <__d2b+0x46>
 800973e:	a801      	add	r0, sp, #4
 8009740:	f7ff fd64 	bl	800920c <__lo0bits>
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	2101      	movs	r1, #1
 800974a:	6139      	str	r1, [r7, #16]
 800974c:	3020      	adds	r0, #32
 800974e:	e7e5      	b.n	800971c <__d2b+0x54>
 8009750:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009754:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009758:	6030      	str	r0, [r6, #0]
 800975a:	6918      	ldr	r0, [r3, #16]
 800975c:	f7ff fd37 	bl	80091ce <__hi0bits>
 8009760:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009764:	e7e1      	b.n	800972a <__d2b+0x62>

08009766 <__ratio>:
 8009766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	4688      	mov	r8, r1
 800976c:	4669      	mov	r1, sp
 800976e:	4681      	mov	r9, r0
 8009770:	f7ff ff5c 	bl	800962c <__b2d>
 8009774:	a901      	add	r1, sp, #4
 8009776:	4640      	mov	r0, r8
 8009778:	ec57 6b10 	vmov	r6, r7, d0
 800977c:	ee10 4a10 	vmov	r4, s0
 8009780:	f7ff ff54 	bl	800962c <__b2d>
 8009784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009788:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800978c:	eba3 0c02 	sub.w	ip, r3, r2
 8009790:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800979a:	ec51 0b10 	vmov	r0, r1, d0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	ee10 aa10 	vmov	sl, s0
 80097a4:	bfce      	itee	gt
 80097a6:	463a      	movgt	r2, r7
 80097a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097ac:	460a      	movle	r2, r1
 80097ae:	463d      	mov	r5, r7
 80097b0:	468b      	mov	fp, r1
 80097b2:	bfcc      	ite	gt
 80097b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80097b8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80097bc:	ec45 4b17 	vmov	d7, r4, r5
 80097c0:	ec4b ab16 	vmov	d6, sl, fp
 80097c4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80097c8:	b003      	add	sp, #12
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097ce <__copybits>:
 80097ce:	3901      	subs	r1, #1
 80097d0:	b510      	push	{r4, lr}
 80097d2:	1149      	asrs	r1, r1, #5
 80097d4:	6914      	ldr	r4, [r2, #16]
 80097d6:	3101      	adds	r1, #1
 80097d8:	f102 0314 	add.w	r3, r2, #20
 80097dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80097e4:	42a3      	cmp	r3, r4
 80097e6:	4602      	mov	r2, r0
 80097e8:	d303      	bcc.n	80097f2 <__copybits+0x24>
 80097ea:	2300      	movs	r3, #0
 80097ec:	428a      	cmp	r2, r1
 80097ee:	d305      	bcc.n	80097fc <__copybits+0x2e>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f6:	f840 2b04 	str.w	r2, [r0], #4
 80097fa:	e7f3      	b.n	80097e4 <__copybits+0x16>
 80097fc:	f842 3b04 	str.w	r3, [r2], #4
 8009800:	e7f4      	b.n	80097ec <__copybits+0x1e>

08009802 <__any_on>:
 8009802:	f100 0214 	add.w	r2, r0, #20
 8009806:	6900      	ldr	r0, [r0, #16]
 8009808:	114b      	asrs	r3, r1, #5
 800980a:	4298      	cmp	r0, r3
 800980c:	b510      	push	{r4, lr}
 800980e:	db11      	blt.n	8009834 <__any_on+0x32>
 8009810:	dd0a      	ble.n	8009828 <__any_on+0x26>
 8009812:	f011 011f 	ands.w	r1, r1, #31
 8009816:	d007      	beq.n	8009828 <__any_on+0x26>
 8009818:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800981c:	fa24 f001 	lsr.w	r0, r4, r1
 8009820:	fa00 f101 	lsl.w	r1, r0, r1
 8009824:	428c      	cmp	r4, r1
 8009826:	d10b      	bne.n	8009840 <__any_on+0x3e>
 8009828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800982c:	4293      	cmp	r3, r2
 800982e:	d803      	bhi.n	8009838 <__any_on+0x36>
 8009830:	2000      	movs	r0, #0
 8009832:	bd10      	pop	{r4, pc}
 8009834:	4603      	mov	r3, r0
 8009836:	e7f7      	b.n	8009828 <__any_on+0x26>
 8009838:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800983c:	2900      	cmp	r1, #0
 800983e:	d0f5      	beq.n	800982c <__any_on+0x2a>
 8009840:	2001      	movs	r0, #1
 8009842:	e7f6      	b.n	8009832 <__any_on+0x30>

08009844 <_calloc_r>:
 8009844:	b538      	push	{r3, r4, r5, lr}
 8009846:	fb02 f401 	mul.w	r4, r2, r1
 800984a:	4621      	mov	r1, r4
 800984c:	f000 f856 	bl	80098fc <_malloc_r>
 8009850:	4605      	mov	r5, r0
 8009852:	b118      	cbz	r0, 800985c <_calloc_r+0x18>
 8009854:	4622      	mov	r2, r4
 8009856:	2100      	movs	r1, #0
 8009858:	f7fc fdb4 	bl	80063c4 <memset>
 800985c:	4628      	mov	r0, r5
 800985e:	bd38      	pop	{r3, r4, r5, pc}

08009860 <_free_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4605      	mov	r5, r0
 8009864:	2900      	cmp	r1, #0
 8009866:	d045      	beq.n	80098f4 <_free_r+0x94>
 8009868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986c:	1f0c      	subs	r4, r1, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfb8      	it	lt
 8009872:	18e4      	addlt	r4, r4, r3
 8009874:	f000 fa24 	bl	8009cc0 <__malloc_lock>
 8009878:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <_free_r+0x98>)
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	4610      	mov	r0, r2
 800987e:	b933      	cbnz	r3, 800988e <_free_r+0x2e>
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6014      	str	r4, [r2, #0]
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988a:	f000 ba1a 	b.w	8009cc2 <__malloc_unlock>
 800988e:	42a3      	cmp	r3, r4
 8009890:	d90c      	bls.n	80098ac <_free_r+0x4c>
 8009892:	6821      	ldr	r1, [r4, #0]
 8009894:	1862      	adds	r2, r4, r1
 8009896:	4293      	cmp	r3, r2
 8009898:	bf04      	itt	eq
 800989a:	681a      	ldreq	r2, [r3, #0]
 800989c:	685b      	ldreq	r3, [r3, #4]
 800989e:	6063      	str	r3, [r4, #4]
 80098a0:	bf04      	itt	eq
 80098a2:	1852      	addeq	r2, r2, r1
 80098a4:	6022      	streq	r2, [r4, #0]
 80098a6:	6004      	str	r4, [r0, #0]
 80098a8:	e7ec      	b.n	8009884 <_free_r+0x24>
 80098aa:	4613      	mov	r3, r2
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	b10a      	cbz	r2, 80098b4 <_free_r+0x54>
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x4a>
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	1858      	adds	r0, r3, r1
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x74>
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	4401      	add	r1, r0
 80098c0:	1858      	adds	r0, r3, r1
 80098c2:	4282      	cmp	r2, r0
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	d1dd      	bne.n	8009884 <_free_r+0x24>
 80098c8:	6810      	ldr	r0, [r2, #0]
 80098ca:	6852      	ldr	r2, [r2, #4]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	4401      	add	r1, r0
 80098d0:	6019      	str	r1, [r3, #0]
 80098d2:	e7d7      	b.n	8009884 <_free_r+0x24>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x7c>
 80098d6:	230c      	movs	r3, #12
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	e7d3      	b.n	8009884 <_free_r+0x24>
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	1821      	adds	r1, r4, r0
 80098e0:	428a      	cmp	r2, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6811      	ldreq	r1, [r2, #0]
 80098e6:	6852      	ldreq	r2, [r2, #4]
 80098e8:	6062      	str	r2, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1809      	addeq	r1, r1, r0
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	605c      	str	r4, [r3, #4]
 80098f2:	e7c7      	b.n	8009884 <_free_r+0x24>
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	2000023c 	.word	0x2000023c

080098fc <_malloc_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	1ccd      	adds	r5, r1, #3
 8009900:	f025 0503 	bic.w	r5, r5, #3
 8009904:	3508      	adds	r5, #8
 8009906:	2d0c      	cmp	r5, #12
 8009908:	bf38      	it	cc
 800990a:	250c      	movcc	r5, #12
 800990c:	2d00      	cmp	r5, #0
 800990e:	4606      	mov	r6, r0
 8009910:	db01      	blt.n	8009916 <_malloc_r+0x1a>
 8009912:	42a9      	cmp	r1, r5
 8009914:	d903      	bls.n	800991e <_malloc_r+0x22>
 8009916:	230c      	movs	r3, #12
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	2000      	movs	r0, #0
 800991c:	bd70      	pop	{r4, r5, r6, pc}
 800991e:	f000 f9cf 	bl	8009cc0 <__malloc_lock>
 8009922:	4a21      	ldr	r2, [pc, #132]	; (80099a8 <_malloc_r+0xac>)
 8009924:	6814      	ldr	r4, [r2, #0]
 8009926:	4621      	mov	r1, r4
 8009928:	b991      	cbnz	r1, 8009950 <_malloc_r+0x54>
 800992a:	4c20      	ldr	r4, [pc, #128]	; (80099ac <_malloc_r+0xb0>)
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	b91b      	cbnz	r3, 8009938 <_malloc_r+0x3c>
 8009930:	4630      	mov	r0, r6
 8009932:	f000 f98f 	bl	8009c54 <_sbrk_r>
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f000 f98a 	bl	8009c54 <_sbrk_r>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d124      	bne.n	800998e <_malloc_r+0x92>
 8009944:	230c      	movs	r3, #12
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	4630      	mov	r0, r6
 800994a:	f000 f9ba 	bl	8009cc2 <__malloc_unlock>
 800994e:	e7e4      	b.n	800991a <_malloc_r+0x1e>
 8009950:	680b      	ldr	r3, [r1, #0]
 8009952:	1b5b      	subs	r3, r3, r5
 8009954:	d418      	bmi.n	8009988 <_malloc_r+0x8c>
 8009956:	2b0b      	cmp	r3, #11
 8009958:	d90f      	bls.n	800997a <_malloc_r+0x7e>
 800995a:	600b      	str	r3, [r1, #0]
 800995c:	50cd      	str	r5, [r1, r3]
 800995e:	18cc      	adds	r4, r1, r3
 8009960:	4630      	mov	r0, r6
 8009962:	f000 f9ae 	bl	8009cc2 <__malloc_unlock>
 8009966:	f104 000b 	add.w	r0, r4, #11
 800996a:	1d23      	adds	r3, r4, #4
 800996c:	f020 0007 	bic.w	r0, r0, #7
 8009970:	1ac3      	subs	r3, r0, r3
 8009972:	d0d3      	beq.n	800991c <_malloc_r+0x20>
 8009974:	425a      	negs	r2, r3
 8009976:	50e2      	str	r2, [r4, r3]
 8009978:	e7d0      	b.n	800991c <_malloc_r+0x20>
 800997a:	428c      	cmp	r4, r1
 800997c:	684b      	ldr	r3, [r1, #4]
 800997e:	bf16      	itet	ne
 8009980:	6063      	strne	r3, [r4, #4]
 8009982:	6013      	streq	r3, [r2, #0]
 8009984:	460c      	movne	r4, r1
 8009986:	e7eb      	b.n	8009960 <_malloc_r+0x64>
 8009988:	460c      	mov	r4, r1
 800998a:	6849      	ldr	r1, [r1, #4]
 800998c:	e7cc      	b.n	8009928 <_malloc_r+0x2c>
 800998e:	1cc4      	adds	r4, r0, #3
 8009990:	f024 0403 	bic.w	r4, r4, #3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d005      	beq.n	80099a4 <_malloc_r+0xa8>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	4630      	mov	r0, r6
 800999c:	f000 f95a 	bl	8009c54 <_sbrk_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d0cf      	beq.n	8009944 <_malloc_r+0x48>
 80099a4:	6025      	str	r5, [r4, #0]
 80099a6:	e7db      	b.n	8009960 <_malloc_r+0x64>
 80099a8:	2000023c 	.word	0x2000023c
 80099ac:	20000240 	.word	0x20000240

080099b0 <__ssputs_r>:
 80099b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	688e      	ldr	r6, [r1, #8]
 80099b6:	429e      	cmp	r6, r3
 80099b8:	4682      	mov	sl, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4690      	mov	r8, r2
 80099be:	4699      	mov	r9, r3
 80099c0:	d837      	bhi.n	8009a32 <__ssputs_r+0x82>
 80099c2:	898a      	ldrh	r2, [r1, #12]
 80099c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099c8:	d031      	beq.n	8009a2e <__ssputs_r+0x7e>
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	6909      	ldr	r1, [r1, #16]
 80099ce:	1a6f      	subs	r7, r5, r1
 80099d0:	6965      	ldr	r5, [r4, #20]
 80099d2:	2302      	movs	r3, #2
 80099d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80099dc:	f109 0301 	add.w	r3, r9, #1
 80099e0:	443b      	add	r3, r7
 80099e2:	429d      	cmp	r5, r3
 80099e4:	bf38      	it	cc
 80099e6:	461d      	movcc	r5, r3
 80099e8:	0553      	lsls	r3, r2, #21
 80099ea:	d530      	bpl.n	8009a4e <__ssputs_r+0x9e>
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7ff ff85 	bl	80098fc <_malloc_r>
 80099f2:	4606      	mov	r6, r0
 80099f4:	b950      	cbnz	r0, 8009a0c <__ssputs_r+0x5c>
 80099f6:	230c      	movs	r3, #12
 80099f8:	f8ca 3000 	str.w	r3, [sl]
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0c:	463a      	mov	r2, r7
 8009a0e:	6921      	ldr	r1, [r4, #16]
 8009a10:	f7ff fb0e 	bl	8009030 <memcpy>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	6126      	str	r6, [r4, #16]
 8009a22:	6165      	str	r5, [r4, #20]
 8009a24:	443e      	add	r6, r7
 8009a26:	1bed      	subs	r5, r5, r7
 8009a28:	6026      	str	r6, [r4, #0]
 8009a2a:	60a5      	str	r5, [r4, #8]
 8009a2c:	464e      	mov	r6, r9
 8009a2e:	454e      	cmp	r6, r9
 8009a30:	d900      	bls.n	8009a34 <__ssputs_r+0x84>
 8009a32:	464e      	mov	r6, r9
 8009a34:	4632      	mov	r2, r6
 8009a36:	4641      	mov	r1, r8
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	f000 f928 	bl	8009c8e <memmove>
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	1b9b      	subs	r3, r3, r6
 8009a42:	60a3      	str	r3, [r4, #8]
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	441e      	add	r6, r3
 8009a48:	6026      	str	r6, [r4, #0]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e7dc      	b.n	8009a08 <__ssputs_r+0x58>
 8009a4e:	462a      	mov	r2, r5
 8009a50:	f000 f938 	bl	8009cc4 <_realloc_r>
 8009a54:	4606      	mov	r6, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d1e2      	bne.n	8009a20 <__ssputs_r+0x70>
 8009a5a:	6921      	ldr	r1, [r4, #16]
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	f7ff feff 	bl	8009860 <_free_r>
 8009a62:	e7c8      	b.n	80099f6 <__ssputs_r+0x46>

08009a64 <_svfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	461d      	mov	r5, r3
 8009a6a:	898b      	ldrh	r3, [r1, #12]
 8009a6c:	061f      	lsls	r7, r3, #24
 8009a6e:	b09d      	sub	sp, #116	; 0x74
 8009a70:	4680      	mov	r8, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4616      	mov	r6, r2
 8009a76:	d50f      	bpl.n	8009a98 <_svfiprintf_r+0x34>
 8009a78:	690b      	ldr	r3, [r1, #16]
 8009a7a:	b96b      	cbnz	r3, 8009a98 <_svfiprintf_r+0x34>
 8009a7c:	2140      	movs	r1, #64	; 0x40
 8009a7e:	f7ff ff3d 	bl	80098fc <_malloc_r>
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	6120      	str	r0, [r4, #16]
 8009a86:	b928      	cbnz	r0, 8009a94 <_svfiprintf_r+0x30>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	f8c8 3000 	str.w	r3, [r8]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	e0c8      	b.n	8009c26 <_svfiprintf_r+0x1c2>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa2:	2330      	movs	r3, #48	; 0x30
 8009aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa8:	9503      	str	r5, [sp, #12]
 8009aaa:	f04f 0b01 	mov.w	fp, #1
 8009aae:	4637      	mov	r7, r6
 8009ab0:	463d      	mov	r5, r7
 8009ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ab6:	b10b      	cbz	r3, 8009abc <_svfiprintf_r+0x58>
 8009ab8:	2b25      	cmp	r3, #37	; 0x25
 8009aba:	d13e      	bne.n	8009b3a <_svfiprintf_r+0xd6>
 8009abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ac0:	d00b      	beq.n	8009ada <_svfiprintf_r+0x76>
 8009ac2:	4653      	mov	r3, sl
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4640      	mov	r0, r8
 8009aca:	f7ff ff71 	bl	80099b0 <__ssputs_r>
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f000 80a4 	beq.w	8009c1c <_svfiprintf_r+0x1b8>
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	4453      	add	r3, sl
 8009ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ada:	783b      	ldrb	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 809d 	beq.w	8009c1c <_svfiprintf_r+0x1b8>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af4:	931a      	str	r3, [sp, #104]	; 0x68
 8009af6:	462f      	mov	r7, r5
 8009af8:	2205      	movs	r2, #5
 8009afa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009afe:	4850      	ldr	r0, [pc, #320]	; (8009c40 <_svfiprintf_r+0x1dc>)
 8009b00:	f7f6 fba6 	bl	8000250 <memchr>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	b9d0      	cbnz	r0, 8009b3e <_svfiprintf_r+0xda>
 8009b08:	06d9      	lsls	r1, r3, #27
 8009b0a:	bf44      	itt	mi
 8009b0c:	2220      	movmi	r2, #32
 8009b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b12:	071a      	lsls	r2, r3, #28
 8009b14:	bf44      	itt	mi
 8009b16:	222b      	movmi	r2, #43	; 0x2b
 8009b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b1c:	782a      	ldrb	r2, [r5, #0]
 8009b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8009b20:	d015      	beq.n	8009b4e <_svfiprintf_r+0xea>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	462f      	mov	r7, r5
 8009b26:	2000      	movs	r0, #0
 8009b28:	250a      	movs	r5, #10
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	d94d      	bls.n	8009bd2 <_svfiprintf_r+0x16e>
 8009b36:	b1b8      	cbz	r0, 8009b68 <_svfiprintf_r+0x104>
 8009b38:	e00f      	b.n	8009b5a <_svfiprintf_r+0xf6>
 8009b3a:	462f      	mov	r7, r5
 8009b3c:	e7b8      	b.n	8009ab0 <_svfiprintf_r+0x4c>
 8009b3e:	4a40      	ldr	r2, [pc, #256]	; (8009c40 <_svfiprintf_r+0x1dc>)
 8009b40:	1a80      	subs	r0, r0, r2
 8009b42:	fa0b f000 	lsl.w	r0, fp, r0
 8009b46:	4318      	orrs	r0, r3
 8009b48:	9004      	str	r0, [sp, #16]
 8009b4a:	463d      	mov	r5, r7
 8009b4c:	e7d3      	b.n	8009af6 <_svfiprintf_r+0x92>
 8009b4e:	9a03      	ldr	r2, [sp, #12]
 8009b50:	1d11      	adds	r1, r2, #4
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	9103      	str	r1, [sp, #12]
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	db01      	blt.n	8009b5e <_svfiprintf_r+0xfa>
 8009b5a:	9207      	str	r2, [sp, #28]
 8009b5c:	e004      	b.n	8009b68 <_svfiprintf_r+0x104>
 8009b5e:	4252      	negs	r2, r2
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	783b      	ldrb	r3, [r7, #0]
 8009b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6c:	d10c      	bne.n	8009b88 <_svfiprintf_r+0x124>
 8009b6e:	787b      	ldrb	r3, [r7, #1]
 8009b70:	2b2a      	cmp	r3, #42	; 0x2a
 8009b72:	d133      	bne.n	8009bdc <_svfiprintf_r+0x178>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9203      	str	r2, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfb8      	it	lt
 8009b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b84:	3702      	adds	r7, #2
 8009b86:	9305      	str	r3, [sp, #20]
 8009b88:	4d2e      	ldr	r5, [pc, #184]	; (8009c44 <_svfiprintf_r+0x1e0>)
 8009b8a:	7839      	ldrb	r1, [r7, #0]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f7f6 fb5e 	bl	8000250 <memchr>
 8009b94:	b138      	cbz	r0, 8009ba6 <_svfiprintf_r+0x142>
 8009b96:	2340      	movs	r3, #64	; 0x40
 8009b98:	1b40      	subs	r0, r0, r5
 8009b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	4303      	orrs	r3, r0
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	7839      	ldrb	r1, [r7, #0]
 8009ba8:	4827      	ldr	r0, [pc, #156]	; (8009c48 <_svfiprintf_r+0x1e4>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	1c7e      	adds	r6, r7, #1
 8009bb2:	f7f6 fb4d 	bl	8000250 <memchr>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d038      	beq.n	8009c2c <_svfiprintf_r+0x1c8>
 8009bba:	4b24      	ldr	r3, [pc, #144]	; (8009c4c <_svfiprintf_r+0x1e8>)
 8009bbc:	bb13      	cbnz	r3, 8009c04 <_svfiprintf_r+0x1a0>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	3307      	adds	r3, #7
 8009bc2:	f023 0307 	bic.w	r3, r3, #7
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	9303      	str	r3, [sp, #12]
 8009bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bcc:	444b      	add	r3, r9
 8009bce:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd0:	e76d      	b.n	8009aae <_svfiprintf_r+0x4a>
 8009bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	460f      	mov	r7, r1
 8009bda:	e7a6      	b.n	8009b2a <_svfiprintf_r+0xc6>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	3701      	adds	r7, #1
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	4619      	mov	r1, r3
 8009be4:	250a      	movs	r5, #10
 8009be6:	4638      	mov	r0, r7
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	; 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_svfiprintf_r+0x196>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c8      	beq.n	8009b88 <_svfiprintf_r+0x124>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c6      	b.n	8009b88 <_svfiprintf_r+0x124>
 8009bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4607      	mov	r7, r0
 8009c02:	e7f0      	b.n	8009be6 <_svfiprintf_r+0x182>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <_svfiprintf_r+0x1ec>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f7fc fc66 	bl	80064e0 <_printf_float>
 8009c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c18:	4681      	mov	r9, r0
 8009c1a:	d1d6      	bne.n	8009bca <_svfiprintf_r+0x166>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	065b      	lsls	r3, r3, #25
 8009c20:	f53f af35 	bmi.w	8009a8e <_svfiprintf_r+0x2a>
 8009c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c26:	b01d      	add	sp, #116	; 0x74
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	ab03      	add	r3, sp, #12
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4622      	mov	r2, r4
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <_svfiprintf_r+0x1ec>)
 8009c34:	a904      	add	r1, sp, #16
 8009c36:	4640      	mov	r0, r8
 8009c38:	f7fc fef4 	bl	8006a24 <_printf_i>
 8009c3c:	e7ea      	b.n	8009c14 <_svfiprintf_r+0x1b0>
 8009c3e:	bf00      	nop
 8009c40:	08009f6c 	.word	0x08009f6c
 8009c44:	08009f72 	.word	0x08009f72
 8009c48:	08009f76 	.word	0x08009f76
 8009c4c:	080064e1 	.word	0x080064e1
 8009c50:	080099b1 	.word	0x080099b1

08009c54 <_sbrk_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4c06      	ldr	r4, [pc, #24]	; (8009c70 <_sbrk_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	f7f7 fd38 	bl	80016d4 <_sbrk>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_sbrk_r+0x1a>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_sbrk_r+0x1a>
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20006e78 	.word	0x20006e78

08009c74 <__ascii_wctomb>:
 8009c74:	b149      	cbz	r1, 8009c8a <__ascii_wctomb+0x16>
 8009c76:	2aff      	cmp	r2, #255	; 0xff
 8009c78:	bf85      	ittet	hi
 8009c7a:	238a      	movhi	r3, #138	; 0x8a
 8009c7c:	6003      	strhi	r3, [r0, #0]
 8009c7e:	700a      	strbls	r2, [r1, #0]
 8009c80:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c84:	bf98      	it	ls
 8009c86:	2001      	movls	r0, #1
 8009c88:	4770      	bx	lr
 8009c8a:	4608      	mov	r0, r1
 8009c8c:	4770      	bx	lr

08009c8e <memmove>:
 8009c8e:	4288      	cmp	r0, r1
 8009c90:	b510      	push	{r4, lr}
 8009c92:	eb01 0302 	add.w	r3, r1, r2
 8009c96:	d807      	bhi.n	8009ca8 <memmove+0x1a>
 8009c98:	1e42      	subs	r2, r0, #1
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	d00a      	beq.n	8009cb4 <memmove+0x26>
 8009c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ca2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ca6:	e7f8      	b.n	8009c9a <memmove+0xc>
 8009ca8:	4283      	cmp	r3, r0
 8009caa:	d9f5      	bls.n	8009c98 <memmove+0xa>
 8009cac:	1881      	adds	r1, r0, r2
 8009cae:	1ad2      	subs	r2, r2, r3
 8009cb0:	42d3      	cmn	r3, r2
 8009cb2:	d100      	bne.n	8009cb6 <memmove+0x28>
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009cbe:	e7f7      	b.n	8009cb0 <memmove+0x22>

08009cc0 <__malloc_lock>:
 8009cc0:	4770      	bx	lr

08009cc2 <__malloc_unlock>:
 8009cc2:	4770      	bx	lr

08009cc4 <_realloc_r>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	4607      	mov	r7, r0
 8009cc8:	4614      	mov	r4, r2
 8009cca:	460e      	mov	r6, r1
 8009ccc:	b921      	cbnz	r1, 8009cd8 <_realloc_r+0x14>
 8009cce:	4611      	mov	r1, r2
 8009cd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009cd4:	f7ff be12 	b.w	80098fc <_malloc_r>
 8009cd8:	b922      	cbnz	r2, 8009ce4 <_realloc_r+0x20>
 8009cda:	f7ff fdc1 	bl	8009860 <_free_r>
 8009cde:	4625      	mov	r5, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce4:	f000 f814 	bl	8009d10 <_malloc_usable_size_r>
 8009ce8:	42a0      	cmp	r0, r4
 8009cea:	d20f      	bcs.n	8009d0c <_realloc_r+0x48>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff fe04 	bl	80098fc <_malloc_r>
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d0f2      	beq.n	8009ce0 <_realloc_r+0x1c>
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	f7ff f997 	bl	8009030 <memcpy>
 8009d02:	4631      	mov	r1, r6
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff fdab 	bl	8009860 <_free_r>
 8009d0a:	e7e9      	b.n	8009ce0 <_realloc_r+0x1c>
 8009d0c:	4635      	mov	r5, r6
 8009d0e:	e7e7      	b.n	8009ce0 <_realloc_r+0x1c>

08009d10 <_malloc_usable_size_r>:
 8009d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d14:	1f18      	subs	r0, r3, #4
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfbc      	itt	lt
 8009d1a:	580b      	ldrlt	r3, [r1, r0]
 8009d1c:	18c0      	addlt	r0, r0, r3
 8009d1e:	4770      	bx	lr

08009d20 <_init>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	bf00      	nop
 8009d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d26:	bc08      	pop	{r3}
 8009d28:	469e      	mov	lr, r3
 8009d2a:	4770      	bx	lr

08009d2c <_fini>:
 8009d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2e:	bf00      	nop
 8009d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d32:	bc08      	pop	{r3}
 8009d34:	469e      	mov	lr, r3
 8009d36:	4770      	bx	lr
