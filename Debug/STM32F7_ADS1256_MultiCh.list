
STM32F7_ADS1256_MultiCh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800a3e0  0800a3e0  0001a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a738  0800a738  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a740  0800a740  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094a0  20000200  0800a938  00020200  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  200096a0  0800a938  000296a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff92  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000250e  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c20  00000000  00000000  000326c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026ac7  00000000  00000000  00033df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b8b6  00000000  00000000  0005a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fadb1  00000000  00000000  00066175  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  00160fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a3c8 	.word	0x0800a3c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	0800a3c8 	.word	0x0800a3c8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b08b      	sub	sp, #44	; 0x2c
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	1d1a      	adds	r2, r3, #4
 800060a:	60fa      	str	r2, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	3b01      	subs	r3, #1
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8000618:	e051      	b.n	80006be <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	1d1a      	adds	r2, r3, #4
 800061e:	60fa      	str	r2, [r7, #12]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	1d1a      	adds	r2, r3, #4
 8000628:	60fa      	str	r2, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800062e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000632:	edd7 7a05 	vldr	s15, [r7, #20]
 8000636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063e:	d504      	bpl.n	800064a <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1d1a      	adds	r2, r3, #4
 800064e:	60fa      	str	r2, [r7, #12]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8000654:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000658:	edd7 7a04 	vldr	s15, [r7, #16]
 800065c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000664:	d504      	bpl.n	8000670 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	3302      	adds	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	60fa      	str	r2, [r7, #12]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800067a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800067e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	d504      	bpl.n	8000696 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	3303      	adds	r3, #3
 8000694:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8000696:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800069a:	edd7 7a04 	vldr	s15, [r7, #16]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	d504      	bpl.n	80006b2 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3304      	adds	r3, #4
 80006b0:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80006b2:	69bb      	ldr	r3, [r7, #24]
 80006b4:	3304      	adds	r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80006b8:	6a3b      	ldr	r3, [r7, #32]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006be:	6a3b      	ldr	r3, [r7, #32]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1aa      	bne.n	800061a <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80006ce:	e016      	b.n	80006fe <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1d1a      	adds	r2, r3, #4
 80006d4:	60fa      	str	r2, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80006da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006de:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ea:	d505      	bpl.n	80006f8 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1e5      	bne.n	80006d0 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000708:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	69fa      	ldr	r2, [r7, #28]
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	CS_0();
 800072c:	2200      	movs	r2, #0
 800072e:	2110      	movs	r1, #16
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <setDIFFChannel+0x44>)
 8000732:	f002 fd4d 	bl	80031d0 <HAL_GPIO_WritePin>
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	b25a      	sxtb	r2, r3
 800073c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000740:	4313      	orrs	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4619      	mov	r1, r3
 8000748:	2001      	movs	r0, #1
 800074a:	f000 f839 	bl	80007c0 <writeByteToReg>
	CS_1();
 800074e:	2201      	movs	r2, #1
 8000750:	2110      	movs	r1, #16
 8000752:	4803      	ldr	r0, [pc, #12]	; (8000760 <setDIFFChannel+0x44>)
 8000754:	f002 fd3c 	bl	80031d0 <HAL_GPIO_WritePin>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40020000 	.word	0x40020000

08000764 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	733b      	strb	r3, [r7, #12]
	CS_0();
 8000772:	2200      	movs	r2, #0
 8000774:	2110      	movs	r1, #16
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <writeCMD+0x38>)
 8000778:	f002 fd2a 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 800077c:	f107 010c 	add.w	r1, r7, #12
 8000780:	2332      	movs	r3, #50	; 0x32
 8000782:	2201      	movs	r2, #1
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <writeCMD+0x3c>)
 8000786:	f003 ff38 	bl	80045fa <HAL_SPI_Transmit>
	CS_1();
 800078a:	2201      	movs	r2, #1
 800078c:	2110      	movs	r1, #16
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <writeCMD+0x38>)
 8000790:	f002 fd1e 	bl	80031d0 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020000 	.word	0x40020000
 80007a0:	20009548 	.word	0x20009548

080007a4 <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_DRATE,drate);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4619      	mov	r1, r3
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 f822 	bl	80007fc <writeToReg>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit_DMA(&hspi1, Txbuffer ,3);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2203      	movs	r2, #3
 80007e8:	4619      	mov	r1, r3
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <writeByteToReg+0x38>)
 80007ec:	f004 fa86 	bl	8004cfc <HAL_SPI_Transmit_DMA>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20009548 	.word	0x20009548

080007fc <writeToReg>:


void writeToReg(uint8_t registerID, uint8_t value)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	CS_0();
 800080c:	2200      	movs	r2, #0
 800080e:	2110      	movs	r1, #16
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <writeToReg+0x54>)
 8000812:	f002 fcdd 	bl	80031d0 <HAL_GPIO_WritePin>
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800081c:	b2db      	uxtb	r3, r3
 800081e:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 8000820:	2300      	movs	r3, #0
 8000822:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,50);
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	2332      	movs	r3, #50	; 0x32
 800082e:	2203      	movs	r2, #3
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <writeToReg+0x58>)
 8000832:	f003 fee2 	bl	80045fa <HAL_SPI_Transmit>
	delay_us(10);
 8000836:	200a      	movs	r0, #10
 8000838:	f000 f9be 	bl	8000bb8 <delay_us>
	CS_1();
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <writeToReg+0x54>)
 8000842:	f002 fcc5 	bl	80031d0 <HAL_GPIO_WritePin>
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
//	CS_1();

}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40020000 	.word	0x40020000
 8000854:	20009548 	.word	0x20009548

08000858 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
	writeToReg(REG_ADCON,pga);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4619      	mov	r1, r3
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff ffc8 	bl	80007fc <writeToReg>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	e009      	b.n	8000894 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 8000880:	2108      	movs	r1, #8
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <waitDRDY+0x34>)
 8000884:	f002 fc8c 	bl	80031a0 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d007      	beq.n	800089e <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3301      	adds	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <waitDRDY+0x38>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d9f1      	bls.n	8000880 <waitDRDY+0xc>
				break;
			}
		}
}
 800089c:	e000      	b.n	80008a0 <waitDRDY+0x2c>
				break;
 800089e:	bf00      	nop
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40020000 	.word	0x40020000
 80008ac:	026259ff 	.word	0x026259ff

080008b0 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	waitDRDY();
 80008b6:	f7ff ffdd 	bl	8000874 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f820 	bl	8000900 <readByteFromReg>
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	b2db      	uxtb	r3, r3
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 80008da:	23ff      	movs	r3, #255	; 0xff
 80008dc:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 80008e2:	1dba      	adds	r2, r7, #6
 80008e4:	1df9      	adds	r1, r7, #7
 80008e6:	2332      	movs	r3, #50	; 0x32
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2301      	movs	r3, #1
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <receive8bit+0x28>)
 80008ee:	f003 fff2 	bl	80048d6 <HAL_SPI_TransmitReceive>
	return read;
 80008f2:	79bb      	ldrb	r3, [r7, #6]

}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20009548 	.word	0x20009548

08000900 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	b2db      	uxtb	r3, r3
 8000912:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 8000914:	2300      	movs	r3, #0
 8000916:	737b      	strb	r3, [r7, #13]
	CS_0();
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <readByteFromReg+0x54>)
 800091e:	f002 fc57 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 8000922:	f107 010c 	add.w	r1, r7, #12
 8000926:	2332      	movs	r3, #50	; 0x32
 8000928:	2202      	movs	r2, #2
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <readByteFromReg+0x58>)
 800092c:	f003 fe65 	bl	80045fa <HAL_SPI_Transmit>
	uint8_t read = receive8bit();
 8000930:	f7ff ffd0 	bl	80008d4 <receive8bit>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]
	delay_us(10);
 8000938:	200a      	movs	r0, #10
 800093a:	f000 f93d 	bl	8000bb8 <delay_us>
	CS_1();
 800093e:	2201      	movs	r2, #1
 8000940:	2110      	movs	r1, #16
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <readByteFromReg+0x54>)
 8000944:	f002 fc44 	bl	80031d0 <HAL_GPIO_WritePin>

	return read;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40020000 	.word	0x40020000
 8000958:	20009548 	.word	0x20009548

0800095c <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	uint8_t val = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 8000966:	2350      	movs	r3, #80	; 0x50
 8000968:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	b25b      	sxtb	r3, r3
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	b25b      	sxtb	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	717b      	strb	r3, [r7, #5]

	CS_0();
 800097a:	2200      	movs	r2, #0
 800097c:	2110      	movs	r1, #16
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <setBuffer+0x48>)
 8000980:	f002 fc26 	bl	80031d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 8000984:	1d39      	adds	r1, r7, #4
 8000986:	2332      	movs	r3, #50	; 0x32
 8000988:	2202      	movs	r2, #2
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <setBuffer+0x4c>)
 800098c:	f003 fe35 	bl	80045fa <HAL_SPI_Transmit>
	CS_1();
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <setBuffer+0x48>)
 8000996:	f002 fc1b 	bl	80031d0 <HAL_GPIO_WritePin>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	20009548 	.word	0x20009548

080009ac <ADS1256_SwitchChannalValue>:


void ADS1256_SwitchChannalValue(int Channel)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	/**
	 * set channel
	 */
//	CS_0();

    setDIFFChannel(posChannels[Channel], negChannels[Channel]);
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <ADS1256_SwitchChannalValue+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	7818      	ldrb	r0, [r3, #0]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <ADS1256_SwitchChannalValue+0x60>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f7ff fea9 	bl	800071c <setDIFFChannel>
//    delay_us(5);
    TM_DelayMicros(5);
 80009ca:	2005      	movs	r0, #5
 80009cc:	f000 f932 	bl	8000c34 <TM_DelayMicros>
    CS_0();
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <ADS1256_SwitchChannalValue+0x64>)
 80009d6:	f002 fbfb 	bl	80031d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&hspi1, SYNCcmduffer ,1);
 80009da:	2201      	movs	r2, #1
 80009dc:	490d      	ldr	r1, [pc, #52]	; (8000a14 <ADS1256_SwitchChannalValue+0x68>)
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <ADS1256_SwitchChannalValue+0x6c>)
 80009e0:	f004 f98c 	bl	8004cfc <HAL_SPI_Transmit_DMA>

//    delay_us(5);
    TM_DelayMicros(5);
 80009e4:	2005      	movs	r0, #5
 80009e6:	f000 f925 	bl	8000c34 <TM_DelayMicros>

    HAL_SPI_Transmit_DMA(&hspi1, WAKEUPcmduffer ,1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	490b      	ldr	r1, [pc, #44]	; (8000a1c <ADS1256_SwitchChannalValue+0x70>)
 80009ee:	480a      	ldr	r0, [pc, #40]	; (8000a18 <ADS1256_SwitchChannalValue+0x6c>)
 80009f0:	f004 f984 	bl	8004cfc <HAL_SPI_Transmit_DMA>
//    TM_DelayMicros(25);
    CS_1();
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <ADS1256_SwitchChannalValue+0x64>)
 80009fa:	f002 fbe9 	bl	80031d0 <HAL_GPIO_WritePin>

    /**
     * receive data
     */

}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	40020000 	.word	0x40020000
 8000a14:	2000000c 	.word	0x2000000c
 8000a18:	20009548 	.word	0x20009548
 8000a1c:	2000021c 	.word	0x2000021c

08000a20 <ADS1256_GetChannalValue>:
float ADS1256_GetChannalValue()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0


	TM_DelayMicros(1);
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 f905 	bl	8000c34 <TM_DelayMicros>
	CS_0();
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	482b      	ldr	r0, [pc, #172]	; (8000adc <ADS1256_GetChannalValue+0xbc>)
 8000a30:	f002 fbce 	bl	80031d0 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit_DMA(&hspi1, SDATACcmduffer ,1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <ADS1256_GetChannalValue+0xc0>)
 8000a38:	482a      	ldr	r0, [pc, #168]	; (8000ae4 <ADS1256_GetChannalValue+0xc4>)
 8000a3a:	f004 f95f 	bl	8004cfc <HAL_SPI_Transmit_DMA>
//    delay_us(7);
    TM_DelayMicros(25);
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 f8f8 	bl	8000c34 <TM_DelayMicros>
    HAL_SPI_Receive_DMA(&hspi1,Databuffer,3);
 8000a44:	2203      	movs	r2, #3
 8000a46:	4928      	ldr	r1, [pc, #160]	; (8000ae8 <ADS1256_GetChannalValue+0xc8>)
 8000a48:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <ADS1256_GetChannalValue+0xc4>)
 8000a4a:	f004 fa4b 	bl	8004ee4 <HAL_SPI_Receive_DMA>
	TM_DelayMicros(25);
 8000a4e:	2019      	movs	r0, #25
 8000a50:	f000 f8f0 	bl	8000c34 <TM_DelayMicros>
	CS_1();
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	4820      	ldr	r0, [pc, #128]	; (8000adc <ADS1256_GetChannalValue+0xbc>)
 8000a5a:	f002 fbb9 	bl	80031d0 <HAL_GPIO_WritePin>
	read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 8000a5e:	4b22      	ldr	r3, [pc, #136]	; (8000ae8 <ADS1256_GetChannalValue+0xc8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	041b      	lsls	r3, r3, #16
 8000a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000a68:	4a20      	ldr	r2, [pc, #128]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a6a:	6013      	str	r3, [r2, #0]
	read |= ((int32_t)Databuffer[1] << 8);
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <ADS1256_GetChannalValue+0xc8>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	021a      	lsls	r2, r3, #8
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a7a:	6013      	str	r3, [r2, #0]
	read |= Databuffer[2];
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <ADS1256_GetChannalValue+0xc8>)
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a8a:	6013      	str	r3, [r2, #0]

	if (read & 0x800000){
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <ADS1256_GetChannalValue+0x86>
		read |= 0xFF000000;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000aa4:	601a      	str	r2, [r3, #0]

	}

	data = read;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <ADS1256_GetChannalValue+0xcc>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	ee07 3a90 	vmov	s15, r3
 8000aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <ADS1256_GetChannalValue+0xd0>)
 8000ab4:	edc3 7a00 	vstr	s15, [r3]
	data = data / 1670000;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <ADS1256_GetChannalValue+0xd0>)
 8000aba:	ed93 7a00 	vldr	s14, [r3]
 8000abe:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000af4 <ADS1256_GetChannalValue+0xd4>
 8000ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <ADS1256_GetChannalValue+0xd0>)
 8000ac8:	edc3 7a00 	vstr	s15, [r3]
//	delay_us(250);

	return data;
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <ADS1256_GetChannalValue+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	ee07 3a90 	vmov	s15, r3
}
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20009548 	.word	0x20009548
 8000ae8:	20000220 	.word	0x20000220
 8000aec:	20000224 	.word	0x20000224
 8000af0:	20004250 	.word	0x20004250
 8000af4:	49cbdb80 	.word	0x49cbdb80

08000af8 <ADS1256_init>:

*/


int ADS1256_init()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
	   __disable_irq();
      int id;
	  //Reset ADS1256
	  waitDRDY();
 8000b00:	f7ff feb8 	bl	8000874 <waitDRDY>
	  writeCMD(CMD_RESET);
 8000b04:	20fe      	movs	r0, #254	; 0xfe
 8000b06:	f7ff fe2d 	bl	8000764 <writeCMD>
//	  delay_us(100);
	  TM_DelayMicros(100);
 8000b0a:	2064      	movs	r0, #100	; 0x64
 8000b0c:	f000 f892 	bl	8000c34 <TM_DelayMicros>

	  //Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
	  waitDRDY();
 8000b10:	f7ff feb0 	bl	8000874 <waitDRDY>
	  setBuffer();
 8000b14:	f7ff ff22 	bl	800095c <setBuffer>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f000 f88b 	bl	8000c34 <TM_DelayMicros>
	  waitDRDY();
 8000b1e:	f7ff fea9 	bl	8000874 <waitDRDY>
	  setPGA(PGA_GAIN1);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe98 	bl	8000858 <setPGA>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000b28:	200a      	movs	r0, #10
 8000b2a:	f000 f883 	bl	8000c34 <TM_DelayMicros>
	  waitDRDY();
 8000b2e:	f7ff fea1 	bl	8000874 <waitDRDY>
	  setDataRate(DRATE_7500);
 8000b32:	20d0      	movs	r0, #208	; 0xd0
 8000b34:	f7ff fe36 	bl	80007a4 <setDataRate>
//	  delay_us(10);
	  TM_DelayMicros(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f000 f87b 	bl	8000c34 <TM_DelayMicros>
	  waitDRDY();
 8000b3e:	f7ff fe99 	bl	8000874 <waitDRDY>
	  writeCMD(CMD_SELFCAL);
 8000b42:	20f0      	movs	r0, #240	; 0xf0
 8000b44:	f7ff fe0e 	bl	8000764 <writeCMD>
	  waitDRDY();
 8000b48:	f7ff fe94 	bl	8000874 <waitDRDY>

	  do {
		  id = readChipID();
 8000b4c:	f7ff feb0 	bl	80008b0 <readChipID>
 8000b50:	4603      	mov	r3, r0
 8000b52:	607b      	str	r3, [r7, #4]
	  } while (id!=3);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d1f8      	bne.n	8000b4c <ADS1256_init+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b5a:	b662      	cpsie	i

	  __enable_irq();

	  return id;
 8000b5c:	687b      	ldr	r3, [r7, #4]


}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <delay_init+0x44>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <delay_init+0x44>)
 8000b78:	f023 0304 	bic.w	r3, r3, #4
 8000b7c:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	08db      	lsrs	r3, r3, #3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <delay_init+0x48>)
 8000b86:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <delay_init+0x48>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	0152      	lsls	r2, r2, #5
 8000b92:	1ad2      	subs	r2, r2, r3
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <delay_init+0x4c>)
 8000b9e:	801a      	strh	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e010 	.word	0xe000e010
 8000bb0:	20000228 	.word	0x20000228
 8000bb4:	2000022a 	.word	0x2000022a

08000bb8 <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <delay_us+0x5c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <delay_us+0x60>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	fb03 f301 	mul.w	r3, r3, r1
 8000bce:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <delay_us+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <delay_us+0x60>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <delay_us+0x60>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <delay_us+0x60>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d004      	beq.n	8000bfc <delay_us+0x44>
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f2      	beq.n	8000be2 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <delay_us+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <delay_us+0x60>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	20000228 	.word	0x20000228
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 216000000 / 4000000;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <TM_Delay_Init+0x14>)
 8000c22:	2236      	movs	r2, #54	; 0x36
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	20004254 	.word	0x20004254

08000c34 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <TM_DelayMicros+0x30>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	3b0a      	subs	r3, #10
 8000c48:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 8000c4a:	bf00      	nop
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1fa      	bne.n	8000c4c <TM_DelayMicros+0x18>
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20004254 	.word	0x20004254

08000c68 <ADC1_Conv>:
#include "adc_apps.h"
/* Private typedef -----------------------------------------------------------*/


void ADC1_Conv(ADC_HandleTypeDef *hadc)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	//ADC start, LED status = 0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 , GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c76:	4823      	ldr	r0, [pc, #140]	; (8000d04 <ADC1_Conv+0x9c>)
 8000c78:	f002 faaa 	bl	80031d0 <HAL_GPIO_WritePin>
	unsigned char Count_in, Count_Sum;
	unsigned char Count_Sum_value = 60;//adc value Sum count
 8000c7c:	233c      	movs	r3, #60	; 0x3c
 8000c7e:	73bb      	strb	r3, [r7, #14]
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
 8000c84:	e027      	b.n	8000cd6 <ADC1_Conv+0x6e>
    {
//    	for(Count_in=0; Count_in <ADC_Buffer_Ch; Count_in++)//Convert ADC IN by scan channel
//    	{
    		/*##-1- Start the conversion process #######################################*/
    		HAL_ADC_Start(hadc);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 ffdc 	bl	8001c44 <HAL_ADC_Start>
    			the peripheral; if it?�s busy you need to wait for the end of current
    			conversion before starting a new one.
    			For simplicity reasons, this example is just waiting till the end of the
    	 	 	conversion, but application may perform other tasks while conversion
    			operation is ongoing. */
			HAL_ADC_PollForConversion(hadc, 50);
 8000c8c:	2132      	movs	r1, #50	; 0x32
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f001 f8da 	bl	8001e48 <HAL_ADC_PollForConversion>
//
//				ADC_1.Vol[0] = HAL_ADC_GetValue(hadc);
//			}

    			/* Check if the continous conversion of regular channel is finished */
    		while(!HAL_IS_BIT_SET(HAL_ADC_GetState(hadc), HAL_ADC_STATE_REG_EOC)){};
 8000c94:	bf00      	nop
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f001 fab8 	bl	800220c <HAL_ADC_GetState>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca6:	d1f6      	bne.n	8000c96 <ADC1_Conv+0x2e>
    		/*##-3- Get the converted value of regular channel  ######################*/

    		ADC_1.BufferValue[0] = HAL_ADC_GetValue(hadc);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f001 f958 	bl	8001f5e <HAL_ADC_GetValue>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cb4:	801a      	strh	r2, [r3, #0]
            ADC_1.BufferValue_Sum[0] += ADC_1.BufferValue[0];
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cbc:	8812      	ldrh	r2, [r2, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cc2:	6053      	str	r3, [r2, #4]
            ADC_1.BufferValue[0]=0;//clear adc bufferValue
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
//    	}
    	HAL_ADC_Stop(hadc);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f001 f888 	bl	8001de0 <HAL_ADC_Stop>
    for(Count_Sum=0; Count_Sum < Count_Sum_value; Count_Sum++)//take the adc value sum by count 60
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	7bbb      	ldrb	r3, [r7, #14]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3d3      	bcc.n	8000c86 <ADC1_Conv+0x1e>
    }//End adc value sum by count 60
    
    ADC_1.BufferValue_Avg[0] = ADC_1.BufferValue_Sum[0]/Count_Sum_value;
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <ADC1_Conv+0xa0>)
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	7bbb      	ldrb	r3, [r7, #14]
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cec:	811a      	strh	r2, [r3, #8]
    ADC_1.Vol[0] = ADC_1.BufferValue_Avg[0];
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cf0:	891a      	ldrh	r2, [r3, #8]
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cf4:	815a      	strh	r2, [r3, #10]
    ADC_1.BufferValue_Sum[0] = 0;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <ADC1_Conv+0xa0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
//        ADC_1.Vol[Count_in]=ADC_1.BufferValue_Avg[Count_in];
//                ADC_1.BufferValue_Sum[Count_in]=0;//clear Sum ValueV                ADC_1.BufferValue_Avg[Count_in]=0;//clear avg Value
//    }
    //ADC end cycle, LED status =1

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	20004260 	.word	0x20004260
 8000d0c:	00000000 	.word	0x00000000

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d16:	f000 fef4 	bl	8001b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 f927 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1e:	f000 fae1 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d22:	f000 fab1 	bl	8001288 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d26:	f000 fa03 	bl	8001130 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000d2a:	f000 fa7d 	bl	8001228 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000d2e:	f000 f9ad 	bl	800108c <MX_ADC1_Init>
  MX_SPI4_Init();
 8000d32:	f000 fa3b 	bl	80011ac <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
   //TODO: Initialize delay systick
  delay_init(216);
 8000d36:	20d8      	movs	r0, #216	; 0xd8
 8000d38:	f7ff ff16 	bl	8000b68 <delay_init>
  TM_Delay_Init();
 8000d3c:	f7ff ff6e 	bl	8000c1c <TM_Delay_Init>
  // init reference voltage
  ADC1_Conv(&hadc1);
 8000d40:	4873      	ldr	r0, [pc, #460]	; (8000f10 <main+0x200>)
 8000d42:	f7ff ff91 	bl	8000c68 <ADC1_Conv>
  ref_v = (float)(ADC_1.Vol[0])/4096*3.3;
 8000d46:	4b73      	ldr	r3, [pc, #460]	; (8000f14 <main+0x204>)
 8000d48:	895b      	ldrh	r3, [r3, #10]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d52:	eddf 6a71 	vldr	s13, [pc, #452]	; 8000f18 <main+0x208>
 8000d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5e:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8000f00 <main+0x1f0>
 8000d62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d6a:	4b6c      	ldr	r3, [pc, #432]	; (8000f1c <main+0x20c>)
 8000d6c:	edc3 7a00 	vstr	s15, [r3]
  //TODO: ADS1256 init
  id = ADS1256_init();
 8000d70:	f7ff fec2 	bl	8000af8 <ADS1256_init>
 8000d74:	4602      	mov	r2, r0
 8000d76:	4b6a      	ldr	r3, [pc, #424]	; (8000f20 <main+0x210>)
 8000d78:	601a      	str	r2, [r3, #0]
  v.cnt = 0;
 8000d7a:	4b6a      	ldr	r3, [pc, #424]	; (8000f24 <main+0x214>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
  i.cnt = 0;
 8000d80:	4b69      	ldr	r3, [pc, #420]	; (8000f28 <main+0x218>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */



	  if (tf_status)
 8000d86:	4b69      	ldr	r3, [pc, #420]	; (8000f2c <main+0x21c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0fb      	beq.n	8000d86 <main+0x76>
	  {
			arm_max_f32(v_f, 2400, &v.max, &v.index);
 8000d8e:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <main+0x220>)
 8000d90:	4a68      	ldr	r2, [pc, #416]	; (8000f34 <main+0x224>)
 8000d92:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8000d96:	4868      	ldr	r0, [pc, #416]	; (8000f38 <main+0x228>)
 8000d98:	f7ff fc2a 	bl	80005f0 <arm_max_f32>
			arm_max_f32(i_f, 2400, &i.max, &i.index);
 8000d9c:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <main+0x22c>)
 8000d9e:	4a68      	ldr	r2, [pc, #416]	; (8000f40 <main+0x230>)
 8000da0:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8000da4:	4867      	ldr	r0, [pc, #412]	; (8000f44 <main+0x234>)
 8000da6:	f7ff fc23 	bl	80005f0 <arm_max_f32>

			vMax = v.max*49.9;
 8000daa:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <main+0x214>)
 8000dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8000db0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8000f08 <main+0x1f8>
 8000db8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc0:	4b61      	ldr	r3, [pc, #388]	; (8000f48 <main+0x238>)
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
			iMax = (i.max-ref_v)*10;
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <main+0x218>)
 8000dc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dcc:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <main+0x20c>)
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	4b5b      	ldr	r3, [pc, #364]	; (8000f4c <main+0x23c>)
 8000de0:	edc3 7a00 	vstr	s15, [r3]
			R = vMax / iMax;
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <main+0x238>)
 8000de6:	edd3 6a00 	vldr	s13, [r3]
 8000dea:	4b58      	ldr	r3, [pc, #352]	; (8000f4c <main+0x23c>)
 8000dec:	ed93 7a00 	vldr	s14, [r3]
 8000df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df4:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <main+0x240>)
 8000df6:	edc3 7a00 	vstr	s15, [r3]
			p = iMax*vMax;
 8000dfa:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <main+0x23c>)
 8000dfc:	ed93 7a00 	vldr	s14, [r3]
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <main+0x238>)
 8000e02:	edd3 7a00 	vldr	s15, [r3]
 8000e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0a:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <main+0x244>)
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
			snprintf(tf_buff,50, "%.2f,%.2f,%.2f,%.2f\n", vMax,iMax,R,p);
 8000e10:	4b4d      	ldr	r3, [pc, #308]	; (8000f48 <main+0x238>)
 8000e12:	edd3 7a00 	vldr	s15, [r3]
 8000e16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e1a:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <main+0x23c>)
 8000e1c:	edd3 6a00 	vldr	s13, [r3]
 8000e20:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000e24:	4b4a      	ldr	r3, [pc, #296]	; (8000f50 <main+0x240>)
 8000e26:	edd3 5a00 	vldr	s11, [r3]
 8000e2a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000e2e:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <main+0x244>)
 8000e30:	edd3 4a00 	vldr	s9, [r3]
 8000e34:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000e38:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e3c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e44:	ed8d 7b00 	vstr	d7, [sp]
 8000e48:	4a43      	ldr	r2, [pc, #268]	; (8000f58 <main+0x248>)
 8000e4a:	2132      	movs	r1, #50	; 0x32
 8000e4c:	4843      	ldr	r0, [pc, #268]	; (8000f5c <main+0x24c>)
 8000e4e:	f006 fc2d 	bl	80076ac <sniprintf>
			USARTBLE.bufferSize = min_(tf_buff, strlen(tf_buff));
 8000e52:	4842      	ldr	r0, [pc, #264]	; (8000f5c <main+0x24c>)
 8000e54:	f7ff f9f4 	bl	8000240 <strlen>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <main+0x24c>)
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d804      	bhi.n	8000e6c <main+0x15c>
 8000e62:	483e      	ldr	r0, [pc, #248]	; (8000f5c <main+0x24c>)
 8000e64:	f7ff f9ec 	bl	8000240 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	e000      	b.n	8000e6e <main+0x15e>
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <main+0x24c>)
 8000e6e:	4a3c      	ldr	r2, [pc, #240]	; (8000f60 <main+0x250>)
 8000e70:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
			HAL_UART_Transmit_DMA(&huart6, tf_buff, USARTBLE.bufferSize);
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <main+0x250>)
 8000e76:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4937      	ldr	r1, [pc, #220]	; (8000f5c <main+0x24c>)
 8000e80:	4838      	ldr	r0, [pc, #224]	; (8000f64 <main+0x254>)
 8000e82:	f004 fe67 	bl	8005b54 <HAL_UART_Transmit_DMA>


			ADC1_Conv(&hadc1);
 8000e86:	4822      	ldr	r0, [pc, #136]	; (8000f10 <main+0x200>)
 8000e88:	f7ff feee 	bl	8000c68 <ADC1_Conv>
			ref_v = (float)(ADC_1.Vol[0])/4096*3.3;
 8000e8c:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <main+0x204>)
 8000e8e:	895b      	ldrh	r3, [r3, #10]
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e98:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000f18 <main+0x208>
 8000e9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ea0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000f00 <main+0x1f0>
 8000ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <main+0x20c>)
 8000eb2:	edc3 7a00 	vstr	s15, [r3]
			memset(tf_buff , 0, USARTBLE.bufferSize);
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <main+0x250>)
 8000eb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4826      	ldr	r0, [pc, #152]	; (8000f5c <main+0x24c>)
 8000ec2:	f005 fdd1 	bl	8006a68 <memset>
			memset(v_f , 0, strlen(v_f));
 8000ec6:	481c      	ldr	r0, [pc, #112]	; (8000f38 <main+0x228>)
 8000ec8:	f7ff f9ba 	bl	8000240 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4819      	ldr	r0, [pc, #100]	; (8000f38 <main+0x228>)
 8000ed4:	f005 fdc8 	bl	8006a68 <memset>
			memset(i_f , 0, strlen(i_f));
 8000ed8:	481a      	ldr	r0, [pc, #104]	; (8000f44 <main+0x234>)
 8000eda:	f7ff f9b1 	bl	8000240 <strlen>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <main+0x234>)
 8000ee6:	f005 fdbf 	bl	8006a68 <memset>
			tf_status = 0;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <main+0x21c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef4:	481c      	ldr	r0, [pc, #112]	; (8000f68 <main+0x258>)
 8000ef6:	f002 f984 	bl	8003202 <HAL_GPIO_TogglePin>
	  if (tf_status)
 8000efa:	e744      	b.n	8000d86 <main+0x76>
 8000efc:	f3af 8000 	nop.w
 8000f00:	66666666 	.word	0x66666666
 8000f04:	400a6666 	.word	0x400a6666
 8000f08:	33333333 	.word	0x33333333
 8000f0c:	4048f333 	.word	0x4048f333
 8000f10:	20004378 	.word	0x20004378
 8000f14:	20004260 	.word	0x20004260
 8000f18:	45800000 	.word	0x45800000
 8000f1c:	20009694 	.word	0x20009694
 8000f20:	2000022c 	.word	0x2000022c
 8000f24:	20006ae4 	.word	0x20006ae4
 8000f28:	200043c0 	.word	0x200043c0
 8000f2c:	20000235 	.word	0x20000235
 8000f30:	20006aec 	.word	0x20006aec
 8000f34:	20006ae8 	.word	0x20006ae8
 8000f38:	20006b54 	.word	0x20006b54
 8000f3c:	200043c8 	.word	0x200043c8
 8000f40:	200043c4 	.word	0x200043c4
 8000f44:	200043d0 	.word	0x200043d0
 8000f48:	20004308 	.word	0x20004308
 8000f4c:	2000430c 	.word	0x2000430c
 8000f50:	200094c0 	.word	0x200094c0
 8000f54:	20004300 	.word	0x20004300
 8000f58:	0800a3e0 	.word	0x0800a3e0
 8000f5c:	20009670 	.word	0x20009670
 8000f60:	20009280 	.word	0x20009280
 8000f64:	200094c4 	.word	0x200094c4
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0b8      	sub	sp, #224	; 0xe0
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f76:	2234      	movs	r2, #52	; 0x34
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fd74 	bl	8006a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2290      	movs	r2, #144	; 0x90
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fd65 	bl	8006a68 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <SystemClock_Config+0x118>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a38      	ldr	r2, [pc, #224]	; (8001084 <SystemClock_Config+0x118>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <SystemClock_Config+0x118>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb6:	4b34      	ldr	r3, [pc, #208]	; (8001088 <SystemClock_Config+0x11c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <SystemClock_Config+0x11c>)
 8000fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <SystemClock_Config+0x11c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ff2:	23d8      	movs	r3, #216	; 0xd8
 8000ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f97d 	bl	8003308 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001014:	f000 fae8 	bl	80015e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001018:	f002 f926 	bl	8003268 <HAL_PWREx_EnableOverDrive>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001022:	f000 fae1 	bl	80015e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001048:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800104c:	2107      	movs	r1, #7
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fc08 	bl	8003864 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800105a:	f000 fac5 	bl	80015e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800105e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001062:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001064:	2300      	movs	r3, #0
 8001066:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fdf1 	bl	8003c54 <HAL_RCCEx_PeriphCLKConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001078:	f000 fab6 	bl	80015e8 <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	37e0      	adds	r7, #224	; 0xe0
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_ADC1_Init+0x98>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_ADC1_Init+0x9c>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_ADC1_Init+0x98>)
 80010a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_ADC1_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC1_Init+0x98>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_ADC1_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_ADC1_Init+0x98>)
 80010ce:	4a17      	ldr	r2, [pc, #92]	; (800112c <MX_ADC1_Init+0xa0>)
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_ADC1_Init+0x98>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_ADC1_Init+0x98>)
 80010da:	2201      	movs	r2, #1
 80010dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_ADC1_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_ADC1_Init+0x98>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_ADC1_Init+0x98>)
 80010ee:	f000 fd65 	bl	8001bbc <HAL_ADC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010f8:	f000 fa76 	bl	80015e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010fc:	230b      	movs	r3, #11
 80010fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2301      	movs	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_ADC1_Init+0x98>)
 800110e:	f000 ff33 	bl	8001f78 <HAL_ADC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001118:	f000 fa66 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004378 	.word	0x20004378
 8001128:	40012000 	.word	0x40012000
 800112c:	0f000001 	.word	0x0f000001

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <MX_SPI1_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_SPI1_Init+0x74>)
 800113c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_SPI1_Init+0x74>)
 800114a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800114e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_SPI1_Init+0x74>)
 800115e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001162:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001166:	2228      	movs	r2, #40	; 0x28
 8001168:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_SPI1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_SPI1_Init+0x74>)
 800117e:	2207      	movs	r2, #7
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_SPI1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_SPI1_Init+0x74>)
 8001190:	f003 f988 	bl	80044a4 <HAL_SPI_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 fa25 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20009548 	.word	0x20009548
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_SPI4_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_SPI4_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_SPI4_Init+0x74>)
 80011b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011bc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_SPI4_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI4_Init+0x74>)
 80011c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011ca:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI4_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_SPI4_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI4_Init+0x74>)
 80011da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011de:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI4_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI4_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI4_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_SPI4_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI4_Init+0x74>)
 80011fa:	2207      	movs	r2, #7
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_SPI4_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI4_Init+0x74>)
 8001206:	2208      	movs	r2, #8
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_SPI4_Init+0x74>)
 800120c:	f003 f94a 	bl	80044a4 <HAL_SPI_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f9e7 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20006af0 	.word	0x20006af0
 8001224:	40013400 	.word	0x40013400

08001228 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART6_UART_Init+0x58>)
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <MX_USART6_UART_Init+0x5c>)
 8001230:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001238:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART6_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART6_UART_Init+0x58>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART6_UART_Init+0x58>)
 800125a:	2200      	movs	r2, #0
 800125c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART6_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART6_UART_Init+0x58>)
 800126c:	f004 fc24 	bl	8005ab8 <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001276:	f000 f9b7 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200094c4 	.word	0x200094c4
 8001284:	40011400 	.word	0x40011400

08001288 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_DMA_Init+0x58>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <MX_DMA_Init+0x58>)
 8001294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_DMA_Init+0x58>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2105      	movs	r1, #5
 80012aa:	2038      	movs	r0, #56	; 0x38
 80012ac:	f001 f98f 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012b0:	2038      	movs	r0, #56	; 0x38
 80012b2:	f001 f9a8 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2105      	movs	r1, #5
 80012ba:	203b      	movs	r0, #59	; 0x3b
 80012bc:	f001 f987 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012c0:	203b      	movs	r0, #59	; 0x3b
 80012c2:	f001 f9a0 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2045      	movs	r0, #69	; 0x45
 80012cc:	f001 f97f 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012d0:	2045      	movs	r0, #69	; 0x45
 80012d2:	f001 f998 	bl	8002606 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <MX_GPIO_Init+0x190>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a5d      	ldr	r2, [pc, #372]	; (8001474 <MX_GPIO_Init+0x190>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <MX_GPIO_Init+0x190>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <MX_GPIO_Init+0x190>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a57      	ldr	r2, [pc, #348]	; (8001474 <MX_GPIO_Init+0x190>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b55      	ldr	r3, [pc, #340]	; (8001474 <MX_GPIO_Init+0x190>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b52      	ldr	r3, [pc, #328]	; (8001474 <MX_GPIO_Init+0x190>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a51      	ldr	r2, [pc, #324]	; (8001474 <MX_GPIO_Init+0x190>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <MX_GPIO_Init+0x190>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <MX_GPIO_Init+0x190>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <MX_GPIO_Init+0x190>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <MX_GPIO_Init+0x190>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <MX_GPIO_Init+0x190>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a45      	ldr	r2, [pc, #276]	; (8001474 <MX_GPIO_Init+0x190>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <MX_GPIO_Init+0x190>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4840      	ldr	r0, [pc, #256]	; (8001478 <MX_GPIO_Init+0x194>)
 8001378:	f001 ff2a 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2110      	movs	r1, #16
 8001380:	483e      	ldr	r0, [pc, #248]	; (800147c <MX_GPIO_Init+0x198>)
 8001382:	f001 ff25 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	483c      	ldr	r0, [pc, #240]	; (8001480 <MX_GPIO_Init+0x19c>)
 800138e:	f001 ff1f 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001398:	483a      	ldr	r0, [pc, #232]	; (8001484 <MX_GPIO_Init+0x1a0>)
 800139a:	f001 ff19 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4830      	ldr	r0, [pc, #192]	; (8001478 <MX_GPIO_Init+0x194>)
 80013b6:	f001 fd49 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 80013ba:	2308      	movs	r3, #8
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_GPIO_Init+0x1a4>)
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	482b      	ldr	r0, [pc, #172]	; (800147c <MX_GPIO_Init+0x198>)
 80013ce:	f001 fd3d 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80013d2:	2310      	movs	r3, #16
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4824      	ldr	r0, [pc, #144]	; (800147c <MX_GPIO_Init+0x198>)
 80013ea:	f001 fd2f 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	481e      	ldr	r0, [pc, #120]	; (8001480 <MX_GPIO_Init+0x19c>)
 8001408:	f001 fd20 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_GPIO_Init+0x1a8>)
 8001414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4817      	ldr	r0, [pc, #92]	; (8001480 <MX_GPIO_Init+0x19c>)
 8001422:	f001 fd13 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001426:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_GPIO_Init+0x1a0>)
 8001440:	f001 fd04 	bl	8002e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_DRDY_Pin */
  GPIO_InitStruct.Pin = ETH_DRDY_Pin;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_GPIO_Init+0x1a4>)
 800144a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ETH_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_GPIO_Init+0x194>)
 8001458:	f001 fcf8 	bl	8002e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2107      	movs	r1, #7
 8001460:	2009      	movs	r0, #9
 8001462:	f001 f8b4 	bl	80025ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001466:	2009      	movs	r0, #9
 8001468:	f001 f8cd 	bl	8002606 <HAL_NVIC_EnableIRQ>

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40021000 	.word	0x40021000
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020c00 	.word	0x40020c00
 8001488:	10110000 	.word	0x10110000
 800148c:	10210000 	.word	0x10210000

08001490 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 &&id==3 )
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b08      	cmp	r3, #8
 800149e:	f040 8088 	bne.w	80015b2 <HAL_GPIO_EXTI_Callback+0x122>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_GPIO_EXTI_Callback+0x12c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	f040 8083 	bne.w	80015b2 <HAL_GPIO_EXTI_Callback+0x122>
	{

		switch(channel)
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x130>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <HAL_GPIO_EXTI_Callback+0x2a>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d033      	beq.n	8001520 <HAL_GPIO_EXTI_Callback+0x90>
 80014b8:	e068      	b.n	800158c <HAL_GPIO_EXTI_Callback+0xfc>
		{
		case sensor1:
			if(isSwitch)
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_EXTI_Callback+0x3a>
				 * pass data
				 * After switching channels, the first data read is from the previous channel
				 */

//				ADS1256_GetChannalValue();
				isSwitch=0;
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
	  				ADS1256_SwitchChannalValue(sensor2);
	  				channel = sensor2;
	  				isSwitch = 1;
	  			}
			}
			break;
 80014c8:	e05d      	b.n	8001586 <HAL_GPIO_EXTI_Callback+0xf6>
				waitDRDY();
 80014ca:	f7ff f9d3 	bl	8000874 <waitDRDY>
				voltage_tmp = ADS1256_GetChannalValue();
 80014ce:	f7ff faa7 	bl	8000a20 <ADS1256_GetChannalValue>
 80014d2:	eef0 7a40 	vmov.f32	s15, s0
 80014d6:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x138>)
 80014d8:	edc3 7a00 	vstr	s15, [r3]
	  			v_f[v.cnt]=voltage_tmp;
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <HAL_GPIO_EXTI_Callback+0x138>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	493a      	ldr	r1, [pc, #232]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x140>)
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	601a      	str	r2, [r3, #0]
	  			v.cnt++;
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a36      	ldr	r2, [pc, #216]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 80014f4:	6013      	str	r3, [r2, #0]
	  			if(v.cnt%dataSize==0)
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a36      	ldr	r2, [pc, #216]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x144>)
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001502:	fb02 f201 	mul.w	r2, r2, r1
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d13c      	bne.n	8001586 <HAL_GPIO_EXTI_Callback+0xf6>
	  				ADS1256_SwitchChannalValue(sensor2);
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fa4d 	bl	80009ac <ADS1256_SwitchChannalValue>
	  				channel = sensor2;
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x130>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
	  				isSwitch = 1;
 8001518:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
			break;
 800151e:	e032      	b.n	8001586 <HAL_GPIO_EXTI_Callback+0xf6>


		case sensor2:
			if(isSwitch)
 8001520:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_EXTI_Callback+0xa0>
			{
//				ADS1256_GetChannalValue();
				isSwitch=0;
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	  				ADS1256_SwitchChannalValue(sensor1);
	  				channel = sensor1;
	  				isSwitch = 1;
	  			}
			}
			break;
 800152e:	e02c      	b.n	800158a <HAL_GPIO_EXTI_Callback+0xfa>
				waitDRDY();
 8001530:	f7ff f9a0 	bl	8000874 <waitDRDY>
				current_tmp = ADS1256_GetChannalValue();
 8001534:	f7ff fa74 	bl	8000a20 <ADS1256_GetChannalValue>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x148>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
	  			i_f[i.cnt]=current_tmp;
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_GPIO_EXTI_Callback+0x148>)
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	4925      	ldr	r1, [pc, #148]	; (80015e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	601a      	str	r2, [r3, #0]
	  			i.cnt++;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 800155a:	6013      	str	r3, [r2, #0]
	  			if(i.cnt%dataSize==0)
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x144>)
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	fb93 f1f2 	sdiv	r1, r3, r2
 8001568:	fb02 f201 	mul.w	r2, r2, r1
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10b      	bne.n	800158a <HAL_GPIO_EXTI_Callback+0xfa>
	  				ADS1256_SwitchChannalValue(sensor1);
 8001572:	2000      	movs	r0, #0
 8001574:	f7ff fa1a 	bl	80009ac <ADS1256_SwitchChannalValue>
	  				channel = sensor1;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_GPIO_EXTI_Callback+0x130>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
	  				isSwitch = 1;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_GPIO_EXTI_Callback+0x134>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
			break;
 8001584:	e001      	b.n	800158a <HAL_GPIO_EXTI_Callback+0xfa>
			break;
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <HAL_GPIO_EXTI_Callback+0xfc>
			break;
 800158a:	bf00      	nop
		}
		if (v.cnt >=2400 && i.cnt >=2400)
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001594:	db0d      	blt.n	80015b2 <HAL_GPIO_EXTI_Callback+0x122>
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800159e:	db08      	blt.n	80015b2 <HAL_GPIO_EXTI_Callback+0x122>
		{
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
			v.cnt=0;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_GPIO_EXTI_Callback+0x13c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
			i.cnt=0;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
			tf_status = 1;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
//			BaseType_t xHigherPriorityTaskWoken;
//			xHigherPriorityTaskWoken = pdFALSE;
//			xSemaphoreGiveFromISR(UARTSemHandle,&xHigherPriorityTaskWoken);
		}
	}
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2000022c 	.word	0x2000022c
 80015c0:	20000230 	.word	0x20000230
 80015c4:	20000234 	.word	0x20000234
 80015c8:	2000960c 	.word	0x2000960c
 80015cc:	20006ae4 	.word	0x20006ae4
 80015d0:	20006b54 	.word	0x20006b54
 80015d4:	20000010 	.word	0x20000010
 80015d8:	200043cc 	.word	0x200043cc
 80015dc:	200043c0 	.word	0x200043c0
 80015e0:	200043d0 	.word	0x200043d0
 80015e4:	20000235 	.word	0x20000235

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_ADC_MspInit+0x74>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d123      	bne.n	80016aa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6453      	str	r3, [r2, #68]	; 0x44
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_ADC_MspInit+0x78>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001692:	2302      	movs	r3, #2
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <HAL_ADC_MspInit+0x7c>)
 80016a6:	f001 fbd1 	bl	8002e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40012000 	.word	0x40012000
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020800 	.word	0x40020800

080016c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5c      	ldr	r2, [pc, #368]	; (8001850 <HAL_SPI_MspInit+0x190>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	f040 8085 	bne.w	80017ee <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80016ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ee:	6453      	str	r3, [r2, #68]	; 0x44
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	4a54      	ldr	r2, [pc, #336]	; (8001854 <HAL_SPI_MspInit+0x194>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6313      	str	r3, [r2, #48]	; 0x30
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_SPI_MspInit+0x194>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ADC_SCLK_Pin|ADC_MISO_Pin|ADC_MOSI_Pin;
 8001714:	23e0      	movs	r3, #224	; 0xe0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001724:	2305      	movs	r3, #5
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	484a      	ldr	r0, [pc, #296]	; (8001858 <HAL_SPI_MspInit+0x198>)
 8001730:	f001 fb8c 	bl	8002e4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001734:	4b49      	ldr	r3, [pc, #292]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <HAL_SPI_MspInit+0x1a0>)
 8001738:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_SPI_MspInit+0x19c>)
 800173c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001740:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001748:	4b44      	ldr	r3, [pc, #272]	; (800185c <HAL_SPI_MspInit+0x19c>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001754:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800175c:	4b3f      	ldr	r3, [pc, #252]	; (800185c <HAL_SPI_MspInit+0x19c>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001762:	4b3e      	ldr	r3, [pc, #248]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001768:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_SPI_MspInit+0x19c>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001774:	4839      	ldr	r0, [pc, #228]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001776:	f000 ff61 	bl	800263c <HAL_DMA_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001780:	f7ff ff32 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_SPI_MspInit+0x19c>)
 8001788:	659a      	str	r2, [r3, #88]	; 0x58
 800178a:	4a34      	ldr	r2, [pc, #208]	; (800185c <HAL_SPI_MspInit+0x19c>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 8001792:	4a35      	ldr	r2, [pc, #212]	; (8001868 <HAL_SPI_MspInit+0x1a8>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 8001798:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800179c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80017d0:	4824      	ldr	r0, [pc, #144]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017d2:	f000 ff33 	bl	800263c <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80017dc:	f7ff ff04 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_SPI_MspInit+0x1a4>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80017ec:	e02c      	b.n	8001848 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI4)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1e      	ldr	r2, [pc, #120]	; (800186c <HAL_SPI_MspInit+0x1ac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d127      	bne.n	8001848 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_SPI_MspInit+0x194>)
 80017fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001802:	6453      	str	r3, [r2, #68]	; 0x44
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_SPI_MspInit+0x194>)
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_SPI_MspInit+0x194>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <HAL_SPI_MspInit+0x194>)
 8001816:	f043 0310 	orr.w	r3, r3, #16
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_SPI_MspInit+0x194>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ETH_SCLK_Pin|ETH_MISO_Pin|ETH_MOSI_Pin;
 8001828:	2364      	movs	r3, #100	; 0x64
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001838:	2305      	movs	r3, #5
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	480b      	ldr	r0, [pc, #44]	; (8001870 <HAL_SPI_MspInit+0x1b0>)
 8001844:	f001 fb02 	bl	8002e4c <HAL_GPIO_Init>
}
 8001848:	bf00      	nop
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013000 	.word	0x40013000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000
 800185c:	200095ac 	.word	0x200095ac
 8001860:	40026410 	.word	0x40026410
 8001864:	20009610 	.word	0x20009610
 8001868:	40026458 	.word	0x40026458
 800186c:	40013400 	.word	0x40013400
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a32      	ldr	r2, [pc, #200]	; (800195c <HAL_UART_MspInit+0xe8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d15d      	bne.n	8001952 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <HAL_UART_MspInit+0xec>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a31      	ldr	r2, [pc, #196]	; (8001960 <HAL_UART_MspInit+0xec>)
 800189c:	f043 0320 	orr.w	r3, r3, #32
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_UART_MspInit+0xec>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <HAL_UART_MspInit+0xec>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <HAL_UART_MspInit+0xec>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_UART_MspInit+0xec>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018d6:	2308      	movs	r3, #8
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4820      	ldr	r0, [pc, #128]	; (8001964 <HAL_UART_MspInit+0xf0>)
 80018e2:	f001 fab3 	bl	8002e4c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_UART_MspInit+0xf4>)
 80018e8:	4a20      	ldr	r2, [pc, #128]	; (800196c <HAL_UART_MspInit+0xf8>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_UART_MspInit+0xf4>)
 80018ee:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_UART_MspInit+0xf4>)
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_MspInit+0xf4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_UART_MspInit+0xf4>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_UART_MspInit+0xf4>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_UART_MspInit+0xf4>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_UART_MspInit+0xf4>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_UART_MspInit+0xf4>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_UART_MspInit+0xf4>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001926:	4810      	ldr	r0, [pc, #64]	; (8001968 <HAL_UART_MspInit+0xf4>)
 8001928:	f000 fe88 	bl	800263c <HAL_DMA_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001932:	f7ff fe59 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_UART_MspInit+0xf4>)
 800193a:	66da      	str	r2, [r3, #108]	; 0x6c
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_UART_MspInit+0xf4>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2105      	movs	r1, #5
 8001946:	2047      	movs	r0, #71	; 0x47
 8001948:	f000 fe41 	bl	80025ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800194c:	2047      	movs	r0, #71	; 0x47
 800194e:	f000 fe5a 	bl	8002606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40011400 	.word	0x40011400
 8001960:	40023800 	.word	0x40023800
 8001964:	40020800 	.word	0x40020800
 8001968:	20004318 	.word	0x20004318
 800196c:	400264a0 	.word	0x400264a0

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f8da 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80019d0:	2008      	movs	r0, #8
 80019d2:	f001 fc31 	bl	8003238 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA2_Stream0_IRQHandler+0x10>)
 80019e2:	f000 ffcb 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200095ac 	.word	0x200095ac

080019f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA2_Stream3_IRQHandler+0x10>)
 80019f6:	f000 ffc1 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20009610 	.word	0x20009610

08001a04 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA2_Stream6_IRQHandler+0x10>)
 8001a0a:	f000 ffb7 	bl	800297c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20004318 	.word	0x20004318

08001a18 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <USART6_IRQHandler+0x10>)
 8001a1e:	f004 f917 	bl	8005c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200094c4 	.word	0x200094c4

08001a2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x50>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x16>
		heap_end = &end;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <_sbrk+0x50>)
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <_sbrk+0x54>)
 8001a40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <_sbrk+0x50>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <_sbrk+0x50>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	466a      	mov	r2, sp
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d907      	bls.n	8001a66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a56:	f004 ffdd 	bl	8006a14 <__errno>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	e006      	b.n	8001a74 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <_sbrk+0x50>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <_sbrk+0x50>)
 8001a70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000238 	.word	0x20000238
 8001a80:	200096a0 	.word	0x200096a0

08001a84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <SystemInit+0x28>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <SystemInit+0x28>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SystemInit+0x28>)
 8001a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ab6:	e003      	b.n	8001ac0 <LoopCopyDataInit>

08001ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001abe:	3104      	adds	r1, #4

08001ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ac0:	480b      	ldr	r0, [pc, #44]	; (8001af0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ac8:	d3f6      	bcc.n	8001ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001acc:	e002      	b.n	8001ad4 <LoopFillZerobss>

08001ace <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ace:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ad0:	f842 3b04 	str.w	r3, [r2], #4

08001ad4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ad8:	d3f9      	bcc.n	8001ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ada:	f7ff ffd3 	bl	8001a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ade:	f004 ff9f 	bl	8006a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae2:	f7ff f915 	bl	8000d10 <main>
  bx  lr    
 8001ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ae8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001aec:	0800a748 	.word	0x0800a748
  ldr  r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001af4:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001af8:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8001afc:	200096a0 	.word	0x200096a0

08001b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b00:	e7fe      	b.n	8001b00 <ADC_IRQHandler>

08001b02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b06:	2003      	movs	r0, #3
 8001b08:	f000 fd56 	bl	80025b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 f805 	bl	8001b1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff fd71 	bl	80015f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fd71 	bl	8002622 <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 fd39 	bl	80025ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000014 	.word	0x20000014
 8001b74:	2000001c 	.word	0x2000001c
 8001b78:	20000018 	.word	0x20000018

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	20009698 	.word	0x20009698

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20009698 	.word	0x20009698

08001bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e031      	b.n	8001c36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fd30 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_ADC_Init+0x84>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	f043 0202 	orr.w	r2, r3, #2
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fb0a 	bl	8002224 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
 8001c26:	e001      	b.n	8001c2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	ffffeefd 	.word	0xffffeefd

08001c44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Start+0x1a>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e0ad      	b.n	8001dba <HAL_ADC_Start+0x176>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d018      	beq.n	8001ca6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_ADC_Start+0x184>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a50      	ldr	r2, [pc, #320]	; (8001dcc <HAL_ADC_Start+0x188>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0c9a      	lsrs	r2, r3, #18
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d175      	bne.n	8001da0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb8:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <HAL_ADC_Start+0x18c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f023 0206 	bic.w	r2, r3, #6
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_ADC_Start+0x190>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 031f 	and.w	r3, r3, #31
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10f      	bne.n	8001d42 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d143      	bne.n	8001db8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	e03a      	b.n	8001db8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_ADC_Start+0x194>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10e      	bne.n	8001d6a <HAL_ADC_Start+0x126>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d68:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_ADC_Start+0x190>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d120      	bne.n	8001db8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_ADC_Start+0x198>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d11b      	bne.n	8001db8 <HAL_ADC_Start+0x174>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	e00b      	b.n	8001db8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0210 	orr.w	r2, r3, #16
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f043 0201 	orr.w	r2, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000014 	.word	0x20000014
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	fffff8fe 	.word	0xfffff8fe
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	40012000 	.word	0x40012000
 8001ddc:	40012200 	.word	0x40012200

08001de0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Stop+0x16>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e01f      	b.n	8001e36 <HAL_ADC_Stop+0x56>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_ADC_Stop+0x64>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	ffffeefe 	.word	0xffffeefe

08001e48 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	d113      	bne.n	8001e8e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	d10b      	bne.n	8001e8e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f043 0220 	orr.w	r2, r3, #32
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e063      	b.n	8001f56 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e8e:	f7ff fe89 	bl	8001ba4 <HAL_GetTick>
 8001e92:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e94:	e021      	b.n	8001eda <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d01d      	beq.n	8001eda <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x6c>
 8001ea4:	f7ff fe7e 	bl	8001ba4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d212      	bcs.n	8001eda <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d00b      	beq.n	8001eda <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e03d      	b.n	8001f56 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d1d6      	bne.n	8001e96 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0212 	mvn.w	r2, #18
 8001ef0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d123      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11f      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x1c>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e12a      	b.n	80021ea <HAL_ADC_ConfigChannel+0x272>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b09      	cmp	r3, #9
 8001fa2:	d93a      	bls.n	800201a <HAL_ADC_ConfigChannel+0xa2>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fac:	d035      	beq.n	800201a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3b1e      	subs	r3, #30
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_ADC_ConfigChannel+0x280>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10a      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68d9      	ldr	r1, [r3, #12]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	061a      	lsls	r2, r3, #24
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff2:	e035      	b.n	8002060 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68d9      	ldr	r1, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	4603      	mov	r3, r0
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4403      	add	r3, r0
 800200c:	3b1e      	subs	r3, #30
 800200e:	409a      	lsls	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002018:	e022      	b.n	8002060 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6919      	ldr	r1, [r3, #16]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	2207      	movs	r2, #7
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43da      	mvns	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	400a      	ands	r2, r1
 800203c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6919      	ldr	r1, [r3, #16]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	4618      	mov	r0, r3
 8002050:	4603      	mov	r3, r0
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4403      	add	r3, r0
 8002056:	409a      	lsls	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b06      	cmp	r3, #6
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b05      	subs	r3, #5
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b05      	subs	r3, #5
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34
 80020b0:	e04c      	b.n	800214c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d824      	bhi.n	8002104 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b23      	subs	r3, #35	; 0x23
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	; 0x23
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
 8002102:	e023      	b.n	800214c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b41      	subs	r3, #65	; 0x41
 8002116:	221f      	movs	r2, #31
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b41      	subs	r3, #65	; 0x41
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2a      	ldr	r2, [pc, #168]	; (80021fc <HAL_ADC_ConfigChannel+0x284>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1f4>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800215e:	d105      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a26      	ldr	r2, [pc, #152]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 8002166:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800216a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a22      	ldr	r2, [pc, #136]	; (80021fc <HAL_ADC_ConfigChannel+0x284>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d109      	bne.n	800218a <HAL_ADC_ConfigChannel+0x212>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b12      	cmp	r3, #18
 800217c:	d105      	bne.n	800218a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 8002184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002188:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_ADC_ConfigChannel+0x284>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d125      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x268>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <HAL_ADC_ConfigChannel+0x280>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <HAL_ADC_ConfigChannel+0x22e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b11      	cmp	r3, #17
 80021a4:	d11c      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <HAL_ADC_ConfigChannel+0x288>)
 80021ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_ADC_ConfigChannel+0x280>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d111      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_ADC_ConfigChannel+0x28c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <HAL_ADC_ConfigChannel+0x290>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	0c9a      	lsrs	r2, r3, #18
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021d2:	e002      	b.n	80021da <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f9      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	10000012 	.word	0x10000012
 80021fc:	40012000 	.word	0x40012000
 8002200:	40012300 	.word	0x40012300
 8002204:	20000014 	.word	0x20000014
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800222c:	4b78      	ldr	r3, [pc, #480]	; (8002410 <ADC_Init+0x1ec>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a77      	ldr	r2, [pc, #476]	; (8002410 <ADC_Init+0x1ec>)
 8002232:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002236:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <ADC_Init+0x1ec>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4973      	ldr	r1, [pc, #460]	; (8002410 <ADC_Init+0x1ec>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	021a      	lsls	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800229a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6899      	ldr	r1, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4a58      	ldr	r2, [pc, #352]	; (8002414 <ADC_Init+0x1f0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	e00f      	b.n	800231e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800231c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0202 	bic.w	r2, r2, #2
 800232c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	005a      	lsls	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01b      	beq.n	8002384 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800235a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800236a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6859      	ldr	r1, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	3b01      	subs	r3, #1
 8002378:	035a      	lsls	r2, r3, #13
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e007      	b.n	8002394 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	051a      	lsls	r2, r3, #20
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d6:	025a      	lsls	r2, r3, #9
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6899      	ldr	r1, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	029a      	lsls	r2, r3, #10
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40012300 	.word	0x40012300
 8002414:	0f000001 	.word	0x0f000001

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <__NVIC_SetPriorityGrouping+0x40>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	4313      	orrs	r3, r2
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__NVIC_SetPriorityGrouping+0x40>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00
 800245c:	05fa0000 	.word	0x05fa0000

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
	...

08002574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002584:	d301      	bcc.n	800258a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002586:	2301      	movs	r3, #1
 8002588:	e00f      	b.n	80025aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258a:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <SysTick_Config+0x40>)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002592:	210f      	movs	r1, #15
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff ff8e 	bl	80024b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <SysTick_Config+0x40>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a2:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <SysTick_Config+0x40>)
 80025a4:	2207      	movs	r2, #7
 80025a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	e000e010 	.word	0xe000e010

080025b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff29 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025e0:	f7ff ff3e 	bl	8002460 <__NVIC_GetPriorityGrouping>
 80025e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f7ff ff8e 	bl	800250c <NVIC_EncodePriority>
 80025f0:	4602      	mov	r2, r0
 80025f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff5d 	bl	80024b8 <__NVIC_SetPriority>
}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff31 	bl	800247c <__NVIC_EnableIRQ>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ffa2 	bl	8002574 <SysTick_Config>
 8002630:	4603      	mov	r3, r0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff faac 	bl	8001ba4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e099      	b.n	800278c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002678:	e00f      	b.n	800269a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267a:	f7ff fa93 	bl	8001ba4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b05      	cmp	r3, #5
 8002686:	d908      	bls.n	800269a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2203      	movs	r2, #3
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e078      	b.n	800278c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e8      	bne.n	800267a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <HAL_DMA_Init+0x158>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0307 	bic.w	r3, r3, #7
 800271a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	2b04      	cmp	r3, #4
 800272c:	d117      	bne.n	800275e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fb09 	bl	8002d58 <DMA_CheckFifoParam>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2240      	movs	r2, #64	; 0x40
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800275a:	2301      	movs	r3, #1
 800275c:	e016      	b.n	800278c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fac0 	bl	8002cec <DMA_CalcBaseAndBitshift>
 800276c:	4603      	mov	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	223f      	movs	r2, #63	; 0x3f
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	e010803f 	.word	0xe010803f

08002798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Start_IT+0x26>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e048      	b.n	8002850 <HAL_DMA_Start_IT+0xb8>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d137      	bne.n	8002842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa52 	bl	8002c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	223f      	movs	r2, #63	; 0x3f
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0216 	orr.w	r2, r2, #22
 8002806:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002816:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0208 	orr.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e005      	b.n	800284e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800284a:	2302      	movs	r3, #2
 800284c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff f99d 	bl	8001ba4 <HAL_GetTick>
 800286a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d008      	beq.n	800288a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e052      	b.n	8002930 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0216 	bic.w	r2, r2, #22
 8002898:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_DMA_Abort+0x62>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d007      	beq.n	80028ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0208 	bic.w	r2, r2, #8
 80028c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	e013      	b.n	8002904 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028dc:	f7ff f962 	bl	8001ba4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d90c      	bls.n	8002904 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2220      	movs	r2, #32
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2203      	movs	r2, #3
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e015      	b.n	8002930 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e4      	bne.n	80028dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d004      	beq.n	8002956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00c      	b.n	8002970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2205      	movs	r2, #5
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_DMA_IRQHandler+0x258>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a92      	ldr	r2, [pc, #584]	; (8002bd8 <HAL_DMA_IRQHandler+0x25c>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0204 	bic.w	r2, r2, #4
 80029ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2208      	movs	r2, #8
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0201 	orr.w	r2, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2201      	movs	r2, #1
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2204      	movs	r2, #4
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d012      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2204      	movs	r2, #4
 8002a42:	409a      	lsls	r2, r3
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2210      	movs	r2, #16
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d043      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03c      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2210      	movs	r2, #16
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d108      	bne.n	8002aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d024      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
 8002aaa:	e01f      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
 8002abc:	e016      	b.n	8002aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0208 	bic.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2220      	movs	r2, #32
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 808e 	beq.w	8002c1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8086 	beq.w	8002c1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2220      	movs	r2, #32
 8002b14:	409a      	lsls	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d136      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0216 	bic.w	r2, r2, #22
 8002b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_DMA_IRQHandler+0x1da>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0208 	bic.w	r2, r2, #8
 8002b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	223f      	movs	r2, #63	; 0x3f
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d07d      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
        }
        return;
 8002b92:	e078      	b.n	8002c86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01c      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d108      	bne.n	8002bc2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d030      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e02b      	b.n	8002c1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	4798      	blx	r3
 8002bd2:	e022      	b.n	8002c1a <HAL_DMA_IRQHandler+0x29e>
 8002bd4:	20000014 	.word	0x20000014
 8002bd8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0210 	bic.w	r2, r2, #16
 8002bf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d032      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d022      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0201 	bic.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d307      	bcc.n	8002c62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f2      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x2ca>
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c86:	bf00      	nop
    }
  }
}
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop

08002c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d108      	bne.n	8002cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cce:	e007      	b.n	8002ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	3b10      	subs	r3, #16
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <DMA_CalcBaseAndBitshift+0x60>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <DMA_CalcBaseAndBitshift+0x64>)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d908      	bls.n	8002d2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <DMA_CalcBaseAndBitshift+0x68>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	1d1a      	adds	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58
 8002d2a:	e006      	b.n	8002d3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <DMA_CalcBaseAndBitshift+0x68>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	aaaaaaab 	.word	0xaaaaaaab
 8002d50:	0800a410 	.word	0x0800a410
 8002d54:	fffffc00 	.word	0xfffffc00

08002d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11f      	bne.n	8002db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d855      	bhi.n	8002e24 <DMA_CheckFifoParam+0xcc>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <DMA_CheckFifoParam+0x28>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002da3 	.word	0x08002da3
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	08002e25 	.word	0x08002e25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d045      	beq.n	8002e28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e042      	b.n	8002e28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002daa:	d13f      	bne.n	8002e2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e03c      	b.n	8002e2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dba:	d121      	bne.n	8002e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d836      	bhi.n	8002e30 <DMA_CheckFifoParam+0xd8>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <DMA_CheckFifoParam+0x70>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002dd9 	.word	0x08002dd9
 8002dcc:	08002ddf 	.word	0x08002ddf
 8002dd0:	08002dd9 	.word	0x08002dd9
 8002dd4:	08002df1 	.word	0x08002df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e02f      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dee:	e021      	b.n	8002e34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002df8:	d11e      	bne.n	8002e38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dfe:	e01b      	b.n	8002e38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d902      	bls.n	8002e0c <DMA_CheckFifoParam+0xb4>
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d003      	beq.n	8002e12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e0a:	e018      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e015      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      break;
 8002e22:	e00b      	b.n	8002e3c <DMA_CheckFifoParam+0xe4>
      break;
 8002e24:	bf00      	nop
 8002e26:	e00a      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e28:	bf00      	nop
 8002e2a:	e008      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e006      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e30:	bf00      	nop
 8002e32:	e004      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e34:	bf00      	nop
 8002e36:	e002      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;   
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <DMA_CheckFifoParam+0xe6>
      break;
 8002e3c:	bf00      	nop
    }
  } 
  
  return status; 
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	; 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e175      	b.n	8003158 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8164 	bne.w	8003152 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00b      	beq.n	8002eaa <HAL_GPIO_Init+0x5e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d130      	bne.n	8002f0c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x100>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80be 	beq.w	8003152 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_GPIO_Init+0x320>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a64      	ldr	r2, [pc, #400]	; (800316c <HAL_GPIO_Init+0x320>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_GPIO_Init+0x320>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fee:	4a60      	ldr	r2, [pc, #384]	; (8003170 <HAL_GPIO_Init+0x324>)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	220f      	movs	r2, #15
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_GPIO_Init+0x328>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d037      	beq.n	800308a <HAL_GPIO_Init+0x23e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a56      	ldr	r2, [pc, #344]	; (8003178 <HAL_GPIO_Init+0x32c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d031      	beq.n	8003086 <HAL_GPIO_Init+0x23a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <HAL_GPIO_Init+0x330>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02b      	beq.n	8003082 <HAL_GPIO_Init+0x236>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a54      	ldr	r2, [pc, #336]	; (8003180 <HAL_GPIO_Init+0x334>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d025      	beq.n	800307e <HAL_GPIO_Init+0x232>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a53      	ldr	r2, [pc, #332]	; (8003184 <HAL_GPIO_Init+0x338>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01f      	beq.n	800307a <HAL_GPIO_Init+0x22e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_GPIO_Init+0x33c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d019      	beq.n	8003076 <HAL_GPIO_Init+0x22a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a51      	ldr	r2, [pc, #324]	; (800318c <HAL_GPIO_Init+0x340>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d013      	beq.n	8003072 <HAL_GPIO_Init+0x226>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a50      	ldr	r2, [pc, #320]	; (8003190 <HAL_GPIO_Init+0x344>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d00d      	beq.n	800306e <HAL_GPIO_Init+0x222>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4f      	ldr	r2, [pc, #316]	; (8003194 <HAL_GPIO_Init+0x348>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <HAL_GPIO_Init+0x21e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_GPIO_Init+0x34c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d101      	bne.n	8003066 <HAL_GPIO_Init+0x21a>
 8003062:	2309      	movs	r3, #9
 8003064:	e012      	b.n	800308c <HAL_GPIO_Init+0x240>
 8003066:	230a      	movs	r3, #10
 8003068:	e010      	b.n	800308c <HAL_GPIO_Init+0x240>
 800306a:	2308      	movs	r3, #8
 800306c:	e00e      	b.n	800308c <HAL_GPIO_Init+0x240>
 800306e:	2307      	movs	r3, #7
 8003070:	e00c      	b.n	800308c <HAL_GPIO_Init+0x240>
 8003072:	2306      	movs	r3, #6
 8003074:	e00a      	b.n	800308c <HAL_GPIO_Init+0x240>
 8003076:	2305      	movs	r3, #5
 8003078:	e008      	b.n	800308c <HAL_GPIO_Init+0x240>
 800307a:	2304      	movs	r3, #4
 800307c:	e006      	b.n	800308c <HAL_GPIO_Init+0x240>
 800307e:	2303      	movs	r3, #3
 8003080:	e004      	b.n	800308c <HAL_GPIO_Init+0x240>
 8003082:	2302      	movs	r3, #2
 8003084:	e002      	b.n	800308c <HAL_GPIO_Init+0x240>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x240>
 800308a:	2300      	movs	r3, #0
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	f002 0203 	and.w	r2, r2, #3
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	4093      	lsls	r3, r2
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800309c:	4934      	ldr	r1, [pc, #208]	; (8003170 <HAL_GPIO_Init+0x324>)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030aa:	4b3c      	ldr	r3, [pc, #240]	; (800319c <HAL_GPIO_Init+0x350>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ce:	4a33      	ldr	r2, [pc, #204]	; (800319c <HAL_GPIO_Init+0x350>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_GPIO_Init+0x350>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030f8:	4a28      	ldr	r2, [pc, #160]	; (800319c <HAL_GPIO_Init+0x350>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_GPIO_Init+0x350>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_GPIO_Init+0x350>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003128:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_GPIO_Init+0x350>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_GPIO_Init+0x350>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3301      	adds	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b0f      	cmp	r3, #15
 800315c:	f67f ae86 	bls.w	8002e6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003160:	bf00      	nop
 8003162:	3724      	adds	r7, #36	; 0x24
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40023800 	.word	0x40023800
 8003170:	40013800 	.word	0x40013800
 8003174:	40020000 	.word	0x40020000
 8003178:	40020400 	.word	0x40020400
 800317c:	40020800 	.word	0x40020800
 8003180:	40020c00 	.word	0x40020c00
 8003184:	40021000 	.word	0x40021000
 8003188:	40021400 	.word	0x40021400
 800318c:	40021800 	.word	0x40021800
 8003190:	40021c00 	.word	0x40021c00
 8003194:	40022000 	.word	0x40022000
 8003198:	40022400 	.word	0x40022400
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031ec:	e003      	b.n	80031f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	619a      	str	r2, [r3, #24]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003202:	b480      	push	{r7}
 8003204:	b085      	sub	sp, #20
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003214:	887a      	ldrh	r2, [r7, #2]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4013      	ands	r3, r2
 800321a:	041a      	lsls	r2, r3, #16
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	43d9      	mvns	r1, r3
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	400b      	ands	r3, r1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	619a      	str	r2, [r3, #24]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f91a 	bl	8001490 <HAL_GPIO_EXTI_Callback>
  }
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003296:	f7fe fc85 	bl	8001ba4 <HAL_GetTick>
 800329a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800329c:	e009      	b.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800329e:	f7fe fc81 	bl	8001ba4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ac:	d901      	bls.n	80032b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e022      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b2:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d1ee      	bne.n	800329e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032cc:	f7fe fc6a 	bl	8001ba4 <HAL_GetTick>
 80032d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d2:	e009      	b.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d4:	f7fe fc66 	bl	8001ba4 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e2:	d901      	bls.n	80032e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e007      	b.n	80032f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f4:	d1ee      	bne.n	80032d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000

08003308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003310:	2300      	movs	r3, #0
 8003312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e29b      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8087 	beq.w	800343a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332c:	4b96      	ldr	r3, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b04      	cmp	r3, #4
 8003336:	d00c      	beq.n	8003352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003338:	4b93      	ldr	r3, [pc, #588]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d112      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003350:	d10b      	bne.n	800336a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d06c      	beq.n	8003438 <HAL_RCC_OscConfig+0x130>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d168      	bne.n	8003438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e275      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x7a>
 8003374:	4b84      	ldr	r3, [pc, #528]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a83      	ldr	r2, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800337a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e02e      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x9c>
 800338a:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a7e      	ldr	r2, [pc, #504]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b7c      	ldr	r3, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7b      	ldr	r2, [pc, #492]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e01d      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033ae:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a75      	ldr	r2, [pc, #468]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b73      	ldr	r3, [pc, #460]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a72      	ldr	r2, [pc, #456]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xd8>
 80033c8:	4b6f      	ldr	r3, [pc, #444]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a6e      	ldr	r2, [pc, #440]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	4b6c      	ldr	r3, [pc, #432]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6b      	ldr	r2, [pc, #428]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d013      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe fbdc 	bl	8001ba4 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fe fbd8 	bl	8001ba4 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e229      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe fbc8 	bl	8001ba4 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fe fbc4 	bl	8001ba4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	; 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e215      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	4b57      	ldr	r3, [pc, #348]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x110>
 8003436:	e000      	b.n	800343a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d069      	beq.n	800351a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003446:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003452:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
 800345e:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d116      	bne.n	8003498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1e9      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	493d      	ldr	r1, [pc, #244]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003496:	e040      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a0:	4b39      	ldr	r3, [pc, #228]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a38      	ldr	r2, [pc, #224]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb7a 	bl	8001ba4 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe fb76 	bl	8001ba4 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b2d      	ldr	r3, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4929      	ldr	r1, [pc, #164]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a26      	ldr	r2, [pc, #152]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fb56 	bl	8001ba4 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7fe fb52 	bl	8001ba4 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1a3      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d038      	beq.n	8003598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe fb33 	bl	8001ba4 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fb2f 	bl	8001ba4 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e180      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x23a>
 8003560:	e01a      	b.n	8003598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x280>)
 8003568:	f023 0301 	bic.w	r3, r3, #1
 800356c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fe fb19 	bl	8001ba4 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003576:	f7fe fb15 	bl	8001ba4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d903      	bls.n	800358c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e166      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
 8003588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b92      	ldr	r3, [pc, #584]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a4 	beq.w	80036ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a88      	ldr	r2, [pc, #544]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b86      	ldr	r3, [pc, #536]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4b83      	ldr	r3, [pc, #524]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d118      	bne.n	800360c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035da:	4b80      	ldr	r3, [pc, #512]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7f      	ldr	r2, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fadd 	bl	8001ba4 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ec:	e008      	b.n	8003600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ee:	f7fe fad9 	bl	8001ba4 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	2b64      	cmp	r3, #100	; 0x64
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e12a      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x4d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f0      	beq.n	80035ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x31a>
 8003614:	4b70      	ldr	r3, [pc, #448]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a6f      	ldr	r2, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	e02d      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <HAL_RCC_OscConfig+0x33c>
 800362a:	4b6b      	ldr	r3, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a6a      	ldr	r2, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b68      	ldr	r3, [pc, #416]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a67      	ldr	r2, [pc, #412]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	e01c      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	2b05      	cmp	r3, #5
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x35e>
 800364c:	4b62      	ldr	r3, [pc, #392]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a61      	ldr	r2, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003652:	f043 0304 	orr.w	r3, r3, #4
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	4b5f      	ldr	r3, [pc, #380]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0x376>
 8003666:	4b5c      	ldr	r3, [pc, #368]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d015      	beq.n	80036b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fa8d 	bl	8001ba4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe fa89 	bl	8001ba4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0d8      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	4b4c      	ldr	r3, [pc, #304]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCC_OscConfig+0x386>
 80036b0:	e014      	b.n	80036dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe fa77 	bl	8001ba4 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ba:	f7fe fa73 	bl	8001ba4 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0c2      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d105      	bne.n	80036ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e2:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	4a3c      	ldr	r2, [pc, #240]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80ae 	beq.w	8003854 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d06d      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d14b      	bne.n	80037a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a31      	ldr	r2, [pc, #196]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fa44 	bl	8001ba4 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fe fa40 	bl	8001ba4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e091      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b29      	ldr	r3, [pc, #164]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	019b      	lsls	r3, r3, #6
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	071b      	lsls	r3, r3, #28
 800376a:	491b      	ldr	r1, [pc, #108]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 800376c:	4313      	orrs	r3, r2
 800376e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fa12 	bl	8001ba4 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fa0e 	bl	8001ba4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e05f      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x47c>
 80037a2:	e057      	b.n	8003854 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0b      	ldr	r2, [pc, #44]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe f9f8 	bl	8001ba4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe f9f4 	bl	8001ba4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4b0>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x54c>
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e0:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <HAL_RCC_OscConfig+0x558>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d030      	beq.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d129      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d122      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003816:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d119      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d10f      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d0      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d910      	bls.n	80038ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 020f 	bic.w	r2, r3, #15
 8003892:	4965      	ldr	r1, [pc, #404]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0b8      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d020      	beq.n	80038fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038dc:	4b53      	ldr	r3, [pc, #332]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a52      	ldr	r2, [pc, #328]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b50      	ldr	r3, [pc, #320]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	494d      	ldr	r1, [pc, #308]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d040      	beq.n	8003988 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b47      	ldr	r3, [pc, #284]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e07f      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e073      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4936      	ldr	r1, [pc, #216]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fe f924 	bl	8001ba4 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe f920 	bl	8001ba4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e053      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d210      	bcs.n	80039b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	4922      	ldr	r1, [pc, #136]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e032      	b.n	8003a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c4:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4916      	ldr	r1, [pc, #88]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039f6:	f000 f821 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 80039fa:	4601      	mov	r1, r0
 80039fc:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1d0>)
 8003a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe f880 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40023c00 	.word	0x40023c00
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	0800a3f8 	.word	0x0800a3f8
 8003a34:	20000014 	.word	0x20000014
 8003a38:	20000018 	.word	0x20000018

08003a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	607b      	str	r3, [r7, #4]
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d007      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x32>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d008      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x38>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80b4 	bne.w	8003bd0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a6a:	60bb      	str	r3, [r7, #8]
      break;
 8003a6c:	e0b3      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b5e      	ldr	r3, [pc, #376]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a70:	60bb      	str	r3, [r7, #8]
      break;
 8003a72:	e0b0      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b5a      	ldr	r3, [pc, #360]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a7e:	4b58      	ldr	r3, [pc, #352]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d04a      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	ea03 0501 	and.w	r5, r3, r1
 8003aa0:	ea04 0602 	and.w	r6, r4, r2
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	f04f 0400 	mov.w	r4, #0
 8003ab0:	0154      	lsls	r4, r2, #5
 8003ab2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ab6:	014b      	lsls	r3, r1, #5
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4622      	mov	r2, r4
 8003abc:	1b49      	subs	r1, r1, r5
 8003abe:	eb62 0206 	sbc.w	r2, r2, r6
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	0194      	lsls	r4, r2, #6
 8003acc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ad0:	018b      	lsls	r3, r1, #6
 8003ad2:	1a5b      	subs	r3, r3, r1
 8003ad4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	00e2      	lsls	r2, r4, #3
 8003ae2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ae6:	00d9      	lsls	r1, r3, #3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4614      	mov	r4, r2
 8003aec:	195b      	adds	r3, r3, r5
 8003aee:	eb44 0406 	adc.w	r4, r4, r6
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	0262      	lsls	r2, r4, #9
 8003afc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b00:	0259      	lsls	r1, r3, #9
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	4621      	mov	r1, r4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4623      	mov	r3, r4
 8003b14:	f7fc fbec 	bl	80002f0 <__aeabi_uldivmod>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e049      	b.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b20:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	ea03 0501 	and.w	r5, r3, r1
 8003b36:	ea04 0602 	and.w	r6, r4, r2
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	0154      	lsls	r4, r2, #5
 8003b48:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b4c:	014b      	lsls	r3, r1, #5
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4622      	mov	r2, r4
 8003b52:	1b49      	subs	r1, r1, r5
 8003b54:	eb62 0206 	sbc.w	r2, r2, r6
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	0194      	lsls	r4, r2, #6
 8003b62:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b66:	018b      	lsls	r3, r1, #6
 8003b68:	1a5b      	subs	r3, r3, r1
 8003b6a:	eb64 0402 	sbc.w	r4, r4, r2
 8003b6e:	f04f 0100 	mov.w	r1, #0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	00e2      	lsls	r2, r4, #3
 8003b78:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b7c:	00d9      	lsls	r1, r3, #3
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	195b      	adds	r3, r3, r5
 8003b84:	eb44 0406 	adc.w	r4, r4, r6
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	02a2      	lsls	r2, r4, #10
 8003b92:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b96:	0299      	lsls	r1, r3, #10
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7fc fba1 	bl	80002f0 <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	60bb      	str	r3, [r7, #8]
      break;
 8003bce:	e002      	b.n	8003bd6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bd2:	60bb      	str	r3, [r7, #8]
      break;
 8003bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	00f42400 	.word	0x00f42400
 8003be8:	007a1200 	.word	0x007a1200

08003bec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000014 	.word	0x20000014

08003c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c08:	f7ff fff0 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0a9b      	lsrs	r3, r3, #10
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c1a:	5cd3      	ldrb	r3, [r2, r3]
 8003c1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800a408 	.word	0x0800a408

08003c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c30:	f7ff ffdc 	bl	8003bec <HAL_RCC_GetHCLKFreq>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0b5b      	lsrs	r3, r3, #13
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4a03      	ldr	r2, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c42:	5cd3      	ldrb	r3, [r2, r3]
 8003c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	0800a408 	.word	0x0800a408

08003c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d012      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c7c:	4b69      	ldr	r3, [pc, #420]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a68      	ldr	r2, [pc, #416]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c86:	6093      	str	r3, [r2, #8]
 8003c88:	4b66      	ldr	r3, [pc, #408]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c90:	4964      	ldr	r1, [pc, #400]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d017      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	4959      	ldr	r1, [pc, #356]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003cea:	4b4e      	ldr	r3, [pc, #312]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	494a      	ldr	r1, [pc, #296]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d08:	d101      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 808b 	beq.w	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4a39      	ldr	r2, [pc, #228]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6413      	str	r3, [r2, #64]	; 0x40
 8003d44:	4b37      	ldr	r3, [pc, #220]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a34      	ldr	r2, [pc, #208]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd ff22 	bl	8001ba4 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d64:	f7fd ff1e 	bl	8001ba4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e38f      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d82:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d035      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d02e      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003da0:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003db6:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d114      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fee6 	bl	8001ba4 <HAL_GetTick>
 8003dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dda:	e00a      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ddc:	f7fd fee2 	bl	8001ba4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e351      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ee      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	4901      	ldr	r1, [pc, #4]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	0ffffcff 	.word	0x0ffffcff
 8003e30:	4bb3      	ldr	r3, [pc, #716]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4ab2      	ldr	r2, [pc, #712]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	4bb0      	ldr	r3, [pc, #704]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	49ad      	ldr	r1, [pc, #692]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d010      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e5a:	4ba9      	ldr	r3, [pc, #676]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e60:	4aa7      	ldr	r2, [pc, #668]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e6a:	4ba5      	ldr	r3, [pc, #660]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	49a2      	ldr	r1, [pc, #648]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e88:	4b9d      	ldr	r3, [pc, #628]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e96:	499a      	ldr	r1, [pc, #616]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eaa:	4b95      	ldr	r3, [pc, #596]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003eb8:	4991      	ldr	r1, [pc, #580]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ecc:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eda:	4989      	ldr	r1, [pc, #548]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eee:	4b84      	ldr	r3, [pc, #528]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4980      	ldr	r1, [pc, #512]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f10:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f023 0203 	bic.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4978      	ldr	r1, [pc, #480]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f32:	4b73      	ldr	r3, [pc, #460]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f023 020c 	bic.w	r2, r3, #12
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f40:	496f      	ldr	r1, [pc, #444]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	4967      	ldr	r1, [pc, #412]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f76:	4b62      	ldr	r3, [pc, #392]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	495e      	ldr	r1, [pc, #376]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	4956      	ldr	r1, [pc, #344]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	494d      	ldr	r1, [pc, #308]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003fdc:	4b48      	ldr	r3, [pc, #288]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	4945      	ldr	r1, [pc, #276]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ffe:	4b40      	ldr	r3, [pc, #256]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	493c      	ldr	r1, [pc, #240]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004020:	4b37      	ldr	r3, [pc, #220]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402e:	4934      	ldr	r1, [pc, #208]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d011      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004050:	492b      	ldr	r1, [pc, #172]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004060:	d101      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004072:	2301      	movs	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004082:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004090:	491b      	ldr	r1, [pc, #108]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b4:	4912      	ldr	r1, [pc, #72]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00b      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d8:	4909      	ldr	r1, [pc, #36]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	4986      	ldr	r1, [pc, #536]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004118:	4b81      	ldr	r3, [pc, #516]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800411a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	497d      	ldr	r1, [pc, #500]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d006      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80d6 	beq.w	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004144:	4b76      	ldr	r3, [pc, #472]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a75      	ldr	r2, [pc, #468]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800414a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800414e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fd fd28 	bl	8001ba4 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004158:	f7fd fd24 	bl	8001ba4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e195      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800416a:	4b6d      	ldr	r3, [pc, #436]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d021      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11d      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800418a:	4b65      	ldr	r3, [pc, #404]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419e:	0e1b      	lsrs	r3, r3, #24
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	4958      	ldr	r1, [pc, #352]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02e      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041f0:	d129      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041f2:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004200:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	0f1b      	lsrs	r3, r3, #28
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	493e      	ldr	r1, [pc, #248]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800422e:	4b3c      	ldr	r3, [pc, #240]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004234:	f023 021f 	bic.w	r2, r3, #31
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	3b01      	subs	r3, #1
 800423e:	4938      	ldr	r1, [pc, #224]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01d      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004252:	4b33      	ldr	r3, [pc, #204]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004258:	0e1b      	lsrs	r3, r3, #24
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004260:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	431a      	orrs	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	4926      	ldr	r1, [pc, #152]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d011      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	019a      	lsls	r2, r3, #6
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	491a      	ldr	r1, [pc, #104]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ca:	f7fd fc6b 	bl	8001ba4 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042d2:	f7fd fc67 	bl	8001ba4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b64      	cmp	r3, #100	; 0x64
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0d8      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	f040 80ce 	bne.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004304:	f7fd fc4e 	bl	8001ba4 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800430a:	e00b      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800430c:	f7fd fc4a 	bl	8001ba4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d904      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e0bb      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800431e:	bf00      	nop
 8004320:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004324:	4b5e      	ldr	r3, [pc, #376]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800432c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004330:	d0ec      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02e      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d12a      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800435a:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004368:	4b4d      	ldr	r3, [pc, #308]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 0307 	and.w	r3, r3, #7
 8004374:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	019a      	lsls	r2, r3, #6
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	4944      	ldr	r1, [pc, #272]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004396:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	493d      	ldr	r1, [pc, #244]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d022      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c4:	d11d      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	0e1b      	lsrs	r3, r3, #24
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043d4:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	0f1b      	lsrs	r3, r3, #28
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	019a      	lsls	r2, r3, #6
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	431a      	orrs	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	061b      	lsls	r3, r3, #24
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	071b      	lsls	r3, r3, #28
 80043fa:	4929      	ldr	r1, [pc, #164]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	0e1b      	lsrs	r3, r3, #24
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800441c:	4b20      	ldr	r3, [pc, #128]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	019a      	lsls	r2, r3, #6
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	431a      	orrs	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	071b      	lsls	r3, r3, #28
 8004442:	4917      	ldr	r1, [pc, #92]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800444c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	4911      	ldr	r1, [pc, #68]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446c:	f7fd fb9a 	bl	8001ba4 <HAL_GetTick>
 8004470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004474:	f7fd fb96 	bl	8001ba4 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e007      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004492:	d1ef      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e09d      	b.n	80045f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	e005      	b.n	80044dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f8e2 	bl	80016c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800451c:	d902      	bls.n	8004524 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e002      	b.n	800452a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004528:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004532:	d007      	beq.n	8004544 <HAL_SPI_Init+0xa0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004586:	ea42 0103 	orr.w	r1, r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	0c1b      	lsrs	r3, r3, #16
 80045a0:	f003 0204 	and.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c0:	ea42 0103 	orr.w	r1, r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b088      	sub	sp, #32
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_SPI_Transmit+0x22>
 8004618:	2302      	movs	r3, #2
 800461a:	e158      	b.n	80048ce <HAL_SPI_Transmit+0x2d4>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004624:	f7fd fabe 	bl	8001ba4 <HAL_GetTick>
 8004628:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b01      	cmp	r3, #1
 8004638:	d002      	beq.n	8004640 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800463a:	2302      	movs	r3, #2
 800463c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800463e:	e13d      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <HAL_SPI_Transmit+0x52>
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d102      	bne.n	8004652 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004650:	e134      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	88fa      	ldrh	r2, [r7, #6]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469c:	d10f      	bne.n	80046be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d007      	beq.n	80046dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046e4:	d94b      	bls.n	800477e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <HAL_SPI_Transmit+0xfa>
 80046ee:	8afb      	ldrh	r3, [r7, #22]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d13e      	bne.n	8004772 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	881a      	ldrh	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004718:	e02b      	b.n	8004772 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d112      	bne.n	800474e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800474c:	e011      	b.n	8004772 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474e:	f7fd fa29 	bl	8001ba4 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d803      	bhi.n	8004766 <HAL_SPI_Transmit+0x16c>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d102      	bne.n	800476c <HAL_SPI_Transmit+0x172>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004770:	e0a4      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ce      	bne.n	800471a <HAL_SPI_Transmit+0x120>
 800477c:	e07c      	b.n	8004878 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Transmit+0x192>
 8004786:	8afb      	ldrh	r3, [r7, #22]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d170      	bne.n	800486e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d912      	bls.n	80047bc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	881a      	ldrh	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	1c9a      	adds	r2, r3, #2
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b02      	subs	r3, #2
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047ba:	e058      	b.n	800486e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	7812      	ldrb	r2, [r2, #0]
 80047c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80047e2:	e044      	b.n	800486e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d12b      	bne.n	800484a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d912      	bls.n	8004822 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	881a      	ldrh	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	3b02      	subs	r3, #2
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004820:	e025      	b.n	800486e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	7812      	ldrb	r2, [r2, #0]
 800482e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004848:	e011      	b.n	800486e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800484a:	f7fd f9ab 	bl	8001ba4 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d803      	bhi.n	8004862 <HAL_SPI_Transmit+0x268>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Transmit+0x26e>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800486c:	e026      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1b5      	bne.n	80047e4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	6839      	ldr	r1, [r7, #0]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f001 f8d5 	bl	8005a2c <SPI_EndRxTxTransaction>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2220      	movs	r2, #32
 800488c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10a      	bne.n	80048ac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004896:	2300      	movs	r3, #0
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e000      	b.n	80048bc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80048ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b08a      	sub	sp, #40	; 0x28
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048e4:	2301      	movs	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x26>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e1fb      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x41e>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004904:	f7fd f94e 	bl	8001ba4 <HAL_GetTick>
 8004908:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004910:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800491c:	887b      	ldrh	r3, [r7, #2]
 800491e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004920:	7efb      	ldrb	r3, [r7, #27]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d00e      	beq.n	8004944 <HAL_SPI_TransmitReceive+0x6e>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800492c:	d106      	bne.n	800493c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_TransmitReceive+0x66>
 8004936:	7efb      	ldrb	r3, [r7, #27]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d003      	beq.n	8004944 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800493c:	2302      	movs	r3, #2
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004942:	e1cd      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x80>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x80>
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800495c:	e1c0      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b04      	cmp	r3, #4
 8004968:	d003      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2205      	movs	r2, #5
 800496e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	887a      	ldrh	r2, [r7, #2]
 8004982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	887a      	ldrh	r2, [r7, #2]
 800499e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b4:	d802      	bhi.n	80049bc <HAL_SPI_TransmitReceive+0xe6>
 80049b6:	8a3b      	ldrh	r3, [r7, #16]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d908      	bls.n	80049ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	e007      	b.n	80049de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d007      	beq.n	80049fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a04:	d97c      	bls.n	8004b00 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x13e>
 8004a0e:	8a7b      	ldrh	r3, [r7, #18]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d169      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a38:	e056      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d11b      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x1aa>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x1aa>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d113      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d11c      	bne.n	8004ac8 <HAL_SPI_TransmitReceive+0x1f2>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	b292      	uxth	r2, r2
 8004aa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	1c9a      	adds	r2, r3, #2
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ac8:	f7fd f86c 	bl	8001ba4 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d807      	bhi.n	8004ae8 <HAL_SPI_TransmitReceive+0x212>
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d003      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ae6:	e0fb      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1a3      	bne.n	8004a3a <HAL_SPI_TransmitReceive+0x164>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d19d      	bne.n	8004a3a <HAL_SPI_TransmitReceive+0x164>
 8004afe:	e0df      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x23a>
 8004b08:	8a7b      	ldrh	r3, [r7, #18]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f040 80cb 	bne.w	8004ca6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d912      	bls.n	8004b40 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b02      	subs	r3, #2
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3e:	e0b2      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	7812      	ldrb	r2, [r2, #0]
 8004b4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b66:	e09e      	b.n	8004ca6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d134      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x30a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02f      	beq.n	8004be0 <HAL_SPI_TransmitReceive+0x30a>
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d12c      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d912      	bls.n	8004bb6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	881a      	ldrh	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	1c9a      	adds	r2, r3, #2
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b02      	subs	r3, #2
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb4:	e012      	b.n	8004bdc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d148      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x3aa>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d042      	beq.n	8004c80 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d923      	bls.n	8004c4e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	b292      	uxth	r2, r2
 8004c12:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	1c9a      	adds	r2, r3, #2
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b02      	subs	r3, #2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d81f      	bhi.n	8004c7c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	e016      	b.n	8004c7c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f103 020c 	add.w	r2, r3, #12
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	7812      	ldrb	r2, [r2, #0]
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c80:	f7fc ff90 	bl	8001ba4 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d803      	bhi.n	8004c98 <HAL_SPI_TransmitReceive+0x3c2>
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_TransmitReceive+0x3c8>
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ca4:	e01c      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f47f af5b 	bne.w	8004b68 <HAL_SPI_TransmitReceive+0x292>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f47f af54 	bne.w	8004b68 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 feb1 	bl	8005a2c <SPI_EndRxTxTransaction>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
 8004cdc:	e000      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_SPI_Transmit_DMA+0x20>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e0d8      	b.n	8004ece <HAL_SPI_Transmit_DMA+0x1d2>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
 8004d32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d34:	e0c6      	b.n	8004ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Transmit_DMA+0x46>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d46:	e0bd      	b.n	8004ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	88fa      	ldrh	r2, [r7, #6]
 8004d60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	88fa      	ldrh	r2, [r7, #6]
 8004d66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d92:	d10f      	bne.n	8004db4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004db2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	4a47      	ldr	r2, [pc, #284]	; (8004ed8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	4a46      	ldr	r2, [pc, #280]	; (8004edc <HAL_SPI_Transmit_DMA+0x1e0>)
 8004dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	4a45      	ldr	r2, [pc, #276]	; (8004ee0 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004de2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dec:	d82d      	bhi.n	8004e4a <HAL_SPI_Transmit_DMA+0x14e>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df8:	d127      	bne.n	8004e4a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e16:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e26:	e010      	b.n	8004e4a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e36:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	4619      	mov	r1, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004e62:	f7fd fc99 	bl	8002798 <HAL_DMA_Start_IT>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00c      	beq.n	8004e86 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004e84:	e01e      	b.n	8004ec4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d007      	beq.n	8004ea4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0220 	orr.w	r2, r2, #32
 8004eb2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0202 	orr.w	r2, r2, #2
 8004ec2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	080056b5 	.word	0x080056b5
 8004edc:	080054d1 	.word	0x080054d1
 8004ee0:	08005709 	.word	0x08005709

08004ee4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d110      	bne.n	8004f20 <HAL_SPI_Receive_DMA+0x3c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f06:	d10b      	bne.n	8004f20 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f908 	bl	800512c <HAL_SPI_TransmitReceive_DMA>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	e0fb      	b.n	8005118 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_SPI_Receive_DMA+0x4a>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e0f4      	b.n	8005118 <HAL_SPI_Receive_DMA+0x234>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
 8004f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f46:	e0e2      	b.n	800510e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_SPI_Receive_DMA+0x70>
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f58:	e0d9      	b.n	800510e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fce:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fd8:	d908      	bls.n	8004fec <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e042      	b.n	8005072 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffa:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	d134      	bne.n	8005072 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005016:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800501e:	b29b      	uxth	r3, r3
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005036:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800503e:	b29b      	uxth	r3, r3
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800504a:	e012      	b.n	8005072 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005062:	b29b      	uxth	r3, r3
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	b29b      	uxth	r3, r3
 8005068:	3301      	adds	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_SPI_Receive_DMA+0x23c>)
 8005078:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_SPI_Receive_DMA+0x240>)
 8005080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_SPI_Receive_DMA+0x244>)
 8005088:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	2200      	movs	r2, #0
 8005090:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	4619      	mov	r1, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80050ac:	f7fd fb74 	bl	8002798 <HAL_DMA_Start_IT>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	f043 0210 	orr.w	r2, r3, #16
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80050ce:	e01e      	b.n	800510e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d007      	beq.n	80050ee <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	080056d1 	.word	0x080056d1
 8005124:	08005579 	.word	0x08005579
 8005128:	08005709 	.word	0x08005709

0800512c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005148:	2302      	movs	r3, #2
 800514a:	e16c      	b.n	8005426 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800515a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005162:	7dbb      	ldrb	r3, [r7, #22]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d00d      	beq.n	8005184 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d106      	bne.n	800517e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <HAL_SPI_TransmitReceive_DMA+0x52>
 8005178:	7dbb      	ldrb	r3, [r7, #22]
 800517a:	2b04      	cmp	r3, #4
 800517c:	d002      	beq.n	8005184 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800517e:	2302      	movs	r3, #2
 8005180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005182:	e14b      	b.n	800541c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005190:	887b      	ldrh	r3, [r7, #2]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800519a:	e13f      	b.n	800541c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d003      	beq.n	80051b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2205      	movs	r2, #5
 80051ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	887a      	ldrh	r2, [r7, #2]
 80051c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	887a      	ldrh	r2, [r7, #2]
 80051c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	887a      	ldrh	r2, [r7, #2]
 80051d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	887a      	ldrh	r2, [r7, #2]
 80051da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80051f8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005202:	d908      	bls.n	8005216 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e06f      	b.n	80052f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005224:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005230:	d126      	bne.n	8005280 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10f      	bne.n	800525e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800524c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800525c:	e010      	b.n	8005280 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800526c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	3301      	adds	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800528a:	d134      	bne.n	80052f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800529a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d111      	bne.n	80052d0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80052ce:	e012      	b.n	80052f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3301      	adds	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b04      	cmp	r3, #4
 8005300:	d108      	bne.n	8005314 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	4a4a      	ldr	r2, [pc, #296]	; (8005430 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005308:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	4a49      	ldr	r2, [pc, #292]	; (8005434 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005310:	63da      	str	r2, [r3, #60]	; 0x3c
 8005312:	e007      	b.n	8005324 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005318:	4a47      	ldr	r2, [pc, #284]	; (8005438 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	4a46      	ldr	r2, [pc, #280]	; (800543c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005322:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	4a45      	ldr	r2, [pc, #276]	; (8005440 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800532a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	2200      	movs	r2, #0
 8005332:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	4619      	mov	r1, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800534e:	f7fd fa23 	bl	8002798 <HAL_DMA_Start_IT>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00c      	beq.n	8005372 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535c:	f043 0210 	orr.w	r2, r3, #16
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005370:	e054      	b.n	800541c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	2200      	movs	r2, #0
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	2200      	movs	r2, #0
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	2200      	movs	r2, #0
 8005398:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	2200      	movs	r2, #0
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	4619      	mov	r1, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053ba:	f7fd f9ed 	bl	8002798 <HAL_DMA_Start_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00c      	beq.n	80053de <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	f043 0210 	orr.w	r2, r3, #16
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80053dc:	e01e      	b.n	800541c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d007      	beq.n	80053fc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053fa:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0220 	orr.w	r2, r2, #32
 800540a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0202 	orr.w	r2, r2, #2
 800541a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005424:	7dfb      	ldrb	r3, [r7, #23]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	080056d1 	.word	0x080056d1
 8005434:	08005579 	.word	0x08005579
 8005438:	080056ed 	.word	0x080056ed
 800543c:	08005623 	.word	0x08005623
 8005440:	08005709 	.word	0x08005709

08005444 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054de:	f7fc fb61 	bl	8001ba4 <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f2:	d03b      	beq.n	800556c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0220 	bic.w	r2, r2, #32
 8005502:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0202 	bic.w	r2, r2, #2
 8005512:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	2164      	movs	r1, #100	; 0x64
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f000 fa87 	bl	8005a2c <SPI_EndRxTxTransaction>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2200      	movs	r2, #0
 8005552:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005564:	6978      	ldr	r0, [r7, #20]
 8005566:	f7ff ffa9 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800556a:	e002      	b.n	8005572 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800556c:	6978      	ldr	r0, [r7, #20]
 800556e:	f7ff ff69 	bl	8005444 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005586:	f7fc fb0d 	bl	8001ba4 <HAL_GetTick>
 800558a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800559a:	d03c      	beq.n	8005616 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0220 	bic.w	r2, r2, #32
 80055aa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10d      	bne.n	80055d0 <SPI_DMAReceiveCplt+0x58>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055bc:	d108      	bne.n	80055d0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0203 	bic.w	r2, r2, #3
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	e007      	b.n	80055e0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f9c9 	bl	800597c <SPI_EndRxTransaction>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff ff54 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005614:	e002      	b.n	800561c <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff ff1e 	bl	8005458 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005630:	f7fc fab8 	bl	8001ba4 <HAL_GetTick>
 8005634:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d030      	beq.n	80056a8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0220 	bic.w	r2, r2, #32
 8005654:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	2164      	movs	r1, #100	; 0x64
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f9e6 	bl	8005a2c <SPI_EndRxTxTransaction>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0203 	bic.w	r2, r2, #3
 8005680:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff ff0b 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80056a6:	e002      	b.n	80056ae <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fedf 	bl	800546c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff fedc 	bl	8005480 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fed8 	bl	8005494 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fed4 	bl	80054a8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0203 	bic.w	r2, r2, #3
 8005724:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	f043 0210 	orr.w	r2, r3, #16
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff febe 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005758:	f7fc fa24 	bl	8001ba4 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	1a9b      	subs	r3, r3, r2
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	4413      	add	r3, r2
 8005766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005768:	f7fc fa1c 	bl	8001ba4 <HAL_GetTick>
 800576c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800576e:	4b39      	ldr	r3, [pc, #228]	; (8005854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	015b      	lsls	r3, r3, #5
 8005774:	0d1b      	lsrs	r3, r3, #20
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800577e:	e054      	b.n	800582a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d050      	beq.n	800582a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005788:	f7fc fa0c 	bl	8001ba4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	429a      	cmp	r2, r3
 8005796:	d902      	bls.n	800579e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b6:	d111      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c0:	d004      	beq.n	80057cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ca:	d107      	bne.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e4:	d10f      	bne.n	8005806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e017      	b.n	800584a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	3b01      	subs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4013      	ands	r3, r2
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	429a      	cmp	r2, r3
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	429a      	cmp	r2, r3
 8005846:	d19b      	bne.n	8005780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	20000014 	.word	0x20000014

08005858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005866:	f7fc f99d 	bl	8001ba4 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	1a9b      	subs	r3, r3, r2
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	4413      	add	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005876:	f7fc f995 	bl	8001ba4 <HAL_GetTick>
 800587a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800587c:	4b3e      	ldr	r3, [pc, #248]	; (8005978 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	0d1b      	lsrs	r3, r3, #20
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005894:	e062      	b.n	800595c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800589c:	d109      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80058b0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d050      	beq.n	800595c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ba:	f7fc f973 	bl	8001ba4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d902      	bls.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0x78>
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d13d      	bne.n	800594c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058e8:	d111      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0xb6>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f2:	d004      	beq.n	80058fe <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fc:	d107      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800590c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005916:	d10f      	bne.n	8005938 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005936:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e010      	b.n	800596e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3b01      	subs	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	4013      	ands	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	429a      	cmp	r2, r3
 800596a:	d194      	bne.n	8005896 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000014 	.word	0x20000014

0800597c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005990:	d111      	bne.n	80059b6 <SPI_EndRxTransaction+0x3a>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599a:	d004      	beq.n	80059a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d107      	bne.n	80059b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7ff fec1 	bl	8005748 <SPI_WaitFlagStateUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	f043 0220 	orr.w	r2, r3, #32
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e023      	b.n	8005a24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e4:	d11d      	bne.n	8005a22 <SPI_EndRxTransaction+0xa6>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ee:	d004      	beq.n	80059fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f8:	d113      	bne.n	8005a22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7ff ff26 	bl	8005858 <SPI_WaitFifoStateUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e000      	b.n	8005a24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff ff07 	bl	8005858 <SPI_WaitFifoStateUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e027      	b.n	8005ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff fe6c 	bl	8005748 <SPI_WaitFlagStateUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7a:	f043 0220 	orr.w	r2, r3, #32
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e014      	b.n	8005ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fee0 	bl	8005858 <SPI_WaitFifoStateUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa2:	f043 0220 	orr.w	r2, r3, #32
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e000      	b.n	8005ab0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e040      	b.n	8005b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fb feca 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fade 	bl	80060b8 <UART_SetConfig>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e022      	b.n	8005b4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fd32 	bl	8006578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fdb9 	bl	80066bc <UART_CheckIdleState>
 8005b4a:	4603      	mov	r3, r0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	d166      	bne.n	8005c38 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_UART_Transmit_DMA+0x22>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e05f      	b.n	8005c3a <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_UART_Transmit_DMA+0x34>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e058      	b.n	8005c3a <HAL_UART_Transmit_DMA+0xe6>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	88fa      	ldrh	r2, [r7, #6]
 8005ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2221      	movs	r2, #33	; 0x21
 8005bb2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d02b      	beq.n	8005c14 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <HAL_UART_Transmit_DMA+0xf0>)
 8005bc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_UART_Transmit_DMA+0xf4>)
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_UART_Transmit_DMA+0xf8>)
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd8:	2200      	movs	r2, #0
 8005bda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be4:	4619      	mov	r1, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3328      	adds	r3, #40	; 0x28
 8005bec:	461a      	mov	r2, r3
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	f7fc fdd2 	bl	8002798 <HAL_DMA_Start_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e012      	b.n	8005c3a <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2240      	movs	r2, #64	; 0x40
 8005c1a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c32:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	080068cf 	.word	0x080068cf
 8005c48:	0800691f 	.word	0x0800691f
 8005c4c:	0800693b 	.word	0x0800693b

08005c50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d113      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d009      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 81cd 	beq.w	8006038 <HAL_UART_IRQHandler+0x3e8>
      {
        huart->RxISR(huart);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
      }
      return;
 8005ca6:	e1c7      	b.n	8006038 <HAL_UART_IRQHandler+0x3e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80e3 	beq.w	8005e76 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4ba5      	ldr	r3, [pc, #660]	; (8005f54 <HAL_UART_IRQHandler+0x304>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 80d8 	beq.w	8005e76 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xa2>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce8:	f043 0201 	orr.w	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d010      	beq.n	8005d1e <HAL_UART_IRQHandler+0xce>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00b      	beq.n	8005d1e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d14:	f043 0204 	orr.w	r2, r3, #4
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_UART_IRQHandler+0xfa>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2204      	movs	r2, #4
 8005d38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d40:	f043 0202 	orr.w	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d015      	beq.n	8005d80 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	f043 0208 	orr.w	r2, r3, #8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d011      	beq.n	8005dae <HAL_UART_IRQHandler+0x15e>
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00c      	beq.n	8005dae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8141 	beq.w	800603c <HAL_UART_IRQHandler+0x3ec>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00c      	beq.n	8005dde <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d007      	beq.n	8005dde <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df0:	2b40      	cmp	r3, #64	; 0x40
 8005df2:	d004      	beq.n	8005dfe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d031      	beq.n	8005e62 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fd36 	bl	8006870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d123      	bne.n	8005e5a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	4a4a      	ldr	r2, [pc, #296]	; (8005f58 <HAL_UART_IRQHandler+0x308>)
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fc fd7e 	bl	8002938 <HAL_DMA_Abort_IT>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	e00f      	b.n	8005e72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f910 	bl	8006078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e58:	e00b      	b.n	8005e72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f90c 	bl	8006078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	e007      	b.n	8005e72 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f908 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e70:	e0e4      	b.n	800603c <HAL_UART_IRQHandler+0x3ec>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e72:	bf00      	nop
    return;
 8005e74:	e0e2      	b.n	800603c <HAL_UART_IRQHandler+0x3ec>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f040 80a7 	bne.w	8005fce <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80a1 	beq.w	8005fce <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	f003 0310 	and.w	r3, r3, #16
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 809b 	beq.w	8005fce <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d156      	bne.n	8005f5c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005eb8:	893b      	ldrh	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80c0 	beq.w	8006040 <HAL_UART_IRQHandler+0x3f0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ec6:	893a      	ldrh	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	f080 80b9 	bcs.w	8006040 <HAL_UART_IRQHandler+0x3f0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	893a      	ldrh	r2, [r7, #8]
 8005ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee0:	d02a      	beq.n	8005f38 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0201 	bic.w	r2, r2, #1
 8005f00:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f10:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0210 	bic.w	r2, r2, #16
 8005f2c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc fc90 	bl	8002858 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f89d 	bl	800608c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f52:	e075      	b.n	8006040 <HAL_UART_IRQHandler+0x3f0>
 8005f54:	04000120 	.word	0x04000120
 8005f58:	080069b7 	.word	0x080069b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d064      	beq.n	8006044 <HAL_UART_IRQHandler+0x3f4>
          && (nb_rx_data > 0U))
 8005f7a:	897b      	ldrh	r3, [r7, #10]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d061      	beq.n	8006044 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0210 	bic.w	r2, r2, #16
 8005fc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fc2:	897b      	ldrh	r3, [r7, #10]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f860 	bl	800608c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fcc:	e03a      	b.n	8006044 <HAL_UART_IRQHandler+0x3f4>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x3a4>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f859 	bl	80060a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff2:	e02a      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <HAL_UART_IRQHandler+0x3f8>
    {
      huart->TxISR(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	4798      	blx	r3
    }
    return;
 8006018:	e016      	b.n	8006048 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d012      	beq.n	800604a <HAL_UART_IRQHandler+0x3fa>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00d      	beq.n	800604a <HAL_UART_IRQHandler+0x3fa>
  {
    UART_EndTransmit_IT(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fcd7 	bl	80069e2 <UART_EndTransmit_IT>
    return;
 8006034:	bf00      	nop
 8006036:	e008      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006038:	bf00      	nop
 800603a:	e006      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
    return;
 800603c:	bf00      	nop
 800603e:	e004      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006040:	bf00      	nop
 8006042:	e002      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
      return;
 8006044:	bf00      	nop
 8006046:	e000      	b.n	800604a <HAL_UART_IRQHandler+0x3fa>
    return;
 8006048:	bf00      	nop
  }

}
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4bb1      	ldr	r3, [pc, #708]	; (80063a8 <UART_SetConfig+0x2f0>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a9f      	ldr	r2, [pc, #636]	; (80063ac <UART_SetConfig+0x2f4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d121      	bne.n	8006178 <UART_SetConfig+0xc0>
 8006134:	4b9e      	ldr	r3, [pc, #632]	; (80063b0 <UART_SetConfig+0x2f8>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d816      	bhi.n	8006170 <UART_SetConfig+0xb8>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0x90>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	08006159 	.word	0x08006159
 800614c:	08006165 	.word	0x08006165
 8006150:	0800615f 	.word	0x0800615f
 8006154:	0800616b 	.word	0x0800616b
 8006158:	2301      	movs	r3, #1
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e151      	b.n	8006402 <UART_SetConfig+0x34a>
 800615e:	2302      	movs	r3, #2
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e14e      	b.n	8006402 <UART_SetConfig+0x34a>
 8006164:	2304      	movs	r3, #4
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e14b      	b.n	8006402 <UART_SetConfig+0x34a>
 800616a:	2308      	movs	r3, #8
 800616c:	77fb      	strb	r3, [r7, #31]
 800616e:	e148      	b.n	8006402 <UART_SetConfig+0x34a>
 8006170:	2310      	movs	r3, #16
 8006172:	77fb      	strb	r3, [r7, #31]
 8006174:	bf00      	nop
 8006176:	e144      	b.n	8006402 <UART_SetConfig+0x34a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a8d      	ldr	r2, [pc, #564]	; (80063b4 <UART_SetConfig+0x2fc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d134      	bne.n	80061ec <UART_SetConfig+0x134>
 8006182:	4b8b      	ldr	r3, [pc, #556]	; (80063b0 <UART_SetConfig+0x2f8>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b0c      	cmp	r3, #12
 800618e:	d829      	bhi.n	80061e4 <UART_SetConfig+0x12c>
 8006190:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <UART_SetConfig+0xe0>)
 8006192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006196:	bf00      	nop
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080061e5 	.word	0x080061e5
 80061a0:	080061e5 	.word	0x080061e5
 80061a4:	080061e5 	.word	0x080061e5
 80061a8:	080061d9 	.word	0x080061d9
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080061e5 	.word	0x080061e5
 80061b8:	080061d3 	.word	0x080061d3
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	080061df 	.word	0x080061df
 80061cc:	2300      	movs	r3, #0
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e117      	b.n	8006402 <UART_SetConfig+0x34a>
 80061d2:	2302      	movs	r3, #2
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e114      	b.n	8006402 <UART_SetConfig+0x34a>
 80061d8:	2304      	movs	r3, #4
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	e111      	b.n	8006402 <UART_SetConfig+0x34a>
 80061de:	2308      	movs	r3, #8
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e10e      	b.n	8006402 <UART_SetConfig+0x34a>
 80061e4:	2310      	movs	r3, #16
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	bf00      	nop
 80061ea:	e10a      	b.n	8006402 <UART_SetConfig+0x34a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a71      	ldr	r2, [pc, #452]	; (80063b8 <UART_SetConfig+0x300>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d120      	bne.n	8006238 <UART_SetConfig+0x180>
 80061f6:	4b6e      	ldr	r3, [pc, #440]	; (80063b0 <UART_SetConfig+0x2f8>)
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006200:	2b10      	cmp	r3, #16
 8006202:	d00f      	beq.n	8006224 <UART_SetConfig+0x16c>
 8006204:	2b10      	cmp	r3, #16
 8006206:	d802      	bhi.n	800620e <UART_SetConfig+0x156>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <UART_SetConfig+0x160>
 800620c:	e010      	b.n	8006230 <UART_SetConfig+0x178>
 800620e:	2b20      	cmp	r3, #32
 8006210:	d005      	beq.n	800621e <UART_SetConfig+0x166>
 8006212:	2b30      	cmp	r3, #48	; 0x30
 8006214:	d009      	beq.n	800622a <UART_SetConfig+0x172>
 8006216:	e00b      	b.n	8006230 <UART_SetConfig+0x178>
 8006218:	2300      	movs	r3, #0
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e0f1      	b.n	8006402 <UART_SetConfig+0x34a>
 800621e:	2302      	movs	r3, #2
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e0ee      	b.n	8006402 <UART_SetConfig+0x34a>
 8006224:	2304      	movs	r3, #4
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	e0eb      	b.n	8006402 <UART_SetConfig+0x34a>
 800622a:	2308      	movs	r3, #8
 800622c:	77fb      	strb	r3, [r7, #31]
 800622e:	e0e8      	b.n	8006402 <UART_SetConfig+0x34a>
 8006230:	2310      	movs	r3, #16
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	bf00      	nop
 8006236:	e0e4      	b.n	8006402 <UART_SetConfig+0x34a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a5f      	ldr	r2, [pc, #380]	; (80063bc <UART_SetConfig+0x304>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d120      	bne.n	8006284 <UART_SetConfig+0x1cc>
 8006242:	4b5b      	ldr	r3, [pc, #364]	; (80063b0 <UART_SetConfig+0x2f8>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d00f      	beq.n	8006270 <UART_SetConfig+0x1b8>
 8006250:	2b40      	cmp	r3, #64	; 0x40
 8006252:	d802      	bhi.n	800625a <UART_SetConfig+0x1a2>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <UART_SetConfig+0x1ac>
 8006258:	e010      	b.n	800627c <UART_SetConfig+0x1c4>
 800625a:	2b80      	cmp	r3, #128	; 0x80
 800625c:	d005      	beq.n	800626a <UART_SetConfig+0x1b2>
 800625e:	2bc0      	cmp	r3, #192	; 0xc0
 8006260:	d009      	beq.n	8006276 <UART_SetConfig+0x1be>
 8006262:	e00b      	b.n	800627c <UART_SetConfig+0x1c4>
 8006264:	2300      	movs	r3, #0
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e0cb      	b.n	8006402 <UART_SetConfig+0x34a>
 800626a:	2302      	movs	r3, #2
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e0c8      	b.n	8006402 <UART_SetConfig+0x34a>
 8006270:	2304      	movs	r3, #4
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e0c5      	b.n	8006402 <UART_SetConfig+0x34a>
 8006276:	2308      	movs	r3, #8
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e0c2      	b.n	8006402 <UART_SetConfig+0x34a>
 800627c:	2310      	movs	r3, #16
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	bf00      	nop
 8006282:	e0be      	b.n	8006402 <UART_SetConfig+0x34a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <UART_SetConfig+0x308>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d124      	bne.n	80062d8 <UART_SetConfig+0x220>
 800628e:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <UART_SetConfig+0x2f8>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629c:	d012      	beq.n	80062c4 <UART_SetConfig+0x20c>
 800629e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a2:	d802      	bhi.n	80062aa <UART_SetConfig+0x1f2>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <UART_SetConfig+0x200>
 80062a8:	e012      	b.n	80062d0 <UART_SetConfig+0x218>
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ae:	d006      	beq.n	80062be <UART_SetConfig+0x206>
 80062b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x212>
 80062b6:	e00b      	b.n	80062d0 <UART_SetConfig+0x218>
 80062b8:	2300      	movs	r3, #0
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e0a1      	b.n	8006402 <UART_SetConfig+0x34a>
 80062be:	2302      	movs	r3, #2
 80062c0:	77fb      	strb	r3, [r7, #31]
 80062c2:	e09e      	b.n	8006402 <UART_SetConfig+0x34a>
 80062c4:	2304      	movs	r3, #4
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e09b      	b.n	8006402 <UART_SetConfig+0x34a>
 80062ca:	2308      	movs	r3, #8
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e098      	b.n	8006402 <UART_SetConfig+0x34a>
 80062d0:	2310      	movs	r3, #16
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	bf00      	nop
 80062d6:	e094      	b.n	8006402 <UART_SetConfig+0x34a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a39      	ldr	r2, [pc, #228]	; (80063c4 <UART_SetConfig+0x30c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d124      	bne.n	800632c <UART_SetConfig+0x274>
 80062e2:	4b33      	ldr	r3, [pc, #204]	; (80063b0 <UART_SetConfig+0x2f8>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f0:	d012      	beq.n	8006318 <UART_SetConfig+0x260>
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d802      	bhi.n	80062fe <UART_SetConfig+0x246>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d007      	beq.n	800630c <UART_SetConfig+0x254>
 80062fc:	e012      	b.n	8006324 <UART_SetConfig+0x26c>
 80062fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006302:	d006      	beq.n	8006312 <UART_SetConfig+0x25a>
 8006304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006308:	d009      	beq.n	800631e <UART_SetConfig+0x266>
 800630a:	e00b      	b.n	8006324 <UART_SetConfig+0x26c>
 800630c:	2301      	movs	r3, #1
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e077      	b.n	8006402 <UART_SetConfig+0x34a>
 8006312:	2302      	movs	r3, #2
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e074      	b.n	8006402 <UART_SetConfig+0x34a>
 8006318:	2304      	movs	r3, #4
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e071      	b.n	8006402 <UART_SetConfig+0x34a>
 800631e:	2308      	movs	r3, #8
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e06e      	b.n	8006402 <UART_SetConfig+0x34a>
 8006324:	2310      	movs	r3, #16
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	bf00      	nop
 800632a:	e06a      	b.n	8006402 <UART_SetConfig+0x34a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <UART_SetConfig+0x310>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d124      	bne.n	8006380 <UART_SetConfig+0x2c8>
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <UART_SetConfig+0x2f8>)
 8006338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d012      	beq.n	800636c <UART_SetConfig+0x2b4>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	d802      	bhi.n	8006352 <UART_SetConfig+0x29a>
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <UART_SetConfig+0x2a8>
 8006350:	e012      	b.n	8006378 <UART_SetConfig+0x2c0>
 8006352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006356:	d006      	beq.n	8006366 <UART_SetConfig+0x2ae>
 8006358:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800635c:	d009      	beq.n	8006372 <UART_SetConfig+0x2ba>
 800635e:	e00b      	b.n	8006378 <UART_SetConfig+0x2c0>
 8006360:	2300      	movs	r3, #0
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e04d      	b.n	8006402 <UART_SetConfig+0x34a>
 8006366:	2302      	movs	r3, #2
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e04a      	b.n	8006402 <UART_SetConfig+0x34a>
 800636c:	2304      	movs	r3, #4
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e047      	b.n	8006402 <UART_SetConfig+0x34a>
 8006372:	2308      	movs	r3, #8
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e044      	b.n	8006402 <UART_SetConfig+0x34a>
 8006378:	2310      	movs	r3, #16
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	bf00      	nop
 800637e:	e040      	b.n	8006402 <UART_SetConfig+0x34a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a11      	ldr	r2, [pc, #68]	; (80063cc <UART_SetConfig+0x314>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d139      	bne.n	80063fe <UART_SetConfig+0x346>
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <UART_SetConfig+0x2f8>)
 800638c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006398:	d027      	beq.n	80063ea <UART_SetConfig+0x332>
 800639a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800639e:	d817      	bhi.n	80063d0 <UART_SetConfig+0x318>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01c      	beq.n	80063de <UART_SetConfig+0x326>
 80063a4:	e027      	b.n	80063f6 <UART_SetConfig+0x33e>
 80063a6:	bf00      	nop
 80063a8:	efff69f3 	.word	0xefff69f3
 80063ac:	40011000 	.word	0x40011000
 80063b0:	40023800 	.word	0x40023800
 80063b4:	40004400 	.word	0x40004400
 80063b8:	40004800 	.word	0x40004800
 80063bc:	40004c00 	.word	0x40004c00
 80063c0:	40005000 	.word	0x40005000
 80063c4:	40011400 	.word	0x40011400
 80063c8:	40007800 	.word	0x40007800
 80063cc:	40007c00 	.word	0x40007c00
 80063d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d4:	d006      	beq.n	80063e4 <UART_SetConfig+0x32c>
 80063d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063da:	d009      	beq.n	80063f0 <UART_SetConfig+0x338>
 80063dc:	e00b      	b.n	80063f6 <UART_SetConfig+0x33e>
 80063de:	2300      	movs	r3, #0
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e00e      	b.n	8006402 <UART_SetConfig+0x34a>
 80063e4:	2302      	movs	r3, #2
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e00b      	b.n	8006402 <UART_SetConfig+0x34a>
 80063ea:	2304      	movs	r3, #4
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e008      	b.n	8006402 <UART_SetConfig+0x34a>
 80063f0:	2308      	movs	r3, #8
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e005      	b.n	8006402 <UART_SetConfig+0x34a>
 80063f6:	2310      	movs	r3, #16
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	bf00      	nop
 80063fc:	e001      	b.n	8006402 <UART_SetConfig+0x34a>
 80063fe:	2310      	movs	r3, #16
 8006400:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d15b      	bne.n	80064c4 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800640c:	7ffb      	ldrb	r3, [r7, #31]
 800640e:	2b08      	cmp	r3, #8
 8006410:	d827      	bhi.n	8006462 <UART_SetConfig+0x3aa>
 8006412:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x360>)
 8006414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006418:	0800643d 	.word	0x0800643d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800644d 	.word	0x0800644d
 8006424:	08006463 	.word	0x08006463
 8006428:	08006453 	.word	0x08006453
 800642c:	08006463 	.word	0x08006463
 8006430:	08006463 	.word	0x08006463
 8006434:	08006463 	.word	0x08006463
 8006438:	0800645b 	.word	0x0800645b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800643c:	f7fd fbe2 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 8006440:	61b8      	str	r0, [r7, #24]
        break;
 8006442:	e013      	b.n	800646c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006444:	f7fd fbf2 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8006448:	61b8      	str	r0, [r7, #24]
        break;
 800644a:	e00f      	b.n	800646c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644c:	4b49      	ldr	r3, [pc, #292]	; (8006574 <UART_SetConfig+0x4bc>)
 800644e:	61bb      	str	r3, [r7, #24]
        break;
 8006450:	e00c      	b.n	800646c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006452:	f7fd faf3 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 8006456:	61b8      	str	r0, [r7, #24]
        break;
 8006458:	e008      	b.n	800646c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	61bb      	str	r3, [r7, #24]
        break;
 8006460:	e004      	b.n	800646c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	77bb      	strb	r3, [r7, #30]
        break;
 800646a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d074      	beq.n	800655c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	005a      	lsls	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	441a      	add	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	b29b      	uxth	r3, r3
 8006488:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b0f      	cmp	r3, #15
 800648e:	d916      	bls.n	80064be <UART_SetConfig+0x406>
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006496:	d212      	bcs.n	80064be <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f023 030f 	bic.w	r3, r3, #15
 80064a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	89fb      	ldrh	r3, [r7, #14]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	89fa      	ldrh	r2, [r7, #14]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e04e      	b.n	800655c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77bb      	strb	r3, [r7, #30]
 80064c2:	e04b      	b.n	800655c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d827      	bhi.n	800651a <UART_SetConfig+0x462>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <UART_SetConfig+0x418>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f5 	.word	0x080064f5
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006505 	.word	0x08006505
 80064dc:	0800651b 	.word	0x0800651b
 80064e0:	0800650b 	.word	0x0800650b
 80064e4:	0800651b 	.word	0x0800651b
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	08006513 	.word	0x08006513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f4:	f7fd fb86 	bl	8003c04 <HAL_RCC_GetPCLK1Freq>
 80064f8:	61b8      	str	r0, [r7, #24]
        break;
 80064fa:	e013      	b.n	8006524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fd fb96 	bl	8003c2c <HAL_RCC_GetPCLK2Freq>
 8006500:	61b8      	str	r0, [r7, #24]
        break;
 8006502:	e00f      	b.n	8006524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <UART_SetConfig+0x4bc>)
 8006506:	61bb      	str	r3, [r7, #24]
        break;
 8006508:	e00c      	b.n	8006524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650a:	f7fd fa97 	bl	8003a3c <HAL_RCC_GetSysClockFreq>
 800650e:	61b8      	str	r0, [r7, #24]
        break;
 8006510:	e008      	b.n	8006524 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	61bb      	str	r3, [r7, #24]
        break;
 8006518:	e004      	b.n	8006524 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	77bb      	strb	r3, [r7, #30]
        break;
 8006522:	bf00      	nop
    }

    if (pclk != 0U)
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d018      	beq.n	800655c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085a      	lsrs	r2, r3, #1
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	441a      	add	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0f      	cmp	r3, #15
 8006544:	d908      	bls.n	8006558 <UART_SetConfig+0x4a0>
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654c:	d204      	bcs.n	8006558 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	60da      	str	r2, [r3, #12]
 8006556:	e001      	b.n	800655c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006568:	7fbb      	ldrb	r3, [r7, #30]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	00f42400 	.word	0x00f42400

08006578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006676:	d10a      	bne.n	800668e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066cc:	f7fb fa6a 	bl	8001ba4 <HAL_GetTick>
 80066d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d10e      	bne.n	80066fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f82d 	bl	800674e <UART_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e023      	b.n	8006746 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d10e      	bne.n	800672a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800670c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f817 	bl	800674e <UART_WaitOnFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e00d      	b.n	8006746 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	4613      	mov	r3, r2
 800675c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675e:	e05e      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d05a      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006768:	f7fb fa1c 	bl	8001ba4 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d302      	bcc.n	800677e <UART_WaitOnFlagUntilTimeout+0x30>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11b      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800678c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e043      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02c      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d2:	d124      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00f      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	429a      	cmp	r2, r3
 800683a:	d091      	beq.n	8006760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800685c:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006886:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	2b01      	cmp	r3, #1
 800689e:	d107      	bne.n	80068b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0210 	bic.w	r2, r2, #16
 80068ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e4:	d014      	beq.n	8006910 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068fc:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800690e:	e002      	b.n	8006916 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fb9d 	bl	8006050 <HAL_UART_TxCpltCallback>
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7ff fb99 	bl	8006064 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006932:	bf00      	nop
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b086      	sub	sp, #24
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800694c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006952:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b80      	cmp	r3, #128	; 0x80
 8006960:	d109      	bne.n	8006976 <UART_DMAError+0x3c>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	2b21      	cmp	r3, #33	; 0x21
 8006966:	d106      	bne.n	8006976 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2200      	movs	r2, #0
 800696c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f7ff ff68 	bl	8006846 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	d109      	bne.n	8006998 <UART_DMAError+0x5e>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b22      	cmp	r3, #34	; 0x22
 8006988:	d106      	bne.n	8006998 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2200      	movs	r2, #0
 800698e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f7ff ff6c 	bl	8006870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a8:	6978      	ldr	r0, [r7, #20]
 80069aa:	f7ff fb65 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ae:	bf00      	nop
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff fb4f 	bl	8006078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff fb22 	bl	8006050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <__errno>:
 8006a14:	4b01      	ldr	r3, [pc, #4]	; (8006a1c <__errno+0x8>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000020 	.word	0x20000020

08006a20 <__libc_init_array>:
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	4e0d      	ldr	r6, [pc, #52]	; (8006a58 <__libc_init_array+0x38>)
 8006a24:	4c0d      	ldr	r4, [pc, #52]	; (8006a5c <__libc_init_array+0x3c>)
 8006a26:	1ba4      	subs	r4, r4, r6
 8006a28:	10a4      	asrs	r4, r4, #2
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	42a5      	cmp	r5, r4
 8006a2e:	d109      	bne.n	8006a44 <__libc_init_array+0x24>
 8006a30:	4e0b      	ldr	r6, [pc, #44]	; (8006a60 <__libc_init_array+0x40>)
 8006a32:	4c0c      	ldr	r4, [pc, #48]	; (8006a64 <__libc_init_array+0x44>)
 8006a34:	f003 fcc8 	bl	800a3c8 <_init>
 8006a38:	1ba4      	subs	r4, r4, r6
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	2500      	movs	r5, #0
 8006a3e:	42a5      	cmp	r5, r4
 8006a40:	d105      	bne.n	8006a4e <__libc_init_array+0x2e>
 8006a42:	bd70      	pop	{r4, r5, r6, pc}
 8006a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a48:	4798      	blx	r3
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	e7ee      	b.n	8006a2c <__libc_init_array+0xc>
 8006a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a52:	4798      	blx	r3
 8006a54:	3501      	adds	r5, #1
 8006a56:	e7f2      	b.n	8006a3e <__libc_init_array+0x1e>
 8006a58:	0800a740 	.word	0x0800a740
 8006a5c:	0800a740 	.word	0x0800a740
 8006a60:	0800a740 	.word	0x0800a740
 8006a64:	0800a744 	.word	0x0800a744

08006a68 <memset>:
 8006a68:	4402      	add	r2, r0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <memset+0xa>
 8006a70:	4770      	bx	lr
 8006a72:	f803 1b01 	strb.w	r1, [r3], #1
 8006a76:	e7f9      	b.n	8006a6c <memset+0x4>

08006a78 <__cvt>:
 8006a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a7a:	ed2d 8b02 	vpush	{d8}
 8006a7e:	eeb0 8b40 	vmov.f64	d8, d0
 8006a82:	b085      	sub	sp, #20
 8006a84:	4617      	mov	r7, r2
 8006a86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006a88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006a8a:	ee18 2a90 	vmov	r2, s17
 8006a8e:	f025 0520 	bic.w	r5, r5, #32
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	bfb6      	itet	lt
 8006a96:	222d      	movlt	r2, #45	; 0x2d
 8006a98:	2200      	movge	r2, #0
 8006a9a:	eeb1 8b40 	vneglt.f64	d8, d0
 8006a9e:	2d46      	cmp	r5, #70	; 0x46
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	d004      	beq.n	8006ab0 <__cvt+0x38>
 8006aa6:	2d45      	cmp	r5, #69	; 0x45
 8006aa8:	d100      	bne.n	8006aac <__cvt+0x34>
 8006aaa:	3401      	adds	r4, #1
 8006aac:	2102      	movs	r1, #2
 8006aae:	e000      	b.n	8006ab2 <__cvt+0x3a>
 8006ab0:	2103      	movs	r1, #3
 8006ab2:	ab03      	add	r3, sp, #12
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	ab02      	add	r3, sp, #8
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4622      	mov	r2, r4
 8006abc:	4633      	mov	r3, r6
 8006abe:	eeb0 0b48 	vmov.f64	d0, d8
 8006ac2:	f001 fd69 	bl	8008598 <_dtoa_r>
 8006ac6:	2d47      	cmp	r5, #71	; 0x47
 8006ac8:	d101      	bne.n	8006ace <__cvt+0x56>
 8006aca:	07fb      	lsls	r3, r7, #31
 8006acc:	d51e      	bpl.n	8006b0c <__cvt+0x94>
 8006ace:	2d46      	cmp	r5, #70	; 0x46
 8006ad0:	eb00 0304 	add.w	r3, r0, r4
 8006ad4:	d10c      	bne.n	8006af0 <__cvt+0x78>
 8006ad6:	7802      	ldrb	r2, [r0, #0]
 8006ad8:	2a30      	cmp	r2, #48	; 0x30
 8006ada:	d107      	bne.n	8006aec <__cvt+0x74>
 8006adc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae4:	bf1c      	itt	ne
 8006ae6:	f1c4 0401 	rsbne	r4, r4, #1
 8006aea:	6034      	strne	r4, [r6, #0]
 8006aec:	6832      	ldr	r2, [r6, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	d007      	beq.n	8006b0a <__cvt+0x92>
 8006afa:	2130      	movs	r1, #48	; 0x30
 8006afc:	9a03      	ldr	r2, [sp, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d204      	bcs.n	8006b0c <__cvt+0x94>
 8006b02:	1c54      	adds	r4, r2, #1
 8006b04:	9403      	str	r4, [sp, #12]
 8006b06:	7011      	strb	r1, [r2, #0]
 8006b08:	e7f8      	b.n	8006afc <__cvt+0x84>
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b10:	1a1b      	subs	r3, r3, r0
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	b005      	add	sp, #20
 8006b16:	ecbd 8b02 	vpop	{d8}
 8006b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b1c <__exponent>:
 8006b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1e:	2900      	cmp	r1, #0
 8006b20:	4604      	mov	r4, r0
 8006b22:	bfba      	itte	lt
 8006b24:	4249      	neglt	r1, r1
 8006b26:	232d      	movlt	r3, #45	; 0x2d
 8006b28:	232b      	movge	r3, #43	; 0x2b
 8006b2a:	2909      	cmp	r1, #9
 8006b2c:	f804 2b02 	strb.w	r2, [r4], #2
 8006b30:	7043      	strb	r3, [r0, #1]
 8006b32:	dd20      	ble.n	8006b76 <__exponent+0x5a>
 8006b34:	f10d 0307 	add.w	r3, sp, #7
 8006b38:	461f      	mov	r7, r3
 8006b3a:	260a      	movs	r6, #10
 8006b3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006b40:	fb06 1115 	mls	r1, r6, r5, r1
 8006b44:	3130      	adds	r1, #48	; 0x30
 8006b46:	2d09      	cmp	r5, #9
 8006b48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b4c:	f103 32ff 	add.w	r2, r3, #4294967295
 8006b50:	4629      	mov	r1, r5
 8006b52:	dc09      	bgt.n	8006b68 <__exponent+0x4c>
 8006b54:	3130      	adds	r1, #48	; 0x30
 8006b56:	3b02      	subs	r3, #2
 8006b58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b5c:	42bb      	cmp	r3, r7
 8006b5e:	4622      	mov	r2, r4
 8006b60:	d304      	bcc.n	8006b6c <__exponent+0x50>
 8006b62:	1a10      	subs	r0, r2, r0
 8006b64:	b003      	add	sp, #12
 8006b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b68:	4613      	mov	r3, r2
 8006b6a:	e7e7      	b.n	8006b3c <__exponent+0x20>
 8006b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b70:	f804 2b01 	strb.w	r2, [r4], #1
 8006b74:	e7f2      	b.n	8006b5c <__exponent+0x40>
 8006b76:	2330      	movs	r3, #48	; 0x30
 8006b78:	4419      	add	r1, r3
 8006b7a:	7083      	strb	r3, [r0, #2]
 8006b7c:	1d02      	adds	r2, r0, #4
 8006b7e:	70c1      	strb	r1, [r0, #3]
 8006b80:	e7ef      	b.n	8006b62 <__exponent+0x46>
 8006b82:	0000      	movs	r0, r0
 8006b84:	0000      	movs	r0, r0
	...

08006b88 <_printf_float>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b08d      	sub	sp, #52	; 0x34
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	461f      	mov	r7, r3
 8006b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006b98:	4605      	mov	r5, r0
 8006b9a:	f002 fd75 	bl	8009688 <_localeconv_r>
 8006b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f7f9 fb4c 	bl	8000240 <strlen>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb0:	9005      	str	r0, [sp, #20]
 8006bb2:	3307      	adds	r3, #7
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	f103 0108 	add.w	r1, r3, #8
 8006bbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006bc0:	6822      	ldr	r2, [r4, #0]
 8006bc2:	f8c8 1000 	str.w	r1, [r8]
 8006bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006bca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006bce:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8006e58 <_printf_float+0x2d0>
 8006bd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8006bd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8006bda:	eeb4 6b47 	vcmp.f64	d6, d7
 8006bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be2:	dd24      	ble.n	8006c2e <_printf_float+0xa6>
 8006be4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	d502      	bpl.n	8006bf4 <_printf_float+0x6c>
 8006bee:	232d      	movs	r3, #45	; 0x2d
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	499a      	ldr	r1, [pc, #616]	; (8006e60 <_printf_float+0x2d8>)
 8006bf6:	4b9b      	ldr	r3, [pc, #620]	; (8006e64 <_printf_float+0x2dc>)
 8006bf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006bfc:	bf8c      	ite	hi
 8006bfe:	4688      	movhi	r8, r1
 8006c00:	4698      	movls	r8, r3
 8006c02:	f022 0204 	bic.w	r2, r2, #4
 8006c06:	2303      	movs	r3, #3
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	6022      	str	r2, [r4, #0]
 8006c0c:	f04f 0a00 	mov.w	sl, #0
 8006c10:	9700      	str	r7, [sp, #0]
 8006c12:	4633      	mov	r3, r6
 8006c14:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c16:	4621      	mov	r1, r4
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f000 f9e1 	bl	8006fe0 <_printf_common>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f040 8089 	bne.w	8006d36 <_printf_float+0x1ae>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b00d      	add	sp, #52	; 0x34
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	d702      	bvc.n	8006c3e <_printf_float+0xb6>
 8006c38:	498b      	ldr	r1, [pc, #556]	; (8006e68 <_printf_float+0x2e0>)
 8006c3a:	4b8c      	ldr	r3, [pc, #560]	; (8006e6c <_printf_float+0x2e4>)
 8006c3c:	e7dc      	b.n	8006bf8 <_printf_float+0x70>
 8006c3e:	6861      	ldr	r1, [r4, #4]
 8006c40:	1c4b      	adds	r3, r1, #1
 8006c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c46:	ab0a      	add	r3, sp, #40	; 0x28
 8006c48:	a809      	add	r0, sp, #36	; 0x24
 8006c4a:	d13b      	bne.n	8006cc4 <_printf_float+0x13c>
 8006c4c:	2106      	movs	r1, #6
 8006c4e:	6061      	str	r1, [r4, #4]
 8006c50:	f04f 0c00 	mov.w	ip, #0
 8006c54:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006c58:	e9cd 0900 	strd	r0, r9, [sp]
 8006c5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c60:	6022      	str	r2, [r4, #0]
 8006c62:	6861      	ldr	r1, [r4, #4]
 8006c64:	4628      	mov	r0, r5
 8006c66:	f7ff ff07 	bl	8006a78 <__cvt>
 8006c6a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8006c6e:	2b47      	cmp	r3, #71	; 0x47
 8006c70:	4680      	mov	r8, r0
 8006c72:	d109      	bne.n	8006c88 <_printf_float+0x100>
 8006c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c76:	1cd8      	adds	r0, r3, #3
 8006c78:	db02      	blt.n	8006c80 <_printf_float+0xf8>
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	dd47      	ble.n	8006d10 <_printf_float+0x188>
 8006c80:	f1a9 0902 	sub.w	r9, r9, #2
 8006c84:	fa5f f989 	uxtb.w	r9, r9
 8006c88:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c8e:	d824      	bhi.n	8006cda <_printf_float+0x152>
 8006c90:	3901      	subs	r1, #1
 8006c92:	464a      	mov	r2, r9
 8006c94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c98:	9109      	str	r1, [sp, #36]	; 0x24
 8006c9a:	f7ff ff3f 	bl	8006b1c <__exponent>
 8006c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ca0:	1813      	adds	r3, r2, r0
 8006ca2:	2a01      	cmp	r2, #1
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	dc02      	bgt.n	8006cb0 <_printf_float+0x128>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	07d1      	lsls	r1, r2, #31
 8006cae:	d501      	bpl.n	8006cb4 <_printf_float+0x12c>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0a9      	beq.n	8006c10 <_printf_float+0x88>
 8006cbc:	232d      	movs	r3, #45	; 0x2d
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc2:	e7a5      	b.n	8006c10 <_printf_float+0x88>
 8006cc4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8006cc8:	f000 8178 	beq.w	8006fbc <_printf_float+0x434>
 8006ccc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006cd0:	d1be      	bne.n	8006c50 <_printf_float+0xc8>
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d1bc      	bne.n	8006c50 <_printf_float+0xc8>
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	e7b9      	b.n	8006c4e <_printf_float+0xc6>
 8006cda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006cde:	d119      	bne.n	8006d14 <_printf_float+0x18c>
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	6863      	ldr	r3, [r4, #4]
 8006ce4:	dd0c      	ble.n	8006d00 <_printf_float+0x178>
 8006ce6:	6121      	str	r1, [r4, #16]
 8006ce8:	b913      	cbnz	r3, 8006cf0 <_printf_float+0x168>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	07d2      	lsls	r2, r2, #31
 8006cee:	d502      	bpl.n	8006cf6 <_printf_float+0x16e>
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	440b      	add	r3, r1
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf8:	65a3      	str	r3, [r4, #88]	; 0x58
 8006cfa:	f04f 0a00 	mov.w	sl, #0
 8006cfe:	e7d9      	b.n	8006cb4 <_printf_float+0x12c>
 8006d00:	b913      	cbnz	r3, 8006d08 <_printf_float+0x180>
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	07d0      	lsls	r0, r2, #31
 8006d06:	d501      	bpl.n	8006d0c <_printf_float+0x184>
 8006d08:	3302      	adds	r3, #2
 8006d0a:	e7f3      	b.n	8006cf4 <_printf_float+0x16c>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e7f1      	b.n	8006cf4 <_printf_float+0x16c>
 8006d10:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006d14:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	db05      	blt.n	8006d28 <_printf_float+0x1a0>
 8006d1c:	6822      	ldr	r2, [r4, #0]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	07d1      	lsls	r1, r2, #31
 8006d22:	d5e8      	bpl.n	8006cf6 <_printf_float+0x16e>
 8006d24:	3301      	adds	r3, #1
 8006d26:	e7e5      	b.n	8006cf4 <_printf_float+0x16c>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfd4      	ite	le
 8006d2c:	f1c3 0302 	rsble	r3, r3, #2
 8006d30:	2301      	movgt	r3, #1
 8006d32:	4413      	add	r3, r2
 8006d34:	e7de      	b.n	8006cf4 <_printf_float+0x16c>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	055a      	lsls	r2, r3, #21
 8006d3a:	d407      	bmi.n	8006d4c <_printf_float+0x1c4>
 8006d3c:	6923      	ldr	r3, [r4, #16]
 8006d3e:	4642      	mov	r2, r8
 8006d40:	4631      	mov	r1, r6
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b8      	blx	r7
 8006d46:	3001      	adds	r0, #1
 8006d48:	d12a      	bne.n	8006da0 <_printf_float+0x218>
 8006d4a:	e76b      	b.n	8006c24 <_printf_float+0x9c>
 8006d4c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006d50:	f240 80de 	bls.w	8006f10 <_printf_float+0x388>
 8006d54:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006d58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d60:	d133      	bne.n	8006dca <_printf_float+0x242>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4a42      	ldr	r2, [pc, #264]	; (8006e70 <_printf_float+0x2e8>)
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	f43f af59 	beq.w	8006c24 <_printf_float+0x9c>
 8006d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d76:	429a      	cmp	r2, r3
 8006d78:	db02      	blt.n	8006d80 <_printf_float+0x1f8>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	07d8      	lsls	r0, r3, #31
 8006d7e:	d50f      	bpl.n	8006da0 <_printf_float+0x218>
 8006d80:	9b05      	ldr	r3, [sp, #20]
 8006d82:	465a      	mov	r2, fp
 8006d84:	4631      	mov	r1, r6
 8006d86:	4628      	mov	r0, r5
 8006d88:	47b8      	blx	r7
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f43f af4a 	beq.w	8006c24 <_printf_float+0x9c>
 8006d90:	f04f 0800 	mov.w	r8, #0
 8006d94:	f104 091a 	add.w	r9, r4, #26
 8006d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4543      	cmp	r3, r8
 8006d9e:	dc09      	bgt.n	8006db4 <_printf_float+0x22c>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	079b      	lsls	r3, r3, #30
 8006da4:	f100 8105 	bmi.w	8006fb2 <_printf_float+0x42a>
 8006da8:	68e0      	ldr	r0, [r4, #12]
 8006daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dac:	4298      	cmp	r0, r3
 8006dae:	bfb8      	it	lt
 8006db0:	4618      	movlt	r0, r3
 8006db2:	e739      	b.n	8006c28 <_printf_float+0xa0>
 8006db4:	2301      	movs	r3, #1
 8006db6:	464a      	mov	r2, r9
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f43f af30 	beq.w	8006c24 <_printf_float+0x9c>
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	e7e6      	b.n	8006d98 <_printf_float+0x210>
 8006dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	dc2b      	bgt.n	8006e28 <_printf_float+0x2a0>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <_printf_float+0x2e8>)
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	f43f af22 	beq.w	8006c24 <_printf_float+0x9c>
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	b923      	cbnz	r3, 8006dee <_printf_float+0x266>
 8006de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de6:	b913      	cbnz	r3, 8006dee <_printf_float+0x266>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d5d8      	bpl.n	8006da0 <_printf_float+0x218>
 8006dee:	9b05      	ldr	r3, [sp, #20]
 8006df0:	465a      	mov	r2, fp
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f af13 	beq.w	8006c24 <_printf_float+0x9c>
 8006dfe:	f04f 0900 	mov.w	r9, #0
 8006e02:	f104 0a1a 	add.w	sl, r4, #26
 8006e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e08:	425b      	negs	r3, r3
 8006e0a:	454b      	cmp	r3, r9
 8006e0c:	dc01      	bgt.n	8006e12 <_printf_float+0x28a>
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	e795      	b.n	8006d3e <_printf_float+0x1b6>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4652      	mov	r2, sl
 8006e16:	4631      	mov	r1, r6
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f43f af01 	beq.w	8006c24 <_printf_float+0x9c>
 8006e22:	f109 0901 	add.w	r9, r9, #1
 8006e26:	e7ee      	b.n	8006e06 <_printf_float+0x27e>
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bfa8      	it	ge
 8006e30:	461a      	movge	r2, r3
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	4691      	mov	r9, r2
 8006e36:	dd07      	ble.n	8006e48 <_printf_float+0x2c0>
 8006e38:	4613      	mov	r3, r2
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	4628      	mov	r0, r5
 8006e40:	47b8      	blx	r7
 8006e42:	3001      	adds	r0, #1
 8006e44:	f43f aeee 	beq.w	8006c24 <_printf_float+0x9c>
 8006e48:	f104 031a 	add.w	r3, r4, #26
 8006e4c:	f04f 0a00 	mov.w	sl, #0
 8006e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e54:	9307      	str	r3, [sp, #28]
 8006e56:	e017      	b.n	8006e88 <_printf_float+0x300>
 8006e58:	ffffffff 	.word	0xffffffff
 8006e5c:	7fefffff 	.word	0x7fefffff
 8006e60:	0800a41c 	.word	0x0800a41c
 8006e64:	0800a418 	.word	0x0800a418
 8006e68:	0800a424 	.word	0x0800a424
 8006e6c:	0800a420 	.word	0x0800a420
 8006e70:	0800a428 	.word	0x0800a428
 8006e74:	2301      	movs	r3, #1
 8006e76:	9a07      	ldr	r2, [sp, #28]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b8      	blx	r7
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f43f aed0 	beq.w	8006c24 <_printf_float+0x9c>
 8006e84:	f10a 0a01 	add.w	sl, sl, #1
 8006e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e8a:	9306      	str	r3, [sp, #24]
 8006e8c:	eba3 0309 	sub.w	r3, r3, r9
 8006e90:	4553      	cmp	r3, sl
 8006e92:	dcef      	bgt.n	8006e74 <_printf_float+0x2ec>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	4498      	add	r8, r3
 8006e98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	db15      	blt.n	8006ecc <_printf_float+0x344>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d412      	bmi.n	8006ecc <_printf_float+0x344>
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006eac:	1a9a      	subs	r2, r3, r2
 8006eae:	eba3 0a01 	sub.w	sl, r3, r1
 8006eb2:	4592      	cmp	sl, r2
 8006eb4:	bfa8      	it	ge
 8006eb6:	4692      	movge	sl, r2
 8006eb8:	f1ba 0f00 	cmp.w	sl, #0
 8006ebc:	dc0e      	bgt.n	8006edc <_printf_float+0x354>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ec6:	f104 091a 	add.w	r9, r4, #26
 8006eca:	e019      	b.n	8006f00 <_printf_float+0x378>
 8006ecc:	9b05      	ldr	r3, [sp, #20]
 8006ece:	465a      	mov	r2, fp
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d1e5      	bne.n	8006ea6 <_printf_float+0x31e>
 8006eda:	e6a3      	b.n	8006c24 <_printf_float+0x9c>
 8006edc:	4653      	mov	r3, sl
 8006ede:	4642      	mov	r2, r8
 8006ee0:	4631      	mov	r1, r6
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	47b8      	blx	r7
 8006ee6:	3001      	adds	r0, #1
 8006ee8:	d1e9      	bne.n	8006ebe <_printf_float+0x336>
 8006eea:	e69b      	b.n	8006c24 <_printf_float+0x9c>
 8006eec:	2301      	movs	r3, #1
 8006eee:	464a      	mov	r2, r9
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f ae94 	beq.w	8006c24 <_printf_float+0x9c>
 8006efc:	f108 0801 	add.w	r8, r8, #1
 8006f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f04:	1a9b      	subs	r3, r3, r2
 8006f06:	eba3 030a 	sub.w	r3, r3, sl
 8006f0a:	4543      	cmp	r3, r8
 8006f0c:	dcee      	bgt.n	8006eec <_printf_float+0x364>
 8006f0e:	e747      	b.n	8006da0 <_printf_float+0x218>
 8006f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f12:	2a01      	cmp	r2, #1
 8006f14:	dc01      	bgt.n	8006f1a <_printf_float+0x392>
 8006f16:	07db      	lsls	r3, r3, #31
 8006f18:	d539      	bpl.n	8006f8e <_printf_float+0x406>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	4631      	mov	r1, r6
 8006f20:	4628      	mov	r0, r5
 8006f22:	47b8      	blx	r7
 8006f24:	3001      	adds	r0, #1
 8006f26:	f43f ae7d 	beq.w	8006c24 <_printf_float+0x9c>
 8006f2a:	9b05      	ldr	r3, [sp, #20]
 8006f2c:	465a      	mov	r2, fp
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f108 0801 	add.w	r8, r8, #1
 8006f3a:	f43f ae73 	beq.w	8006c24 <_printf_float+0x9c>
 8006f3e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f50:	d018      	beq.n	8006f84 <_printf_float+0x3fc>
 8006f52:	4642      	mov	r2, r8
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d10e      	bne.n	8006f7c <_printf_float+0x3f4>
 8006f5e:	e661      	b.n	8006c24 <_printf_float+0x9c>
 8006f60:	2301      	movs	r3, #1
 8006f62:	464a      	mov	r2, r9
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b8      	blx	r7
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	f43f ae5a 	beq.w	8006c24 <_printf_float+0x9c>
 8006f70:	f108 0801 	add.w	r8, r8, #1
 8006f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f76:	3b01      	subs	r3, #1
 8006f78:	4543      	cmp	r3, r8
 8006f7a:	dcf1      	bgt.n	8006f60 <_printf_float+0x3d8>
 8006f7c:	4653      	mov	r3, sl
 8006f7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f82:	e6dd      	b.n	8006d40 <_printf_float+0x1b8>
 8006f84:	f04f 0800 	mov.w	r8, #0
 8006f88:	f104 091a 	add.w	r9, r4, #26
 8006f8c:	e7f2      	b.n	8006f74 <_printf_float+0x3ec>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7df      	b.n	8006f52 <_printf_float+0x3ca>
 8006f92:	2301      	movs	r3, #1
 8006f94:	464a      	mov	r2, r9
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f ae41 	beq.w	8006c24 <_printf_float+0x9c>
 8006fa2:	f108 0801 	add.w	r8, r8, #1
 8006fa6:	68e3      	ldr	r3, [r4, #12]
 8006fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	4543      	cmp	r3, r8
 8006fae:	dcf0      	bgt.n	8006f92 <_printf_float+0x40a>
 8006fb0:	e6fa      	b.n	8006da8 <_printf_float+0x220>
 8006fb2:	f04f 0800 	mov.w	r8, #0
 8006fb6:	f104 0919 	add.w	r9, r4, #25
 8006fba:	e7f4      	b.n	8006fa6 <_printf_float+0x41e>
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	f43f ae8a 	beq.w	8006cd6 <_printf_float+0x14e>
 8006fc2:	f04f 0c00 	mov.w	ip, #0
 8006fc6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8006fca:	e9cd 0900 	strd	r0, r9, [sp]
 8006fce:	6022      	str	r2, [r4, #0]
 8006fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f7ff fd4f 	bl	8006a78 <__cvt>
 8006fda:	4680      	mov	r8, r0
 8006fdc:	e64a      	b.n	8006c74 <_printf_float+0xec>
 8006fde:	bf00      	nop

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4691      	mov	r9, r2
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfb8      	it	lt
 8006ff4:	4613      	movlt	r3, r2
 8006ff6:	f8c9 3000 	str.w	r3, [r9]
 8006ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ffe:	4606      	mov	r6, r0
 8007000:	460c      	mov	r4, r1
 8007002:	b112      	cbz	r2, 800700a <_printf_common+0x2a>
 8007004:	3301      	adds	r3, #1
 8007006:	f8c9 3000 	str.w	r3, [r9]
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	0699      	lsls	r1, r3, #26
 800700e:	bf42      	ittt	mi
 8007010:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007014:	3302      	addmi	r3, #2
 8007016:	f8c9 3000 	strmi.w	r3, [r9]
 800701a:	6825      	ldr	r5, [r4, #0]
 800701c:	f015 0506 	ands.w	r5, r5, #6
 8007020:	d107      	bne.n	8007032 <_printf_common+0x52>
 8007022:	f104 0a19 	add.w	sl, r4, #25
 8007026:	68e3      	ldr	r3, [r4, #12]
 8007028:	f8d9 2000 	ldr.w	r2, [r9]
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	42ab      	cmp	r3, r5
 8007030:	dc28      	bgt.n	8007084 <_printf_common+0xa4>
 8007032:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	3300      	adds	r3, #0
 800703a:	bf18      	it	ne
 800703c:	2301      	movne	r3, #1
 800703e:	0692      	lsls	r2, r2, #26
 8007040:	d42d      	bmi.n	800709e <_printf_common+0xbe>
 8007042:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007046:	4639      	mov	r1, r7
 8007048:	4630      	mov	r0, r6
 800704a:	47c0      	blx	r8
 800704c:	3001      	adds	r0, #1
 800704e:	d020      	beq.n	8007092 <_printf_common+0xb2>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	68e5      	ldr	r5, [r4, #12]
 8007054:	f8d9 2000 	ldr.w	r2, [r9]
 8007058:	f003 0306 	and.w	r3, r3, #6
 800705c:	2b04      	cmp	r3, #4
 800705e:	bf08      	it	eq
 8007060:	1aad      	subeq	r5, r5, r2
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	6922      	ldr	r2, [r4, #16]
 8007066:	bf0c      	ite	eq
 8007068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800706c:	2500      	movne	r5, #0
 800706e:	4293      	cmp	r3, r2
 8007070:	bfc4      	itt	gt
 8007072:	1a9b      	subgt	r3, r3, r2
 8007074:	18ed      	addgt	r5, r5, r3
 8007076:	f04f 0900 	mov.w	r9, #0
 800707a:	341a      	adds	r4, #26
 800707c:	454d      	cmp	r5, r9
 800707e:	d11a      	bne.n	80070b6 <_printf_common+0xd6>
 8007080:	2000      	movs	r0, #0
 8007082:	e008      	b.n	8007096 <_printf_common+0xb6>
 8007084:	2301      	movs	r3, #1
 8007086:	4652      	mov	r2, sl
 8007088:	4639      	mov	r1, r7
 800708a:	4630      	mov	r0, r6
 800708c:	47c0      	blx	r8
 800708e:	3001      	adds	r0, #1
 8007090:	d103      	bne.n	800709a <_printf_common+0xba>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	3501      	adds	r5, #1
 800709c:	e7c3      	b.n	8007026 <_printf_common+0x46>
 800709e:	18e1      	adds	r1, r4, r3
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	2030      	movs	r0, #48	; 0x30
 80070a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070a8:	4422      	add	r2, r4
 80070aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070b2:	3302      	adds	r3, #2
 80070b4:	e7c5      	b.n	8007042 <_printf_common+0x62>
 80070b6:	2301      	movs	r3, #1
 80070b8:	4622      	mov	r2, r4
 80070ba:	4639      	mov	r1, r7
 80070bc:	4630      	mov	r0, r6
 80070be:	47c0      	blx	r8
 80070c0:	3001      	adds	r0, #1
 80070c2:	d0e6      	beq.n	8007092 <_printf_common+0xb2>
 80070c4:	f109 0901 	add.w	r9, r9, #1
 80070c8:	e7d8      	b.n	800707c <_printf_common+0x9c>
	...

080070cc <_printf_i>:
 80070cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070d4:	460c      	mov	r4, r1
 80070d6:	7e09      	ldrb	r1, [r1, #24]
 80070d8:	b085      	sub	sp, #20
 80070da:	296e      	cmp	r1, #110	; 0x6e
 80070dc:	4617      	mov	r7, r2
 80070de:	4606      	mov	r6, r0
 80070e0:	4698      	mov	r8, r3
 80070e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070e4:	f000 80b3 	beq.w	800724e <_printf_i+0x182>
 80070e8:	d822      	bhi.n	8007130 <_printf_i+0x64>
 80070ea:	2963      	cmp	r1, #99	; 0x63
 80070ec:	d036      	beq.n	800715c <_printf_i+0x90>
 80070ee:	d80a      	bhi.n	8007106 <_printf_i+0x3a>
 80070f0:	2900      	cmp	r1, #0
 80070f2:	f000 80b9 	beq.w	8007268 <_printf_i+0x19c>
 80070f6:	2958      	cmp	r1, #88	; 0x58
 80070f8:	f000 8083 	beq.w	8007202 <_printf_i+0x136>
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007104:	e032      	b.n	800716c <_printf_i+0xa0>
 8007106:	2964      	cmp	r1, #100	; 0x64
 8007108:	d001      	beq.n	800710e <_printf_i+0x42>
 800710a:	2969      	cmp	r1, #105	; 0x69
 800710c:	d1f6      	bne.n	80070fc <_printf_i+0x30>
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	0605      	lsls	r5, r0, #24
 8007114:	f103 0104 	add.w	r1, r3, #4
 8007118:	d52a      	bpl.n	8007170 <_printf_i+0xa4>
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6011      	str	r1, [r2, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	da03      	bge.n	800712a <_printf_i+0x5e>
 8007122:	222d      	movs	r2, #45	; 0x2d
 8007124:	425b      	negs	r3, r3
 8007126:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800712a:	486f      	ldr	r0, [pc, #444]	; (80072e8 <_printf_i+0x21c>)
 800712c:	220a      	movs	r2, #10
 800712e:	e039      	b.n	80071a4 <_printf_i+0xd8>
 8007130:	2973      	cmp	r1, #115	; 0x73
 8007132:	f000 809d 	beq.w	8007270 <_printf_i+0x1a4>
 8007136:	d808      	bhi.n	800714a <_printf_i+0x7e>
 8007138:	296f      	cmp	r1, #111	; 0x6f
 800713a:	d020      	beq.n	800717e <_printf_i+0xb2>
 800713c:	2970      	cmp	r1, #112	; 0x70
 800713e:	d1dd      	bne.n	80070fc <_printf_i+0x30>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	f043 0320 	orr.w	r3, r3, #32
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	e003      	b.n	8007152 <_printf_i+0x86>
 800714a:	2975      	cmp	r1, #117	; 0x75
 800714c:	d017      	beq.n	800717e <_printf_i+0xb2>
 800714e:	2978      	cmp	r1, #120	; 0x78
 8007150:	d1d4      	bne.n	80070fc <_printf_i+0x30>
 8007152:	2378      	movs	r3, #120	; 0x78
 8007154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007158:	4864      	ldr	r0, [pc, #400]	; (80072ec <_printf_i+0x220>)
 800715a:	e055      	b.n	8007208 <_printf_i+0x13c>
 800715c:	6813      	ldr	r3, [r2, #0]
 800715e:	1d19      	adds	r1, r3, #4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6011      	str	r1, [r2, #0]
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800716c:	2301      	movs	r3, #1
 800716e:	e08c      	b.n	800728a <_printf_i+0x1be>
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6011      	str	r1, [r2, #0]
 8007174:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007178:	bf18      	it	ne
 800717a:	b21b      	sxthne	r3, r3
 800717c:	e7cf      	b.n	800711e <_printf_i+0x52>
 800717e:	6813      	ldr	r3, [r2, #0]
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	1d18      	adds	r0, r3, #4
 8007184:	6010      	str	r0, [r2, #0]
 8007186:	0628      	lsls	r0, r5, #24
 8007188:	d501      	bpl.n	800718e <_printf_i+0xc2>
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	e002      	b.n	8007194 <_printf_i+0xc8>
 800718e:	0668      	lsls	r0, r5, #25
 8007190:	d5fb      	bpl.n	800718a <_printf_i+0xbe>
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	4854      	ldr	r0, [pc, #336]	; (80072e8 <_printf_i+0x21c>)
 8007196:	296f      	cmp	r1, #111	; 0x6f
 8007198:	bf14      	ite	ne
 800719a:	220a      	movne	r2, #10
 800719c:	2208      	moveq	r2, #8
 800719e:	2100      	movs	r1, #0
 80071a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071a4:	6865      	ldr	r5, [r4, #4]
 80071a6:	60a5      	str	r5, [r4, #8]
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	f2c0 8095 	blt.w	80072d8 <_printf_i+0x20c>
 80071ae:	6821      	ldr	r1, [r4, #0]
 80071b0:	f021 0104 	bic.w	r1, r1, #4
 80071b4:	6021      	str	r1, [r4, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d13d      	bne.n	8007236 <_printf_i+0x16a>
 80071ba:	2d00      	cmp	r5, #0
 80071bc:	f040 808e 	bne.w	80072dc <_printf_i+0x210>
 80071c0:	4665      	mov	r5, ip
 80071c2:	2a08      	cmp	r2, #8
 80071c4:	d10b      	bne.n	80071de <_printf_i+0x112>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	07db      	lsls	r3, r3, #31
 80071ca:	d508      	bpl.n	80071de <_printf_i+0x112>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bfde      	ittt	le
 80071d4:	2330      	movle	r3, #48	; 0x30
 80071d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071de:	ebac 0305 	sub.w	r3, ip, r5
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	f8cd 8000 	str.w	r8, [sp]
 80071e8:	463b      	mov	r3, r7
 80071ea:	aa03      	add	r2, sp, #12
 80071ec:	4621      	mov	r1, r4
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff fef6 	bl	8006fe0 <_printf_common>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d14d      	bne.n	8007294 <_printf_i+0x1c8>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	b005      	add	sp, #20
 80071fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007202:	4839      	ldr	r0, [pc, #228]	; (80072e8 <_printf_i+0x21c>)
 8007204:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007208:	6813      	ldr	r3, [r2, #0]
 800720a:	6821      	ldr	r1, [r4, #0]
 800720c:	1d1d      	adds	r5, r3, #4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6015      	str	r5, [r2, #0]
 8007212:	060a      	lsls	r2, r1, #24
 8007214:	d50b      	bpl.n	800722e <_printf_i+0x162>
 8007216:	07ca      	lsls	r2, r1, #31
 8007218:	bf44      	itt	mi
 800721a:	f041 0120 	orrmi.w	r1, r1, #32
 800721e:	6021      	strmi	r1, [r4, #0]
 8007220:	b91b      	cbnz	r3, 800722a <_printf_i+0x15e>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	f022 0220 	bic.w	r2, r2, #32
 8007228:	6022      	str	r2, [r4, #0]
 800722a:	2210      	movs	r2, #16
 800722c:	e7b7      	b.n	800719e <_printf_i+0xd2>
 800722e:	064d      	lsls	r5, r1, #25
 8007230:	bf48      	it	mi
 8007232:	b29b      	uxthmi	r3, r3
 8007234:	e7ef      	b.n	8007216 <_printf_i+0x14a>
 8007236:	4665      	mov	r5, ip
 8007238:	fbb3 f1f2 	udiv	r1, r3, r2
 800723c:	fb02 3311 	mls	r3, r2, r1, r3
 8007240:	5cc3      	ldrb	r3, [r0, r3]
 8007242:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007246:	460b      	mov	r3, r1
 8007248:	2900      	cmp	r1, #0
 800724a:	d1f5      	bne.n	8007238 <_printf_i+0x16c>
 800724c:	e7b9      	b.n	80071c2 <_printf_i+0xf6>
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	6825      	ldr	r5, [r4, #0]
 8007252:	6961      	ldr	r1, [r4, #20]
 8007254:	1d18      	adds	r0, r3, #4
 8007256:	6010      	str	r0, [r2, #0]
 8007258:	0628      	lsls	r0, r5, #24
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	d501      	bpl.n	8007262 <_printf_i+0x196>
 800725e:	6019      	str	r1, [r3, #0]
 8007260:	e002      	b.n	8007268 <_printf_i+0x19c>
 8007262:	066a      	lsls	r2, r5, #25
 8007264:	d5fb      	bpl.n	800725e <_printf_i+0x192>
 8007266:	8019      	strh	r1, [r3, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	4665      	mov	r5, ip
 800726e:	e7b9      	b.n	80071e4 <_printf_i+0x118>
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	1d19      	adds	r1, r3, #4
 8007274:	6011      	str	r1, [r2, #0]
 8007276:	681d      	ldr	r5, [r3, #0]
 8007278:	6862      	ldr	r2, [r4, #4]
 800727a:	2100      	movs	r1, #0
 800727c:	4628      	mov	r0, r5
 800727e:	f7f8 ffe7 	bl	8000250 <memchr>
 8007282:	b108      	cbz	r0, 8007288 <_printf_i+0x1bc>
 8007284:	1b40      	subs	r0, r0, r5
 8007286:	6060      	str	r0, [r4, #4]
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	6123      	str	r3, [r4, #16]
 800728c:	2300      	movs	r3, #0
 800728e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007292:	e7a7      	b.n	80071e4 <_printf_i+0x118>
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	462a      	mov	r2, r5
 8007298:	4639      	mov	r1, r7
 800729a:	4630      	mov	r0, r6
 800729c:	47c0      	blx	r8
 800729e:	3001      	adds	r0, #1
 80072a0:	d0aa      	beq.n	80071f8 <_printf_i+0x12c>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	079b      	lsls	r3, r3, #30
 80072a6:	d413      	bmi.n	80072d0 <_printf_i+0x204>
 80072a8:	68e0      	ldr	r0, [r4, #12]
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	4298      	cmp	r0, r3
 80072ae:	bfb8      	it	lt
 80072b0:	4618      	movlt	r0, r3
 80072b2:	e7a3      	b.n	80071fc <_printf_i+0x130>
 80072b4:	2301      	movs	r3, #1
 80072b6:	464a      	mov	r2, r9
 80072b8:	4639      	mov	r1, r7
 80072ba:	4630      	mov	r0, r6
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d09a      	beq.n	80071f8 <_printf_i+0x12c>
 80072c2:	3501      	adds	r5, #1
 80072c4:	68e3      	ldr	r3, [r4, #12]
 80072c6:	9a03      	ldr	r2, [sp, #12]
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	42ab      	cmp	r3, r5
 80072cc:	dcf2      	bgt.n	80072b4 <_printf_i+0x1e8>
 80072ce:	e7eb      	b.n	80072a8 <_printf_i+0x1dc>
 80072d0:	2500      	movs	r5, #0
 80072d2:	f104 0919 	add.w	r9, r4, #25
 80072d6:	e7f5      	b.n	80072c4 <_printf_i+0x1f8>
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1ac      	bne.n	8007236 <_printf_i+0x16a>
 80072dc:	7803      	ldrb	r3, [r0, #0]
 80072de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072e6:	e76c      	b.n	80071c2 <_printf_i+0xf6>
 80072e8:	0800a42a 	.word	0x0800a42a
 80072ec:	0800a43b 	.word	0x0800a43b

080072f0 <_scanf_float>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	469a      	mov	sl, r3
 80072f6:	688b      	ldr	r3, [r1, #8]
 80072f8:	4616      	mov	r6, r2
 80072fa:	1e5a      	subs	r2, r3, #1
 80072fc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007300:	b087      	sub	sp, #28
 8007302:	bf83      	ittte	hi
 8007304:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007308:	189b      	addhi	r3, r3, r2
 800730a:	9301      	strhi	r3, [sp, #4]
 800730c:	2300      	movls	r3, #0
 800730e:	bf86      	itte	hi
 8007310:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007314:	608b      	strhi	r3, [r1, #8]
 8007316:	9301      	strls	r3, [sp, #4]
 8007318:	680b      	ldr	r3, [r1, #0]
 800731a:	4688      	mov	r8, r1
 800731c:	f04f 0b00 	mov.w	fp, #0
 8007320:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007324:	f848 3b1c 	str.w	r3, [r8], #28
 8007328:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800732c:	4607      	mov	r7, r0
 800732e:	460c      	mov	r4, r1
 8007330:	4645      	mov	r5, r8
 8007332:	465a      	mov	r2, fp
 8007334:	46d9      	mov	r9, fp
 8007336:	f8cd b008 	str.w	fp, [sp, #8]
 800733a:	68a1      	ldr	r1, [r4, #8]
 800733c:	b181      	cbz	r1, 8007360 <_scanf_float+0x70>
 800733e:	6833      	ldr	r3, [r6, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b49      	cmp	r3, #73	; 0x49
 8007344:	d071      	beq.n	800742a <_scanf_float+0x13a>
 8007346:	d84d      	bhi.n	80073e4 <_scanf_float+0xf4>
 8007348:	2b39      	cmp	r3, #57	; 0x39
 800734a:	d840      	bhi.n	80073ce <_scanf_float+0xde>
 800734c:	2b31      	cmp	r3, #49	; 0x31
 800734e:	f080 8088 	bcs.w	8007462 <_scanf_float+0x172>
 8007352:	2b2d      	cmp	r3, #45	; 0x2d
 8007354:	f000 8090 	beq.w	8007478 <_scanf_float+0x188>
 8007358:	d815      	bhi.n	8007386 <_scanf_float+0x96>
 800735a:	2b2b      	cmp	r3, #43	; 0x2b
 800735c:	f000 808c 	beq.w	8007478 <_scanf_float+0x188>
 8007360:	f1b9 0f00 	cmp.w	r9, #0
 8007364:	d003      	beq.n	800736e <_scanf_float+0x7e>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	3a01      	subs	r2, #1
 8007370:	2a01      	cmp	r2, #1
 8007372:	f200 80ea 	bhi.w	800754a <_scanf_float+0x25a>
 8007376:	4545      	cmp	r5, r8
 8007378:	f200 80dc 	bhi.w	8007534 <_scanf_float+0x244>
 800737c:	2601      	movs	r6, #1
 800737e:	4630      	mov	r0, r6
 8007380:	b007      	add	sp, #28
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	2b2e      	cmp	r3, #46	; 0x2e
 8007388:	f000 809f 	beq.w	80074ca <_scanf_float+0x1da>
 800738c:	2b30      	cmp	r3, #48	; 0x30
 800738e:	d1e7      	bne.n	8007360 <_scanf_float+0x70>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007396:	d064      	beq.n	8007462 <_scanf_float+0x172>
 8007398:	9b01      	ldr	r3, [sp, #4]
 800739a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	f109 0901 	add.w	r9, r9, #1
 80073a4:	b11b      	cbz	r3, 80073ae <_scanf_float+0xbe>
 80073a6:	3b01      	subs	r3, #1
 80073a8:	3101      	adds	r1, #1
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	60a1      	str	r1, [r4, #8]
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	60a3      	str	r3, [r4, #8]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	3301      	adds	r3, #1
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	6873      	ldr	r3, [r6, #4]
 80073bc:	3b01      	subs	r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	6073      	str	r3, [r6, #4]
 80073c2:	f340 80ac 	ble.w	800751e <_scanf_float+0x22e>
 80073c6:	6833      	ldr	r3, [r6, #0]
 80073c8:	3301      	adds	r3, #1
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	e7b5      	b.n	800733a <_scanf_float+0x4a>
 80073ce:	2b45      	cmp	r3, #69	; 0x45
 80073d0:	f000 8085 	beq.w	80074de <_scanf_float+0x1ee>
 80073d4:	2b46      	cmp	r3, #70	; 0x46
 80073d6:	d06a      	beq.n	80074ae <_scanf_float+0x1be>
 80073d8:	2b41      	cmp	r3, #65	; 0x41
 80073da:	d1c1      	bne.n	8007360 <_scanf_float+0x70>
 80073dc:	2a01      	cmp	r2, #1
 80073de:	d1bf      	bne.n	8007360 <_scanf_float+0x70>
 80073e0:	2202      	movs	r2, #2
 80073e2:	e046      	b.n	8007472 <_scanf_float+0x182>
 80073e4:	2b65      	cmp	r3, #101	; 0x65
 80073e6:	d07a      	beq.n	80074de <_scanf_float+0x1ee>
 80073e8:	d818      	bhi.n	800741c <_scanf_float+0x12c>
 80073ea:	2b54      	cmp	r3, #84	; 0x54
 80073ec:	d066      	beq.n	80074bc <_scanf_float+0x1cc>
 80073ee:	d811      	bhi.n	8007414 <_scanf_float+0x124>
 80073f0:	2b4e      	cmp	r3, #78	; 0x4e
 80073f2:	d1b5      	bne.n	8007360 <_scanf_float+0x70>
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d146      	bne.n	8007486 <_scanf_float+0x196>
 80073f8:	f1b9 0f00 	cmp.w	r9, #0
 80073fc:	d145      	bne.n	800748a <_scanf_float+0x19a>
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007404:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007408:	d13f      	bne.n	800748a <_scanf_float+0x19a>
 800740a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800740e:	6021      	str	r1, [r4, #0]
 8007410:	2201      	movs	r2, #1
 8007412:	e02e      	b.n	8007472 <_scanf_float+0x182>
 8007414:	2b59      	cmp	r3, #89	; 0x59
 8007416:	d01e      	beq.n	8007456 <_scanf_float+0x166>
 8007418:	2b61      	cmp	r3, #97	; 0x61
 800741a:	e7de      	b.n	80073da <_scanf_float+0xea>
 800741c:	2b6e      	cmp	r3, #110	; 0x6e
 800741e:	d0e9      	beq.n	80073f4 <_scanf_float+0x104>
 8007420:	d815      	bhi.n	800744e <_scanf_float+0x15e>
 8007422:	2b66      	cmp	r3, #102	; 0x66
 8007424:	d043      	beq.n	80074ae <_scanf_float+0x1be>
 8007426:	2b69      	cmp	r3, #105	; 0x69
 8007428:	d19a      	bne.n	8007360 <_scanf_float+0x70>
 800742a:	f1bb 0f00 	cmp.w	fp, #0
 800742e:	d138      	bne.n	80074a2 <_scanf_float+0x1b2>
 8007430:	f1b9 0f00 	cmp.w	r9, #0
 8007434:	d197      	bne.n	8007366 <_scanf_float+0x76>
 8007436:	6821      	ldr	r1, [r4, #0]
 8007438:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800743c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007440:	d195      	bne.n	800736e <_scanf_float+0x7e>
 8007442:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007446:	6021      	str	r1, [r4, #0]
 8007448:	f04f 0b01 	mov.w	fp, #1
 800744c:	e011      	b.n	8007472 <_scanf_float+0x182>
 800744e:	2b74      	cmp	r3, #116	; 0x74
 8007450:	d034      	beq.n	80074bc <_scanf_float+0x1cc>
 8007452:	2b79      	cmp	r3, #121	; 0x79
 8007454:	d184      	bne.n	8007360 <_scanf_float+0x70>
 8007456:	f1bb 0f07 	cmp.w	fp, #7
 800745a:	d181      	bne.n	8007360 <_scanf_float+0x70>
 800745c:	f04f 0b08 	mov.w	fp, #8
 8007460:	e007      	b.n	8007472 <_scanf_float+0x182>
 8007462:	eb12 0f0b 	cmn.w	r2, fp
 8007466:	f47f af7b 	bne.w	8007360 <_scanf_float+0x70>
 800746a:	6821      	ldr	r1, [r4, #0]
 800746c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007470:	6021      	str	r1, [r4, #0]
 8007472:	702b      	strb	r3, [r5, #0]
 8007474:	3501      	adds	r5, #1
 8007476:	e79a      	b.n	80073ae <_scanf_float+0xbe>
 8007478:	6821      	ldr	r1, [r4, #0]
 800747a:	0608      	lsls	r0, r1, #24
 800747c:	f57f af70 	bpl.w	8007360 <_scanf_float+0x70>
 8007480:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007484:	e7f4      	b.n	8007470 <_scanf_float+0x180>
 8007486:	2a02      	cmp	r2, #2
 8007488:	d047      	beq.n	800751a <_scanf_float+0x22a>
 800748a:	f1bb 0f01 	cmp.w	fp, #1
 800748e:	d003      	beq.n	8007498 <_scanf_float+0x1a8>
 8007490:	f1bb 0f04 	cmp.w	fp, #4
 8007494:	f47f af64 	bne.w	8007360 <_scanf_float+0x70>
 8007498:	f10b 0b01 	add.w	fp, fp, #1
 800749c:	fa5f fb8b 	uxtb.w	fp, fp
 80074a0:	e7e7      	b.n	8007472 <_scanf_float+0x182>
 80074a2:	f1bb 0f03 	cmp.w	fp, #3
 80074a6:	d0f7      	beq.n	8007498 <_scanf_float+0x1a8>
 80074a8:	f1bb 0f05 	cmp.w	fp, #5
 80074ac:	e7f2      	b.n	8007494 <_scanf_float+0x1a4>
 80074ae:	f1bb 0f02 	cmp.w	fp, #2
 80074b2:	f47f af55 	bne.w	8007360 <_scanf_float+0x70>
 80074b6:	f04f 0b03 	mov.w	fp, #3
 80074ba:	e7da      	b.n	8007472 <_scanf_float+0x182>
 80074bc:	f1bb 0f06 	cmp.w	fp, #6
 80074c0:	f47f af4e 	bne.w	8007360 <_scanf_float+0x70>
 80074c4:	f04f 0b07 	mov.w	fp, #7
 80074c8:	e7d3      	b.n	8007472 <_scanf_float+0x182>
 80074ca:	6821      	ldr	r1, [r4, #0]
 80074cc:	0588      	lsls	r0, r1, #22
 80074ce:	f57f af47 	bpl.w	8007360 <_scanf_float+0x70>
 80074d2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80074d6:	6021      	str	r1, [r4, #0]
 80074d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80074dc:	e7c9      	b.n	8007472 <_scanf_float+0x182>
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80074e4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80074e8:	d006      	beq.n	80074f8 <_scanf_float+0x208>
 80074ea:	0548      	lsls	r0, r1, #21
 80074ec:	f57f af38 	bpl.w	8007360 <_scanf_float+0x70>
 80074f0:	f1b9 0f00 	cmp.w	r9, #0
 80074f4:	f43f af3b 	beq.w	800736e <_scanf_float+0x7e>
 80074f8:	0588      	lsls	r0, r1, #22
 80074fa:	bf58      	it	pl
 80074fc:	9802      	ldrpl	r0, [sp, #8]
 80074fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007502:	bf58      	it	pl
 8007504:	eba9 0000 	subpl.w	r0, r9, r0
 8007508:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800750c:	bf58      	it	pl
 800750e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007512:	6021      	str	r1, [r4, #0]
 8007514:	f04f 0900 	mov.w	r9, #0
 8007518:	e7ab      	b.n	8007472 <_scanf_float+0x182>
 800751a:	2203      	movs	r2, #3
 800751c:	e7a9      	b.n	8007472 <_scanf_float+0x182>
 800751e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007522:	9205      	str	r2, [sp, #20]
 8007524:	4631      	mov	r1, r6
 8007526:	4638      	mov	r0, r7
 8007528:	4798      	blx	r3
 800752a:	9a05      	ldr	r2, [sp, #20]
 800752c:	2800      	cmp	r0, #0
 800752e:	f43f af04 	beq.w	800733a <_scanf_float+0x4a>
 8007532:	e715      	b.n	8007360 <_scanf_float+0x70>
 8007534:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007538:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800753c:	4632      	mov	r2, r6
 800753e:	4638      	mov	r0, r7
 8007540:	4798      	blx	r3
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	3b01      	subs	r3, #1
 8007546:	6123      	str	r3, [r4, #16]
 8007548:	e715      	b.n	8007376 <_scanf_float+0x86>
 800754a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800754e:	2b06      	cmp	r3, #6
 8007550:	d80a      	bhi.n	8007568 <_scanf_float+0x278>
 8007552:	f1bb 0f02 	cmp.w	fp, #2
 8007556:	d966      	bls.n	8007626 <_scanf_float+0x336>
 8007558:	f1ab 0b03 	sub.w	fp, fp, #3
 800755c:	fa5f fb8b 	uxtb.w	fp, fp
 8007560:	eba5 0b0b 	sub.w	fp, r5, fp
 8007564:	455d      	cmp	r5, fp
 8007566:	d149      	bne.n	80075fc <_scanf_float+0x30c>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	05da      	lsls	r2, r3, #23
 800756c:	d51f      	bpl.n	80075ae <_scanf_float+0x2be>
 800756e:	055b      	lsls	r3, r3, #21
 8007570:	d466      	bmi.n	8007640 <_scanf_float+0x350>
 8007572:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	2965      	cmp	r1, #101	; 0x65
 800757a:	f103 33ff 	add.w	r3, r3, #4294967295
 800757e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007582:	6123      	str	r3, [r4, #16]
 8007584:	d00d      	beq.n	80075a2 <_scanf_float+0x2b2>
 8007586:	2945      	cmp	r1, #69	; 0x45
 8007588:	d00b      	beq.n	80075a2 <_scanf_float+0x2b2>
 800758a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800758e:	4632      	mov	r2, r6
 8007590:	4638      	mov	r0, r7
 8007592:	4798      	blx	r3
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800759a:	3b01      	subs	r3, #1
 800759c:	f1a5 0b02 	sub.w	fp, r5, #2
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075a6:	4632      	mov	r2, r6
 80075a8:	4638      	mov	r0, r7
 80075aa:	4798      	blx	r3
 80075ac:	465d      	mov	r5, fp
 80075ae:	6826      	ldr	r6, [r4, #0]
 80075b0:	f016 0610 	ands.w	r6, r6, #16
 80075b4:	d170      	bne.n	8007698 <_scanf_float+0x3a8>
 80075b6:	702e      	strb	r6, [r5, #0]
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c2:	d140      	bne.n	8007646 <_scanf_float+0x356>
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	eba9 0303 	sub.w	r3, r9, r3
 80075ca:	425a      	negs	r2, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d147      	bne.n	8007660 <_scanf_float+0x370>
 80075d0:	2200      	movs	r2, #0
 80075d2:	4638      	mov	r0, r7
 80075d4:	4641      	mov	r1, r8
 80075d6:	f000 feb3 	bl	8008340 <_strtod_r>
 80075da:	6820      	ldr	r0, [r4, #0]
 80075dc:	f8da 3000 	ldr.w	r3, [sl]
 80075e0:	f010 0f02 	tst.w	r0, #2
 80075e4:	f103 0204 	add.w	r2, r3, #4
 80075e8:	f8ca 2000 	str.w	r2, [sl]
 80075ec:	d043      	beq.n	8007676 <_scanf_float+0x386>
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	ed83 0b00 	vstr	d0, [r3]
 80075f4:	68e3      	ldr	r3, [r4, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60e3      	str	r3, [r4, #12]
 80075fa:	e6c0      	b.n	800737e <_scanf_float+0x8e>
 80075fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007600:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007604:	4632      	mov	r2, r6
 8007606:	4638      	mov	r0, r7
 8007608:	4798      	blx	r3
 800760a:	6923      	ldr	r3, [r4, #16]
 800760c:	3b01      	subs	r3, #1
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	e7a8      	b.n	8007564 <_scanf_float+0x274>
 8007612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007616:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800761a:	4632      	mov	r2, r6
 800761c:	4638      	mov	r0, r7
 800761e:	4798      	blx	r3
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	3b01      	subs	r3, #1
 8007624:	6123      	str	r3, [r4, #16]
 8007626:	4545      	cmp	r5, r8
 8007628:	d8f3      	bhi.n	8007612 <_scanf_float+0x322>
 800762a:	e6a7      	b.n	800737c <_scanf_float+0x8c>
 800762c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007630:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007634:	4632      	mov	r2, r6
 8007636:	4638      	mov	r0, r7
 8007638:	4798      	blx	r3
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	3b01      	subs	r3, #1
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	4545      	cmp	r5, r8
 8007642:	d8f3      	bhi.n	800762c <_scanf_float+0x33c>
 8007644:	e69a      	b.n	800737c <_scanf_float+0x8c>
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0c1      	beq.n	80075d0 <_scanf_float+0x2e0>
 800764c:	9904      	ldr	r1, [sp, #16]
 800764e:	230a      	movs	r3, #10
 8007650:	4632      	mov	r2, r6
 8007652:	3101      	adds	r1, #1
 8007654:	4638      	mov	r0, r7
 8007656:	f000 feff 	bl	8008458 <_strtol_r>
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	9d04      	ldr	r5, [sp, #16]
 800765e:	1ac2      	subs	r2, r0, r3
 8007660:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007664:	429d      	cmp	r5, r3
 8007666:	bf28      	it	cs
 8007668:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800766c:	490b      	ldr	r1, [pc, #44]	; (800769c <_scanf_float+0x3ac>)
 800766e:	4628      	mov	r0, r5
 8007670:	f000 f850 	bl	8007714 <siprintf>
 8007674:	e7ac      	b.n	80075d0 <_scanf_float+0x2e0>
 8007676:	f010 0004 	ands.w	r0, r0, #4
 800767a:	d1b8      	bne.n	80075ee <_scanf_float+0x2fe>
 800767c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	681d      	ldr	r5, [r3, #0]
 8007686:	d704      	bvc.n	8007692 <_scanf_float+0x3a2>
 8007688:	f000 f80a 	bl	80076a0 <nanf>
 800768c:	ed85 0a00 	vstr	s0, [r5]
 8007690:	e7b0      	b.n	80075f4 <_scanf_float+0x304>
 8007692:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007696:	e7f9      	b.n	800768c <_scanf_float+0x39c>
 8007698:	2600      	movs	r6, #0
 800769a:	e670      	b.n	800737e <_scanf_float+0x8e>
 800769c:	0800a44c 	.word	0x0800a44c

080076a0 <nanf>:
 80076a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80076a8 <nanf+0x8>
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	7fc00000 	.word	0x7fc00000

080076ac <sniprintf>:
 80076ac:	b40c      	push	{r2, r3}
 80076ae:	b530      	push	{r4, r5, lr}
 80076b0:	4b17      	ldr	r3, [pc, #92]	; (8007710 <sniprintf+0x64>)
 80076b2:	1e0c      	subs	r4, r1, #0
 80076b4:	b09d      	sub	sp, #116	; 0x74
 80076b6:	681d      	ldr	r5, [r3, #0]
 80076b8:	da08      	bge.n	80076cc <sniprintf+0x20>
 80076ba:	238b      	movs	r3, #139	; 0x8b
 80076bc:	602b      	str	r3, [r5, #0]
 80076be:	f04f 30ff 	mov.w	r0, #4294967295
 80076c2:	b01d      	add	sp, #116	; 0x74
 80076c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076c8:	b002      	add	sp, #8
 80076ca:	4770      	bx	lr
 80076cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076d4:	bf14      	ite	ne
 80076d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076da:	4623      	moveq	r3, r4
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076e4:	9002      	str	r0, [sp, #8]
 80076e6:	9006      	str	r0, [sp, #24]
 80076e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076ee:	ab21      	add	r3, sp, #132	; 0x84
 80076f0:	a902      	add	r1, sp, #8
 80076f2:	4628      	mov	r0, r5
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f002 fd09 	bl	800a10c <_svfiprintf_r>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	bfbc      	itt	lt
 80076fe:	238b      	movlt	r3, #139	; 0x8b
 8007700:	602b      	strlt	r3, [r5, #0]
 8007702:	2c00      	cmp	r4, #0
 8007704:	d0dd      	beq.n	80076c2 <sniprintf+0x16>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e7d9      	b.n	80076c2 <sniprintf+0x16>
 800770e:	bf00      	nop
 8007710:	20000020 	.word	0x20000020

08007714 <siprintf>:
 8007714:	b40e      	push	{r1, r2, r3}
 8007716:	b500      	push	{lr}
 8007718:	b09c      	sub	sp, #112	; 0x70
 800771a:	ab1d      	add	r3, sp, #116	; 0x74
 800771c:	9002      	str	r0, [sp, #8]
 800771e:	9006      	str	r0, [sp, #24]
 8007720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007724:	4809      	ldr	r0, [pc, #36]	; (800774c <siprintf+0x38>)
 8007726:	9107      	str	r1, [sp, #28]
 8007728:	9104      	str	r1, [sp, #16]
 800772a:	4909      	ldr	r1, [pc, #36]	; (8007750 <siprintf+0x3c>)
 800772c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007730:	9105      	str	r1, [sp, #20]
 8007732:	6800      	ldr	r0, [r0, #0]
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	a902      	add	r1, sp, #8
 8007738:	f002 fce8 	bl	800a10c <_svfiprintf_r>
 800773c:	9b02      	ldr	r3, [sp, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	b01c      	add	sp, #112	; 0x70
 8007744:	f85d eb04 	ldr.w	lr, [sp], #4
 8007748:	b003      	add	sp, #12
 800774a:	4770      	bx	lr
 800774c:	20000020 	.word	0x20000020
 8007750:	ffff0208 	.word	0xffff0208

08007754 <strncmp>:
 8007754:	b510      	push	{r4, lr}
 8007756:	b16a      	cbz	r2, 8007774 <strncmp+0x20>
 8007758:	3901      	subs	r1, #1
 800775a:	1884      	adds	r4, r0, r2
 800775c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007760:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <strncmp+0x1c>
 8007768:	42a0      	cmp	r0, r4
 800776a:	d001      	beq.n	8007770 <strncmp+0x1c>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1f5      	bne.n	800775c <strncmp+0x8>
 8007770:	1a98      	subs	r0, r3, r2
 8007772:	bd10      	pop	{r4, pc}
 8007774:	4610      	mov	r0, r2
 8007776:	e7fc      	b.n	8007772 <strncmp+0x1e>

08007778 <sulp>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4604      	mov	r4, r0
 800777c:	460d      	mov	r5, r1
 800777e:	4616      	mov	r6, r2
 8007780:	ec45 4b10 	vmov	d0, r4, r5
 8007784:	f002 fa7e 	bl	8009c84 <__ulp>
 8007788:	b17e      	cbz	r6, 80077aa <sulp+0x32>
 800778a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800778e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007792:	2b00      	cmp	r3, #0
 8007794:	dd09      	ble.n	80077aa <sulp+0x32>
 8007796:	051b      	lsls	r3, r3, #20
 8007798:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800779c:	2000      	movs	r0, #0
 800779e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80077a2:	ec41 0b17 	vmov	d7, r0, r1
 80077a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
 80077ac:	0000      	movs	r0, r0
	...

080077b0 <_strtod_l>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	ed2d 8b0c 	vpush	{d8-d13}
 80077b8:	4698      	mov	r8, r3
 80077ba:	b09d      	sub	sp, #116	; 0x74
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4640      	mov	r0, r8
 80077c2:	460e      	mov	r6, r1
 80077c4:	9214      	str	r2, [sp, #80]	; 0x50
 80077c6:	9318      	str	r3, [sp, #96]	; 0x60
 80077c8:	f001 ff5b 	bl	8009682 <__localeconv_l>
 80077cc:	4681      	mov	r9, r0
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	f7f8 fd36 	bl	8000240 <strlen>
 80077d4:	f04f 0a00 	mov.w	sl, #0
 80077d8:	4607      	mov	r7, r0
 80077da:	f04f 0b00 	mov.w	fp, #0
 80077de:	9617      	str	r6, [sp, #92]	; 0x5c
 80077e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	2a0d      	cmp	r2, #13
 80077e6:	d834      	bhi.n	8007852 <_strtod_l+0xa2>
 80077e8:	2a09      	cmp	r2, #9
 80077ea:	d238      	bcs.n	800785e <_strtod_l+0xae>
 80077ec:	2a00      	cmp	r2, #0
 80077ee:	d040      	beq.n	8007872 <_strtod_l+0xc2>
 80077f0:	2300      	movs	r3, #0
 80077f2:	930d      	str	r3, [sp, #52]	; 0x34
 80077f4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80077f6:	782b      	ldrb	r3, [r5, #0]
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	f040 80b3 	bne.w	8007964 <_strtod_l+0x1b4>
 80077fe:	786b      	ldrb	r3, [r5, #1]
 8007800:	2b58      	cmp	r3, #88	; 0x58
 8007802:	d001      	beq.n	8007808 <_strtod_l+0x58>
 8007804:	2b78      	cmp	r3, #120	; 0x78
 8007806:	d169      	bne.n	80078dc <_strtod_l+0x12c>
 8007808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	ab18      	add	r3, sp, #96	; 0x60
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	f8cd 8008 	str.w	r8, [sp, #8]
 8007814:	ab19      	add	r3, sp, #100	; 0x64
 8007816:	4a8f      	ldr	r2, [pc, #572]	; (8007a54 <_strtod_l+0x2a4>)
 8007818:	a917      	add	r1, sp, #92	; 0x5c
 800781a:	4620      	mov	r0, r4
 800781c:	f001 fc57 	bl	80090ce <__gethex>
 8007820:	f010 0607 	ands.w	r6, r0, #7
 8007824:	4607      	mov	r7, r0
 8007826:	d005      	beq.n	8007834 <_strtod_l+0x84>
 8007828:	2e06      	cmp	r6, #6
 800782a:	d12c      	bne.n	8007886 <_strtod_l+0xd6>
 800782c:	3501      	adds	r5, #1
 800782e:	2300      	movs	r3, #0
 8007830:	9517      	str	r5, [sp, #92]	; 0x5c
 8007832:	930d      	str	r3, [sp, #52]	; 0x34
 8007834:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007836:	2b00      	cmp	r3, #0
 8007838:	f040 855e 	bne.w	80082f8 <_strtod_l+0xb48>
 800783c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783e:	b1eb      	cbz	r3, 800787c <_strtod_l+0xcc>
 8007840:	ec4b ab17 	vmov	d7, sl, fp
 8007844:	eeb1 0b47 	vneg.f64	d0, d7
 8007848:	b01d      	add	sp, #116	; 0x74
 800784a:	ecbd 8b0c 	vpop	{d8-d13}
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	2a2b      	cmp	r2, #43	; 0x2b
 8007854:	d015      	beq.n	8007882 <_strtod_l+0xd2>
 8007856:	2a2d      	cmp	r2, #45	; 0x2d
 8007858:	d004      	beq.n	8007864 <_strtod_l+0xb4>
 800785a:	2a20      	cmp	r2, #32
 800785c:	d1c8      	bne.n	80077f0 <_strtod_l+0x40>
 800785e:	3301      	adds	r3, #1
 8007860:	9317      	str	r3, [sp, #92]	; 0x5c
 8007862:	e7bd      	b.n	80077e0 <_strtod_l+0x30>
 8007864:	2201      	movs	r2, #1
 8007866:	920d      	str	r2, [sp, #52]	; 0x34
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	9217      	str	r2, [sp, #92]	; 0x5c
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1c0      	bne.n	80077f4 <_strtod_l+0x44>
 8007872:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007874:	9617      	str	r6, [sp, #92]	; 0x5c
 8007876:	2b00      	cmp	r3, #0
 8007878:	f040 853c 	bne.w	80082f4 <_strtod_l+0xb44>
 800787c:	ec4b ab10 	vmov	d0, sl, fp
 8007880:	e7e2      	b.n	8007848 <_strtod_l+0x98>
 8007882:	2200      	movs	r2, #0
 8007884:	e7ef      	b.n	8007866 <_strtod_l+0xb6>
 8007886:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007888:	b13a      	cbz	r2, 800789a <_strtod_l+0xea>
 800788a:	2135      	movs	r1, #53	; 0x35
 800788c:	a81a      	add	r0, sp, #104	; 0x68
 800788e:	f002 faf2 	bl	8009e76 <__copybits>
 8007892:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007894:	4620      	mov	r0, r4
 8007896:	f001 ff5e 	bl	8009756 <_Bfree>
 800789a:	3e01      	subs	r6, #1
 800789c:	2e04      	cmp	r6, #4
 800789e:	d806      	bhi.n	80078ae <_strtod_l+0xfe>
 80078a0:	e8df f006 	tbb	[pc, r6]
 80078a4:	1714030a 	.word	0x1714030a
 80078a8:	0a          	.byte	0x0a
 80078a9:	00          	.byte	0x00
 80078aa:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80078ae:	073b      	lsls	r3, r7, #28
 80078b0:	d5c0      	bpl.n	8007834 <_strtod_l+0x84>
 80078b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80078b6:	e7bd      	b.n	8007834 <_strtod_l+0x84>
 80078b8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80078bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80078be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80078c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078ca:	e7f0      	b.n	80078ae <_strtod_l+0xfe>
 80078cc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8007a58 <_strtod_l+0x2a8>
 80078d0:	e7ed      	b.n	80078ae <_strtod_l+0xfe>
 80078d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80078d6:	f04f 3aff 	mov.w	sl, #4294967295
 80078da:	e7e8      	b.n	80078ae <_strtod_l+0xfe>
 80078dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80078e2:	785b      	ldrb	r3, [r3, #1]
 80078e4:	2b30      	cmp	r3, #48	; 0x30
 80078e6:	d0f9      	beq.n	80078dc <_strtod_l+0x12c>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0a3      	beq.n	8007834 <_strtod_l+0x84>
 80078ec:	2301      	movs	r3, #1
 80078ee:	930a      	str	r3, [sp, #40]	; 0x28
 80078f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078f2:	930c      	str	r3, [sp, #48]	; 0x30
 80078f4:	2300      	movs	r3, #0
 80078f6:	9306      	str	r3, [sp, #24]
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	461d      	mov	r5, r3
 80078fc:	220a      	movs	r2, #10
 80078fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007900:	f890 8000 	ldrb.w	r8, [r0]
 8007904:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8007908:	b2d9      	uxtb	r1, r3
 800790a:	2909      	cmp	r1, #9
 800790c:	d92c      	bls.n	8007968 <_strtod_l+0x1b8>
 800790e:	463a      	mov	r2, r7
 8007910:	f8d9 1000 	ldr.w	r1, [r9]
 8007914:	f7ff ff1e 	bl	8007754 <strncmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	d035      	beq.n	8007988 <_strtod_l+0x1d8>
 800791c:	2000      	movs	r0, #0
 800791e:	4642      	mov	r2, r8
 8007920:	462b      	mov	r3, r5
 8007922:	4601      	mov	r1, r0
 8007924:	9004      	str	r0, [sp, #16]
 8007926:	2a65      	cmp	r2, #101	; 0x65
 8007928:	d001      	beq.n	800792e <_strtod_l+0x17e>
 800792a:	2a45      	cmp	r2, #69	; 0x45
 800792c:	d117      	bne.n	800795e <_strtod_l+0x1ae>
 800792e:	b923      	cbnz	r3, 800793a <_strtod_l+0x18a>
 8007930:	b910      	cbnz	r0, 8007938 <_strtod_l+0x188>
 8007932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d09c      	beq.n	8007872 <_strtod_l+0xc2>
 8007938:	2300      	movs	r3, #0
 800793a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800793c:	1c72      	adds	r2, r6, #1
 800793e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007940:	7872      	ldrb	r2, [r6, #1]
 8007942:	2a2b      	cmp	r2, #43	; 0x2b
 8007944:	f000 8082 	beq.w	8007a4c <_strtod_l+0x29c>
 8007948:	2a2d      	cmp	r2, #45	; 0x2d
 800794a:	d079      	beq.n	8007a40 <_strtod_l+0x290>
 800794c:	f04f 0e00 	mov.w	lr, #0
 8007950:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007954:	f1bc 0f09 	cmp.w	ip, #9
 8007958:	f240 8086 	bls.w	8007a68 <_strtod_l+0x2b8>
 800795c:	9617      	str	r6, [sp, #92]	; 0x5c
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	e0a8      	b.n	8007ab6 <_strtod_l+0x306>
 8007964:	2300      	movs	r3, #0
 8007966:	e7c2      	b.n	80078ee <_strtod_l+0x13e>
 8007968:	2d08      	cmp	r5, #8
 800796a:	bfd5      	itete	le
 800796c:	9908      	ldrle	r1, [sp, #32]
 800796e:	9906      	ldrgt	r1, [sp, #24]
 8007970:	fb02 3301 	mlale	r3, r2, r1, r3
 8007974:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007978:	f100 0001 	add.w	r0, r0, #1
 800797c:	bfd4      	ite	le
 800797e:	9308      	strle	r3, [sp, #32]
 8007980:	9306      	strgt	r3, [sp, #24]
 8007982:	3501      	adds	r5, #1
 8007984:	9017      	str	r0, [sp, #92]	; 0x5c
 8007986:	e7ba      	b.n	80078fe <_strtod_l+0x14e>
 8007988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800798a:	19da      	adds	r2, r3, r7
 800798c:	9217      	str	r2, [sp, #92]	; 0x5c
 800798e:	5dda      	ldrb	r2, [r3, r7]
 8007990:	2d00      	cmp	r5, #0
 8007992:	d038      	beq.n	8007a06 <_strtod_l+0x256>
 8007994:	4601      	mov	r1, r0
 8007996:	462b      	mov	r3, r5
 8007998:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800799c:	2f09      	cmp	r7, #9
 800799e:	d913      	bls.n	80079c8 <_strtod_l+0x218>
 80079a0:	2701      	movs	r7, #1
 80079a2:	9704      	str	r7, [sp, #16]
 80079a4:	e7bf      	b.n	8007926 <_strtod_l+0x176>
 80079a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80079ac:	785a      	ldrb	r2, [r3, #1]
 80079ae:	3001      	adds	r0, #1
 80079b0:	2a30      	cmp	r2, #48	; 0x30
 80079b2:	d0f8      	beq.n	80079a6 <_strtod_l+0x1f6>
 80079b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	f200 84a2 	bhi.w	8008302 <_strtod_l+0xb52>
 80079be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079c0:	930c      	str	r3, [sp, #48]	; 0x30
 80079c2:	4601      	mov	r1, r0
 80079c4:	2000      	movs	r0, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 80079cc:	f100 0701 	add.w	r7, r0, #1
 80079d0:	d013      	beq.n	80079fa <_strtod_l+0x24a>
 80079d2:	4439      	add	r1, r7
 80079d4:	eb00 0e03 	add.w	lr, r0, r3
 80079d8:	461f      	mov	r7, r3
 80079da:	f04f 0c0a 	mov.w	ip, #10
 80079de:	45be      	cmp	lr, r7
 80079e0:	d113      	bne.n	8007a0a <_strtod_l+0x25a>
 80079e2:	181f      	adds	r7, r3, r0
 80079e4:	2f08      	cmp	r7, #8
 80079e6:	f103 0301 	add.w	r3, r3, #1
 80079ea:	4403      	add	r3, r0
 80079ec:	dc1d      	bgt.n	8007a2a <_strtod_l+0x27a>
 80079ee:	9a08      	ldr	r2, [sp, #32]
 80079f0:	200a      	movs	r0, #10
 80079f2:	fb00 8202 	mla	r2, r0, r2, r8
 80079f6:	9208      	str	r2, [sp, #32]
 80079f8:	2700      	movs	r7, #0
 80079fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80079fc:	1c50      	adds	r0, r2, #1
 80079fe:	9017      	str	r0, [sp, #92]	; 0x5c
 8007a00:	7852      	ldrb	r2, [r2, #1]
 8007a02:	4638      	mov	r0, r7
 8007a04:	e7c8      	b.n	8007998 <_strtod_l+0x1e8>
 8007a06:	4628      	mov	r0, r5
 8007a08:	e7d2      	b.n	80079b0 <_strtod_l+0x200>
 8007a0a:	2f08      	cmp	r7, #8
 8007a0c:	f107 0701 	add.w	r7, r7, #1
 8007a10:	dc04      	bgt.n	8007a1c <_strtod_l+0x26c>
 8007a12:	9a08      	ldr	r2, [sp, #32]
 8007a14:	fb0c f202 	mul.w	r2, ip, r2
 8007a18:	9208      	str	r2, [sp, #32]
 8007a1a:	e7e0      	b.n	80079de <_strtod_l+0x22e>
 8007a1c:	2f10      	cmp	r7, #16
 8007a1e:	bfde      	ittt	le
 8007a20:	9a06      	ldrle	r2, [sp, #24]
 8007a22:	fb0c f202 	mulle.w	r2, ip, r2
 8007a26:	9206      	strle	r2, [sp, #24]
 8007a28:	e7d9      	b.n	80079de <_strtod_l+0x22e>
 8007a2a:	2b10      	cmp	r3, #16
 8007a2c:	bfdf      	itttt	le
 8007a2e:	9a06      	ldrle	r2, [sp, #24]
 8007a30:	200a      	movle	r0, #10
 8007a32:	fb00 8202 	mlale	r2, r0, r2, r8
 8007a36:	9206      	strle	r2, [sp, #24]
 8007a38:	e7de      	b.n	80079f8 <_strtod_l+0x248>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	e777      	b.n	8007930 <_strtod_l+0x180>
 8007a40:	f04f 0e01 	mov.w	lr, #1
 8007a44:	1cb2      	adds	r2, r6, #2
 8007a46:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a48:	78b2      	ldrb	r2, [r6, #2]
 8007a4a:	e781      	b.n	8007950 <_strtod_l+0x1a0>
 8007a4c:	f04f 0e00 	mov.w	lr, #0
 8007a50:	e7f8      	b.n	8007a44 <_strtod_l+0x294>
 8007a52:	bf00      	nop
 8007a54:	0800a454 	.word	0x0800a454
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a5e:	f102 0c01 	add.w	ip, r2, #1
 8007a62:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8007a66:	7852      	ldrb	r2, [r2, #1]
 8007a68:	2a30      	cmp	r2, #48	; 0x30
 8007a6a:	d0f7      	beq.n	8007a5c <_strtod_l+0x2ac>
 8007a6c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8007a70:	f1bc 0f08 	cmp.w	ip, #8
 8007a74:	f63f af73 	bhi.w	800795e <_strtod_l+0x1ae>
 8007a78:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8007a7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a7e:	920e      	str	r2, [sp, #56]	; 0x38
 8007a80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a82:	f102 0c01 	add.w	ip, r2, #1
 8007a86:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8007a8a:	7852      	ldrb	r2, [r2, #1]
 8007a8c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8007a90:	f1b9 0f09 	cmp.w	r9, #9
 8007a94:	d939      	bls.n	8007b0a <_strtod_l+0x35a>
 8007a96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007a98:	ebac 0c07 	sub.w	ip, ip, r7
 8007a9c:	f1bc 0f08 	cmp.w	ip, #8
 8007aa0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8007aa4:	dc37      	bgt.n	8007b16 <_strtod_l+0x366>
 8007aa6:	45e0      	cmp	r8, ip
 8007aa8:	bfa8      	it	ge
 8007aaa:	46e0      	movge	r8, ip
 8007aac:	f1be 0f00 	cmp.w	lr, #0
 8007ab0:	d001      	beq.n	8007ab6 <_strtod_l+0x306>
 8007ab2:	f1c8 0800 	rsb	r8, r8, #0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d151      	bne.n	8007b5e <_strtod_l+0x3ae>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	f47f aeba 	bne.w	8007834 <_strtod_l+0x84>
 8007ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f47f aeb6 	bne.w	8007834 <_strtod_l+0x84>
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f47f aed1 	bne.w	8007872 <_strtod_l+0xc2>
 8007ad0:	2a4e      	cmp	r2, #78	; 0x4e
 8007ad2:	d027      	beq.n	8007b24 <_strtod_l+0x374>
 8007ad4:	dc21      	bgt.n	8007b1a <_strtod_l+0x36a>
 8007ad6:	2a49      	cmp	r2, #73	; 0x49
 8007ad8:	f47f aecb 	bne.w	8007872 <_strtod_l+0xc2>
 8007adc:	499a      	ldr	r1, [pc, #616]	; (8007d48 <_strtod_l+0x598>)
 8007ade:	a817      	add	r0, sp, #92	; 0x5c
 8007ae0:	f001 fd28 	bl	8009534 <__match>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f43f aec4 	beq.w	8007872 <_strtod_l+0xc2>
 8007aea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aec:	4997      	ldr	r1, [pc, #604]	; (8007d4c <_strtod_l+0x59c>)
 8007aee:	3b01      	subs	r3, #1
 8007af0:	a817      	add	r0, sp, #92	; 0x5c
 8007af2:	9317      	str	r3, [sp, #92]	; 0x5c
 8007af4:	f001 fd1e 	bl	8009534 <__match>
 8007af8:	b910      	cbnz	r0, 8007b00 <_strtod_l+0x350>
 8007afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007afc:	3301      	adds	r3, #1
 8007afe:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b00:	f8df b260 	ldr.w	fp, [pc, #608]	; 8007d64 <_strtod_l+0x5b4>
 8007b04:	f04f 0a00 	mov.w	sl, #0
 8007b08:	e694      	b.n	8007834 <_strtod_l+0x84>
 8007b0a:	270a      	movs	r7, #10
 8007b0c:	fb07 2808 	mla	r8, r7, r8, r2
 8007b10:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8007b14:	e7b4      	b.n	8007a80 <_strtod_l+0x2d0>
 8007b16:	46e0      	mov	r8, ip
 8007b18:	e7c8      	b.n	8007aac <_strtod_l+0x2fc>
 8007b1a:	2a69      	cmp	r2, #105	; 0x69
 8007b1c:	d0de      	beq.n	8007adc <_strtod_l+0x32c>
 8007b1e:	2a6e      	cmp	r2, #110	; 0x6e
 8007b20:	f47f aea7 	bne.w	8007872 <_strtod_l+0xc2>
 8007b24:	498a      	ldr	r1, [pc, #552]	; (8007d50 <_strtod_l+0x5a0>)
 8007b26:	a817      	add	r0, sp, #92	; 0x5c
 8007b28:	f001 fd04 	bl	8009534 <__match>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f43f aea0 	beq.w	8007872 <_strtod_l+0xc2>
 8007b32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b28      	cmp	r3, #40	; 0x28
 8007b38:	d10e      	bne.n	8007b58 <_strtod_l+0x3a8>
 8007b3a:	aa1a      	add	r2, sp, #104	; 0x68
 8007b3c:	4985      	ldr	r1, [pc, #532]	; (8007d54 <_strtod_l+0x5a4>)
 8007b3e:	a817      	add	r0, sp, #92	; 0x5c
 8007b40:	f001 fd0c 	bl	800955c <__hexnan>
 8007b44:	2805      	cmp	r0, #5
 8007b46:	d107      	bne.n	8007b58 <_strtod_l+0x3a8>
 8007b48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007b4e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007b52:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007b56:	e66d      	b.n	8007834 <_strtod_l+0x84>
 8007b58:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8007d68 <_strtod_l+0x5b8>
 8007b5c:	e7d2      	b.n	8007b04 <_strtod_l+0x354>
 8007b5e:	eddd 7a08 	vldr	s15, [sp, #32]
 8007b62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007b66:	eba8 0201 	sub.w	r2, r8, r1
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	bf08      	it	eq
 8007b6e:	461d      	moveq	r5, r3
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	9204      	str	r2, [sp, #16]
 8007b74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b78:	461a      	mov	r2, r3
 8007b7a:	bfa8      	it	ge
 8007b7c:	2210      	movge	r2, #16
 8007b7e:	2b09      	cmp	r3, #9
 8007b80:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b84:	dc14      	bgt.n	8007bb0 <_strtod_l+0x400>
 8007b86:	9904      	ldr	r1, [sp, #16]
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	f43f ae53 	beq.w	8007834 <_strtod_l+0x84>
 8007b8e:	9904      	ldr	r1, [sp, #16]
 8007b90:	dd72      	ble.n	8007c78 <_strtod_l+0x4c8>
 8007b92:	2916      	cmp	r1, #22
 8007b94:	dc5a      	bgt.n	8007c4c <_strtod_l+0x49c>
 8007b96:	4970      	ldr	r1, [pc, #448]	; (8007d58 <_strtod_l+0x5a8>)
 8007b98:	9b04      	ldr	r3, [sp, #16]
 8007b9a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b9e:	ed91 7b00 	vldr	d7, [r1]
 8007ba2:	ec4b ab16 	vmov	d6, sl, fp
 8007ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007baa:	ec5b ab17 	vmov	sl, fp, d7
 8007bae:	e641      	b.n	8007834 <_strtod_l+0x84>
 8007bb0:	4969      	ldr	r1, [pc, #420]	; (8007d58 <_strtod_l+0x5a8>)
 8007bb2:	eddd 7a06 	vldr	s15, [sp, #24]
 8007bb6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007bba:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007bbe:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007bc2:	2b0f      	cmp	r3, #15
 8007bc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007bc8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007bcc:	ec5b ab17 	vmov	sl, fp, d7
 8007bd0:	ddd9      	ble.n	8007b86 <_strtod_l+0x3d6>
 8007bd2:	9904      	ldr	r1, [sp, #16]
 8007bd4:	1a9a      	subs	r2, r3, r2
 8007bd6:	440a      	add	r2, r1
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	f340 8096 	ble.w	8007d0a <_strtod_l+0x55a>
 8007bde:	f012 000f 	ands.w	r0, r2, #15
 8007be2:	d00a      	beq.n	8007bfa <_strtod_l+0x44a>
 8007be4:	495c      	ldr	r1, [pc, #368]	; (8007d58 <_strtod_l+0x5a8>)
 8007be6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007bea:	ed91 7b00 	vldr	d7, [r1]
 8007bee:	ec4b ab16 	vmov	d6, sl, fp
 8007bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bf6:	ec5b ab17 	vmov	sl, fp, d7
 8007bfa:	f032 020f 	bics.w	r2, r2, #15
 8007bfe:	d072      	beq.n	8007ce6 <_strtod_l+0x536>
 8007c00:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007c04:	dd45      	ble.n	8007c92 <_strtod_l+0x4e2>
 8007c06:	2500      	movs	r5, #0
 8007c08:	46a8      	mov	r8, r5
 8007c0a:	9506      	str	r5, [sp, #24]
 8007c0c:	46a9      	mov	r9, r5
 8007c0e:	2322      	movs	r3, #34	; 0x22
 8007c10:	f8df b150 	ldr.w	fp, [pc, #336]	; 8007d64 <_strtod_l+0x5b4>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	f04f 0a00 	mov.w	sl, #0
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f ae09 	beq.w	8007834 <_strtod_l+0x84>
 8007c22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c24:	4620      	mov	r0, r4
 8007c26:	f001 fd96 	bl	8009756 <_Bfree>
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 fd92 	bl	8009756 <_Bfree>
 8007c32:	4641      	mov	r1, r8
 8007c34:	4620      	mov	r0, r4
 8007c36:	f001 fd8e 	bl	8009756 <_Bfree>
 8007c3a:	9906      	ldr	r1, [sp, #24]
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f001 fd8a 	bl	8009756 <_Bfree>
 8007c42:	4629      	mov	r1, r5
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 fd86 	bl	8009756 <_Bfree>
 8007c4a:	e5f3      	b.n	8007834 <_strtod_l+0x84>
 8007c4c:	9804      	ldr	r0, [sp, #16]
 8007c4e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007c52:	4281      	cmp	r1, r0
 8007c54:	dbbd      	blt.n	8007bd2 <_strtod_l+0x422>
 8007c56:	4a40      	ldr	r2, [pc, #256]	; (8007d58 <_strtod_l+0x5a8>)
 8007c58:	f1c3 030f 	rsb	r3, r3, #15
 8007c5c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007c60:	ed91 7b00 	vldr	d7, [r1]
 8007c64:	ec4b ab16 	vmov	d6, sl, fp
 8007c68:	1ac3      	subs	r3, r0, r3
 8007c6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007c72:	ed92 6b00 	vldr	d6, [r2]
 8007c76:	e796      	b.n	8007ba6 <_strtod_l+0x3f6>
 8007c78:	3116      	adds	r1, #22
 8007c7a:	dbaa      	blt.n	8007bd2 <_strtod_l+0x422>
 8007c7c:	4936      	ldr	r1, [pc, #216]	; (8007d58 <_strtod_l+0x5a8>)
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8007c84:	ed91 7b00 	vldr	d7, [r1]
 8007c88:	ec4b ab16 	vmov	d6, sl, fp
 8007c8c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007c90:	e78b      	b.n	8007baa <_strtod_l+0x3fa>
 8007c92:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007c96:	2000      	movs	r0, #0
 8007c98:	4e30      	ldr	r6, [pc, #192]	; (8007d5c <_strtod_l+0x5ac>)
 8007c9a:	1112      	asrs	r2, r2, #4
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	2a01      	cmp	r2, #1
 8007ca0:	dc23      	bgt.n	8007cea <_strtod_l+0x53a>
 8007ca2:	b108      	cbz	r0, 8007ca8 <_strtod_l+0x4f8>
 8007ca4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007ca8:	4a2c      	ldr	r2, [pc, #176]	; (8007d5c <_strtod_l+0x5ac>)
 8007caa:	482d      	ldr	r0, [pc, #180]	; (8007d60 <_strtod_l+0x5b0>)
 8007cac:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007cb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007cb4:	ed91 7b00 	vldr	d7, [r1]
 8007cb8:	ec4b ab16 	vmov	d6, sl, fp
 8007cbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cc0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007cc4:	9907      	ldr	r1, [sp, #28]
 8007cc6:	4a27      	ldr	r2, [pc, #156]	; (8007d64 <_strtod_l+0x5b4>)
 8007cc8:	400a      	ands	r2, r1
 8007cca:	4282      	cmp	r2, r0
 8007ccc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007cd0:	d899      	bhi.n	8007c06 <_strtod_l+0x456>
 8007cd2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007cd6:	4282      	cmp	r2, r0
 8007cd8:	bf86      	itte	hi
 8007cda:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8007d6c <_strtod_l+0x5bc>
 8007cde:	f04f 3aff 	movhi.w	sl, #4294967295
 8007ce2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8007ce6:	2700      	movs	r7, #0
 8007ce8:	e070      	b.n	8007dcc <_strtod_l+0x61c>
 8007cea:	07d7      	lsls	r7, r2, #31
 8007cec:	d50a      	bpl.n	8007d04 <_strtod_l+0x554>
 8007cee:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8007cf2:	ed90 7b00 	vldr	d7, [r0]
 8007cf6:	ed9d 6b06 	vldr	d6, [sp, #24]
 8007cfa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d02:	2001      	movs	r0, #1
 8007d04:	3101      	adds	r1, #1
 8007d06:	1052      	asrs	r2, r2, #1
 8007d08:	e7c9      	b.n	8007c9e <_strtod_l+0x4ee>
 8007d0a:	d0ec      	beq.n	8007ce6 <_strtod_l+0x536>
 8007d0c:	4252      	negs	r2, r2
 8007d0e:	f012 000f 	ands.w	r0, r2, #15
 8007d12:	d00a      	beq.n	8007d2a <_strtod_l+0x57a>
 8007d14:	4910      	ldr	r1, [pc, #64]	; (8007d58 <_strtod_l+0x5a8>)
 8007d16:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007d1a:	ed91 7b00 	vldr	d7, [r1]
 8007d1e:	ec4b ab16 	vmov	d6, sl, fp
 8007d22:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007d26:	ec5b ab17 	vmov	sl, fp, d7
 8007d2a:	1112      	asrs	r2, r2, #4
 8007d2c:	d0db      	beq.n	8007ce6 <_strtod_l+0x536>
 8007d2e:	2a1f      	cmp	r2, #31
 8007d30:	dd1e      	ble.n	8007d70 <_strtod_l+0x5c0>
 8007d32:	2500      	movs	r5, #0
 8007d34:	46a8      	mov	r8, r5
 8007d36:	9506      	str	r5, [sp, #24]
 8007d38:	46a9      	mov	r9, r5
 8007d3a:	2322      	movs	r3, #34	; 0x22
 8007d3c:	f04f 0a00 	mov.w	sl, #0
 8007d40:	f04f 0b00 	mov.w	fp, #0
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	e768      	b.n	8007c1a <_strtod_l+0x46a>
 8007d48:	0800a41d 	.word	0x0800a41d
 8007d4c:	0800a4ab 	.word	0x0800a4ab
 8007d50:	0800a425 	.word	0x0800a425
 8007d54:	0800a468 	.word	0x0800a468
 8007d58:	0800a550 	.word	0x0800a550
 8007d5c:	0800a528 	.word	0x0800a528
 8007d60:	7ca00000 	.word	0x7ca00000
 8007d64:	7ff00000 	.word	0x7ff00000
 8007d68:	fff80000 	.word	0xfff80000
 8007d6c:	7fefffff 	.word	0x7fefffff
 8007d70:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8007d74:	f012 0710 	ands.w	r7, r2, #16
 8007d78:	49ab      	ldr	r1, [pc, #684]	; (8008028 <_strtod_l+0x878>)
 8007d7a:	bf18      	it	ne
 8007d7c:	276a      	movne	r7, #106	; 0x6a
 8007d7e:	2000      	movs	r0, #0
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	f300 8113 	bgt.w	8007fac <_strtod_l+0x7fc>
 8007d86:	b108      	cbz	r0, 8007d8c <_strtod_l+0x5dc>
 8007d88:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8007d8c:	b1bf      	cbz	r7, 8007dbe <_strtod_l+0x60e>
 8007d8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d92:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	4659      	mov	r1, fp
 8007d9a:	dd10      	ble.n	8007dbe <_strtod_l+0x60e>
 8007d9c:	2a1f      	cmp	r2, #31
 8007d9e:	f340 8113 	ble.w	8007fc8 <_strtod_l+0x818>
 8007da2:	2a34      	cmp	r2, #52	; 0x34
 8007da4:	bfde      	ittt	le
 8007da6:	3a20      	suble	r2, #32
 8007da8:	f04f 30ff 	movle.w	r0, #4294967295
 8007dac:	fa00 f202 	lslle.w	r2, r0, r2
 8007db0:	f04f 0a00 	mov.w	sl, #0
 8007db4:	bfcc      	ite	gt
 8007db6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007dba:	ea02 0b01 	andle.w	fp, r2, r1
 8007dbe:	ec4b ab17 	vmov	d7, sl, fp
 8007dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	d0b2      	beq.n	8007d32 <_strtod_l+0x582>
 8007dcc:	9a08      	ldr	r2, [sp, #32]
 8007dce:	9200      	str	r2, [sp, #0]
 8007dd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f001 fd10 	bl	80097fa <__s2b>
 8007dda:	9006      	str	r0, [sp, #24]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f af12 	beq.w	8007c06 <_strtod_l+0x456>
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	f1c3 0300 	rsb	r3, r3, #0
 8007dec:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8008010 <_strtod_l+0x860>
 8007df0:	bfa8      	it	ge
 8007df2:	2300      	movge	r3, #0
 8007df4:	ed9f ab88 	vldr	d10, [pc, #544]	; 8008018 <_strtod_l+0x868>
 8007df8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8008020 <_strtod_l+0x870>
 8007dfc:	930e      	str	r3, [sp, #56]	; 0x38
 8007dfe:	2500      	movs	r5, #0
 8007e00:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e04:	9310      	str	r3, [sp, #64]	; 0x40
 8007e06:	46a8      	mov	r8, r5
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	f001 fc6e 	bl	80096ee <_Balloc>
 8007e12:	4681      	mov	r9, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f aefa 	beq.w	8007c0e <_strtod_l+0x45e>
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	691a      	ldr	r2, [r3, #16]
 8007e1e:	3202      	adds	r2, #2
 8007e20:	f103 010c 	add.w	r1, r3, #12
 8007e24:	0092      	lsls	r2, r2, #2
 8007e26:	300c      	adds	r0, #12
 8007e28:	f001 fc56 	bl	80096d8 <memcpy>
 8007e2c:	aa1a      	add	r2, sp, #104	; 0x68
 8007e2e:	a919      	add	r1, sp, #100	; 0x64
 8007e30:	ec4b ab10 	vmov	d0, sl, fp
 8007e34:	4620      	mov	r0, r4
 8007e36:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007e3a:	f001 ff99 	bl	8009d70 <__d2b>
 8007e3e:	9018      	str	r0, [sp, #96]	; 0x60
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f43f aee4 	beq.w	8007c0e <_strtod_l+0x45e>
 8007e46:	2101      	movs	r1, #1
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f001 fd62 	bl	8009912 <__i2b>
 8007e4e:	4680      	mov	r8, r0
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f43f aedc 	beq.w	8007c0e <_strtod_l+0x45e>
 8007e56:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007e58:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	bfb1      	iteee	lt
 8007e5e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8007e60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007e62:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8007e64:	18f3      	addge	r3, r6, r3
 8007e66:	bfba      	itte	lt
 8007e68:	1b98      	sublt	r0, r3, r6
 8007e6a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e6c:	9308      	strge	r3, [sp, #32]
 8007e6e:	eba6 0607 	sub.w	r6, r6, r7
 8007e72:	bfb8      	it	lt
 8007e74:	9308      	strlt	r3, [sp, #32]
 8007e76:	4416      	add	r6, r2
 8007e78:	4b6c      	ldr	r3, [pc, #432]	; (800802c <_strtod_l+0x87c>)
 8007e7a:	3e01      	subs	r6, #1
 8007e7c:	429e      	cmp	r6, r3
 8007e7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007e82:	f280 80b4 	bge.w	8007fee <_strtod_l+0x83e>
 8007e86:	1b9b      	subs	r3, r3, r6
 8007e88:	2b1f      	cmp	r3, #31
 8007e8a:	eba2 0203 	sub.w	r2, r2, r3
 8007e8e:	f04f 0101 	mov.w	r1, #1
 8007e92:	f300 80a0 	bgt.w	8007fd6 <_strtod_l+0x826>
 8007e96:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	4402      	add	r2, r0
 8007ea6:	18be      	adds	r6, r7, r2
 8007ea8:	9a08      	ldr	r2, [sp, #32]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	bfa8      	it	ge
 8007eae:	461a      	movge	r2, r3
 8007eb0:	42b2      	cmp	r2, r6
 8007eb2:	bfa8      	it	ge
 8007eb4:	4632      	movge	r2, r6
 8007eb6:	2a00      	cmp	r2, #0
 8007eb8:	dd04      	ble.n	8007ec4 <_strtod_l+0x714>
 8007eba:	9908      	ldr	r1, [sp, #32]
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	1ab6      	subs	r6, r6, r2
 8007ec0:	1a8a      	subs	r2, r1, r2
 8007ec2:	9208      	str	r2, [sp, #32]
 8007ec4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ec6:	b1c2      	cbz	r2, 8007efa <_strtod_l+0x74a>
 8007ec8:	4641      	mov	r1, r8
 8007eca:	4620      	mov	r0, r4
 8007ecc:	9315      	str	r3, [sp, #84]	; 0x54
 8007ece:	f001 fdbf 	bl	8009a50 <__pow5mult>
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	f43f ae9a 	beq.w	8007c0e <_strtod_l+0x45e>
 8007eda:	4601      	mov	r1, r0
 8007edc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 fd20 	bl	8009924 <__multiply>
 8007ee4:	900c      	str	r0, [sp, #48]	; 0x30
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	f43f ae91 	beq.w	8007c0e <_strtod_l+0x45e>
 8007eec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f001 fc31 	bl	8009756 <_Bfree>
 8007ef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ef8:	9218      	str	r2, [sp, #96]	; 0x60
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	dc7c      	bgt.n	8007ff8 <_strtod_l+0x848>
 8007efe:	9b04      	ldr	r3, [sp, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd08      	ble.n	8007f16 <_strtod_l+0x766>
 8007f04:	4649      	mov	r1, r9
 8007f06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f001 fda1 	bl	8009a50 <__pow5mult>
 8007f0e:	4681      	mov	r9, r0
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f43f ae7c 	beq.w	8007c0e <_strtod_l+0x45e>
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	dd08      	ble.n	8007f2c <_strtod_l+0x77c>
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f001 fde4 	bl	8009aec <__lshift>
 8007f24:	4681      	mov	r9, r0
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f43f ae71 	beq.w	8007c0e <_strtod_l+0x45e>
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd08      	ble.n	8007f44 <_strtod_l+0x794>
 8007f32:	4641      	mov	r1, r8
 8007f34:	461a      	mov	r2, r3
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fdd8 	bl	8009aec <__lshift>
 8007f3c:	4680      	mov	r8, r0
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f43f ae65 	beq.w	8007c0e <_strtod_l+0x45e>
 8007f44:	464a      	mov	r2, r9
 8007f46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f001 fe3d 	bl	8009bc8 <__mdiff>
 8007f4e:	4605      	mov	r5, r0
 8007f50:	2800      	cmp	r0, #0
 8007f52:	f43f ae5c 	beq.w	8007c0e <_strtod_l+0x45e>
 8007f56:	68c3      	ldr	r3, [r0, #12]
 8007f58:	930c      	str	r3, [sp, #48]	; 0x30
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60c3      	str	r3, [r0, #12]
 8007f5e:	4641      	mov	r1, r8
 8007f60:	f001 fe18 	bl	8009b94 <__mcmp>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	da63      	bge.n	8008030 <_strtod_l+0x880>
 8007f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f6a:	b9e3      	cbnz	r3, 8007fa6 <_strtod_l+0x7f6>
 8007f6c:	f1ba 0f00 	cmp.w	sl, #0
 8007f70:	d119      	bne.n	8007fa6 <_strtod_l+0x7f6>
 8007f72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f76:	b9b3      	cbnz	r3, 8007fa6 <_strtod_l+0x7f6>
 8007f78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f7c:	0d1b      	lsrs	r3, r3, #20
 8007f7e:	051b      	lsls	r3, r3, #20
 8007f80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007f84:	d90f      	bls.n	8007fa6 <_strtod_l+0x7f6>
 8007f86:	696b      	ldr	r3, [r5, #20]
 8007f88:	b913      	cbnz	r3, 8007f90 <_strtod_l+0x7e0>
 8007f8a:	692b      	ldr	r3, [r5, #16]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	dd0a      	ble.n	8007fa6 <_strtod_l+0x7f6>
 8007f90:	4629      	mov	r1, r5
 8007f92:	2201      	movs	r2, #1
 8007f94:	4620      	mov	r0, r4
 8007f96:	f001 fda9 	bl	8009aec <__lshift>
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	f001 fdf9 	bl	8009b94 <__mcmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	dc75      	bgt.n	8008092 <_strtod_l+0x8e2>
 8007fa6:	2f00      	cmp	r7, #0
 8007fa8:	d17f      	bne.n	80080aa <_strtod_l+0x8fa>
 8007faa:	e63a      	b.n	8007c22 <_strtod_l+0x472>
 8007fac:	07d6      	lsls	r6, r2, #31
 8007fae:	d508      	bpl.n	8007fc2 <_strtod_l+0x812>
 8007fb0:	ed9d 6b06 	vldr	d6, [sp, #24]
 8007fb4:	ed91 7b00 	vldr	d7, [r1]
 8007fb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	1052      	asrs	r2, r2, #1
 8007fc4:	3108      	adds	r1, #8
 8007fc6:	e6db      	b.n	8007d80 <_strtod_l+0x5d0>
 8007fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8007fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd0:	ea02 0a0a 	and.w	sl, r2, sl
 8007fd4:	e6f3      	b.n	8007dbe <_strtod_l+0x60e>
 8007fd6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007fda:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007fde:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007fe2:	36e2      	adds	r6, #226	; 0xe2
 8007fe4:	fa01 f306 	lsl.w	r3, r1, r6
 8007fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fea:	9111      	str	r1, [sp, #68]	; 0x44
 8007fec:	e758      	b.n	8007ea0 <_strtod_l+0x6f0>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8007ff6:	e753      	b.n	8007ea0 <_strtod_l+0x6f0>
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f001 fd75 	bl	8009aec <__lshift>
 8008002:	9018      	str	r0, [sp, #96]	; 0x60
 8008004:	2800      	cmp	r0, #0
 8008006:	f47f af7a 	bne.w	8007efe <_strtod_l+0x74e>
 800800a:	e600      	b.n	8007c0e <_strtod_l+0x45e>
 800800c:	f3af 8000 	nop.w
 8008010:	94a03595 	.word	0x94a03595
 8008014:	3fdfffff 	.word	0x3fdfffff
 8008018:	35afe535 	.word	0x35afe535
 800801c:	3fe00000 	.word	0x3fe00000
 8008020:	94a03595 	.word	0x94a03595
 8008024:	3fcfffff 	.word	0x3fcfffff
 8008028:	0800a480 	.word	0x0800a480
 800802c:	fffffc02 	.word	0xfffffc02
 8008030:	f8cd b020 	str.w	fp, [sp, #32]
 8008034:	f040 8085 	bne.w	8008142 <_strtod_l+0x992>
 8008038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800803a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803e:	b322      	cbz	r2, 800808a <_strtod_l+0x8da>
 8008040:	4ab7      	ldr	r2, [pc, #732]	; (8008320 <_strtod_l+0xb70>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d154      	bne.n	80080f0 <_strtod_l+0x940>
 8008046:	4651      	mov	r1, sl
 8008048:	b1e7      	cbz	r7, 8008084 <_strtod_l+0x8d4>
 800804a:	4bb6      	ldr	r3, [pc, #728]	; (8008324 <_strtod_l+0xb74>)
 800804c:	465a      	mov	r2, fp
 800804e:	4013      	ands	r3, r2
 8008050:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008054:	f04f 32ff 	mov.w	r2, #4294967295
 8008058:	d803      	bhi.n	8008062 <_strtod_l+0x8b2>
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008060:	409a      	lsls	r2, r3
 8008062:	4291      	cmp	r1, r2
 8008064:	d144      	bne.n	80080f0 <_strtod_l+0x940>
 8008066:	4bb0      	ldr	r3, [pc, #704]	; (8008328 <_strtod_l+0xb78>)
 8008068:	9a08      	ldr	r2, [sp, #32]
 800806a:	429a      	cmp	r2, r3
 800806c:	d102      	bne.n	8008074 <_strtod_l+0x8c4>
 800806e:	3101      	adds	r1, #1
 8008070:	f43f adcd 	beq.w	8007c0e <_strtod_l+0x45e>
 8008074:	4bab      	ldr	r3, [pc, #684]	; (8008324 <_strtod_l+0xb74>)
 8008076:	9a08      	ldr	r2, [sp, #32]
 8008078:	401a      	ands	r2, r3
 800807a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800807e:	f04f 0a00 	mov.w	sl, #0
 8008082:	e790      	b.n	8007fa6 <_strtod_l+0x7f6>
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	e7eb      	b.n	8008062 <_strtod_l+0x8b2>
 800808a:	bb8b      	cbnz	r3, 80080f0 <_strtod_l+0x940>
 800808c:	f1ba 0f00 	cmp.w	sl, #0
 8008090:	d12e      	bne.n	80080f0 <_strtod_l+0x940>
 8008092:	465b      	mov	r3, fp
 8008094:	4aa3      	ldr	r2, [pc, #652]	; (8008324 <_strtod_l+0xb74>)
 8008096:	b30f      	cbz	r7, 80080dc <_strtod_l+0x92c>
 8008098:	ea02 010b 	and.w	r1, r2, fp
 800809c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80080a0:	dc1c      	bgt.n	80080dc <_strtod_l+0x92c>
 80080a2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80080a6:	f77f ae48 	ble.w	8007d3a <_strtod_l+0x58a>
 80080aa:	4aa0      	ldr	r2, [pc, #640]	; (800832c <_strtod_l+0xb7c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80080b2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80080b6:	ec4b ab17 	vmov	d7, sl, fp
 80080ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f adaa 	bne.w	8007c22 <_strtod_l+0x472>
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f47f ada6 	bne.w	8007c22 <_strtod_l+0x472>
 80080d6:	2322      	movs	r3, #34	; 0x22
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	e5a2      	b.n	8007c22 <_strtod_l+0x472>
 80080dc:	4013      	ands	r3, r2
 80080de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80080e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080ea:	f04f 3aff 	mov.w	sl, #4294967295
 80080ee:	e75a      	b.n	8007fa6 <_strtod_l+0x7f6>
 80080f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080f2:	b18b      	cbz	r3, 8008118 <_strtod_l+0x968>
 80080f4:	9a08      	ldr	r2, [sp, #32]
 80080f6:	4213      	tst	r3, r2
 80080f8:	f43f af55 	beq.w	8007fa6 <_strtod_l+0x7f6>
 80080fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fe:	463a      	mov	r2, r7
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	b163      	cbz	r3, 8008120 <_strtod_l+0x970>
 8008106:	f7ff fb37 	bl	8007778 <sulp>
 800810a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800810e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008112:	ec5b ab17 	vmov	sl, fp, d7
 8008116:	e746      	b.n	8007fa6 <_strtod_l+0x7f6>
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	ea13 0f0a 	tst.w	r3, sl
 800811e:	e7eb      	b.n	80080f8 <_strtod_l+0x948>
 8008120:	f7ff fb2a 	bl	8007778 <sulp>
 8008124:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8008128:	ee37 7b40 	vsub.f64	d7, d7, d0
 800812c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008130:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008138:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800813c:	f43f adfd 	beq.w	8007d3a <_strtod_l+0x58a>
 8008140:	e731      	b.n	8007fa6 <_strtod_l+0x7f6>
 8008142:	4641      	mov	r1, r8
 8008144:	4628      	mov	r0, r5
 8008146:	f001 fe62 	bl	8009e0e <__ratio>
 800814a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800814e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008156:	d869      	bhi.n	800822c <_strtod_l+0xa7c>
 8008158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	d045      	beq.n	80081ea <_strtod_l+0xa3a>
 800815e:	4b74      	ldr	r3, [pc, #464]	; (8008330 <_strtod_l+0xb80>)
 8008160:	2200      	movs	r2, #0
 8008162:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008166:	9808      	ldr	r0, [sp, #32]
 8008168:	496e      	ldr	r1, [pc, #440]	; (8008324 <_strtod_l+0xb74>)
 800816a:	ea00 0601 	and.w	r6, r0, r1
 800816e:	4871      	ldr	r0, [pc, #452]	; (8008334 <_strtod_l+0xb84>)
 8008170:	4286      	cmp	r6, r0
 8008172:	f040 8089 	bne.w	8008288 <_strtod_l+0xad8>
 8008176:	910f      	str	r1, [sp, #60]	; 0x3c
 8008178:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800817c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008180:	9908      	ldr	r1, [sp, #32]
 8008182:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8008186:	ec4b ab10 	vmov	d0, sl, fp
 800818a:	ec43 2b1c 	vmov	d12, r2, r3
 800818e:	f001 fd79 	bl	8009c84 <__ulp>
 8008192:	ec4b ab1d 	vmov	d13, sl, fp
 8008196:	eeac db00 	vfma.f64	d13, d12, d0
 800819a:	ed8d db08 	vstr	d13, [sp, #32]
 800819e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081a2:	4a65      	ldr	r2, [pc, #404]	; (8008338 <_strtod_l+0xb88>)
 80081a4:	4019      	ands	r1, r3
 80081a6:	4291      	cmp	r1, r2
 80081a8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80081ac:	d948      	bls.n	8008240 <_strtod_l+0xa90>
 80081ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d103      	bne.n	80081c0 <_strtod_l+0xa10>
 80081b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ba:	3301      	adds	r3, #1
 80081bc:	f43f ad27 	beq.w	8007c0e <_strtod_l+0x45e>
 80081c0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8008328 <_strtod_l+0xb78>
 80081c4:	f04f 3aff 	mov.w	sl, #4294967295
 80081c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081ca:	4620      	mov	r0, r4
 80081cc:	f001 fac3 	bl	8009756 <_Bfree>
 80081d0:	4649      	mov	r1, r9
 80081d2:	4620      	mov	r0, r4
 80081d4:	f001 fabf 	bl	8009756 <_Bfree>
 80081d8:	4641      	mov	r1, r8
 80081da:	4620      	mov	r0, r4
 80081dc:	f001 fabb 	bl	8009756 <_Bfree>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 fab7 	bl	8009756 <_Bfree>
 80081e8:	e60e      	b.n	8007e08 <_strtod_l+0x658>
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	d113      	bne.n	8008218 <_strtod_l+0xa68>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f6:	b9b3      	cbnz	r3, 8008226 <_strtod_l+0xa76>
 80081f8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80081fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008204:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008208:	d401      	bmi.n	800820e <_strtod_l+0xa5e>
 800820a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800820e:	eeb1 7b48 	vneg.f64	d7, d8
 8008212:	ec53 2b17 	vmov	r2, r3, d7
 8008216:	e7a6      	b.n	8008166 <_strtod_l+0x9b6>
 8008218:	f1ba 0f01 	cmp.w	sl, #1
 800821c:	d103      	bne.n	8008226 <_strtod_l+0xa76>
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f43f ad8a 	beq.w	8007d3a <_strtod_l+0x58a>
 8008226:	2200      	movs	r2, #0
 8008228:	4b44      	ldr	r3, [pc, #272]	; (800833c <_strtod_l+0xb8c>)
 800822a:	e79a      	b.n	8008162 <_strtod_l+0x9b2>
 800822c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008232:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0e9      	beq.n	800820e <_strtod_l+0xa5e>
 800823a:	ec53 2b18 	vmov	r2, r3, d8
 800823e:	e792      	b.n	8008166 <_strtod_l+0x9b6>
 8008240:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008244:	2f00      	cmp	r7, #0
 8008246:	d1bf      	bne.n	80081c8 <_strtod_l+0xa18>
 8008248:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	429e      	cmp	r6, r3
 8008252:	d1b9      	bne.n	80081c8 <_strtod_l+0xa18>
 8008254:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8008258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800825a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800825e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008262:	b92b      	cbnz	r3, 8008270 <_strtod_l+0xac0>
 8008264:	f1ba 0f00 	cmp.w	sl, #0
 8008268:	d102      	bne.n	8008270 <_strtod_l+0xac0>
 800826a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800826e:	b3d2      	cbz	r2, 80082e6 <_strtod_l+0xb36>
 8008270:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008278:	f53f acd3 	bmi.w	8007c22 <_strtod_l+0x472>
 800827c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008284:	dda0      	ble.n	80081c8 <_strtod_l+0xa18>
 8008286:	e4cc      	b.n	8007c22 <_strtod_l+0x472>
 8008288:	b1ef      	cbz	r7, 80082c6 <_strtod_l+0xb16>
 800828a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800828e:	d81a      	bhi.n	80082c6 <_strtod_l+0xb16>
 8008290:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008318 <_strtod_l+0xb68>
 8008294:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829c:	d810      	bhi.n	80082c0 <_strtod_l+0xb10>
 800829e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 80082a2:	ee17 3a90 	vmov	r3, s15
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bf08      	it	eq
 80082aa:	2301      	moveq	r3, #1
 80082ac:	ee07 3a90 	vmov	s15, r3
 80082b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80082b6:	b99b      	cbnz	r3, 80082e0 <_strtod_l+0xb30>
 80082b8:	eeb1 7b48 	vneg.f64	d7, d8
 80082bc:	ec53 2b17 	vmov	r2, r3, d7
 80082c0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80082c4:	1b8b      	subs	r3, r1, r6
 80082c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082ca:	ec43 2b1c 	vmov	d12, r2, r3
 80082ce:	f001 fcd9 	bl	8009c84 <__ulp>
 80082d2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80082d6:	eeac 7b00 	vfma.f64	d7, d12, d0
 80082da:	ec5b ab17 	vmov	sl, fp, d7
 80082de:	e7b1      	b.n	8008244 <_strtod_l+0xa94>
 80082e0:	ec53 2b18 	vmov	r2, r3, d8
 80082e4:	e7ec      	b.n	80082c0 <_strtod_l+0xb10>
 80082e6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	f57f af6b 	bpl.w	80081c8 <_strtod_l+0xa18>
 80082f2:	e496      	b.n	8007c22 <_strtod_l+0x472>
 80082f4:	2300      	movs	r3, #0
 80082f6:	930d      	str	r3, [sp, #52]	; 0x34
 80082f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	f7ff ba9d 	b.w	800783c <_strtod_l+0x8c>
 8008302:	2a65      	cmp	r2, #101	; 0x65
 8008304:	f04f 0100 	mov.w	r1, #0
 8008308:	f43f ab97 	beq.w	8007a3a <_strtod_l+0x28a>
 800830c:	2701      	movs	r7, #1
 800830e:	460b      	mov	r3, r1
 8008310:	9704      	str	r7, [sp, #16]
 8008312:	f7ff bb0a 	b.w	800792a <_strtod_l+0x17a>
 8008316:	bf00      	nop
 8008318:	ffc00000 	.word	0xffc00000
 800831c:	41dfffff 	.word	0x41dfffff
 8008320:	000fffff 	.word	0x000fffff
 8008324:	7ff00000 	.word	0x7ff00000
 8008328:	7fefffff 	.word	0x7fefffff
 800832c:	39500000 	.word	0x39500000
 8008330:	3ff00000 	.word	0x3ff00000
 8008334:	7fe00000 	.word	0x7fe00000
 8008338:	7c9fffff 	.word	0x7c9fffff
 800833c:	bff00000 	.word	0xbff00000

08008340 <_strtod_r>:
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <_strtod_r+0x18>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	b410      	push	{r4}
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	4c04      	ldr	r4, [pc, #16]	; (800835c <_strtod_r+0x1c>)
 800834a:	2b00      	cmp	r3, #0
 800834c:	bf08      	it	eq
 800834e:	4623      	moveq	r3, r4
 8008350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008354:	f7ff ba2c 	b.w	80077b0 <_strtod_l>
 8008358:	20000020 	.word	0x20000020
 800835c:	20000084 	.word	0x20000084

08008360 <_strtol_l.isra.0>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	4680      	mov	r8, r0
 8008366:	4689      	mov	r9, r1
 8008368:	4692      	mov	sl, r2
 800836a:	461e      	mov	r6, r3
 800836c:	460f      	mov	r7, r1
 800836e:	463d      	mov	r5, r7
 8008370:	9808      	ldr	r0, [sp, #32]
 8008372:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008376:	f001 f981 	bl	800967c <__locale_ctype_ptr_l>
 800837a:	4420      	add	r0, r4
 800837c:	7843      	ldrb	r3, [r0, #1]
 800837e:	f013 0308 	ands.w	r3, r3, #8
 8008382:	d132      	bne.n	80083ea <_strtol_l.isra.0+0x8a>
 8008384:	2c2d      	cmp	r4, #45	; 0x2d
 8008386:	d132      	bne.n	80083ee <_strtol_l.isra.0+0x8e>
 8008388:	787c      	ldrb	r4, [r7, #1]
 800838a:	1cbd      	adds	r5, r7, #2
 800838c:	2201      	movs	r2, #1
 800838e:	2e00      	cmp	r6, #0
 8008390:	d05d      	beq.n	800844e <_strtol_l.isra.0+0xee>
 8008392:	2e10      	cmp	r6, #16
 8008394:	d109      	bne.n	80083aa <_strtol_l.isra.0+0x4a>
 8008396:	2c30      	cmp	r4, #48	; 0x30
 8008398:	d107      	bne.n	80083aa <_strtol_l.isra.0+0x4a>
 800839a:	782b      	ldrb	r3, [r5, #0]
 800839c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083a0:	2b58      	cmp	r3, #88	; 0x58
 80083a2:	d14f      	bne.n	8008444 <_strtol_l.isra.0+0xe4>
 80083a4:	786c      	ldrb	r4, [r5, #1]
 80083a6:	2610      	movs	r6, #16
 80083a8:	3502      	adds	r5, #2
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	bf14      	ite	ne
 80083ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80083b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80083b6:	2700      	movs	r7, #0
 80083b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80083bc:	4638      	mov	r0, r7
 80083be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80083c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d817      	bhi.n	80083fa <_strtol_l.isra.0+0x9a>
 80083ca:	461c      	mov	r4, r3
 80083cc:	42a6      	cmp	r6, r4
 80083ce:	dd23      	ble.n	8008418 <_strtol_l.isra.0+0xb8>
 80083d0:	1c7b      	adds	r3, r7, #1
 80083d2:	d007      	beq.n	80083e4 <_strtol_l.isra.0+0x84>
 80083d4:	4584      	cmp	ip, r0
 80083d6:	d31c      	bcc.n	8008412 <_strtol_l.isra.0+0xb2>
 80083d8:	d101      	bne.n	80083de <_strtol_l.isra.0+0x7e>
 80083da:	45a6      	cmp	lr, r4
 80083dc:	db19      	blt.n	8008412 <_strtol_l.isra.0+0xb2>
 80083de:	fb00 4006 	mla	r0, r0, r6, r4
 80083e2:	2701      	movs	r7, #1
 80083e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e8:	e7eb      	b.n	80083c2 <_strtol_l.isra.0+0x62>
 80083ea:	462f      	mov	r7, r5
 80083ec:	e7bf      	b.n	800836e <_strtol_l.isra.0+0xe>
 80083ee:	2c2b      	cmp	r4, #43	; 0x2b
 80083f0:	bf04      	itt	eq
 80083f2:	1cbd      	addeq	r5, r7, #2
 80083f4:	787c      	ldrbeq	r4, [r7, #1]
 80083f6:	461a      	mov	r2, r3
 80083f8:	e7c9      	b.n	800838e <_strtol_l.isra.0+0x2e>
 80083fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80083fe:	2b19      	cmp	r3, #25
 8008400:	d801      	bhi.n	8008406 <_strtol_l.isra.0+0xa6>
 8008402:	3c37      	subs	r4, #55	; 0x37
 8008404:	e7e2      	b.n	80083cc <_strtol_l.isra.0+0x6c>
 8008406:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800840a:	2b19      	cmp	r3, #25
 800840c:	d804      	bhi.n	8008418 <_strtol_l.isra.0+0xb8>
 800840e:	3c57      	subs	r4, #87	; 0x57
 8008410:	e7dc      	b.n	80083cc <_strtol_l.isra.0+0x6c>
 8008412:	f04f 37ff 	mov.w	r7, #4294967295
 8008416:	e7e5      	b.n	80083e4 <_strtol_l.isra.0+0x84>
 8008418:	1c7b      	adds	r3, r7, #1
 800841a:	d108      	bne.n	800842e <_strtol_l.isra.0+0xce>
 800841c:	2322      	movs	r3, #34	; 0x22
 800841e:	f8c8 3000 	str.w	r3, [r8]
 8008422:	4608      	mov	r0, r1
 8008424:	f1ba 0f00 	cmp.w	sl, #0
 8008428:	d107      	bne.n	800843a <_strtol_l.isra.0+0xda>
 800842a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842e:	b102      	cbz	r2, 8008432 <_strtol_l.isra.0+0xd2>
 8008430:	4240      	negs	r0, r0
 8008432:	f1ba 0f00 	cmp.w	sl, #0
 8008436:	d0f8      	beq.n	800842a <_strtol_l.isra.0+0xca>
 8008438:	b10f      	cbz	r7, 800843e <_strtol_l.isra.0+0xde>
 800843a:	f105 39ff 	add.w	r9, r5, #4294967295
 800843e:	f8ca 9000 	str.w	r9, [sl]
 8008442:	e7f2      	b.n	800842a <_strtol_l.isra.0+0xca>
 8008444:	2430      	movs	r4, #48	; 0x30
 8008446:	2e00      	cmp	r6, #0
 8008448:	d1af      	bne.n	80083aa <_strtol_l.isra.0+0x4a>
 800844a:	2608      	movs	r6, #8
 800844c:	e7ad      	b.n	80083aa <_strtol_l.isra.0+0x4a>
 800844e:	2c30      	cmp	r4, #48	; 0x30
 8008450:	d0a3      	beq.n	800839a <_strtol_l.isra.0+0x3a>
 8008452:	260a      	movs	r6, #10
 8008454:	e7a9      	b.n	80083aa <_strtol_l.isra.0+0x4a>
	...

08008458 <_strtol_r>:
 8008458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845a:	4c06      	ldr	r4, [pc, #24]	; (8008474 <_strtol_r+0x1c>)
 800845c:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_strtol_r+0x20>)
 800845e:	6824      	ldr	r4, [r4, #0]
 8008460:	6a24      	ldr	r4, [r4, #32]
 8008462:	2c00      	cmp	r4, #0
 8008464:	bf08      	it	eq
 8008466:	462c      	moveq	r4, r5
 8008468:	9400      	str	r4, [sp, #0]
 800846a:	f7ff ff79 	bl	8008360 <_strtol_l.isra.0>
 800846e:	b003      	add	sp, #12
 8008470:	bd30      	pop	{r4, r5, pc}
 8008472:	bf00      	nop
 8008474:	20000020 	.word	0x20000020
 8008478:	20000084 	.word	0x20000084

0800847c <quorem>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	6903      	ldr	r3, [r0, #16]
 8008482:	690c      	ldr	r4, [r1, #16]
 8008484:	42a3      	cmp	r3, r4
 8008486:	4680      	mov	r8, r0
 8008488:	f2c0 8082 	blt.w	8008590 <quorem+0x114>
 800848c:	3c01      	subs	r4, #1
 800848e:	f101 0714 	add.w	r7, r1, #20
 8008492:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008496:	f100 0614 	add.w	r6, r0, #20
 800849a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800849e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80084a2:	eb06 030c 	add.w	r3, r6, ip
 80084a6:	3501      	adds	r5, #1
 80084a8:	eb07 090c 	add.w	r9, r7, ip
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80084b2:	b395      	cbz	r5, 800851a <quorem+0x9e>
 80084b4:	f04f 0a00 	mov.w	sl, #0
 80084b8:	4638      	mov	r0, r7
 80084ba:	46b6      	mov	lr, r6
 80084bc:	46d3      	mov	fp, sl
 80084be:	f850 2b04 	ldr.w	r2, [r0], #4
 80084c2:	b293      	uxth	r3, r2
 80084c4:	fb05 a303 	mla	r3, r5, r3, sl
 80084c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	ebab 0303 	sub.w	r3, fp, r3
 80084d2:	0c12      	lsrs	r2, r2, #16
 80084d4:	f8de b000 	ldr.w	fp, [lr]
 80084d8:	fb05 a202 	mla	r2, r5, r2, sl
 80084dc:	fa13 f38b 	uxtah	r3, r3, fp
 80084e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80084e4:	fa1f fb82 	uxth.w	fp, r2
 80084e8:	f8de 2000 	ldr.w	r2, [lr]
 80084ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80084f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084fa:	4581      	cmp	r9, r0
 80084fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008500:	f84e 3b04 	str.w	r3, [lr], #4
 8008504:	d2db      	bcs.n	80084be <quorem+0x42>
 8008506:	f856 300c 	ldr.w	r3, [r6, ip]
 800850a:	b933      	cbnz	r3, 800851a <quorem+0x9e>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	3b04      	subs	r3, #4
 8008510:	429e      	cmp	r6, r3
 8008512:	461a      	mov	r2, r3
 8008514:	d330      	bcc.n	8008578 <quorem+0xfc>
 8008516:	f8c8 4010 	str.w	r4, [r8, #16]
 800851a:	4640      	mov	r0, r8
 800851c:	f001 fb3a 	bl	8009b94 <__mcmp>
 8008520:	2800      	cmp	r0, #0
 8008522:	db25      	blt.n	8008570 <quorem+0xf4>
 8008524:	3501      	adds	r5, #1
 8008526:	4630      	mov	r0, r6
 8008528:	f04f 0c00 	mov.w	ip, #0
 800852c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008530:	f8d0 e000 	ldr.w	lr, [r0]
 8008534:	b293      	uxth	r3, r2
 8008536:	ebac 0303 	sub.w	r3, ip, r3
 800853a:	0c12      	lsrs	r2, r2, #16
 800853c:	fa13 f38e 	uxtah	r3, r3, lr
 8008540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008548:	b29b      	uxth	r3, r3
 800854a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800854e:	45b9      	cmp	r9, r7
 8008550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008554:	f840 3b04 	str.w	r3, [r0], #4
 8008558:	d2e8      	bcs.n	800852c <quorem+0xb0>
 800855a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800855e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008562:	b92a      	cbnz	r2, 8008570 <quorem+0xf4>
 8008564:	3b04      	subs	r3, #4
 8008566:	429e      	cmp	r6, r3
 8008568:	461a      	mov	r2, r3
 800856a:	d30b      	bcc.n	8008584 <quorem+0x108>
 800856c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008570:	4628      	mov	r0, r5
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	3b04      	subs	r3, #4
 800857c:	2a00      	cmp	r2, #0
 800857e:	d1ca      	bne.n	8008516 <quorem+0x9a>
 8008580:	3c01      	subs	r4, #1
 8008582:	e7c5      	b.n	8008510 <quorem+0x94>
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	3b04      	subs	r3, #4
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1ef      	bne.n	800856c <quorem+0xf0>
 800858c:	3c01      	subs	r4, #1
 800858e:	e7ea      	b.n	8008566 <quorem+0xea>
 8008590:	2000      	movs	r0, #0
 8008592:	e7ee      	b.n	8008572 <quorem+0xf6>
 8008594:	0000      	movs	r0, r0
	...

08008598 <_dtoa_r>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	ec57 6b10 	vmov	r6, r7, d0
 80085a0:	b095      	sub	sp, #84	; 0x54
 80085a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80085a4:	9108      	str	r1, [sp, #32]
 80085a6:	4604      	mov	r4, r0
 80085a8:	920a      	str	r2, [sp, #40]	; 0x28
 80085aa:	9311      	str	r3, [sp, #68]	; 0x44
 80085ac:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80085b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80085b4:	b93d      	cbnz	r5, 80085c6 <_dtoa_r+0x2e>
 80085b6:	2010      	movs	r0, #16
 80085b8:	f001 f874 	bl	80096a4 <malloc>
 80085bc:	6260      	str	r0, [r4, #36]	; 0x24
 80085be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085c2:	6005      	str	r5, [r0, #0]
 80085c4:	60c5      	str	r5, [r0, #12]
 80085c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	b151      	cbz	r1, 80085e2 <_dtoa_r+0x4a>
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	604a      	str	r2, [r1, #4]
 80085d0:	2301      	movs	r3, #1
 80085d2:	4093      	lsls	r3, r2
 80085d4:	608b      	str	r3, [r1, #8]
 80085d6:	4620      	mov	r0, r4
 80085d8:	f001 f8bd 	bl	8009756 <_Bfree>
 80085dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	1e3b      	subs	r3, r7, #0
 80085e4:	bfb9      	ittee	lt
 80085e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085ea:	9303      	strlt	r3, [sp, #12]
 80085ec:	2300      	movge	r3, #0
 80085ee:	f8c8 3000 	strge.w	r3, [r8]
 80085f2:	9d03      	ldr	r5, [sp, #12]
 80085f4:	4bac      	ldr	r3, [pc, #688]	; (80088a8 <_dtoa_r+0x310>)
 80085f6:	bfbc      	itt	lt
 80085f8:	2201      	movlt	r2, #1
 80085fa:	f8c8 2000 	strlt.w	r2, [r8]
 80085fe:	43ab      	bics	r3, r5
 8008600:	d11b      	bne.n	800863a <_dtoa_r+0xa2>
 8008602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008604:	f242 730f 	movw	r3, #9999	; 0x270f
 8008608:	6013      	str	r3, [r2, #0]
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	b923      	cbnz	r3, 8008618 <_dtoa_r+0x80>
 800860e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008612:	2d00      	cmp	r5, #0
 8008614:	f000 84dd 	beq.w	8008fd2 <_dtoa_r+0xa3a>
 8008618:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800861a:	b953      	cbnz	r3, 8008632 <_dtoa_r+0x9a>
 800861c:	4ba3      	ldr	r3, [pc, #652]	; (80088ac <_dtoa_r+0x314>)
 800861e:	e020      	b.n	8008662 <_dtoa_r+0xca>
 8008620:	4ba3      	ldr	r3, [pc, #652]	; (80088b0 <_dtoa_r+0x318>)
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	3308      	adds	r3, #8
 8008626:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	9804      	ldr	r0, [sp, #16]
 800862c:	b015      	add	sp, #84	; 0x54
 800862e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008632:	4b9e      	ldr	r3, [pc, #632]	; (80088ac <_dtoa_r+0x314>)
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	3303      	adds	r3, #3
 8008638:	e7f5      	b.n	8008626 <_dtoa_r+0x8e>
 800863a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800863e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008646:	ed8d 7b04 	vstr	d7, [sp, #16]
 800864a:	d10c      	bne.n	8008666 <_dtoa_r+0xce>
 800864c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800864e:	2301      	movs	r3, #1
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 84b9 	beq.w	8008fcc <_dtoa_r+0xa34>
 800865a:	4b96      	ldr	r3, [pc, #600]	; (80088b4 <_dtoa_r+0x31c>)
 800865c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	3b01      	subs	r3, #1
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	e7e1      	b.n	800862a <_dtoa_r+0x92>
 8008666:	a913      	add	r1, sp, #76	; 0x4c
 8008668:	aa12      	add	r2, sp, #72	; 0x48
 800866a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800866e:	4620      	mov	r0, r4
 8008670:	f001 fb7e 	bl	8009d70 <__d2b>
 8008674:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8008678:	9001      	str	r0, [sp, #4]
 800867a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800867c:	2e00      	cmp	r6, #0
 800867e:	d046      	beq.n	800870e <_dtoa_r+0x176>
 8008680:	9805      	ldr	r0, [sp, #20]
 8008682:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8008686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800868a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800868e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008692:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8008696:	2700      	movs	r7, #0
 8008698:	ee07 aa90 	vmov	s15, sl
 800869c:	ec43 2b16 	vmov	d6, r2, r3
 80086a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80086a4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8008890 <_dtoa_r+0x2f8>
 80086a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80086ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80086b0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8008898 <_dtoa_r+0x300>
 80086b4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80086b8:	eeb0 7b46 	vmov.f64	d7, d6
 80086bc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80088a0 <_dtoa_r+0x308>
 80086c0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80086c4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80086c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80086cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d0:	ee16 ba90 	vmov	fp, s13
 80086d4:	d508      	bpl.n	80086e8 <_dtoa_r+0x150>
 80086d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80086da:	eeb4 6b47 	vcmp.f64	d6, d7
 80086de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e2:	bf18      	it	ne
 80086e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80086e8:	f1bb 0f16 	cmp.w	fp, #22
 80086ec:	d834      	bhi.n	8008758 <_dtoa_r+0x1c0>
 80086ee:	4b72      	ldr	r3, [pc, #456]	; (80088b8 <_dtoa_r+0x320>)
 80086f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086f4:	ed93 7b00 	vldr	d7, [r3]
 80086f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80086fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008704:	dd01      	ble.n	800870a <_dtoa_r+0x172>
 8008706:	f10b 3bff 	add.w	fp, fp, #4294967295
 800870a:	2300      	movs	r3, #0
 800870c:	e025      	b.n	800875a <_dtoa_r+0x1c2>
 800870e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008710:	eb01 0a03 	add.w	sl, r1, r3
 8008714:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8008718:	2b20      	cmp	r3, #32
 800871a:	dd17      	ble.n	800874c <_dtoa_r+0x1b4>
 800871c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008720:	9a02      	ldr	r2, [sp, #8]
 8008722:	409d      	lsls	r5, r3
 8008724:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
 800872c:	432b      	orrs	r3, r5
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800873e:	9805      	ldr	r0, [sp, #20]
 8008740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008744:	2701      	movs	r7, #1
 8008746:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800874a:	e7a5      	b.n	8008698 <_dtoa_r+0x100>
 800874c:	9a02      	ldr	r2, [sp, #8]
 800874e:	f1c3 0320 	rsb	r3, r3, #32
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	e7ea      	b.n	800872e <_dtoa_r+0x196>
 8008758:	2301      	movs	r3, #1
 800875a:	eba1 0a0a 	sub.w	sl, r1, sl
 800875e:	9310      	str	r3, [sp, #64]	; 0x40
 8008760:	f1ba 0301 	subs.w	r3, sl, #1
 8008764:	9307      	str	r3, [sp, #28]
 8008766:	bf43      	ittte	mi
 8008768:	2300      	movmi	r3, #0
 800876a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800876e:	9307      	strmi	r3, [sp, #28]
 8008770:	f04f 0a00 	movpl.w	sl, #0
 8008774:	f1bb 0f00 	cmp.w	fp, #0
 8008778:	db19      	blt.n	80087ae <_dtoa_r+0x216>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008780:	445b      	add	r3, fp
 8008782:	9307      	str	r3, [sp, #28]
 8008784:	f04f 0800 	mov.w	r8, #0
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	2b09      	cmp	r3, #9
 800878c:	d866      	bhi.n	800885c <_dtoa_r+0x2c4>
 800878e:	2b05      	cmp	r3, #5
 8008790:	bfc4      	itt	gt
 8008792:	3b04      	subgt	r3, #4
 8008794:	9308      	strgt	r3, [sp, #32]
 8008796:	9b08      	ldr	r3, [sp, #32]
 8008798:	f1a3 0302 	sub.w	r3, r3, #2
 800879c:	bfcc      	ite	gt
 800879e:	2500      	movgt	r5, #0
 80087a0:	2501      	movle	r5, #1
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d866      	bhi.n	8008874 <_dtoa_r+0x2dc>
 80087a6:	e8df f003 	tbb	[pc, r3]
 80087aa:	5755      	.short	0x5755
 80087ac:	4909      	.short	0x4909
 80087ae:	2300      	movs	r3, #0
 80087b0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80087b4:	f1cb 0800 	rsb	r8, fp, #0
 80087b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ba:	e7e5      	b.n	8008788 <_dtoa_r+0x1f0>
 80087bc:	2301      	movs	r3, #1
 80087be:	9309      	str	r3, [sp, #36]	; 0x24
 80087c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dd59      	ble.n	800887a <_dtoa_r+0x2e2>
 80087c6:	9306      	str	r3, [sp, #24]
 80087c8:	4699      	mov	r9, r3
 80087ca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087cc:	2200      	movs	r2, #0
 80087ce:	6072      	str	r2, [r6, #4]
 80087d0:	2204      	movs	r2, #4
 80087d2:	f102 0014 	add.w	r0, r2, #20
 80087d6:	4298      	cmp	r0, r3
 80087d8:	6871      	ldr	r1, [r6, #4]
 80087da:	d953      	bls.n	8008884 <_dtoa_r+0x2ec>
 80087dc:	4620      	mov	r0, r4
 80087de:	f000 ff86 	bl	80096ee <_Balloc>
 80087e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	f1b9 0f0e 	cmp.w	r9, #14
 80087ee:	f200 80c2 	bhi.w	8008976 <_dtoa_r+0x3de>
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	f000 80bf 	beq.w	8008976 <_dtoa_r+0x3de>
 80087f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087fc:	f1bb 0f00 	cmp.w	fp, #0
 8008800:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008804:	f340 80e6 	ble.w	80089d4 <_dtoa_r+0x43c>
 8008808:	4a2b      	ldr	r2, [pc, #172]	; (80088b8 <_dtoa_r+0x320>)
 800880a:	f00b 030f 	and.w	r3, fp, #15
 800880e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008812:	ed93 7b00 	vldr	d7, [r3]
 8008816:	ea4f 132b 	mov.w	r3, fp, asr #4
 800881a:	06da      	lsls	r2, r3, #27
 800881c:	f140 80d8 	bpl.w	80089d0 <_dtoa_r+0x438>
 8008820:	4a26      	ldr	r2, [pc, #152]	; (80088bc <_dtoa_r+0x324>)
 8008822:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8008826:	ed92 6b08 	vldr	d6, [r2, #32]
 800882a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800882e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	2203      	movs	r2, #3
 8008838:	4920      	ldr	r1, [pc, #128]	; (80088bc <_dtoa_r+0x324>)
 800883a:	e04a      	b.n	80088d2 <_dtoa_r+0x33a>
 800883c:	2301      	movs	r3, #1
 800883e:	9309      	str	r3, [sp, #36]	; 0x24
 8008840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008842:	445b      	add	r3, fp
 8008844:	f103 0901 	add.w	r9, r3, #1
 8008848:	9306      	str	r3, [sp, #24]
 800884a:	464b      	mov	r3, r9
 800884c:	2b01      	cmp	r3, #1
 800884e:	bfb8      	it	lt
 8008850:	2301      	movlt	r3, #1
 8008852:	e7ba      	b.n	80087ca <_dtoa_r+0x232>
 8008854:	2300      	movs	r3, #0
 8008856:	e7b2      	b.n	80087be <_dtoa_r+0x226>
 8008858:	2300      	movs	r3, #0
 800885a:	e7f0      	b.n	800883e <_dtoa_r+0x2a6>
 800885c:	2501      	movs	r5, #1
 800885e:	2300      	movs	r3, #0
 8008860:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	9306      	str	r3, [sp, #24]
 800886a:	4699      	mov	r9, r3
 800886c:	2200      	movs	r2, #0
 800886e:	2312      	movs	r3, #18
 8008870:	920a      	str	r2, [sp, #40]	; 0x28
 8008872:	e7aa      	b.n	80087ca <_dtoa_r+0x232>
 8008874:	2301      	movs	r3, #1
 8008876:	9309      	str	r3, [sp, #36]	; 0x24
 8008878:	e7f4      	b.n	8008864 <_dtoa_r+0x2cc>
 800887a:	2301      	movs	r3, #1
 800887c:	9306      	str	r3, [sp, #24]
 800887e:	4699      	mov	r9, r3
 8008880:	461a      	mov	r2, r3
 8008882:	e7f5      	b.n	8008870 <_dtoa_r+0x2d8>
 8008884:	3101      	adds	r1, #1
 8008886:	6071      	str	r1, [r6, #4]
 8008888:	0052      	lsls	r2, r2, #1
 800888a:	e7a2      	b.n	80087d2 <_dtoa_r+0x23a>
 800888c:	f3af 8000 	nop.w
 8008890:	636f4361 	.word	0x636f4361
 8008894:	3fd287a7 	.word	0x3fd287a7
 8008898:	8b60c8b3 	.word	0x8b60c8b3
 800889c:	3fc68a28 	.word	0x3fc68a28
 80088a0:	509f79fb 	.word	0x509f79fb
 80088a4:	3fd34413 	.word	0x3fd34413
 80088a8:	7ff00000 	.word	0x7ff00000
 80088ac:	0800a4b1 	.word	0x0800a4b1
 80088b0:	0800a4a8 	.word	0x0800a4a8
 80088b4:	0800a429 	.word	0x0800a429
 80088b8:	0800a550 	.word	0x0800a550
 80088bc:	0800a528 	.word	0x0800a528
 80088c0:	07de      	lsls	r6, r3, #31
 80088c2:	d504      	bpl.n	80088ce <_dtoa_r+0x336>
 80088c4:	ed91 6b00 	vldr	d6, [r1]
 80088c8:	3201      	adds	r2, #1
 80088ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088ce:	105b      	asrs	r3, r3, #1
 80088d0:	3108      	adds	r1, #8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1f4      	bne.n	80088c0 <_dtoa_r+0x328>
 80088d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80088da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80088de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80a7 	beq.w	8008a38 <_dtoa_r+0x4a0>
 80088ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80088ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80088f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fa:	f140 809d 	bpl.w	8008a38 <_dtoa_r+0x4a0>
 80088fe:	f1b9 0f00 	cmp.w	r9, #0
 8008902:	f000 8099 	beq.w	8008a38 <_dtoa_r+0x4a0>
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd30      	ble.n	800896e <_dtoa_r+0x3d6>
 800890c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008914:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008918:	9d06      	ldr	r5, [sp, #24]
 800891a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800891e:	3201      	adds	r2, #1
 8008920:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008924:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008928:	ee07 2a90 	vmov	s15, r2
 800892c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008930:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008934:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008938:	9a03      	ldr	r2, [sp, #12]
 800893a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8008942:	2d00      	cmp	r5, #0
 8008944:	d17b      	bne.n	8008a3e <_dtoa_r+0x4a6>
 8008946:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800894a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800894e:	ec41 0b17 	vmov	d7, r0, r1
 8008952:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895a:	f300 8253 	bgt.w	8008e04 <_dtoa_r+0x86c>
 800895e:	eeb1 7b47 	vneg.f64	d7, d7
 8008962:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896a:	f100 8249 	bmi.w	8008e00 <_dtoa_r+0x868>
 800896e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008972:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f2c0 8119 	blt.w	8008bb0 <_dtoa_r+0x618>
 800897e:	f1bb 0f0e 	cmp.w	fp, #14
 8008982:	f300 8115 	bgt.w	8008bb0 <_dtoa_r+0x618>
 8008986:	4bc3      	ldr	r3, [pc, #780]	; (8008c94 <_dtoa_r+0x6fc>)
 8008988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800898c:	ed93 6b00 	vldr	d6, [r3]
 8008990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008992:	2b00      	cmp	r3, #0
 8008994:	f280 80ba 	bge.w	8008b0c <_dtoa_r+0x574>
 8008998:	f1b9 0f00 	cmp.w	r9, #0
 800899c:	f300 80b6 	bgt.w	8008b0c <_dtoa_r+0x574>
 80089a0:	f040 822d 	bne.w	8008dfe <_dtoa_r+0x866>
 80089a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80089a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80089ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80089b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b8:	464d      	mov	r5, r9
 80089ba:	464f      	mov	r7, r9
 80089bc:	f280 8204 	bge.w	8008dc8 <_dtoa_r+0x830>
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	1c5e      	adds	r6, r3, #1
 80089c6:	2331      	movs	r3, #49	; 0x31
 80089c8:	7013      	strb	r3, [r2, #0]
 80089ca:	f10b 0b01 	add.w	fp, fp, #1
 80089ce:	e1ff      	b.n	8008dd0 <_dtoa_r+0x838>
 80089d0:	2202      	movs	r2, #2
 80089d2:	e731      	b.n	8008838 <_dtoa_r+0x2a0>
 80089d4:	d02e      	beq.n	8008a34 <_dtoa_r+0x49c>
 80089d6:	f1cb 0300 	rsb	r3, fp, #0
 80089da:	4aae      	ldr	r2, [pc, #696]	; (8008c94 <_dtoa_r+0x6fc>)
 80089dc:	f003 010f 	and.w	r1, r3, #15
 80089e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80089e4:	ed92 7b00 	vldr	d7, [r2]
 80089e8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80089ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80089f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80089f4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80089f8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80089fc:	49a6      	ldr	r1, [pc, #664]	; (8008c98 <_dtoa_r+0x700>)
 80089fe:	111b      	asrs	r3, r3, #4
 8008a00:	2000      	movs	r0, #0
 8008a02:	2202      	movs	r2, #2
 8008a04:	b93b      	cbnz	r3, 8008a16 <_dtoa_r+0x47e>
 8008a06:	2800      	cmp	r0, #0
 8008a08:	f43f af6b 	beq.w	80088e2 <_dtoa_r+0x34a>
 8008a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a14:	e765      	b.n	80088e2 <_dtoa_r+0x34a>
 8008a16:	07dd      	lsls	r5, r3, #31
 8008a18:	d509      	bpl.n	8008a2e <_dtoa_r+0x496>
 8008a1a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008a1e:	ed91 7b00 	vldr	d7, [r1]
 8008a22:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008a26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	105b      	asrs	r3, r3, #1
 8008a30:	3108      	adds	r1, #8
 8008a32:	e7e7      	b.n	8008a04 <_dtoa_r+0x46c>
 8008a34:	2202      	movs	r2, #2
 8008a36:	e754      	b.n	80088e2 <_dtoa_r+0x34a>
 8008a38:	465b      	mov	r3, fp
 8008a3a:	464d      	mov	r5, r9
 8008a3c:	e770      	b.n	8008920 <_dtoa_r+0x388>
 8008a3e:	4a95      	ldr	r2, [pc, #596]	; (8008c94 <_dtoa_r+0x6fc>)
 8008a40:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8008a44:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a4a:	ec41 0b17 	vmov	d7, r0, r1
 8008a4e:	b35a      	cbz	r2, 8008aa8 <_dtoa_r+0x510>
 8008a50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008a54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008a58:	9e04      	ldr	r6, [sp, #16]
 8008a5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008a5e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008a62:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008a6a:	ee14 2a90 	vmov	r2, s9
 8008a6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008a72:	3230      	adds	r2, #48	; 0x30
 8008a74:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008a78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a80:	f806 2b01 	strb.w	r2, [r6], #1
 8008a84:	d43b      	bmi.n	8008afe <_dtoa_r+0x566>
 8008a86:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008a8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	d472      	bmi.n	8008b7a <_dtoa_r+0x5e2>
 8008a94:	9a04      	ldr	r2, [sp, #16]
 8008a96:	1ab2      	subs	r2, r6, r2
 8008a98:	4295      	cmp	r5, r2
 8008a9a:	f77f af68 	ble.w	800896e <_dtoa_r+0x3d6>
 8008a9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008aa2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008aa6:	e7de      	b.n	8008a66 <_dtoa_r+0x4ce>
 8008aa8:	9a04      	ldr	r2, [sp, #16]
 8008aaa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008aae:	1956      	adds	r6, r2, r5
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008ab6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008aba:	ee14 2a90 	vmov	r2, s9
 8008abe:	3230      	adds	r2, #48	; 0x30
 8008ac0:	f801 2b01 	strb.w	r2, [r1], #1
 8008ac4:	42b1      	cmp	r1, r6
 8008ac6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008aca:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ace:	d11a      	bne.n	8008b06 <_dtoa_r+0x56e>
 8008ad0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008ad4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008ad8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae0:	dc4b      	bgt.n	8008b7a <_dtoa_r+0x5e2>
 8008ae2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aee:	f57f af3e 	bpl.w	800896e <_dtoa_r+0x3d6>
 8008af2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008af6:	2a30      	cmp	r2, #48	; 0x30
 8008af8:	f106 31ff 	add.w	r1, r6, #4294967295
 8008afc:	d001      	beq.n	8008b02 <_dtoa_r+0x56a>
 8008afe:	469b      	mov	fp, r3
 8008b00:	e02a      	b.n	8008b58 <_dtoa_r+0x5c0>
 8008b02:	460e      	mov	r6, r1
 8008b04:	e7f5      	b.n	8008af2 <_dtoa_r+0x55a>
 8008b06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008b0a:	e7d4      	b.n	8008ab6 <_dtoa_r+0x51e>
 8008b0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b10:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008b14:	9e04      	ldr	r6, [sp, #16]
 8008b16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008b1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008b1e:	ee15 3a10 	vmov	r3, s10
 8008b22:	3330      	adds	r3, #48	; 0x30
 8008b24:	f806 3b01 	strb.w	r3, [r6], #1
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	1af3      	subs	r3, r6, r3
 8008b2c:	4599      	cmp	r9, r3
 8008b2e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008b32:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008b36:	d133      	bne.n	8008ba0 <_dtoa_r+0x608>
 8008b38:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008b3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b44:	dc18      	bgt.n	8008b78 <_dtoa_r+0x5e0>
 8008b46:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4e:	d103      	bne.n	8008b58 <_dtoa_r+0x5c0>
 8008b50:	ee15 3a10 	vmov	r3, s10
 8008b54:	07db      	lsls	r3, r3, #31
 8008b56:	d40f      	bmi.n	8008b78 <_dtoa_r+0x5e0>
 8008b58:	9901      	ldr	r1, [sp, #4]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fdfb 	bl	8009756 <_Bfree>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b64:	7033      	strb	r3, [r6, #0]
 8008b66:	f10b 0301 	add.w	r3, fp, #1
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f43f ad5b 	beq.w	800862a <_dtoa_r+0x92>
 8008b74:	601e      	str	r6, [r3, #0]
 8008b76:	e558      	b.n	800862a <_dtoa_r+0x92>
 8008b78:	465b      	mov	r3, fp
 8008b7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b7e:	2939      	cmp	r1, #57	; 0x39
 8008b80:	f106 32ff 	add.w	r2, r6, #4294967295
 8008b84:	d106      	bne.n	8008b94 <_dtoa_r+0x5fc>
 8008b86:	9904      	ldr	r1, [sp, #16]
 8008b88:	4291      	cmp	r1, r2
 8008b8a:	d107      	bne.n	8008b9c <_dtoa_r+0x604>
 8008b8c:	2230      	movs	r2, #48	; 0x30
 8008b8e:	700a      	strb	r2, [r1, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	460a      	mov	r2, r1
 8008b94:	7811      	ldrb	r1, [r2, #0]
 8008b96:	3101      	adds	r1, #1
 8008b98:	7011      	strb	r1, [r2, #0]
 8008b9a:	e7b0      	b.n	8008afe <_dtoa_r+0x566>
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	e7ec      	b.n	8008b7a <_dtoa_r+0x5e2>
 8008ba0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008ba4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bac:	d1b3      	bne.n	8008b16 <_dtoa_r+0x57e>
 8008bae:	e7d3      	b.n	8008b58 <_dtoa_r+0x5c0>
 8008bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	f000 808d 	beq.w	8008cd2 <_dtoa_r+0x73a>
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	2a01      	cmp	r2, #1
 8008bbc:	dc72      	bgt.n	8008ca4 <_dtoa_r+0x70c>
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	d06c      	beq.n	8008c9c <_dtoa_r+0x704>
 8008bc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bc6:	4645      	mov	r5, r8
 8008bc8:	4656      	mov	r6, sl
 8008bca:	9a07      	ldr	r2, [sp, #28]
 8008bcc:	2101      	movs	r1, #1
 8008bce:	441a      	add	r2, r3
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	449a      	add	sl, r3
 8008bd4:	9207      	str	r2, [sp, #28]
 8008bd6:	f000 fe9c 	bl	8009912 <__i2b>
 8008bda:	4607      	mov	r7, r0
 8008bdc:	2e00      	cmp	r6, #0
 8008bde:	dd0b      	ble.n	8008bf8 <_dtoa_r+0x660>
 8008be0:	9b07      	ldr	r3, [sp, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dd08      	ble.n	8008bf8 <_dtoa_r+0x660>
 8008be6:	42b3      	cmp	r3, r6
 8008be8:	9a07      	ldr	r2, [sp, #28]
 8008bea:	bfa8      	it	ge
 8008bec:	4633      	movge	r3, r6
 8008bee:	ebaa 0a03 	sub.w	sl, sl, r3
 8008bf2:	1af6      	subs	r6, r6, r3
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	9307      	str	r3, [sp, #28]
 8008bf8:	f1b8 0f00 	cmp.w	r8, #0
 8008bfc:	d01d      	beq.n	8008c3a <_dtoa_r+0x6a2>
 8008bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d06a      	beq.n	8008cda <_dtoa_r+0x742>
 8008c04:	b18d      	cbz	r5, 8008c2a <_dtoa_r+0x692>
 8008c06:	4639      	mov	r1, r7
 8008c08:	462a      	mov	r2, r5
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 ff20 	bl	8009a50 <__pow5mult>
 8008c10:	9a01      	ldr	r2, [sp, #4]
 8008c12:	4601      	mov	r1, r0
 8008c14:	4607      	mov	r7, r0
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fe84 	bl	8009924 <__multiply>
 8008c1c:	9901      	ldr	r1, [sp, #4]
 8008c1e:	900c      	str	r0, [sp, #48]	; 0x30
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fd98 	bl	8009756 <_Bfree>
 8008c26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	ebb8 0205 	subs.w	r2, r8, r5
 8008c2e:	d004      	beq.n	8008c3a <_dtoa_r+0x6a2>
 8008c30:	9901      	ldr	r1, [sp, #4]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f000 ff0c 	bl	8009a50 <__pow5mult>
 8008c38:	9001      	str	r0, [sp, #4]
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fe68 	bl	8009912 <__i2b>
 8008c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c44:	4605      	mov	r5, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 81ca 	beq.w	8008fe0 <_dtoa_r+0xa48>
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4601      	mov	r1, r0
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 fefd 	bl	8009a50 <__pow5mult>
 8008c56:	9b08      	ldr	r3, [sp, #32]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	dc44      	bgt.n	8008ce8 <_dtoa_r+0x750>
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d13c      	bne.n	8008cde <_dtoa_r+0x746>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d137      	bne.n	8008cde <_dtoa_r+0x746>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c74:	0d1b      	lsrs	r3, r3, #20
 8008c76:	051b      	lsls	r3, r3, #20
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d033      	beq.n	8008ce4 <_dtoa_r+0x74c>
 8008c7c:	9b07      	ldr	r3, [sp, #28]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f10a 0a01 	add.w	sl, sl, #1
 8008c84:	9307      	str	r3, [sp, #28]
 8008c86:	f04f 0801 	mov.w	r8, #1
 8008c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c8c:	bb73      	cbnz	r3, 8008cec <_dtoa_r+0x754>
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e034      	b.n	8008cfc <_dtoa_r+0x764>
 8008c92:	bf00      	nop
 8008c94:	0800a550 	.word	0x0800a550
 8008c98:	0800a528 	.word	0x0800a528
 8008c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ca2:	e790      	b.n	8008bc6 <_dtoa_r+0x62e>
 8008ca4:	f109 35ff 	add.w	r5, r9, #4294967295
 8008ca8:	45a8      	cmp	r8, r5
 8008caa:	bfbf      	itttt	lt
 8008cac:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008cae:	eba5 0808 	sublt.w	r8, r5, r8
 8008cb2:	4443      	addlt	r3, r8
 8008cb4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008cb6:	bfb6      	itet	lt
 8008cb8:	46a8      	movlt	r8, r5
 8008cba:	eba8 0505 	subge.w	r5, r8, r5
 8008cbe:	2500      	movlt	r5, #0
 8008cc0:	f1b9 0f00 	cmp.w	r9, #0
 8008cc4:	bfb9      	ittee	lt
 8008cc6:	ebaa 0609 	sublt.w	r6, sl, r9
 8008cca:	2300      	movlt	r3, #0
 8008ccc:	4656      	movge	r6, sl
 8008cce:	464b      	movge	r3, r9
 8008cd0:	e77b      	b.n	8008bca <_dtoa_r+0x632>
 8008cd2:	4645      	mov	r5, r8
 8008cd4:	4656      	mov	r6, sl
 8008cd6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cd8:	e780      	b.n	8008bdc <_dtoa_r+0x644>
 8008cda:	4642      	mov	r2, r8
 8008cdc:	e7a8      	b.n	8008c30 <_dtoa_r+0x698>
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	e7d2      	b.n	8008c8a <_dtoa_r+0x6f2>
 8008ce4:	4698      	mov	r8, r3
 8008ce6:	e7d0      	b.n	8008c8a <_dtoa_r+0x6f2>
 8008ce8:	f04f 0800 	mov.w	r8, #0
 8008cec:	692b      	ldr	r3, [r5, #16]
 8008cee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008cf2:	6918      	ldr	r0, [r3, #16]
 8008cf4:	f000 fdbf 	bl	8009876 <__hi0bits>
 8008cf8:	f1c0 0020 	rsb	r0, r0, #32
 8008cfc:	9b07      	ldr	r3, [sp, #28]
 8008cfe:	4418      	add	r0, r3
 8008d00:	f010 001f 	ands.w	r0, r0, #31
 8008d04:	d047      	beq.n	8008d96 <_dtoa_r+0x7fe>
 8008d06:	f1c0 0320 	rsb	r3, r0, #32
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	dd3b      	ble.n	8008d86 <_dtoa_r+0x7ee>
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	f1c0 001c 	rsb	r0, r0, #28
 8008d14:	4482      	add	sl, r0
 8008d16:	4406      	add	r6, r0
 8008d18:	4403      	add	r3, r0
 8008d1a:	9307      	str	r3, [sp, #28]
 8008d1c:	f1ba 0f00 	cmp.w	sl, #0
 8008d20:	dd05      	ble.n	8008d2e <_dtoa_r+0x796>
 8008d22:	4652      	mov	r2, sl
 8008d24:	9901      	ldr	r1, [sp, #4]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f000 fee0 	bl	8009aec <__lshift>
 8008d2c:	9001      	str	r0, [sp, #4]
 8008d2e:	9b07      	ldr	r3, [sp, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dd05      	ble.n	8008d40 <_dtoa_r+0x7a8>
 8008d34:	4629      	mov	r1, r5
 8008d36:	461a      	mov	r2, r3
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 fed7 	bl	8009aec <__lshift>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d42:	b353      	cbz	r3, 8008d9a <_dtoa_r+0x802>
 8008d44:	4629      	mov	r1, r5
 8008d46:	9801      	ldr	r0, [sp, #4]
 8008d48:	f000 ff24 	bl	8009b94 <__mcmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	da24      	bge.n	8008d9a <_dtoa_r+0x802>
 8008d50:	2300      	movs	r3, #0
 8008d52:	220a      	movs	r2, #10
 8008d54:	9901      	ldr	r1, [sp, #4]
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fd14 	bl	8009784 <__multadd>
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	9001      	str	r0, [sp, #4]
 8008d60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8142 	beq.w	8008fee <_dtoa_r+0xa56>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	220a      	movs	r2, #10
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fd07 	bl	8009784 <__multadd>
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	dc4b      	bgt.n	8008e16 <_dtoa_r+0x87e>
 8008d7e:	9b08      	ldr	r3, [sp, #32]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	dd48      	ble.n	8008e16 <_dtoa_r+0x87e>
 8008d84:	e011      	b.n	8008daa <_dtoa_r+0x812>
 8008d86:	d0c9      	beq.n	8008d1c <_dtoa_r+0x784>
 8008d88:	9a07      	ldr	r2, [sp, #28]
 8008d8a:	331c      	adds	r3, #28
 8008d8c:	441a      	add	r2, r3
 8008d8e:	449a      	add	sl, r3
 8008d90:	441e      	add	r6, r3
 8008d92:	4613      	mov	r3, r2
 8008d94:	e7c1      	b.n	8008d1a <_dtoa_r+0x782>
 8008d96:	4603      	mov	r3, r0
 8008d98:	e7f6      	b.n	8008d88 <_dtoa_r+0x7f0>
 8008d9a:	f1b9 0f00 	cmp.w	r9, #0
 8008d9e:	dc34      	bgt.n	8008e0a <_dtoa_r+0x872>
 8008da0:	9b08      	ldr	r3, [sp, #32]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	dd31      	ble.n	8008e0a <_dtoa_r+0x872>
 8008da6:	f8cd 9018 	str.w	r9, [sp, #24]
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	b963      	cbnz	r3, 8008dc8 <_dtoa_r+0x830>
 8008dae:	4629      	mov	r1, r5
 8008db0:	2205      	movs	r2, #5
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 fce6 	bl	8009784 <__multadd>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4605      	mov	r5, r0
 8008dbc:	9801      	ldr	r0, [sp, #4]
 8008dbe:	f000 fee9 	bl	8009b94 <__mcmp>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f73f adfc 	bgt.w	80089c0 <_dtoa_r+0x428>
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dca:	9e04      	ldr	r6, [sp, #16]
 8008dcc:	ea6f 0b03 	mvn.w	fp, r3
 8008dd0:	f04f 0900 	mov.w	r9, #0
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f000 fcbd 	bl	8009756 <_Bfree>
 8008ddc:	2f00      	cmp	r7, #0
 8008dde:	f43f aebb 	beq.w	8008b58 <_dtoa_r+0x5c0>
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d005      	beq.n	8008df4 <_dtoa_r+0x85c>
 8008de8:	45b9      	cmp	r9, r7
 8008dea:	d003      	beq.n	8008df4 <_dtoa_r+0x85c>
 8008dec:	4649      	mov	r1, r9
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 fcb1 	bl	8009756 <_Bfree>
 8008df4:	4639      	mov	r1, r7
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fcad 	bl	8009756 <_Bfree>
 8008dfc:	e6ac      	b.n	8008b58 <_dtoa_r+0x5c0>
 8008dfe:	2500      	movs	r5, #0
 8008e00:	462f      	mov	r7, r5
 8008e02:	e7e1      	b.n	8008dc8 <_dtoa_r+0x830>
 8008e04:	469b      	mov	fp, r3
 8008e06:	462f      	mov	r7, r5
 8008e08:	e5da      	b.n	80089c0 <_dtoa_r+0x428>
 8008e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e0c:	f8cd 9018 	str.w	r9, [sp, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80f3 	beq.w	8008ffc <_dtoa_r+0xa64>
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	dd05      	ble.n	8008e26 <_dtoa_r+0x88e>
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fe64 	bl	8009aec <__lshift>
 8008e24:	4607      	mov	r7, r0
 8008e26:	f1b8 0f00 	cmp.w	r8, #0
 8008e2a:	d04c      	beq.n	8008ec6 <_dtoa_r+0x92e>
 8008e2c:	6879      	ldr	r1, [r7, #4]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fc5d 	bl	80096ee <_Balloc>
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	3202      	adds	r2, #2
 8008e38:	4606      	mov	r6, r0
 8008e3a:	0092      	lsls	r2, r2, #2
 8008e3c:	f107 010c 	add.w	r1, r7, #12
 8008e40:	300c      	adds	r0, #12
 8008e42:	f000 fc49 	bl	80096d8 <memcpy>
 8008e46:	2201      	movs	r2, #1
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 fe4e 	bl	8009aec <__lshift>
 8008e50:	9b02      	ldr	r3, [sp, #8]
 8008e52:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	46b9      	mov	r9, r7
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	4607      	mov	r7, r0
 8008e60:	4629      	mov	r1, r5
 8008e62:	9801      	ldr	r0, [sp, #4]
 8008e64:	f7ff fb0a 	bl	800847c <quorem>
 8008e68:	4649      	mov	r1, r9
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e70:	9801      	ldr	r0, [sp, #4]
 8008e72:	f000 fe8f 	bl	8009b94 <__mcmp>
 8008e76:	463a      	mov	r2, r7
 8008e78:	9002      	str	r0, [sp, #8]
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f000 fea3 	bl	8009bc8 <__mdiff>
 8008e82:	68c3      	ldr	r3, [r0, #12]
 8008e84:	4602      	mov	r2, r0
 8008e86:	bb03      	cbnz	r3, 8008eca <_dtoa_r+0x932>
 8008e88:	4601      	mov	r1, r0
 8008e8a:	9009      	str	r0, [sp, #36]	; 0x24
 8008e8c:	9801      	ldr	r0, [sp, #4]
 8008e8e:	f000 fe81 	bl	8009b94 <__mcmp>
 8008e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e94:	4603      	mov	r3, r0
 8008e96:	4611      	mov	r1, r2
 8008e98:	4620      	mov	r0, r4
 8008e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9c:	f000 fc5b 	bl	8009756 <_Bfree>
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	b9a3      	cbnz	r3, 8008ece <_dtoa_r+0x936>
 8008ea4:	9a08      	ldr	r2, [sp, #32]
 8008ea6:	b992      	cbnz	r2, 8008ece <_dtoa_r+0x936>
 8008ea8:	9a07      	ldr	r2, [sp, #28]
 8008eaa:	b982      	cbnz	r2, 8008ece <_dtoa_r+0x936>
 8008eac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008eb0:	d029      	beq.n	8008f06 <_dtoa_r+0x96e>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dd01      	ble.n	8008ebc <_dtoa_r+0x924>
 8008eb8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8008ebc:	f10a 0601 	add.w	r6, sl, #1
 8008ec0:	f88a 8000 	strb.w	r8, [sl]
 8008ec4:	e786      	b.n	8008dd4 <_dtoa_r+0x83c>
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	e7c2      	b.n	8008e50 <_dtoa_r+0x8b8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e7e3      	b.n	8008e96 <_dtoa_r+0x8fe>
 8008ece:	9a02      	ldr	r2, [sp, #8]
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	db04      	blt.n	8008ede <_dtoa_r+0x946>
 8008ed4:	d124      	bne.n	8008f20 <_dtoa_r+0x988>
 8008ed6:	9a08      	ldr	r2, [sp, #32]
 8008ed8:	bb12      	cbnz	r2, 8008f20 <_dtoa_r+0x988>
 8008eda:	9a07      	ldr	r2, [sp, #28]
 8008edc:	bb02      	cbnz	r2, 8008f20 <_dtoa_r+0x988>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	ddec      	ble.n	8008ebc <_dtoa_r+0x924>
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	9901      	ldr	r1, [sp, #4]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f000 fe00 	bl	8009aec <__lshift>
 8008eec:	4629      	mov	r1, r5
 8008eee:	9001      	str	r0, [sp, #4]
 8008ef0:	f000 fe50 	bl	8009b94 <__mcmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	dc03      	bgt.n	8008f00 <_dtoa_r+0x968>
 8008ef8:	d1e0      	bne.n	8008ebc <_dtoa_r+0x924>
 8008efa:	f018 0f01 	tst.w	r8, #1
 8008efe:	d0dd      	beq.n	8008ebc <_dtoa_r+0x924>
 8008f00:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f04:	d1d8      	bne.n	8008eb8 <_dtoa_r+0x920>
 8008f06:	2339      	movs	r3, #57	; 0x39
 8008f08:	f10a 0601 	add.w	r6, sl, #1
 8008f0c:	f88a 3000 	strb.w	r3, [sl]
 8008f10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f14:	2b39      	cmp	r3, #57	; 0x39
 8008f16:	f106 32ff 	add.w	r2, r6, #4294967295
 8008f1a:	d04c      	beq.n	8008fb6 <_dtoa_r+0xa1e>
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	e051      	b.n	8008fc4 <_dtoa_r+0xa2c>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f10a 0601 	add.w	r6, sl, #1
 8008f26:	dd05      	ble.n	8008f34 <_dtoa_r+0x99c>
 8008f28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f2c:	d0eb      	beq.n	8008f06 <_dtoa_r+0x96e>
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	e7c5      	b.n	8008ec0 <_dtoa_r+0x928>
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	9a06      	ldr	r2, [sp, #24]
 8008f38:	f806 8c01 	strb.w	r8, [r6, #-1]
 8008f3c:	1af3      	subs	r3, r6, r3
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d021      	beq.n	8008f86 <_dtoa_r+0x9ee>
 8008f42:	2300      	movs	r3, #0
 8008f44:	220a      	movs	r2, #10
 8008f46:	9901      	ldr	r1, [sp, #4]
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 fc1b 	bl	8009784 <__multadd>
 8008f4e:	45b9      	cmp	r9, r7
 8008f50:	9001      	str	r0, [sp, #4]
 8008f52:	f04f 0300 	mov.w	r3, #0
 8008f56:	f04f 020a 	mov.w	r2, #10
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	d105      	bne.n	8008f6c <_dtoa_r+0x9d4>
 8008f60:	f000 fc10 	bl	8009784 <__multadd>
 8008f64:	4681      	mov	r9, r0
 8008f66:	4607      	mov	r7, r0
 8008f68:	46b2      	mov	sl, r6
 8008f6a:	e779      	b.n	8008e60 <_dtoa_r+0x8c8>
 8008f6c:	f000 fc0a 	bl	8009784 <__multadd>
 8008f70:	4639      	mov	r1, r7
 8008f72:	4681      	mov	r9, r0
 8008f74:	2300      	movs	r3, #0
 8008f76:	220a      	movs	r2, #10
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fc03 	bl	8009784 <__multadd>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	e7f2      	b.n	8008f68 <_dtoa_r+0x9d0>
 8008f82:	f04f 0900 	mov.w	r9, #0
 8008f86:	2201      	movs	r2, #1
 8008f88:	9901      	ldr	r1, [sp, #4]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fdae 	bl	8009aec <__lshift>
 8008f90:	4629      	mov	r1, r5
 8008f92:	9001      	str	r0, [sp, #4]
 8008f94:	f000 fdfe 	bl	8009b94 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	dcb9      	bgt.n	8008f10 <_dtoa_r+0x978>
 8008f9c:	d102      	bne.n	8008fa4 <_dtoa_r+0xa0c>
 8008f9e:	f018 0f01 	tst.w	r8, #1
 8008fa2:	d1b5      	bne.n	8008f10 <_dtoa_r+0x978>
 8008fa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fa8:	2b30      	cmp	r3, #48	; 0x30
 8008faa:	f106 32ff 	add.w	r2, r6, #4294967295
 8008fae:	f47f af11 	bne.w	8008dd4 <_dtoa_r+0x83c>
 8008fb2:	4616      	mov	r6, r2
 8008fb4:	e7f6      	b.n	8008fa4 <_dtoa_r+0xa0c>
 8008fb6:	9b04      	ldr	r3, [sp, #16]
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d105      	bne.n	8008fc8 <_dtoa_r+0xa30>
 8008fbc:	9a04      	ldr	r2, [sp, #16]
 8008fbe:	f10b 0b01 	add.w	fp, fp, #1
 8008fc2:	2331      	movs	r3, #49	; 0x31
 8008fc4:	7013      	strb	r3, [r2, #0]
 8008fc6:	e705      	b.n	8008dd4 <_dtoa_r+0x83c>
 8008fc8:	4616      	mov	r6, r2
 8008fca:	e7a1      	b.n	8008f10 <_dtoa_r+0x978>
 8008fcc:	4b16      	ldr	r3, [pc, #88]	; (8009028 <_dtoa_r+0xa90>)
 8008fce:	f7ff bb48 	b.w	8008662 <_dtoa_r+0xca>
 8008fd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f47f ab23 	bne.w	8008620 <_dtoa_r+0x88>
 8008fda:	4b14      	ldr	r3, [pc, #80]	; (800902c <_dtoa_r+0xa94>)
 8008fdc:	f7ff bb41 	b.w	8008662 <_dtoa_r+0xca>
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	f77f ae3b 	ble.w	8008c5e <_dtoa_r+0x6c6>
 8008fe8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008fec:	e64f      	b.n	8008c8e <_dtoa_r+0x6f6>
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dc03      	bgt.n	8008ffc <_dtoa_r+0xa64>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	f73f aed7 	bgt.w	8008daa <_dtoa_r+0x812>
 8008ffc:	9e04      	ldr	r6, [sp, #16]
 8008ffe:	9801      	ldr	r0, [sp, #4]
 8009000:	4629      	mov	r1, r5
 8009002:	f7ff fa3b 	bl	800847c <quorem>
 8009006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800900a:	f806 8b01 	strb.w	r8, [r6], #1
 800900e:	9b04      	ldr	r3, [sp, #16]
 8009010:	9a06      	ldr	r2, [sp, #24]
 8009012:	1af3      	subs	r3, r6, r3
 8009014:	429a      	cmp	r2, r3
 8009016:	ddb4      	ble.n	8008f82 <_dtoa_r+0x9ea>
 8009018:	2300      	movs	r3, #0
 800901a:	220a      	movs	r2, #10
 800901c:	9901      	ldr	r1, [sp, #4]
 800901e:	4620      	mov	r0, r4
 8009020:	f000 fbb0 	bl	8009784 <__multadd>
 8009024:	9001      	str	r0, [sp, #4]
 8009026:	e7ea      	b.n	8008ffe <_dtoa_r+0xa66>
 8009028:	0800a428 	.word	0x0800a428
 800902c:	0800a4a8 	.word	0x0800a4a8

08009030 <rshift>:
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	6906      	ldr	r6, [r0, #16]
 8009034:	114b      	asrs	r3, r1, #5
 8009036:	429e      	cmp	r6, r3
 8009038:	f100 0414 	add.w	r4, r0, #20
 800903c:	dd30      	ble.n	80090a0 <rshift+0x70>
 800903e:	f011 011f 	ands.w	r1, r1, #31
 8009042:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009046:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800904a:	d108      	bne.n	800905e <rshift+0x2e>
 800904c:	4621      	mov	r1, r4
 800904e:	42b2      	cmp	r2, r6
 8009050:	460b      	mov	r3, r1
 8009052:	d211      	bcs.n	8009078 <rshift+0x48>
 8009054:	f852 3b04 	ldr.w	r3, [r2], #4
 8009058:	f841 3b04 	str.w	r3, [r1], #4
 800905c:	e7f7      	b.n	800904e <rshift+0x1e>
 800905e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009062:	f1c1 0c20 	rsb	ip, r1, #32
 8009066:	40cd      	lsrs	r5, r1
 8009068:	3204      	adds	r2, #4
 800906a:	4623      	mov	r3, r4
 800906c:	42b2      	cmp	r2, r6
 800906e:	4617      	mov	r7, r2
 8009070:	d30c      	bcc.n	800908c <rshift+0x5c>
 8009072:	601d      	str	r5, [r3, #0]
 8009074:	b105      	cbz	r5, 8009078 <rshift+0x48>
 8009076:	3304      	adds	r3, #4
 8009078:	1b1a      	subs	r2, r3, r4
 800907a:	42a3      	cmp	r3, r4
 800907c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009080:	bf08      	it	eq
 8009082:	2300      	moveq	r3, #0
 8009084:	6102      	str	r2, [r0, #16]
 8009086:	bf08      	it	eq
 8009088:	6143      	streq	r3, [r0, #20]
 800908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908c:	683f      	ldr	r7, [r7, #0]
 800908e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009092:	433d      	orrs	r5, r7
 8009094:	f843 5b04 	str.w	r5, [r3], #4
 8009098:	f852 5b04 	ldr.w	r5, [r2], #4
 800909c:	40cd      	lsrs	r5, r1
 800909e:	e7e5      	b.n	800906c <rshift+0x3c>
 80090a0:	4623      	mov	r3, r4
 80090a2:	e7e9      	b.n	8009078 <rshift+0x48>

080090a4 <__hexdig_fun>:
 80090a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090a8:	2b09      	cmp	r3, #9
 80090aa:	d802      	bhi.n	80090b2 <__hexdig_fun+0xe>
 80090ac:	3820      	subs	r0, #32
 80090ae:	b2c0      	uxtb	r0, r0
 80090b0:	4770      	bx	lr
 80090b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	d801      	bhi.n	80090be <__hexdig_fun+0x1a>
 80090ba:	3847      	subs	r0, #71	; 0x47
 80090bc:	e7f7      	b.n	80090ae <__hexdig_fun+0xa>
 80090be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	d801      	bhi.n	80090ca <__hexdig_fun+0x26>
 80090c6:	3827      	subs	r0, #39	; 0x27
 80090c8:	e7f1      	b.n	80090ae <__hexdig_fun+0xa>
 80090ca:	2000      	movs	r0, #0
 80090cc:	4770      	bx	lr

080090ce <__gethex>:
 80090ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d2:	b08b      	sub	sp, #44	; 0x2c
 80090d4:	468a      	mov	sl, r1
 80090d6:	9002      	str	r0, [sp, #8]
 80090d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	4690      	mov	r8, r2
 80090de:	f000 fad0 	bl	8009682 <__localeconv_l>
 80090e2:	6803      	ldr	r3, [r0, #0]
 80090e4:	9303      	str	r3, [sp, #12]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f7 f8aa 	bl	8000240 <strlen>
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	9001      	str	r0, [sp, #4]
 80090f0:	4403      	add	r3, r0
 80090f2:	f04f 0b00 	mov.w	fp, #0
 80090f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80090fa:	9307      	str	r3, [sp, #28]
 80090fc:	f8da 3000 	ldr.w	r3, [sl]
 8009100:	3302      	adds	r3, #2
 8009102:	461f      	mov	r7, r3
 8009104:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009108:	2830      	cmp	r0, #48	; 0x30
 800910a:	d06c      	beq.n	80091e6 <__gethex+0x118>
 800910c:	f7ff ffca 	bl	80090a4 <__hexdig_fun>
 8009110:	4604      	mov	r4, r0
 8009112:	2800      	cmp	r0, #0
 8009114:	d16a      	bne.n	80091ec <__gethex+0x11e>
 8009116:	9a01      	ldr	r2, [sp, #4]
 8009118:	9903      	ldr	r1, [sp, #12]
 800911a:	4638      	mov	r0, r7
 800911c:	f7fe fb1a 	bl	8007754 <strncmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	d166      	bne.n	80091f2 <__gethex+0x124>
 8009124:	9b01      	ldr	r3, [sp, #4]
 8009126:	5cf8      	ldrb	r0, [r7, r3]
 8009128:	18fe      	adds	r6, r7, r3
 800912a:	f7ff ffbb 	bl	80090a4 <__hexdig_fun>
 800912e:	2800      	cmp	r0, #0
 8009130:	d062      	beq.n	80091f8 <__gethex+0x12a>
 8009132:	4633      	mov	r3, r6
 8009134:	7818      	ldrb	r0, [r3, #0]
 8009136:	2830      	cmp	r0, #48	; 0x30
 8009138:	461f      	mov	r7, r3
 800913a:	f103 0301 	add.w	r3, r3, #1
 800913e:	d0f9      	beq.n	8009134 <__gethex+0x66>
 8009140:	f7ff ffb0 	bl	80090a4 <__hexdig_fun>
 8009144:	fab0 f580 	clz	r5, r0
 8009148:	096d      	lsrs	r5, r5, #5
 800914a:	4634      	mov	r4, r6
 800914c:	f04f 0b01 	mov.w	fp, #1
 8009150:	463a      	mov	r2, r7
 8009152:	4616      	mov	r6, r2
 8009154:	3201      	adds	r2, #1
 8009156:	7830      	ldrb	r0, [r6, #0]
 8009158:	f7ff ffa4 	bl	80090a4 <__hexdig_fun>
 800915c:	2800      	cmp	r0, #0
 800915e:	d1f8      	bne.n	8009152 <__gethex+0x84>
 8009160:	9a01      	ldr	r2, [sp, #4]
 8009162:	9903      	ldr	r1, [sp, #12]
 8009164:	4630      	mov	r0, r6
 8009166:	f7fe faf5 	bl	8007754 <strncmp>
 800916a:	b950      	cbnz	r0, 8009182 <__gethex+0xb4>
 800916c:	b954      	cbnz	r4, 8009184 <__gethex+0xb6>
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	18f4      	adds	r4, r6, r3
 8009172:	4622      	mov	r2, r4
 8009174:	4616      	mov	r6, r2
 8009176:	3201      	adds	r2, #1
 8009178:	7830      	ldrb	r0, [r6, #0]
 800917a:	f7ff ff93 	bl	80090a4 <__hexdig_fun>
 800917e:	2800      	cmp	r0, #0
 8009180:	d1f8      	bne.n	8009174 <__gethex+0xa6>
 8009182:	b10c      	cbz	r4, 8009188 <__gethex+0xba>
 8009184:	1ba4      	subs	r4, r4, r6
 8009186:	00a4      	lsls	r4, r4, #2
 8009188:	7833      	ldrb	r3, [r6, #0]
 800918a:	2b50      	cmp	r3, #80	; 0x50
 800918c:	d001      	beq.n	8009192 <__gethex+0xc4>
 800918e:	2b70      	cmp	r3, #112	; 0x70
 8009190:	d140      	bne.n	8009214 <__gethex+0x146>
 8009192:	7873      	ldrb	r3, [r6, #1]
 8009194:	2b2b      	cmp	r3, #43	; 0x2b
 8009196:	d031      	beq.n	80091fc <__gethex+0x12e>
 8009198:	2b2d      	cmp	r3, #45	; 0x2d
 800919a:	d033      	beq.n	8009204 <__gethex+0x136>
 800919c:	1c71      	adds	r1, r6, #1
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	7808      	ldrb	r0, [r1, #0]
 80091a4:	f7ff ff7e 	bl	80090a4 <__hexdig_fun>
 80091a8:	1e43      	subs	r3, r0, #1
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b18      	cmp	r3, #24
 80091ae:	d831      	bhi.n	8009214 <__gethex+0x146>
 80091b0:	f1a0 0210 	sub.w	r2, r0, #16
 80091b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091b8:	f7ff ff74 	bl	80090a4 <__hexdig_fun>
 80091bc:	1e43      	subs	r3, r0, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b18      	cmp	r3, #24
 80091c2:	d922      	bls.n	800920a <__gethex+0x13c>
 80091c4:	f1b9 0f00 	cmp.w	r9, #0
 80091c8:	d000      	beq.n	80091cc <__gethex+0xfe>
 80091ca:	4252      	negs	r2, r2
 80091cc:	4414      	add	r4, r2
 80091ce:	f8ca 1000 	str.w	r1, [sl]
 80091d2:	b30d      	cbz	r5, 8009218 <__gethex+0x14a>
 80091d4:	f1bb 0f00 	cmp.w	fp, #0
 80091d8:	bf0c      	ite	eq
 80091da:	2706      	moveq	r7, #6
 80091dc:	2700      	movne	r7, #0
 80091de:	4638      	mov	r0, r7
 80091e0:	b00b      	add	sp, #44	; 0x2c
 80091e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e6:	f10b 0b01 	add.w	fp, fp, #1
 80091ea:	e78a      	b.n	8009102 <__gethex+0x34>
 80091ec:	2500      	movs	r5, #0
 80091ee:	462c      	mov	r4, r5
 80091f0:	e7ae      	b.n	8009150 <__gethex+0x82>
 80091f2:	463e      	mov	r6, r7
 80091f4:	2501      	movs	r5, #1
 80091f6:	e7c7      	b.n	8009188 <__gethex+0xba>
 80091f8:	4604      	mov	r4, r0
 80091fa:	e7fb      	b.n	80091f4 <__gethex+0x126>
 80091fc:	f04f 0900 	mov.w	r9, #0
 8009200:	1cb1      	adds	r1, r6, #2
 8009202:	e7ce      	b.n	80091a2 <__gethex+0xd4>
 8009204:	f04f 0901 	mov.w	r9, #1
 8009208:	e7fa      	b.n	8009200 <__gethex+0x132>
 800920a:	230a      	movs	r3, #10
 800920c:	fb03 0202 	mla	r2, r3, r2, r0
 8009210:	3a10      	subs	r2, #16
 8009212:	e7cf      	b.n	80091b4 <__gethex+0xe6>
 8009214:	4631      	mov	r1, r6
 8009216:	e7da      	b.n	80091ce <__gethex+0x100>
 8009218:	1bf3      	subs	r3, r6, r7
 800921a:	3b01      	subs	r3, #1
 800921c:	4629      	mov	r1, r5
 800921e:	2b07      	cmp	r3, #7
 8009220:	dc49      	bgt.n	80092b6 <__gethex+0x1e8>
 8009222:	9802      	ldr	r0, [sp, #8]
 8009224:	f000 fa63 	bl	80096ee <_Balloc>
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	f100 0914 	add.w	r9, r0, #20
 800922e:	f04f 0b00 	mov.w	fp, #0
 8009232:	f1c3 0301 	rsb	r3, r3, #1
 8009236:	4605      	mov	r5, r0
 8009238:	f8cd 9010 	str.w	r9, [sp, #16]
 800923c:	46da      	mov	sl, fp
 800923e:	9308      	str	r3, [sp, #32]
 8009240:	42b7      	cmp	r7, r6
 8009242:	d33b      	bcc.n	80092bc <__gethex+0x1ee>
 8009244:	9804      	ldr	r0, [sp, #16]
 8009246:	f840 ab04 	str.w	sl, [r0], #4
 800924a:	eba0 0009 	sub.w	r0, r0, r9
 800924e:	1080      	asrs	r0, r0, #2
 8009250:	6128      	str	r0, [r5, #16]
 8009252:	0147      	lsls	r7, r0, #5
 8009254:	4650      	mov	r0, sl
 8009256:	f000 fb0e 	bl	8009876 <__hi0bits>
 800925a:	f8d8 6000 	ldr.w	r6, [r8]
 800925e:	1a3f      	subs	r7, r7, r0
 8009260:	42b7      	cmp	r7, r6
 8009262:	dd64      	ble.n	800932e <__gethex+0x260>
 8009264:	1bbf      	subs	r7, r7, r6
 8009266:	4639      	mov	r1, r7
 8009268:	4628      	mov	r0, r5
 800926a:	f000 fe1e 	bl	8009eaa <__any_on>
 800926e:	4682      	mov	sl, r0
 8009270:	b178      	cbz	r0, 8009292 <__gethex+0x1c4>
 8009272:	1e7b      	subs	r3, r7, #1
 8009274:	1159      	asrs	r1, r3, #5
 8009276:	f003 021f 	and.w	r2, r3, #31
 800927a:	f04f 0a01 	mov.w	sl, #1
 800927e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009282:	fa0a f202 	lsl.w	r2, sl, r2
 8009286:	420a      	tst	r2, r1
 8009288:	d003      	beq.n	8009292 <__gethex+0x1c4>
 800928a:	4553      	cmp	r3, sl
 800928c:	dc46      	bgt.n	800931c <__gethex+0x24e>
 800928e:	f04f 0a02 	mov.w	sl, #2
 8009292:	4639      	mov	r1, r7
 8009294:	4628      	mov	r0, r5
 8009296:	f7ff fecb 	bl	8009030 <rshift>
 800929a:	443c      	add	r4, r7
 800929c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	da52      	bge.n	800934a <__gethex+0x27c>
 80092a4:	4629      	mov	r1, r5
 80092a6:	9802      	ldr	r0, [sp, #8]
 80092a8:	f000 fa55 	bl	8009756 <_Bfree>
 80092ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ae:	2300      	movs	r3, #0
 80092b0:	6013      	str	r3, [r2, #0]
 80092b2:	27a3      	movs	r7, #163	; 0xa3
 80092b4:	e793      	b.n	80091de <__gethex+0x110>
 80092b6:	3101      	adds	r1, #1
 80092b8:	105b      	asrs	r3, r3, #1
 80092ba:	e7b0      	b.n	800921e <__gethex+0x150>
 80092bc:	1e73      	subs	r3, r6, #1
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	9a07      	ldr	r2, [sp, #28]
 80092c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d018      	beq.n	80092fc <__gethex+0x22e>
 80092ca:	f1bb 0f20 	cmp.w	fp, #32
 80092ce:	d107      	bne.n	80092e0 <__gethex+0x212>
 80092d0:	9b04      	ldr	r3, [sp, #16]
 80092d2:	f8c3 a000 	str.w	sl, [r3]
 80092d6:	3304      	adds	r3, #4
 80092d8:	f04f 0a00 	mov.w	sl, #0
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	46d3      	mov	fp, sl
 80092e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80092e4:	f7ff fede 	bl	80090a4 <__hexdig_fun>
 80092e8:	f000 000f 	and.w	r0, r0, #15
 80092ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80092f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80092f4:	f10b 0b04 	add.w	fp, fp, #4
 80092f8:	9b05      	ldr	r3, [sp, #20]
 80092fa:	e00d      	b.n	8009318 <__gethex+0x24a>
 80092fc:	9b05      	ldr	r3, [sp, #20]
 80092fe:	9a08      	ldr	r2, [sp, #32]
 8009300:	4413      	add	r3, r2
 8009302:	42bb      	cmp	r3, r7
 8009304:	d3e1      	bcc.n	80092ca <__gethex+0x1fc>
 8009306:	4618      	mov	r0, r3
 8009308:	9a01      	ldr	r2, [sp, #4]
 800930a:	9903      	ldr	r1, [sp, #12]
 800930c:	9309      	str	r3, [sp, #36]	; 0x24
 800930e:	f7fe fa21 	bl	8007754 <strncmp>
 8009312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009314:	2800      	cmp	r0, #0
 8009316:	d1d8      	bne.n	80092ca <__gethex+0x1fc>
 8009318:	461e      	mov	r6, r3
 800931a:	e791      	b.n	8009240 <__gethex+0x172>
 800931c:	1eb9      	subs	r1, r7, #2
 800931e:	4628      	mov	r0, r5
 8009320:	f000 fdc3 	bl	8009eaa <__any_on>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0b2      	beq.n	800928e <__gethex+0x1c0>
 8009328:	f04f 0a03 	mov.w	sl, #3
 800932c:	e7b1      	b.n	8009292 <__gethex+0x1c4>
 800932e:	da09      	bge.n	8009344 <__gethex+0x276>
 8009330:	1bf7      	subs	r7, r6, r7
 8009332:	4629      	mov	r1, r5
 8009334:	463a      	mov	r2, r7
 8009336:	9802      	ldr	r0, [sp, #8]
 8009338:	f000 fbd8 	bl	8009aec <__lshift>
 800933c:	1be4      	subs	r4, r4, r7
 800933e:	4605      	mov	r5, r0
 8009340:	f100 0914 	add.w	r9, r0, #20
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	e7a8      	b.n	800929c <__gethex+0x1ce>
 800934a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800934e:	42a0      	cmp	r0, r4
 8009350:	dd6a      	ble.n	8009428 <__gethex+0x35a>
 8009352:	1b04      	subs	r4, r0, r4
 8009354:	42a6      	cmp	r6, r4
 8009356:	dc2e      	bgt.n	80093b6 <__gethex+0x2e8>
 8009358:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d022      	beq.n	80093a6 <__gethex+0x2d8>
 8009360:	2b03      	cmp	r3, #3
 8009362:	d024      	beq.n	80093ae <__gethex+0x2e0>
 8009364:	2b01      	cmp	r3, #1
 8009366:	d115      	bne.n	8009394 <__gethex+0x2c6>
 8009368:	42a6      	cmp	r6, r4
 800936a:	d113      	bne.n	8009394 <__gethex+0x2c6>
 800936c:	2e01      	cmp	r6, #1
 800936e:	dc0b      	bgt.n	8009388 <__gethex+0x2ba>
 8009370:	9a06      	ldr	r2, [sp, #24]
 8009372:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	2301      	movs	r3, #1
 800937a:	612b      	str	r3, [r5, #16]
 800937c:	f8c9 3000 	str.w	r3, [r9]
 8009380:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009382:	2762      	movs	r7, #98	; 0x62
 8009384:	601d      	str	r5, [r3, #0]
 8009386:	e72a      	b.n	80091de <__gethex+0x110>
 8009388:	1e71      	subs	r1, r6, #1
 800938a:	4628      	mov	r0, r5
 800938c:	f000 fd8d 	bl	8009eaa <__any_on>
 8009390:	2800      	cmp	r0, #0
 8009392:	d1ed      	bne.n	8009370 <__gethex+0x2a2>
 8009394:	4629      	mov	r1, r5
 8009396:	9802      	ldr	r0, [sp, #8]
 8009398:	f000 f9dd 	bl	8009756 <_Bfree>
 800939c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800939e:	2300      	movs	r3, #0
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	2750      	movs	r7, #80	; 0x50
 80093a4:	e71b      	b.n	80091de <__gethex+0x110>
 80093a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0e1      	beq.n	8009370 <__gethex+0x2a2>
 80093ac:	e7f2      	b.n	8009394 <__gethex+0x2c6>
 80093ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1dd      	bne.n	8009370 <__gethex+0x2a2>
 80093b4:	e7ee      	b.n	8009394 <__gethex+0x2c6>
 80093b6:	1e67      	subs	r7, r4, #1
 80093b8:	f1ba 0f00 	cmp.w	sl, #0
 80093bc:	d131      	bne.n	8009422 <__gethex+0x354>
 80093be:	b127      	cbz	r7, 80093ca <__gethex+0x2fc>
 80093c0:	4639      	mov	r1, r7
 80093c2:	4628      	mov	r0, r5
 80093c4:	f000 fd71 	bl	8009eaa <__any_on>
 80093c8:	4682      	mov	sl, r0
 80093ca:	117a      	asrs	r2, r7, #5
 80093cc:	2301      	movs	r3, #1
 80093ce:	f007 071f 	and.w	r7, r7, #31
 80093d2:	fa03 f707 	lsl.w	r7, r3, r7
 80093d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80093da:	4621      	mov	r1, r4
 80093dc:	421f      	tst	r7, r3
 80093de:	4628      	mov	r0, r5
 80093e0:	bf18      	it	ne
 80093e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80093e6:	1b36      	subs	r6, r6, r4
 80093e8:	f7ff fe22 	bl	8009030 <rshift>
 80093ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80093f0:	2702      	movs	r7, #2
 80093f2:	f1ba 0f00 	cmp.w	sl, #0
 80093f6:	d048      	beq.n	800948a <__gethex+0x3bc>
 80093f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d015      	beq.n	800942c <__gethex+0x35e>
 8009400:	2b03      	cmp	r3, #3
 8009402:	d017      	beq.n	8009434 <__gethex+0x366>
 8009404:	2b01      	cmp	r3, #1
 8009406:	d109      	bne.n	800941c <__gethex+0x34e>
 8009408:	f01a 0f02 	tst.w	sl, #2
 800940c:	d006      	beq.n	800941c <__gethex+0x34e>
 800940e:	f8d9 3000 	ldr.w	r3, [r9]
 8009412:	ea4a 0a03 	orr.w	sl, sl, r3
 8009416:	f01a 0f01 	tst.w	sl, #1
 800941a:	d10e      	bne.n	800943a <__gethex+0x36c>
 800941c:	f047 0710 	orr.w	r7, r7, #16
 8009420:	e033      	b.n	800948a <__gethex+0x3bc>
 8009422:	f04f 0a01 	mov.w	sl, #1
 8009426:	e7d0      	b.n	80093ca <__gethex+0x2fc>
 8009428:	2701      	movs	r7, #1
 800942a:	e7e2      	b.n	80093f2 <__gethex+0x324>
 800942c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800942e:	f1c3 0301 	rsb	r3, r3, #1
 8009432:	9315      	str	r3, [sp, #84]	; 0x54
 8009434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0f0      	beq.n	800941c <__gethex+0x34e>
 800943a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800943e:	f105 0314 	add.w	r3, r5, #20
 8009442:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009446:	eb03 010a 	add.w	r1, r3, sl
 800944a:	f04f 0c00 	mov.w	ip, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f853 2b04 	ldr.w	r2, [r3], #4
 8009454:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009458:	d01c      	beq.n	8009494 <__gethex+0x3c6>
 800945a:	3201      	adds	r2, #1
 800945c:	6002      	str	r2, [r0, #0]
 800945e:	2f02      	cmp	r7, #2
 8009460:	f105 0314 	add.w	r3, r5, #20
 8009464:	d138      	bne.n	80094d8 <__gethex+0x40a>
 8009466:	f8d8 2000 	ldr.w	r2, [r8]
 800946a:	3a01      	subs	r2, #1
 800946c:	42b2      	cmp	r2, r6
 800946e:	d10a      	bne.n	8009486 <__gethex+0x3b8>
 8009470:	1171      	asrs	r1, r6, #5
 8009472:	2201      	movs	r2, #1
 8009474:	f006 061f 	and.w	r6, r6, #31
 8009478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800947c:	fa02 f606 	lsl.w	r6, r2, r6
 8009480:	421e      	tst	r6, r3
 8009482:	bf18      	it	ne
 8009484:	4617      	movne	r7, r2
 8009486:	f047 0720 	orr.w	r7, r7, #32
 800948a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800948c:	601d      	str	r5, [r3, #0]
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	601c      	str	r4, [r3, #0]
 8009492:	e6a4      	b.n	80091de <__gethex+0x110>
 8009494:	4299      	cmp	r1, r3
 8009496:	f843 cc04 	str.w	ip, [r3, #-4]
 800949a:	d8d8      	bhi.n	800944e <__gethex+0x380>
 800949c:	68ab      	ldr	r3, [r5, #8]
 800949e:	4599      	cmp	r9, r3
 80094a0:	db12      	blt.n	80094c8 <__gethex+0x3fa>
 80094a2:	6869      	ldr	r1, [r5, #4]
 80094a4:	9802      	ldr	r0, [sp, #8]
 80094a6:	3101      	adds	r1, #1
 80094a8:	f000 f921 	bl	80096ee <_Balloc>
 80094ac:	692a      	ldr	r2, [r5, #16]
 80094ae:	3202      	adds	r2, #2
 80094b0:	f105 010c 	add.w	r1, r5, #12
 80094b4:	4683      	mov	fp, r0
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	300c      	adds	r0, #12
 80094ba:	f000 f90d 	bl	80096d8 <memcpy>
 80094be:	4629      	mov	r1, r5
 80094c0:	9802      	ldr	r0, [sp, #8]
 80094c2:	f000 f948 	bl	8009756 <_Bfree>
 80094c6:	465d      	mov	r5, fp
 80094c8:	692b      	ldr	r3, [r5, #16]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80094d0:	612a      	str	r2, [r5, #16]
 80094d2:	2201      	movs	r2, #1
 80094d4:	615a      	str	r2, [r3, #20]
 80094d6:	e7c2      	b.n	800945e <__gethex+0x390>
 80094d8:	692a      	ldr	r2, [r5, #16]
 80094da:	454a      	cmp	r2, r9
 80094dc:	dd0b      	ble.n	80094f6 <__gethex+0x428>
 80094de:	2101      	movs	r1, #1
 80094e0:	4628      	mov	r0, r5
 80094e2:	f7ff fda5 	bl	8009030 <rshift>
 80094e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094ea:	3401      	adds	r4, #1
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	f6ff aed9 	blt.w	80092a4 <__gethex+0x1d6>
 80094f2:	2701      	movs	r7, #1
 80094f4:	e7c7      	b.n	8009486 <__gethex+0x3b8>
 80094f6:	f016 061f 	ands.w	r6, r6, #31
 80094fa:	d0fa      	beq.n	80094f2 <__gethex+0x424>
 80094fc:	449a      	add	sl, r3
 80094fe:	f1c6 0620 	rsb	r6, r6, #32
 8009502:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009506:	f000 f9b6 	bl	8009876 <__hi0bits>
 800950a:	42b0      	cmp	r0, r6
 800950c:	dbe7      	blt.n	80094de <__gethex+0x410>
 800950e:	e7f0      	b.n	80094f2 <__gethex+0x424>

08009510 <L_shift>:
 8009510:	f1c2 0208 	rsb	r2, r2, #8
 8009514:	0092      	lsls	r2, r2, #2
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	f1c2 0620 	rsb	r6, r2, #32
 800951c:	6843      	ldr	r3, [r0, #4]
 800951e:	6804      	ldr	r4, [r0, #0]
 8009520:	fa03 f506 	lsl.w	r5, r3, r6
 8009524:	432c      	orrs	r4, r5
 8009526:	40d3      	lsrs	r3, r2
 8009528:	6004      	str	r4, [r0, #0]
 800952a:	f840 3f04 	str.w	r3, [r0, #4]!
 800952e:	4288      	cmp	r0, r1
 8009530:	d3f4      	bcc.n	800951c <L_shift+0xc>
 8009532:	bd70      	pop	{r4, r5, r6, pc}

08009534 <__match>:
 8009534:	b530      	push	{r4, r5, lr}
 8009536:	6803      	ldr	r3, [r0, #0]
 8009538:	3301      	adds	r3, #1
 800953a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953e:	b914      	cbnz	r4, 8009546 <__match+0x12>
 8009540:	6003      	str	r3, [r0, #0]
 8009542:	2001      	movs	r0, #1
 8009544:	bd30      	pop	{r4, r5, pc}
 8009546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800954a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800954e:	2d19      	cmp	r5, #25
 8009550:	bf98      	it	ls
 8009552:	3220      	addls	r2, #32
 8009554:	42a2      	cmp	r2, r4
 8009556:	d0f0      	beq.n	800953a <__match+0x6>
 8009558:	2000      	movs	r0, #0
 800955a:	e7f3      	b.n	8009544 <__match+0x10>

0800955c <__hexnan>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	680b      	ldr	r3, [r1, #0]
 8009562:	6801      	ldr	r1, [r0, #0]
 8009564:	115f      	asrs	r7, r3, #5
 8009566:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800956a:	f013 031f 	ands.w	r3, r3, #31
 800956e:	b087      	sub	sp, #28
 8009570:	bf18      	it	ne
 8009572:	3704      	addne	r7, #4
 8009574:	2500      	movs	r5, #0
 8009576:	1f3e      	subs	r6, r7, #4
 8009578:	4682      	mov	sl, r0
 800957a:	4690      	mov	r8, r2
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009582:	46b1      	mov	r9, r6
 8009584:	4634      	mov	r4, r6
 8009586:	9502      	str	r5, [sp, #8]
 8009588:	46ab      	mov	fp, r5
 800958a:	784a      	ldrb	r2, [r1, #1]
 800958c:	1c4b      	adds	r3, r1, #1
 800958e:	9303      	str	r3, [sp, #12]
 8009590:	b342      	cbz	r2, 80095e4 <__hexnan+0x88>
 8009592:	4610      	mov	r0, r2
 8009594:	9105      	str	r1, [sp, #20]
 8009596:	9204      	str	r2, [sp, #16]
 8009598:	f7ff fd84 	bl	80090a4 <__hexdig_fun>
 800959c:	2800      	cmp	r0, #0
 800959e:	d143      	bne.n	8009628 <__hexnan+0xcc>
 80095a0:	9a04      	ldr	r2, [sp, #16]
 80095a2:	9905      	ldr	r1, [sp, #20]
 80095a4:	2a20      	cmp	r2, #32
 80095a6:	d818      	bhi.n	80095da <__hexnan+0x7e>
 80095a8:	9b02      	ldr	r3, [sp, #8]
 80095aa:	459b      	cmp	fp, r3
 80095ac:	dd13      	ble.n	80095d6 <__hexnan+0x7a>
 80095ae:	454c      	cmp	r4, r9
 80095b0:	d206      	bcs.n	80095c0 <__hexnan+0x64>
 80095b2:	2d07      	cmp	r5, #7
 80095b4:	dc04      	bgt.n	80095c0 <__hexnan+0x64>
 80095b6:	462a      	mov	r2, r5
 80095b8:	4649      	mov	r1, r9
 80095ba:	4620      	mov	r0, r4
 80095bc:	f7ff ffa8 	bl	8009510 <L_shift>
 80095c0:	4544      	cmp	r4, r8
 80095c2:	d944      	bls.n	800964e <__hexnan+0xf2>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f1a4 0904 	sub.w	r9, r4, #4
 80095ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80095ce:	f8cd b008 	str.w	fp, [sp, #8]
 80095d2:	464c      	mov	r4, r9
 80095d4:	461d      	mov	r5, r3
 80095d6:	9903      	ldr	r1, [sp, #12]
 80095d8:	e7d7      	b.n	800958a <__hexnan+0x2e>
 80095da:	2a29      	cmp	r2, #41	; 0x29
 80095dc:	d14a      	bne.n	8009674 <__hexnan+0x118>
 80095de:	3102      	adds	r1, #2
 80095e0:	f8ca 1000 	str.w	r1, [sl]
 80095e4:	f1bb 0f00 	cmp.w	fp, #0
 80095e8:	d044      	beq.n	8009674 <__hexnan+0x118>
 80095ea:	454c      	cmp	r4, r9
 80095ec:	d206      	bcs.n	80095fc <__hexnan+0xa0>
 80095ee:	2d07      	cmp	r5, #7
 80095f0:	dc04      	bgt.n	80095fc <__hexnan+0xa0>
 80095f2:	462a      	mov	r2, r5
 80095f4:	4649      	mov	r1, r9
 80095f6:	4620      	mov	r0, r4
 80095f8:	f7ff ff8a 	bl	8009510 <L_shift>
 80095fc:	4544      	cmp	r4, r8
 80095fe:	d928      	bls.n	8009652 <__hexnan+0xf6>
 8009600:	4643      	mov	r3, r8
 8009602:	f854 2b04 	ldr.w	r2, [r4], #4
 8009606:	f843 2b04 	str.w	r2, [r3], #4
 800960a:	42a6      	cmp	r6, r4
 800960c:	d2f9      	bcs.n	8009602 <__hexnan+0xa6>
 800960e:	2200      	movs	r2, #0
 8009610:	f843 2b04 	str.w	r2, [r3], #4
 8009614:	429e      	cmp	r6, r3
 8009616:	d2fb      	bcs.n	8009610 <__hexnan+0xb4>
 8009618:	6833      	ldr	r3, [r6, #0]
 800961a:	b91b      	cbnz	r3, 8009624 <__hexnan+0xc8>
 800961c:	4546      	cmp	r6, r8
 800961e:	d127      	bne.n	8009670 <__hexnan+0x114>
 8009620:	2301      	movs	r3, #1
 8009622:	6033      	str	r3, [r6, #0]
 8009624:	2005      	movs	r0, #5
 8009626:	e026      	b.n	8009676 <__hexnan+0x11a>
 8009628:	3501      	adds	r5, #1
 800962a:	2d08      	cmp	r5, #8
 800962c:	f10b 0b01 	add.w	fp, fp, #1
 8009630:	dd06      	ble.n	8009640 <__hexnan+0xe4>
 8009632:	4544      	cmp	r4, r8
 8009634:	d9cf      	bls.n	80095d6 <__hexnan+0x7a>
 8009636:	2300      	movs	r3, #0
 8009638:	f844 3c04 	str.w	r3, [r4, #-4]
 800963c:	2501      	movs	r5, #1
 800963e:	3c04      	subs	r4, #4
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	f000 000f 	and.w	r0, r0, #15
 8009646:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800964a:	6020      	str	r0, [r4, #0]
 800964c:	e7c3      	b.n	80095d6 <__hexnan+0x7a>
 800964e:	2508      	movs	r5, #8
 8009650:	e7c1      	b.n	80095d6 <__hexnan+0x7a>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0df      	beq.n	8009618 <__hexnan+0xbc>
 8009658:	f04f 32ff 	mov.w	r2, #4294967295
 800965c:	f1c3 0320 	rsb	r3, r3, #32
 8009660:	fa22 f303 	lsr.w	r3, r2, r3
 8009664:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009668:	401a      	ands	r2, r3
 800966a:	f847 2c04 	str.w	r2, [r7, #-4]
 800966e:	e7d3      	b.n	8009618 <__hexnan+0xbc>
 8009670:	3e04      	subs	r6, #4
 8009672:	e7d1      	b.n	8009618 <__hexnan+0xbc>
 8009674:	2004      	movs	r0, #4
 8009676:	b007      	add	sp, #28
 8009678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800967c <__locale_ctype_ptr_l>:
 800967c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009680:	4770      	bx	lr

08009682 <__localeconv_l>:
 8009682:	30f0      	adds	r0, #240	; 0xf0
 8009684:	4770      	bx	lr
	...

08009688 <_localeconv_r>:
 8009688:	4b04      	ldr	r3, [pc, #16]	; (800969c <_localeconv_r+0x14>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a18      	ldr	r0, [r3, #32]
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <_localeconv_r+0x18>)
 8009690:	2800      	cmp	r0, #0
 8009692:	bf08      	it	eq
 8009694:	4618      	moveq	r0, r3
 8009696:	30f0      	adds	r0, #240	; 0xf0
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000020 	.word	0x20000020
 80096a0:	20000084 	.word	0x20000084

080096a4 <malloc>:
 80096a4:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <malloc+0xc>)
 80096a6:	4601      	mov	r1, r0
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	f000 bc7b 	b.w	8009fa4 <_malloc_r>
 80096ae:	bf00      	nop
 80096b0:	20000020 	.word	0x20000020

080096b4 <__ascii_mbtowc>:
 80096b4:	b082      	sub	sp, #8
 80096b6:	b901      	cbnz	r1, 80096ba <__ascii_mbtowc+0x6>
 80096b8:	a901      	add	r1, sp, #4
 80096ba:	b142      	cbz	r2, 80096ce <__ascii_mbtowc+0x1a>
 80096bc:	b14b      	cbz	r3, 80096d2 <__ascii_mbtowc+0x1e>
 80096be:	7813      	ldrb	r3, [r2, #0]
 80096c0:	600b      	str	r3, [r1, #0]
 80096c2:	7812      	ldrb	r2, [r2, #0]
 80096c4:	1c10      	adds	r0, r2, #0
 80096c6:	bf18      	it	ne
 80096c8:	2001      	movne	r0, #1
 80096ca:	b002      	add	sp, #8
 80096cc:	4770      	bx	lr
 80096ce:	4610      	mov	r0, r2
 80096d0:	e7fb      	b.n	80096ca <__ascii_mbtowc+0x16>
 80096d2:	f06f 0001 	mvn.w	r0, #1
 80096d6:	e7f8      	b.n	80096ca <__ascii_mbtowc+0x16>

080096d8 <memcpy>:
 80096d8:	b510      	push	{r4, lr}
 80096da:	1e43      	subs	r3, r0, #1
 80096dc:	440a      	add	r2, r1
 80096de:	4291      	cmp	r1, r2
 80096e0:	d100      	bne.n	80096e4 <memcpy+0xc>
 80096e2:	bd10      	pop	{r4, pc}
 80096e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ec:	e7f7      	b.n	80096de <memcpy+0x6>

080096ee <_Balloc>:
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f2:	4604      	mov	r4, r0
 80096f4:	460e      	mov	r6, r1
 80096f6:	b93d      	cbnz	r5, 8009708 <_Balloc+0x1a>
 80096f8:	2010      	movs	r0, #16
 80096fa:	f7ff ffd3 	bl	80096a4 <malloc>
 80096fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009700:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009704:	6005      	str	r5, [r0, #0]
 8009706:	60c5      	str	r5, [r0, #12]
 8009708:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800970a:	68eb      	ldr	r3, [r5, #12]
 800970c:	b183      	cbz	r3, 8009730 <_Balloc+0x42>
 800970e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009716:	b9b8      	cbnz	r0, 8009748 <_Balloc+0x5a>
 8009718:	2101      	movs	r1, #1
 800971a:	fa01 f506 	lsl.w	r5, r1, r6
 800971e:	1d6a      	adds	r2, r5, #5
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fbe2 	bl	8009eec <_calloc_r>
 8009728:	b160      	cbz	r0, 8009744 <_Balloc+0x56>
 800972a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800972e:	e00e      	b.n	800974e <_Balloc+0x60>
 8009730:	2221      	movs	r2, #33	; 0x21
 8009732:	2104      	movs	r1, #4
 8009734:	4620      	mov	r0, r4
 8009736:	f000 fbd9 	bl	8009eec <_calloc_r>
 800973a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800973c:	60e8      	str	r0, [r5, #12]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e4      	bne.n	800970e <_Balloc+0x20>
 8009744:	2000      	movs	r0, #0
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	6802      	ldr	r2, [r0, #0]
 800974a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800974e:	2300      	movs	r3, #0
 8009750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009754:	e7f7      	b.n	8009746 <_Balloc+0x58>

08009756 <_Bfree>:
 8009756:	b570      	push	{r4, r5, r6, lr}
 8009758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800975a:	4606      	mov	r6, r0
 800975c:	460d      	mov	r5, r1
 800975e:	b93c      	cbnz	r4, 8009770 <_Bfree+0x1a>
 8009760:	2010      	movs	r0, #16
 8009762:	f7ff ff9f 	bl	80096a4 <malloc>
 8009766:	6270      	str	r0, [r6, #36]	; 0x24
 8009768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800976c:	6004      	str	r4, [r0, #0]
 800976e:	60c4      	str	r4, [r0, #12]
 8009770:	b13d      	cbz	r5, 8009782 <_Bfree+0x2c>
 8009772:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009774:	686a      	ldr	r2, [r5, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800977c:	6029      	str	r1, [r5, #0]
 800977e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009782:	bd70      	pop	{r4, r5, r6, pc}

08009784 <__multadd>:
 8009784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009788:	690d      	ldr	r5, [r1, #16]
 800978a:	461f      	mov	r7, r3
 800978c:	4606      	mov	r6, r0
 800978e:	460c      	mov	r4, r1
 8009790:	f101 0c14 	add.w	ip, r1, #20
 8009794:	2300      	movs	r3, #0
 8009796:	f8dc 0000 	ldr.w	r0, [ip]
 800979a:	b281      	uxth	r1, r0
 800979c:	fb02 7101 	mla	r1, r2, r1, r7
 80097a0:	0c0f      	lsrs	r7, r1, #16
 80097a2:	0c00      	lsrs	r0, r0, #16
 80097a4:	fb02 7000 	mla	r0, r2, r0, r7
 80097a8:	b289      	uxth	r1, r1
 80097aa:	3301      	adds	r3, #1
 80097ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80097b0:	429d      	cmp	r5, r3
 80097b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80097b6:	f84c 1b04 	str.w	r1, [ip], #4
 80097ba:	dcec      	bgt.n	8009796 <__multadd+0x12>
 80097bc:	b1d7      	cbz	r7, 80097f4 <__multadd+0x70>
 80097be:	68a3      	ldr	r3, [r4, #8]
 80097c0:	42ab      	cmp	r3, r5
 80097c2:	dc12      	bgt.n	80097ea <__multadd+0x66>
 80097c4:	6861      	ldr	r1, [r4, #4]
 80097c6:	4630      	mov	r0, r6
 80097c8:	3101      	adds	r1, #1
 80097ca:	f7ff ff90 	bl	80096ee <_Balloc>
 80097ce:	6922      	ldr	r2, [r4, #16]
 80097d0:	3202      	adds	r2, #2
 80097d2:	f104 010c 	add.w	r1, r4, #12
 80097d6:	4680      	mov	r8, r0
 80097d8:	0092      	lsls	r2, r2, #2
 80097da:	300c      	adds	r0, #12
 80097dc:	f7ff ff7c 	bl	80096d8 <memcpy>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7ff ffb7 	bl	8009756 <_Bfree>
 80097e8:	4644      	mov	r4, r8
 80097ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097ee:	3501      	adds	r5, #1
 80097f0:	615f      	str	r7, [r3, #20]
 80097f2:	6125      	str	r5, [r4, #16]
 80097f4:	4620      	mov	r0, r4
 80097f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080097fa <__s2b>:
 80097fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fe:	460c      	mov	r4, r1
 8009800:	4615      	mov	r5, r2
 8009802:	461f      	mov	r7, r3
 8009804:	2209      	movs	r2, #9
 8009806:	3308      	adds	r3, #8
 8009808:	4606      	mov	r6, r0
 800980a:	fb93 f3f2 	sdiv	r3, r3, r2
 800980e:	2100      	movs	r1, #0
 8009810:	2201      	movs	r2, #1
 8009812:	429a      	cmp	r2, r3
 8009814:	db20      	blt.n	8009858 <__s2b+0x5e>
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff ff69 	bl	80096ee <_Balloc>
 800981c:	9b08      	ldr	r3, [sp, #32]
 800981e:	6143      	str	r3, [r0, #20]
 8009820:	2d09      	cmp	r5, #9
 8009822:	f04f 0301 	mov.w	r3, #1
 8009826:	6103      	str	r3, [r0, #16]
 8009828:	dd19      	ble.n	800985e <__s2b+0x64>
 800982a:	f104 0809 	add.w	r8, r4, #9
 800982e:	46c1      	mov	r9, r8
 8009830:	442c      	add	r4, r5
 8009832:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009836:	4601      	mov	r1, r0
 8009838:	3b30      	subs	r3, #48	; 0x30
 800983a:	220a      	movs	r2, #10
 800983c:	4630      	mov	r0, r6
 800983e:	f7ff ffa1 	bl	8009784 <__multadd>
 8009842:	45a1      	cmp	r9, r4
 8009844:	d1f5      	bne.n	8009832 <__s2b+0x38>
 8009846:	eb08 0405 	add.w	r4, r8, r5
 800984a:	3c08      	subs	r4, #8
 800984c:	1b2d      	subs	r5, r5, r4
 800984e:	1963      	adds	r3, r4, r5
 8009850:	42bb      	cmp	r3, r7
 8009852:	db07      	blt.n	8009864 <__s2b+0x6a>
 8009854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009858:	0052      	lsls	r2, r2, #1
 800985a:	3101      	adds	r1, #1
 800985c:	e7d9      	b.n	8009812 <__s2b+0x18>
 800985e:	340a      	adds	r4, #10
 8009860:	2509      	movs	r5, #9
 8009862:	e7f3      	b.n	800984c <__s2b+0x52>
 8009864:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009868:	4601      	mov	r1, r0
 800986a:	3b30      	subs	r3, #48	; 0x30
 800986c:	220a      	movs	r2, #10
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ff88 	bl	8009784 <__multadd>
 8009874:	e7eb      	b.n	800984e <__s2b+0x54>

08009876 <__hi0bits>:
 8009876:	0c02      	lsrs	r2, r0, #16
 8009878:	0412      	lsls	r2, r2, #16
 800987a:	4603      	mov	r3, r0
 800987c:	b9b2      	cbnz	r2, 80098ac <__hi0bits+0x36>
 800987e:	0403      	lsls	r3, r0, #16
 8009880:	2010      	movs	r0, #16
 8009882:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009886:	bf04      	itt	eq
 8009888:	021b      	lsleq	r3, r3, #8
 800988a:	3008      	addeq	r0, #8
 800988c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009890:	bf04      	itt	eq
 8009892:	011b      	lsleq	r3, r3, #4
 8009894:	3004      	addeq	r0, #4
 8009896:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800989a:	bf04      	itt	eq
 800989c:	009b      	lsleq	r3, r3, #2
 800989e:	3002      	addeq	r0, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	db06      	blt.n	80098b2 <__hi0bits+0x3c>
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	d503      	bpl.n	80098b0 <__hi0bits+0x3a>
 80098a8:	3001      	adds	r0, #1
 80098aa:	4770      	bx	lr
 80098ac:	2000      	movs	r0, #0
 80098ae:	e7e8      	b.n	8009882 <__hi0bits+0xc>
 80098b0:	2020      	movs	r0, #32
 80098b2:	4770      	bx	lr

080098b4 <__lo0bits>:
 80098b4:	6803      	ldr	r3, [r0, #0]
 80098b6:	f013 0207 	ands.w	r2, r3, #7
 80098ba:	4601      	mov	r1, r0
 80098bc:	d00b      	beq.n	80098d6 <__lo0bits+0x22>
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d423      	bmi.n	800990a <__lo0bits+0x56>
 80098c2:	0798      	lsls	r0, r3, #30
 80098c4:	bf49      	itett	mi
 80098c6:	085b      	lsrmi	r3, r3, #1
 80098c8:	089b      	lsrpl	r3, r3, #2
 80098ca:	2001      	movmi	r0, #1
 80098cc:	600b      	strmi	r3, [r1, #0]
 80098ce:	bf5c      	itt	pl
 80098d0:	600b      	strpl	r3, [r1, #0]
 80098d2:	2002      	movpl	r0, #2
 80098d4:	4770      	bx	lr
 80098d6:	b298      	uxth	r0, r3
 80098d8:	b9a8      	cbnz	r0, 8009906 <__lo0bits+0x52>
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	2010      	movs	r0, #16
 80098de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098e2:	bf04      	itt	eq
 80098e4:	0a1b      	lsreq	r3, r3, #8
 80098e6:	3008      	addeq	r0, #8
 80098e8:	071a      	lsls	r2, r3, #28
 80098ea:	bf04      	itt	eq
 80098ec:	091b      	lsreq	r3, r3, #4
 80098ee:	3004      	addeq	r0, #4
 80098f0:	079a      	lsls	r2, r3, #30
 80098f2:	bf04      	itt	eq
 80098f4:	089b      	lsreq	r3, r3, #2
 80098f6:	3002      	addeq	r0, #2
 80098f8:	07da      	lsls	r2, r3, #31
 80098fa:	d402      	bmi.n	8009902 <__lo0bits+0x4e>
 80098fc:	085b      	lsrs	r3, r3, #1
 80098fe:	d006      	beq.n	800990e <__lo0bits+0x5a>
 8009900:	3001      	adds	r0, #1
 8009902:	600b      	str	r3, [r1, #0]
 8009904:	4770      	bx	lr
 8009906:	4610      	mov	r0, r2
 8009908:	e7e9      	b.n	80098de <__lo0bits+0x2a>
 800990a:	2000      	movs	r0, #0
 800990c:	4770      	bx	lr
 800990e:	2020      	movs	r0, #32
 8009910:	4770      	bx	lr

08009912 <__i2b>:
 8009912:	b510      	push	{r4, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	2101      	movs	r1, #1
 8009918:	f7ff fee9 	bl	80096ee <_Balloc>
 800991c:	2201      	movs	r2, #1
 800991e:	6144      	str	r4, [r0, #20]
 8009920:	6102      	str	r2, [r0, #16]
 8009922:	bd10      	pop	{r4, pc}

08009924 <__multiply>:
 8009924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009928:	4614      	mov	r4, r2
 800992a:	690a      	ldr	r2, [r1, #16]
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	429a      	cmp	r2, r3
 8009930:	bfb8      	it	lt
 8009932:	460b      	movlt	r3, r1
 8009934:	4688      	mov	r8, r1
 8009936:	bfbc      	itt	lt
 8009938:	46a0      	movlt	r8, r4
 800993a:	461c      	movlt	r4, r3
 800993c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009940:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009944:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009948:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800994c:	eb07 0609 	add.w	r6, r7, r9
 8009950:	42b3      	cmp	r3, r6
 8009952:	bfb8      	it	lt
 8009954:	3101      	addlt	r1, #1
 8009956:	f7ff feca 	bl	80096ee <_Balloc>
 800995a:	f100 0514 	add.w	r5, r0, #20
 800995e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009962:	462b      	mov	r3, r5
 8009964:	2200      	movs	r2, #0
 8009966:	4573      	cmp	r3, lr
 8009968:	d316      	bcc.n	8009998 <__multiply+0x74>
 800996a:	f104 0214 	add.w	r2, r4, #20
 800996e:	f108 0114 	add.w	r1, r8, #20
 8009972:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009976:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	9201      	str	r2, [sp, #4]
 8009980:	4293      	cmp	r3, r2
 8009982:	d80c      	bhi.n	800999e <__multiply+0x7a>
 8009984:	2e00      	cmp	r6, #0
 8009986:	dd03      	ble.n	8009990 <__multiply+0x6c>
 8009988:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800998c:	2b00      	cmp	r3, #0
 800998e:	d05d      	beq.n	8009a4c <__multiply+0x128>
 8009990:	6106      	str	r6, [r0, #16]
 8009992:	b003      	add	sp, #12
 8009994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009998:	f843 2b04 	str.w	r2, [r3], #4
 800999c:	e7e3      	b.n	8009966 <__multiply+0x42>
 800999e:	f8b2 b000 	ldrh.w	fp, [r2]
 80099a2:	f1bb 0f00 	cmp.w	fp, #0
 80099a6:	d023      	beq.n	80099f0 <__multiply+0xcc>
 80099a8:	4689      	mov	r9, r1
 80099aa:	46ac      	mov	ip, r5
 80099ac:	f04f 0800 	mov.w	r8, #0
 80099b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80099b4:	f8dc a000 	ldr.w	sl, [ip]
 80099b8:	b2a3      	uxth	r3, r4
 80099ba:	fa1f fa8a 	uxth.w	sl, sl
 80099be:	fb0b a303 	mla	r3, fp, r3, sl
 80099c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099c6:	f8dc 4000 	ldr.w	r4, [ip]
 80099ca:	4443      	add	r3, r8
 80099cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099d0:	fb0b 840a 	mla	r4, fp, sl, r8
 80099d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099d8:	46e2      	mov	sl, ip
 80099da:	b29b      	uxth	r3, r3
 80099dc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099e0:	454f      	cmp	r7, r9
 80099e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099e6:	f84a 3b04 	str.w	r3, [sl], #4
 80099ea:	d82b      	bhi.n	8009a44 <__multiply+0x120>
 80099ec:	f8cc 8004 	str.w	r8, [ip, #4]
 80099f0:	9b01      	ldr	r3, [sp, #4]
 80099f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80099f6:	3204      	adds	r2, #4
 80099f8:	f1ba 0f00 	cmp.w	sl, #0
 80099fc:	d020      	beq.n	8009a40 <__multiply+0x11c>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	4689      	mov	r9, r1
 8009a02:	46a8      	mov	r8, r5
 8009a04:	f04f 0b00 	mov.w	fp, #0
 8009a08:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a0c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a10:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a14:	445c      	add	r4, fp
 8009a16:	46c4      	mov	ip, r8
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8009a22:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a26:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a2a:	0c1b      	lsrs	r3, r3, #16
 8009a2c:	fb0a b303 	mla	r3, sl, r3, fp
 8009a30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a34:	454f      	cmp	r7, r9
 8009a36:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a3a:	d805      	bhi.n	8009a48 <__multiply+0x124>
 8009a3c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a40:	3504      	adds	r5, #4
 8009a42:	e79b      	b.n	800997c <__multiply+0x58>
 8009a44:	46d4      	mov	ip, sl
 8009a46:	e7b3      	b.n	80099b0 <__multiply+0x8c>
 8009a48:	46e0      	mov	r8, ip
 8009a4a:	e7dd      	b.n	8009a08 <__multiply+0xe4>
 8009a4c:	3e01      	subs	r6, #1
 8009a4e:	e799      	b.n	8009984 <__multiply+0x60>

08009a50 <__pow5mult>:
 8009a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a54:	4615      	mov	r5, r2
 8009a56:	f012 0203 	ands.w	r2, r2, #3
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	d007      	beq.n	8009a70 <__pow5mult+0x20>
 8009a60:	3a01      	subs	r2, #1
 8009a62:	4c21      	ldr	r4, [pc, #132]	; (8009ae8 <__pow5mult+0x98>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a6a:	f7ff fe8b 	bl	8009784 <__multadd>
 8009a6e:	4607      	mov	r7, r0
 8009a70:	10ad      	asrs	r5, r5, #2
 8009a72:	d035      	beq.n	8009ae0 <__pow5mult+0x90>
 8009a74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a76:	b93c      	cbnz	r4, 8009a88 <__pow5mult+0x38>
 8009a78:	2010      	movs	r0, #16
 8009a7a:	f7ff fe13 	bl	80096a4 <malloc>
 8009a7e:	6270      	str	r0, [r6, #36]	; 0x24
 8009a80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a84:	6004      	str	r4, [r0, #0]
 8009a86:	60c4      	str	r4, [r0, #12]
 8009a88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a90:	b94c      	cbnz	r4, 8009aa6 <__pow5mult+0x56>
 8009a92:	f240 2171 	movw	r1, #625	; 0x271
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff3b 	bl	8009912 <__i2b>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	6003      	str	r3, [r0, #0]
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	07eb      	lsls	r3, r5, #31
 8009aac:	d50a      	bpl.n	8009ac4 <__pow5mult+0x74>
 8009aae:	4639      	mov	r1, r7
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff36 	bl	8009924 <__multiply>
 8009ab8:	4639      	mov	r1, r7
 8009aba:	4681      	mov	r9, r0
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff fe4a 	bl	8009756 <_Bfree>
 8009ac2:	464f      	mov	r7, r9
 8009ac4:	106d      	asrs	r5, r5, #1
 8009ac6:	d00b      	beq.n	8009ae0 <__pow5mult+0x90>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	b938      	cbnz	r0, 8009adc <__pow5mult+0x8c>
 8009acc:	4622      	mov	r2, r4
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff ff27 	bl	8009924 <__multiply>
 8009ad6:	6020      	str	r0, [r4, #0]
 8009ad8:	f8c0 8000 	str.w	r8, [r0]
 8009adc:	4604      	mov	r4, r0
 8009ade:	e7e4      	b.n	8009aaa <__pow5mult+0x5a>
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae6:	bf00      	nop
 8009ae8:	0800a618 	.word	0x0800a618

08009aec <__lshift>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	6849      	ldr	r1, [r1, #4]
 8009afa:	eb0a 0903 	add.w	r9, sl, r3
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	4607      	mov	r7, r0
 8009b02:	4616      	mov	r6, r2
 8009b04:	f109 0501 	add.w	r5, r9, #1
 8009b08:	42ab      	cmp	r3, r5
 8009b0a:	db32      	blt.n	8009b72 <__lshift+0x86>
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	f7ff fdee 	bl	80096ee <_Balloc>
 8009b12:	2300      	movs	r3, #0
 8009b14:	4680      	mov	r8, r0
 8009b16:	f100 0114 	add.w	r1, r0, #20
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4553      	cmp	r3, sl
 8009b1e:	db2b      	blt.n	8009b78 <__lshift+0x8c>
 8009b20:	6920      	ldr	r0, [r4, #16]
 8009b22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b26:	f104 0314 	add.w	r3, r4, #20
 8009b2a:	f016 021f 	ands.w	r2, r6, #31
 8009b2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b36:	d025      	beq.n	8009b84 <__lshift+0x98>
 8009b38:	f1c2 0e20 	rsb	lr, r2, #32
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	681e      	ldr	r6, [r3, #0]
 8009b40:	468a      	mov	sl, r1
 8009b42:	4096      	lsls	r6, r2
 8009b44:	4330      	orrs	r0, r6
 8009b46:	f84a 0b04 	str.w	r0, [sl], #4
 8009b4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b4e:	459c      	cmp	ip, r3
 8009b50:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b54:	d814      	bhi.n	8009b80 <__lshift+0x94>
 8009b56:	6048      	str	r0, [r1, #4]
 8009b58:	b108      	cbz	r0, 8009b5e <__lshift+0x72>
 8009b5a:	f109 0502 	add.w	r5, r9, #2
 8009b5e:	3d01      	subs	r5, #1
 8009b60:	4638      	mov	r0, r7
 8009b62:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b66:	4621      	mov	r1, r4
 8009b68:	f7ff fdf5 	bl	8009756 <_Bfree>
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	3101      	adds	r1, #1
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	e7c7      	b.n	8009b08 <__lshift+0x1c>
 8009b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	e7cd      	b.n	8009b1c <__lshift+0x30>
 8009b80:	4651      	mov	r1, sl
 8009b82:	e7dc      	b.n	8009b3e <__lshift+0x52>
 8009b84:	3904      	subs	r1, #4
 8009b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b8e:	459c      	cmp	ip, r3
 8009b90:	d8f9      	bhi.n	8009b86 <__lshift+0x9a>
 8009b92:	e7e4      	b.n	8009b5e <__lshift+0x72>

08009b94 <__mcmp>:
 8009b94:	6903      	ldr	r3, [r0, #16]
 8009b96:	690a      	ldr	r2, [r1, #16]
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	b530      	push	{r4, r5, lr}
 8009b9c:	d10c      	bne.n	8009bb8 <__mcmp+0x24>
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	3014      	adds	r0, #20
 8009ba2:	3114      	adds	r1, #20
 8009ba4:	1884      	adds	r4, r0, r2
 8009ba6:	4411      	add	r1, r2
 8009ba8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bb0:	4295      	cmp	r5, r2
 8009bb2:	d003      	beq.n	8009bbc <__mcmp+0x28>
 8009bb4:	d305      	bcc.n	8009bc2 <__mcmp+0x2e>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	4618      	mov	r0, r3
 8009bba:	bd30      	pop	{r4, r5, pc}
 8009bbc:	42a0      	cmp	r0, r4
 8009bbe:	d3f3      	bcc.n	8009ba8 <__mcmp+0x14>
 8009bc0:	e7fa      	b.n	8009bb8 <__mcmp+0x24>
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc6:	e7f7      	b.n	8009bb8 <__mcmp+0x24>

08009bc8 <__mdiff>:
 8009bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	4607      	mov	r7, r0
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	4614      	mov	r4, r2
 8009bd6:	f7ff ffdd 	bl	8009b94 <__mcmp>
 8009bda:	1e06      	subs	r6, r0, #0
 8009bdc:	d108      	bne.n	8009bf0 <__mdiff+0x28>
 8009bde:	4631      	mov	r1, r6
 8009be0:	4638      	mov	r0, r7
 8009be2:	f7ff fd84 	bl	80096ee <_Balloc>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	bfa4      	itt	ge
 8009bf2:	4623      	movge	r3, r4
 8009bf4:	462c      	movge	r4, r5
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	6861      	ldr	r1, [r4, #4]
 8009bfa:	bfa6      	itte	ge
 8009bfc:	461d      	movge	r5, r3
 8009bfe:	2600      	movge	r6, #0
 8009c00:	2601      	movlt	r6, #1
 8009c02:	f7ff fd74 	bl	80096ee <_Balloc>
 8009c06:	692b      	ldr	r3, [r5, #16]
 8009c08:	60c6      	str	r6, [r0, #12]
 8009c0a:	6926      	ldr	r6, [r4, #16]
 8009c0c:	f105 0914 	add.w	r9, r5, #20
 8009c10:	f104 0214 	add.w	r2, r4, #20
 8009c14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	f04f 0e00 	mov.w	lr, #0
 8009c24:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c28:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c2c:	fa1e f18a 	uxtah	r1, lr, sl
 8009c30:	b2a3      	uxth	r3, r4
 8009c32:	1ac9      	subs	r1, r1, r3
 8009c34:	0c23      	lsrs	r3, r4, #16
 8009c36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c3e:	b289      	uxth	r1, r1
 8009c40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c44:	45c8      	cmp	r8, r9
 8009c46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c4a:	4694      	mov	ip, r2
 8009c4c:	f845 3b04 	str.w	r3, [r5], #4
 8009c50:	d8e8      	bhi.n	8009c24 <__mdiff+0x5c>
 8009c52:	45bc      	cmp	ip, r7
 8009c54:	d304      	bcc.n	8009c60 <__mdiff+0x98>
 8009c56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c5a:	b183      	cbz	r3, 8009c7e <__mdiff+0xb6>
 8009c5c:	6106      	str	r6, [r0, #16]
 8009c5e:	e7c5      	b.n	8009bec <__mdiff+0x24>
 8009c60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c64:	fa1e f381 	uxtah	r3, lr, r1
 8009c68:	141a      	asrs	r2, r3, #16
 8009c6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009c78:	f845 3b04 	str.w	r3, [r5], #4
 8009c7c:	e7e9      	b.n	8009c52 <__mdiff+0x8a>
 8009c7e:	3e01      	subs	r6, #1
 8009c80:	e7e9      	b.n	8009c56 <__mdiff+0x8e>
	...

08009c84 <__ulp>:
 8009c84:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <__ulp+0x4c>)
 8009c86:	ee10 2a90 	vmov	r2, s1
 8009c8a:	401a      	ands	r2, r3
 8009c8c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd04      	ble.n	8009c9e <__ulp+0x1a>
 8009c94:	2000      	movs	r0, #0
 8009c96:	4619      	mov	r1, r3
 8009c98:	ec41 0b10 	vmov	d0, r0, r1
 8009c9c:	4770      	bx	lr
 8009c9e:	425b      	negs	r3, r3
 8009ca0:	151b      	asrs	r3, r3, #20
 8009ca2:	2b13      	cmp	r3, #19
 8009ca4:	f04f 0000 	mov.w	r0, #0
 8009ca8:	f04f 0100 	mov.w	r1, #0
 8009cac:	dc04      	bgt.n	8009cb8 <__ulp+0x34>
 8009cae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009cb2:	fa42 f103 	asr.w	r1, r2, r3
 8009cb6:	e7ef      	b.n	8009c98 <__ulp+0x14>
 8009cb8:	3b14      	subs	r3, #20
 8009cba:	2b1e      	cmp	r3, #30
 8009cbc:	f04f 0201 	mov.w	r2, #1
 8009cc0:	bfda      	itte	le
 8009cc2:	f1c3 031f 	rsble	r3, r3, #31
 8009cc6:	fa02 f303 	lslle.w	r3, r2, r3
 8009cca:	4613      	movgt	r3, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	e7e3      	b.n	8009c98 <__ulp+0x14>
 8009cd0:	7ff00000 	.word	0x7ff00000

08009cd4 <__b2d>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	6905      	ldr	r5, [r0, #16]
 8009cd8:	f100 0714 	add.w	r7, r0, #20
 8009cdc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009ce0:	1f2e      	subs	r6, r5, #4
 8009ce2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7ff fdc5 	bl	8009876 <__hi0bits>
 8009cec:	f1c0 0320 	rsb	r3, r0, #32
 8009cf0:	280a      	cmp	r0, #10
 8009cf2:	600b      	str	r3, [r1, #0]
 8009cf4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009d6c <__b2d+0x98>
 8009cf8:	dc14      	bgt.n	8009d24 <__b2d+0x50>
 8009cfa:	f1c0 0e0b 	rsb	lr, r0, #11
 8009cfe:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d02:	42b7      	cmp	r7, r6
 8009d04:	ea41 030c 	orr.w	r3, r1, ip
 8009d08:	bf34      	ite	cc
 8009d0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d0e:	2100      	movcs	r1, #0
 8009d10:	3015      	adds	r0, #21
 8009d12:	fa04 f000 	lsl.w	r0, r4, r0
 8009d16:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d1a:	ea40 0201 	orr.w	r2, r0, r1
 8009d1e:	ec43 2b10 	vmov	d0, r2, r3
 8009d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d24:	42b7      	cmp	r7, r6
 8009d26:	bf3a      	itte	cc
 8009d28:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d30:	2100      	movcs	r1, #0
 8009d32:	380b      	subs	r0, #11
 8009d34:	d015      	beq.n	8009d62 <__b2d+0x8e>
 8009d36:	4084      	lsls	r4, r0
 8009d38:	f1c0 0520 	rsb	r5, r0, #32
 8009d3c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009d40:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009d44:	42be      	cmp	r6, r7
 8009d46:	fa21 fc05 	lsr.w	ip, r1, r5
 8009d4a:	ea44 030c 	orr.w	r3, r4, ip
 8009d4e:	bf8c      	ite	hi
 8009d50:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d54:	2400      	movls	r4, #0
 8009d56:	fa01 f000 	lsl.w	r0, r1, r0
 8009d5a:	40ec      	lsrs	r4, r5
 8009d5c:	ea40 0204 	orr.w	r2, r0, r4
 8009d60:	e7dd      	b.n	8009d1e <__b2d+0x4a>
 8009d62:	ea44 030c 	orr.w	r3, r4, ip
 8009d66:	460a      	mov	r2, r1
 8009d68:	e7d9      	b.n	8009d1e <__b2d+0x4a>
 8009d6a:	bf00      	nop
 8009d6c:	3ff00000 	.word	0x3ff00000

08009d70 <__d2b>:
 8009d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d74:	460e      	mov	r6, r1
 8009d76:	2101      	movs	r1, #1
 8009d78:	ec59 8b10 	vmov	r8, r9, d0
 8009d7c:	4615      	mov	r5, r2
 8009d7e:	f7ff fcb6 	bl	80096ee <_Balloc>
 8009d82:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d86:	4607      	mov	r7, r0
 8009d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d8c:	bb34      	cbnz	r4, 8009ddc <__d2b+0x6c>
 8009d8e:	9301      	str	r3, [sp, #4]
 8009d90:	f1b8 0300 	subs.w	r3, r8, #0
 8009d94:	d027      	beq.n	8009de6 <__d2b+0x76>
 8009d96:	a802      	add	r0, sp, #8
 8009d98:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009d9c:	f7ff fd8a 	bl	80098b4 <__lo0bits>
 8009da0:	9900      	ldr	r1, [sp, #0]
 8009da2:	b1f0      	cbz	r0, 8009de2 <__d2b+0x72>
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	f1c0 0320 	rsb	r3, r0, #32
 8009daa:	fa02 f303 	lsl.w	r3, r2, r3
 8009dae:	430b      	orrs	r3, r1
 8009db0:	40c2      	lsrs	r2, r0
 8009db2:	617b      	str	r3, [r7, #20]
 8009db4:	9201      	str	r2, [sp, #4]
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2102      	movne	r1, #2
 8009dc0:	2101      	moveq	r1, #1
 8009dc2:	6139      	str	r1, [r7, #16]
 8009dc4:	b1c4      	cbz	r4, 8009df8 <__d2b+0x88>
 8009dc6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009dca:	4404      	add	r4, r0
 8009dcc:	6034      	str	r4, [r6, #0]
 8009dce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dd2:	6028      	str	r0, [r5, #0]
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009de0:	e7d5      	b.n	8009d8e <__d2b+0x1e>
 8009de2:	6179      	str	r1, [r7, #20]
 8009de4:	e7e7      	b.n	8009db6 <__d2b+0x46>
 8009de6:	a801      	add	r0, sp, #4
 8009de8:	f7ff fd64 	bl	80098b4 <__lo0bits>
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	617b      	str	r3, [r7, #20]
 8009df0:	2101      	movs	r1, #1
 8009df2:	6139      	str	r1, [r7, #16]
 8009df4:	3020      	adds	r0, #32
 8009df6:	e7e5      	b.n	8009dc4 <__d2b+0x54>
 8009df8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009dfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	6918      	ldr	r0, [r3, #16]
 8009e04:	f7ff fd37 	bl	8009876 <__hi0bits>
 8009e08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e0c:	e7e1      	b.n	8009dd2 <__d2b+0x62>

08009e0e <__ratio>:
 8009e0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e12:	4688      	mov	r8, r1
 8009e14:	4669      	mov	r1, sp
 8009e16:	4681      	mov	r9, r0
 8009e18:	f7ff ff5c 	bl	8009cd4 <__b2d>
 8009e1c:	a901      	add	r1, sp, #4
 8009e1e:	4640      	mov	r0, r8
 8009e20:	ec57 6b10 	vmov	r6, r7, d0
 8009e24:	ee10 4a10 	vmov	r4, s0
 8009e28:	f7ff ff54 	bl	8009cd4 <__b2d>
 8009e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e34:	eba3 0c02 	sub.w	ip, r3, r2
 8009e38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e42:	ec51 0b10 	vmov	r0, r1, d0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	ee10 aa10 	vmov	sl, s0
 8009e4c:	bfce      	itee	gt
 8009e4e:	463a      	movgt	r2, r7
 8009e50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e54:	460a      	movle	r2, r1
 8009e56:	463d      	mov	r5, r7
 8009e58:	468b      	mov	fp, r1
 8009e5a:	bfcc      	ite	gt
 8009e5c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009e60:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e64:	ec45 4b17 	vmov	d7, r4, r5
 8009e68:	ec4b ab16 	vmov	d6, sl, fp
 8009e6c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009e70:	b003      	add	sp, #12
 8009e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e76 <__copybits>:
 8009e76:	3901      	subs	r1, #1
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	1149      	asrs	r1, r1, #5
 8009e7c:	6914      	ldr	r4, [r2, #16]
 8009e7e:	3101      	adds	r1, #1
 8009e80:	f102 0314 	add.w	r3, r2, #20
 8009e84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	4602      	mov	r2, r0
 8009e90:	d303      	bcc.n	8009e9a <__copybits+0x24>
 8009e92:	2300      	movs	r3, #0
 8009e94:	428a      	cmp	r2, r1
 8009e96:	d305      	bcc.n	8009ea4 <__copybits+0x2e>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9e:	f840 2b04 	str.w	r2, [r0], #4
 8009ea2:	e7f3      	b.n	8009e8c <__copybits+0x16>
 8009ea4:	f842 3b04 	str.w	r3, [r2], #4
 8009ea8:	e7f4      	b.n	8009e94 <__copybits+0x1e>

08009eaa <__any_on>:
 8009eaa:	f100 0214 	add.w	r2, r0, #20
 8009eae:	6900      	ldr	r0, [r0, #16]
 8009eb0:	114b      	asrs	r3, r1, #5
 8009eb2:	4298      	cmp	r0, r3
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	db11      	blt.n	8009edc <__any_on+0x32>
 8009eb8:	dd0a      	ble.n	8009ed0 <__any_on+0x26>
 8009eba:	f011 011f 	ands.w	r1, r1, #31
 8009ebe:	d007      	beq.n	8009ed0 <__any_on+0x26>
 8009ec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ec4:	fa24 f001 	lsr.w	r0, r4, r1
 8009ec8:	fa00 f101 	lsl.w	r1, r0, r1
 8009ecc:	428c      	cmp	r4, r1
 8009ece:	d10b      	bne.n	8009ee8 <__any_on+0x3e>
 8009ed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d803      	bhi.n	8009ee0 <__any_on+0x36>
 8009ed8:	2000      	movs	r0, #0
 8009eda:	bd10      	pop	{r4, pc}
 8009edc:	4603      	mov	r3, r0
 8009ede:	e7f7      	b.n	8009ed0 <__any_on+0x26>
 8009ee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d0f5      	beq.n	8009ed4 <__any_on+0x2a>
 8009ee8:	2001      	movs	r0, #1
 8009eea:	e7f6      	b.n	8009eda <__any_on+0x30>

08009eec <_calloc_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	fb02 f401 	mul.w	r4, r2, r1
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	f000 f856 	bl	8009fa4 <_malloc_r>
 8009ef8:	4605      	mov	r5, r0
 8009efa:	b118      	cbz	r0, 8009f04 <_calloc_r+0x18>
 8009efc:	4622      	mov	r2, r4
 8009efe:	2100      	movs	r1, #0
 8009f00:	f7fc fdb2 	bl	8006a68 <memset>
 8009f04:	4628      	mov	r0, r5
 8009f06:	bd38      	pop	{r3, r4, r5, pc}

08009f08 <_free_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d045      	beq.n	8009f9c <_free_r+0x94>
 8009f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f14:	1f0c      	subs	r4, r1, #4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bfb8      	it	lt
 8009f1a:	18e4      	addlt	r4, r4, r3
 8009f1c:	f000 fa24 	bl	800a368 <__malloc_lock>
 8009f20:	4a1f      	ldr	r2, [pc, #124]	; (8009fa0 <_free_r+0x98>)
 8009f22:	6813      	ldr	r3, [r2, #0]
 8009f24:	4610      	mov	r0, r2
 8009f26:	b933      	cbnz	r3, 8009f36 <_free_r+0x2e>
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	6014      	str	r4, [r2, #0]
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f32:	f000 ba1a 	b.w	800a36a <__malloc_unlock>
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	d90c      	bls.n	8009f54 <_free_r+0x4c>
 8009f3a:	6821      	ldr	r1, [r4, #0]
 8009f3c:	1862      	adds	r2, r4, r1
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	bf04      	itt	eq
 8009f42:	681a      	ldreq	r2, [r3, #0]
 8009f44:	685b      	ldreq	r3, [r3, #4]
 8009f46:	6063      	str	r3, [r4, #4]
 8009f48:	bf04      	itt	eq
 8009f4a:	1852      	addeq	r2, r2, r1
 8009f4c:	6022      	streq	r2, [r4, #0]
 8009f4e:	6004      	str	r4, [r0, #0]
 8009f50:	e7ec      	b.n	8009f2c <_free_r+0x24>
 8009f52:	4613      	mov	r3, r2
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	b10a      	cbz	r2, 8009f5c <_free_r+0x54>
 8009f58:	42a2      	cmp	r2, r4
 8009f5a:	d9fa      	bls.n	8009f52 <_free_r+0x4a>
 8009f5c:	6819      	ldr	r1, [r3, #0]
 8009f5e:	1858      	adds	r0, r3, r1
 8009f60:	42a0      	cmp	r0, r4
 8009f62:	d10b      	bne.n	8009f7c <_free_r+0x74>
 8009f64:	6820      	ldr	r0, [r4, #0]
 8009f66:	4401      	add	r1, r0
 8009f68:	1858      	adds	r0, r3, r1
 8009f6a:	4282      	cmp	r2, r0
 8009f6c:	6019      	str	r1, [r3, #0]
 8009f6e:	d1dd      	bne.n	8009f2c <_free_r+0x24>
 8009f70:	6810      	ldr	r0, [r2, #0]
 8009f72:	6852      	ldr	r2, [r2, #4]
 8009f74:	605a      	str	r2, [r3, #4]
 8009f76:	4401      	add	r1, r0
 8009f78:	6019      	str	r1, [r3, #0]
 8009f7a:	e7d7      	b.n	8009f2c <_free_r+0x24>
 8009f7c:	d902      	bls.n	8009f84 <_free_r+0x7c>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	602b      	str	r3, [r5, #0]
 8009f82:	e7d3      	b.n	8009f2c <_free_r+0x24>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	1821      	adds	r1, r4, r0
 8009f88:	428a      	cmp	r2, r1
 8009f8a:	bf04      	itt	eq
 8009f8c:	6811      	ldreq	r1, [r2, #0]
 8009f8e:	6852      	ldreq	r2, [r2, #4]
 8009f90:	6062      	str	r2, [r4, #4]
 8009f92:	bf04      	itt	eq
 8009f94:	1809      	addeq	r1, r1, r0
 8009f96:	6021      	streq	r1, [r4, #0]
 8009f98:	605c      	str	r4, [r3, #4]
 8009f9a:	e7c7      	b.n	8009f2c <_free_r+0x24>
 8009f9c:	bd38      	pop	{r3, r4, r5, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000023c 	.word	0x2000023c

08009fa4 <_malloc_r>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	1ccd      	adds	r5, r1, #3
 8009fa8:	f025 0503 	bic.w	r5, r5, #3
 8009fac:	3508      	adds	r5, #8
 8009fae:	2d0c      	cmp	r5, #12
 8009fb0:	bf38      	it	cc
 8009fb2:	250c      	movcc	r5, #12
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	db01      	blt.n	8009fbe <_malloc_r+0x1a>
 8009fba:	42a9      	cmp	r1, r5
 8009fbc:	d903      	bls.n	8009fc6 <_malloc_r+0x22>
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	6033      	str	r3, [r6, #0]
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	bd70      	pop	{r4, r5, r6, pc}
 8009fc6:	f000 f9cf 	bl	800a368 <__malloc_lock>
 8009fca:	4a21      	ldr	r2, [pc, #132]	; (800a050 <_malloc_r+0xac>)
 8009fcc:	6814      	ldr	r4, [r2, #0]
 8009fce:	4621      	mov	r1, r4
 8009fd0:	b991      	cbnz	r1, 8009ff8 <_malloc_r+0x54>
 8009fd2:	4c20      	ldr	r4, [pc, #128]	; (800a054 <_malloc_r+0xb0>)
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	b91b      	cbnz	r3, 8009fe0 <_malloc_r+0x3c>
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f000 f98f 	bl	800a2fc <_sbrk_r>
 8009fde:	6020      	str	r0, [r4, #0]
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f000 f98a 	bl	800a2fc <_sbrk_r>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d124      	bne.n	800a036 <_malloc_r+0x92>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 f9ba 	bl	800a36a <__malloc_unlock>
 8009ff6:	e7e4      	b.n	8009fc2 <_malloc_r+0x1e>
 8009ff8:	680b      	ldr	r3, [r1, #0]
 8009ffa:	1b5b      	subs	r3, r3, r5
 8009ffc:	d418      	bmi.n	800a030 <_malloc_r+0x8c>
 8009ffe:	2b0b      	cmp	r3, #11
 800a000:	d90f      	bls.n	800a022 <_malloc_r+0x7e>
 800a002:	600b      	str	r3, [r1, #0]
 800a004:	50cd      	str	r5, [r1, r3]
 800a006:	18cc      	adds	r4, r1, r3
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f9ae 	bl	800a36a <__malloc_unlock>
 800a00e:	f104 000b 	add.w	r0, r4, #11
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	f020 0007 	bic.w	r0, r0, #7
 800a018:	1ac3      	subs	r3, r0, r3
 800a01a:	d0d3      	beq.n	8009fc4 <_malloc_r+0x20>
 800a01c:	425a      	negs	r2, r3
 800a01e:	50e2      	str	r2, [r4, r3]
 800a020:	e7d0      	b.n	8009fc4 <_malloc_r+0x20>
 800a022:	428c      	cmp	r4, r1
 800a024:	684b      	ldr	r3, [r1, #4]
 800a026:	bf16      	itet	ne
 800a028:	6063      	strne	r3, [r4, #4]
 800a02a:	6013      	streq	r3, [r2, #0]
 800a02c:	460c      	movne	r4, r1
 800a02e:	e7eb      	b.n	800a008 <_malloc_r+0x64>
 800a030:	460c      	mov	r4, r1
 800a032:	6849      	ldr	r1, [r1, #4]
 800a034:	e7cc      	b.n	8009fd0 <_malloc_r+0x2c>
 800a036:	1cc4      	adds	r4, r0, #3
 800a038:	f024 0403 	bic.w	r4, r4, #3
 800a03c:	42a0      	cmp	r0, r4
 800a03e:	d005      	beq.n	800a04c <_malloc_r+0xa8>
 800a040:	1a21      	subs	r1, r4, r0
 800a042:	4630      	mov	r0, r6
 800a044:	f000 f95a 	bl	800a2fc <_sbrk_r>
 800a048:	3001      	adds	r0, #1
 800a04a:	d0cf      	beq.n	8009fec <_malloc_r+0x48>
 800a04c:	6025      	str	r5, [r4, #0]
 800a04e:	e7db      	b.n	800a008 <_malloc_r+0x64>
 800a050:	2000023c 	.word	0x2000023c
 800a054:	20000240 	.word	0x20000240

0800a058 <__ssputs_r>:
 800a058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	688e      	ldr	r6, [r1, #8]
 800a05e:	429e      	cmp	r6, r3
 800a060:	4682      	mov	sl, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4690      	mov	r8, r2
 800a066:	4699      	mov	r9, r3
 800a068:	d837      	bhi.n	800a0da <__ssputs_r+0x82>
 800a06a:	898a      	ldrh	r2, [r1, #12]
 800a06c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a070:	d031      	beq.n	800a0d6 <__ssputs_r+0x7e>
 800a072:	6825      	ldr	r5, [r4, #0]
 800a074:	6909      	ldr	r1, [r1, #16]
 800a076:	1a6f      	subs	r7, r5, r1
 800a078:	6965      	ldr	r5, [r4, #20]
 800a07a:	2302      	movs	r3, #2
 800a07c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a080:	fb95 f5f3 	sdiv	r5, r5, r3
 800a084:	f109 0301 	add.w	r3, r9, #1
 800a088:	443b      	add	r3, r7
 800a08a:	429d      	cmp	r5, r3
 800a08c:	bf38      	it	cc
 800a08e:	461d      	movcc	r5, r3
 800a090:	0553      	lsls	r3, r2, #21
 800a092:	d530      	bpl.n	800a0f6 <__ssputs_r+0x9e>
 800a094:	4629      	mov	r1, r5
 800a096:	f7ff ff85 	bl	8009fa4 <_malloc_r>
 800a09a:	4606      	mov	r6, r0
 800a09c:	b950      	cbnz	r0, 800a0b4 <__ssputs_r+0x5c>
 800a09e:	230c      	movs	r3, #12
 800a0a0:	f8ca 3000 	str.w	r3, [sl]
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b4:	463a      	mov	r2, r7
 800a0b6:	6921      	ldr	r1, [r4, #16]
 800a0b8:	f7ff fb0e 	bl	80096d8 <memcpy>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	6126      	str	r6, [r4, #16]
 800a0ca:	6165      	str	r5, [r4, #20]
 800a0cc:	443e      	add	r6, r7
 800a0ce:	1bed      	subs	r5, r5, r7
 800a0d0:	6026      	str	r6, [r4, #0]
 800a0d2:	60a5      	str	r5, [r4, #8]
 800a0d4:	464e      	mov	r6, r9
 800a0d6:	454e      	cmp	r6, r9
 800a0d8:	d900      	bls.n	800a0dc <__ssputs_r+0x84>
 800a0da:	464e      	mov	r6, r9
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4641      	mov	r1, r8
 800a0e0:	6820      	ldr	r0, [r4, #0]
 800a0e2:	f000 f928 	bl	800a336 <memmove>
 800a0e6:	68a3      	ldr	r3, [r4, #8]
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	60a3      	str	r3, [r4, #8]
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	441e      	add	r6, r3
 800a0f0:	6026      	str	r6, [r4, #0]
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e7dc      	b.n	800a0b0 <__ssputs_r+0x58>
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	f000 f938 	bl	800a36c <_realloc_r>
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d1e2      	bne.n	800a0c8 <__ssputs_r+0x70>
 800a102:	6921      	ldr	r1, [r4, #16]
 800a104:	4650      	mov	r0, sl
 800a106:	f7ff feff 	bl	8009f08 <_free_r>
 800a10a:	e7c8      	b.n	800a09e <__ssputs_r+0x46>

0800a10c <_svfiprintf_r>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	461d      	mov	r5, r3
 800a112:	898b      	ldrh	r3, [r1, #12]
 800a114:	061f      	lsls	r7, r3, #24
 800a116:	b09d      	sub	sp, #116	; 0x74
 800a118:	4680      	mov	r8, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	4616      	mov	r6, r2
 800a11e:	d50f      	bpl.n	800a140 <_svfiprintf_r+0x34>
 800a120:	690b      	ldr	r3, [r1, #16]
 800a122:	b96b      	cbnz	r3, 800a140 <_svfiprintf_r+0x34>
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	f7ff ff3d 	bl	8009fa4 <_malloc_r>
 800a12a:	6020      	str	r0, [r4, #0]
 800a12c:	6120      	str	r0, [r4, #16]
 800a12e:	b928      	cbnz	r0, 800a13c <_svfiprintf_r+0x30>
 800a130:	230c      	movs	r3, #12
 800a132:	f8c8 3000 	str.w	r3, [r8]
 800a136:	f04f 30ff 	mov.w	r0, #4294967295
 800a13a:	e0c8      	b.n	800a2ce <_svfiprintf_r+0x1c2>
 800a13c:	2340      	movs	r3, #64	; 0x40
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	2300      	movs	r3, #0
 800a142:	9309      	str	r3, [sp, #36]	; 0x24
 800a144:	2320      	movs	r3, #32
 800a146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a14a:	2330      	movs	r3, #48	; 0x30
 800a14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a150:	9503      	str	r5, [sp, #12]
 800a152:	f04f 0b01 	mov.w	fp, #1
 800a156:	4637      	mov	r7, r6
 800a158:	463d      	mov	r5, r7
 800a15a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a15e:	b10b      	cbz	r3, 800a164 <_svfiprintf_r+0x58>
 800a160:	2b25      	cmp	r3, #37	; 0x25
 800a162:	d13e      	bne.n	800a1e2 <_svfiprintf_r+0xd6>
 800a164:	ebb7 0a06 	subs.w	sl, r7, r6
 800a168:	d00b      	beq.n	800a182 <_svfiprintf_r+0x76>
 800a16a:	4653      	mov	r3, sl
 800a16c:	4632      	mov	r2, r6
 800a16e:	4621      	mov	r1, r4
 800a170:	4640      	mov	r0, r8
 800a172:	f7ff ff71 	bl	800a058 <__ssputs_r>
 800a176:	3001      	adds	r0, #1
 800a178:	f000 80a4 	beq.w	800a2c4 <_svfiprintf_r+0x1b8>
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	4453      	add	r3, sl
 800a180:	9309      	str	r3, [sp, #36]	; 0x24
 800a182:	783b      	ldrb	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f000 809d 	beq.w	800a2c4 <_svfiprintf_r+0x1b8>
 800a18a:	2300      	movs	r3, #0
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295
 800a190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19c:	931a      	str	r3, [sp, #104]	; 0x68
 800a19e:	462f      	mov	r7, r5
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1a6:	4850      	ldr	r0, [pc, #320]	; (800a2e8 <_svfiprintf_r+0x1dc>)
 800a1a8:	f7f6 f852 	bl	8000250 <memchr>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	b9d0      	cbnz	r0, 800a1e6 <_svfiprintf_r+0xda>
 800a1b0:	06d9      	lsls	r1, r3, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2220      	movmi	r2, #32
 800a1b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1ba:	071a      	lsls	r2, r3, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	222b      	movmi	r2, #43	; 0x2b
 800a1c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1c4:	782a      	ldrb	r2, [r5, #0]
 800a1c6:	2a2a      	cmp	r2, #42	; 0x2a
 800a1c8:	d015      	beq.n	800a1f6 <_svfiprintf_r+0xea>
 800a1ca:	9a07      	ldr	r2, [sp, #28]
 800a1cc:	462f      	mov	r7, r5
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	250a      	movs	r5, #10
 800a1d2:	4639      	mov	r1, r7
 800a1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d8:	3b30      	subs	r3, #48	; 0x30
 800a1da:	2b09      	cmp	r3, #9
 800a1dc:	d94d      	bls.n	800a27a <_svfiprintf_r+0x16e>
 800a1de:	b1b8      	cbz	r0, 800a210 <_svfiprintf_r+0x104>
 800a1e0:	e00f      	b.n	800a202 <_svfiprintf_r+0xf6>
 800a1e2:	462f      	mov	r7, r5
 800a1e4:	e7b8      	b.n	800a158 <_svfiprintf_r+0x4c>
 800a1e6:	4a40      	ldr	r2, [pc, #256]	; (800a2e8 <_svfiprintf_r+0x1dc>)
 800a1e8:	1a80      	subs	r0, r0, r2
 800a1ea:	fa0b f000 	lsl.w	r0, fp, r0
 800a1ee:	4318      	orrs	r0, r3
 800a1f0:	9004      	str	r0, [sp, #16]
 800a1f2:	463d      	mov	r5, r7
 800a1f4:	e7d3      	b.n	800a19e <_svfiprintf_r+0x92>
 800a1f6:	9a03      	ldr	r2, [sp, #12]
 800a1f8:	1d11      	adds	r1, r2, #4
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	9103      	str	r1, [sp, #12]
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	db01      	blt.n	800a206 <_svfiprintf_r+0xfa>
 800a202:	9207      	str	r2, [sp, #28]
 800a204:	e004      	b.n	800a210 <_svfiprintf_r+0x104>
 800a206:	4252      	negs	r2, r2
 800a208:	f043 0302 	orr.w	r3, r3, #2
 800a20c:	9207      	str	r2, [sp, #28]
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	783b      	ldrb	r3, [r7, #0]
 800a212:	2b2e      	cmp	r3, #46	; 0x2e
 800a214:	d10c      	bne.n	800a230 <_svfiprintf_r+0x124>
 800a216:	787b      	ldrb	r3, [r7, #1]
 800a218:	2b2a      	cmp	r3, #42	; 0x2a
 800a21a:	d133      	bne.n	800a284 <_svfiprintf_r+0x178>
 800a21c:	9b03      	ldr	r3, [sp, #12]
 800a21e:	1d1a      	adds	r2, r3, #4
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	9203      	str	r2, [sp, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfb8      	it	lt
 800a228:	f04f 33ff 	movlt.w	r3, #4294967295
 800a22c:	3702      	adds	r7, #2
 800a22e:	9305      	str	r3, [sp, #20]
 800a230:	4d2e      	ldr	r5, [pc, #184]	; (800a2ec <_svfiprintf_r+0x1e0>)
 800a232:	7839      	ldrb	r1, [r7, #0]
 800a234:	2203      	movs	r2, #3
 800a236:	4628      	mov	r0, r5
 800a238:	f7f6 f80a 	bl	8000250 <memchr>
 800a23c:	b138      	cbz	r0, 800a24e <_svfiprintf_r+0x142>
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	1b40      	subs	r0, r0, r5
 800a242:	fa03 f000 	lsl.w	r0, r3, r0
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	4303      	orrs	r3, r0
 800a24a:	3701      	adds	r7, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	7839      	ldrb	r1, [r7, #0]
 800a250:	4827      	ldr	r0, [pc, #156]	; (800a2f0 <_svfiprintf_r+0x1e4>)
 800a252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a256:	2206      	movs	r2, #6
 800a258:	1c7e      	adds	r6, r7, #1
 800a25a:	f7f5 fff9 	bl	8000250 <memchr>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d038      	beq.n	800a2d4 <_svfiprintf_r+0x1c8>
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <_svfiprintf_r+0x1e8>)
 800a264:	bb13      	cbnz	r3, 800a2ac <_svfiprintf_r+0x1a0>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	3307      	adds	r3, #7
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	3308      	adds	r3, #8
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a274:	444b      	add	r3, r9
 800a276:	9309      	str	r3, [sp, #36]	; 0x24
 800a278:	e76d      	b.n	800a156 <_svfiprintf_r+0x4a>
 800a27a:	fb05 3202 	mla	r2, r5, r2, r3
 800a27e:	2001      	movs	r0, #1
 800a280:	460f      	mov	r7, r1
 800a282:	e7a6      	b.n	800a1d2 <_svfiprintf_r+0xc6>
 800a284:	2300      	movs	r3, #0
 800a286:	3701      	adds	r7, #1
 800a288:	9305      	str	r3, [sp, #20]
 800a28a:	4619      	mov	r1, r3
 800a28c:	250a      	movs	r5, #10
 800a28e:	4638      	mov	r0, r7
 800a290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a294:	3a30      	subs	r2, #48	; 0x30
 800a296:	2a09      	cmp	r2, #9
 800a298:	d903      	bls.n	800a2a2 <_svfiprintf_r+0x196>
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0c8      	beq.n	800a230 <_svfiprintf_r+0x124>
 800a29e:	9105      	str	r1, [sp, #20]
 800a2a0:	e7c6      	b.n	800a230 <_svfiprintf_r+0x124>
 800a2a2:	fb05 2101 	mla	r1, r5, r1, r2
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	e7f0      	b.n	800a28e <_svfiprintf_r+0x182>
 800a2ac:	ab03      	add	r3, sp, #12
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <_svfiprintf_r+0x1ec>)
 800a2b4:	a904      	add	r1, sp, #16
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	f7fc fc66 	bl	8006b88 <_printf_float>
 800a2bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2c0:	4681      	mov	r9, r0
 800a2c2:	d1d6      	bne.n	800a272 <_svfiprintf_r+0x166>
 800a2c4:	89a3      	ldrh	r3, [r4, #12]
 800a2c6:	065b      	lsls	r3, r3, #25
 800a2c8:	f53f af35 	bmi.w	800a136 <_svfiprintf_r+0x2a>
 800a2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ce:	b01d      	add	sp, #116	; 0x74
 800a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d4:	ab03      	add	r3, sp, #12
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <_svfiprintf_r+0x1ec>)
 800a2dc:	a904      	add	r1, sp, #16
 800a2de:	4640      	mov	r0, r8
 800a2e0:	f7fc fef4 	bl	80070cc <_printf_i>
 800a2e4:	e7ea      	b.n	800a2bc <_svfiprintf_r+0x1b0>
 800a2e6:	bf00      	nop
 800a2e8:	0800a624 	.word	0x0800a624
 800a2ec:	0800a62a 	.word	0x0800a62a
 800a2f0:	0800a62e 	.word	0x0800a62e
 800a2f4:	08006b89 	.word	0x08006b89
 800a2f8:	0800a059 	.word	0x0800a059

0800a2fc <_sbrk_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4c06      	ldr	r4, [pc, #24]	; (800a318 <_sbrk_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4605      	mov	r5, r0
 800a304:	4608      	mov	r0, r1
 800a306:	6023      	str	r3, [r4, #0]
 800a308:	f7f7 fb90 	bl	8001a2c <_sbrk>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_sbrk_r+0x1a>
 800a310:	6823      	ldr	r3, [r4, #0]
 800a312:	b103      	cbz	r3, 800a316 <_sbrk_r+0x1a>
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	2000969c 	.word	0x2000969c

0800a31c <__ascii_wctomb>:
 800a31c:	b149      	cbz	r1, 800a332 <__ascii_wctomb+0x16>
 800a31e:	2aff      	cmp	r2, #255	; 0xff
 800a320:	bf85      	ittet	hi
 800a322:	238a      	movhi	r3, #138	; 0x8a
 800a324:	6003      	strhi	r3, [r0, #0]
 800a326:	700a      	strbls	r2, [r1, #0]
 800a328:	f04f 30ff 	movhi.w	r0, #4294967295
 800a32c:	bf98      	it	ls
 800a32e:	2001      	movls	r0, #1
 800a330:	4770      	bx	lr
 800a332:	4608      	mov	r0, r1
 800a334:	4770      	bx	lr

0800a336 <memmove>:
 800a336:	4288      	cmp	r0, r1
 800a338:	b510      	push	{r4, lr}
 800a33a:	eb01 0302 	add.w	r3, r1, r2
 800a33e:	d807      	bhi.n	800a350 <memmove+0x1a>
 800a340:	1e42      	subs	r2, r0, #1
 800a342:	4299      	cmp	r1, r3
 800a344:	d00a      	beq.n	800a35c <memmove+0x26>
 800a346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a34a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a34e:	e7f8      	b.n	800a342 <memmove+0xc>
 800a350:	4283      	cmp	r3, r0
 800a352:	d9f5      	bls.n	800a340 <memmove+0xa>
 800a354:	1881      	adds	r1, r0, r2
 800a356:	1ad2      	subs	r2, r2, r3
 800a358:	42d3      	cmn	r3, r2
 800a35a:	d100      	bne.n	800a35e <memmove+0x28>
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a362:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a366:	e7f7      	b.n	800a358 <memmove+0x22>

0800a368 <__malloc_lock>:
 800a368:	4770      	bx	lr

0800a36a <__malloc_unlock>:
 800a36a:	4770      	bx	lr

0800a36c <_realloc_r>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	4607      	mov	r7, r0
 800a370:	4614      	mov	r4, r2
 800a372:	460e      	mov	r6, r1
 800a374:	b921      	cbnz	r1, 800a380 <_realloc_r+0x14>
 800a376:	4611      	mov	r1, r2
 800a378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a37c:	f7ff be12 	b.w	8009fa4 <_malloc_r>
 800a380:	b922      	cbnz	r2, 800a38c <_realloc_r+0x20>
 800a382:	f7ff fdc1 	bl	8009f08 <_free_r>
 800a386:	4625      	mov	r5, r4
 800a388:	4628      	mov	r0, r5
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	f000 f814 	bl	800a3b8 <_malloc_usable_size_r>
 800a390:	42a0      	cmp	r0, r4
 800a392:	d20f      	bcs.n	800a3b4 <_realloc_r+0x48>
 800a394:	4621      	mov	r1, r4
 800a396:	4638      	mov	r0, r7
 800a398:	f7ff fe04 	bl	8009fa4 <_malloc_r>
 800a39c:	4605      	mov	r5, r0
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0f2      	beq.n	800a388 <_realloc_r+0x1c>
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	f7ff f997 	bl	80096d8 <memcpy>
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4638      	mov	r0, r7
 800a3ae:	f7ff fdab 	bl	8009f08 <_free_r>
 800a3b2:	e7e9      	b.n	800a388 <_realloc_r+0x1c>
 800a3b4:	4635      	mov	r5, r6
 800a3b6:	e7e7      	b.n	800a388 <_realloc_r+0x1c>

0800a3b8 <_malloc_usable_size_r>:
 800a3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3bc:	1f18      	subs	r0, r3, #4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	bfbc      	itt	lt
 800a3c2:	580b      	ldrlt	r3, [r1, r0]
 800a3c4:	18c0      	addlt	r0, r0, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_init>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr

0800a3d4 <_fini>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr
